Implementation smell,Namespace,Class,File,Method,Description
Long Method,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,AddHeader,The method has 115 lines of code.
Long Method,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The method has 113 lines of code.
Long Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The method has 161 lines of code.
Long Method,Reactor.Http,Request,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\Request.cs,Write,The method has 155 lines of code.
Long Method,Reactor.Udp,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.cs,Stun,The method has 127 lines of code.
Long Method,Reactor.File,ReadStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method has 140 lines of code.
Complex Method,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,InternalWrite,Cyclomatic complexity of the method is 10
Complex Method,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,GetChunkSize,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,Cyclomatic complexity of the method is 11
Complex Method,Reactor.Net,EndPointListener,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointListener.cs,SearchListener,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,Close,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,IsPredefinedScheme,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FinishInitialization,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,AddHeader,Cyclomatic complexity of the method is 20
Complex Method,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,Cyclomatic complexity of the method is 46
Complex Method,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,Cyclomatic complexity of the method is 21
Complex Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlAttributeEncode,Cyclomatic complexity of the method is 9
Complex Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 10
Complex Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 15
Complex Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecodeToBytes,Cyclomatic complexity of the method is 9
Complex Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,Cyclomatic complexity of the method is 26
Complex Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlEncode,Cyclomatic complexity of the method is 14
Complex Method,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,ParseQueryString,Cyclomatic complexity of the method is 11
Complex Method,Reactor.Net,ListenerAsyncResult,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,Cyclomatic complexity of the method is 8
Complex Method,Reactor.Net,ListenerPrefix,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,CheckUri,Cyclomatic complexity of the method is 10
Complex Method,Reactor.Net,RequestStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\RequestStream.cs,FillFromBuffer,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,WebHeaderCollection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,GetValues_internal,Cyclomatic complexity of the method is 12
Complex Method,Reactor.Net,WebHeaderCollection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,RequestHeaderToString,Cyclomatic complexity of the method is 42
Complex Method,Reactor.Net,WebHeaderCollection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,ResponseHeaderToString,Cyclomatic complexity of the method is 31
Complex Method,Reactor.Http,Request,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\Request.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,Cyclomatic complexity of the method is 10
Complex Method,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,Cyclomatic complexity of the method is 13
Long Parameter List,Reactor,IO,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\IO.cs,SendTo,The method has 6 parameters. Parameters: socket' sendbuffer' offset' count' endpoint' callback
Long Parameter List,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,ChunkedInputStream,The method has 5 parameters. Parameters: context' stream' buffer' offset' length
Long Parameter List,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The method has 5 parameters. Parameters: i' j' k' l' m
Long Parameter List,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,HttpConnection,The method has 5 parameters. Parameters: sock' epl' secure' cert' key
Long Parameter List,Reactor.Net,RequestStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\RequestStream.cs,RequestStream,The method has 5 parameters. Parameters: stream' buffer' offset' length' contentlength
Long Parameter List,Reactor.Net,RequestStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\RequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,RequestStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\RequestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,ResponseStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ResponseStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Net,ResponseStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ResponseStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,Reactor.Http,Request,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\Request.cs,Post,The method has 5 parameters. Parameters: Url' contentType' headers' buffer' callback
Long Parameter List,Reactor.Http,Request,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\Request.cs,Put,The method has 5 parameters. Parameters: Url' contentType' headers' buffer' callback
Long Parameter List,Reactor.Http,Request,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\Request.cs,Delete,The method has 5 parameters. Parameters: Url' contentType' headers' buffer' callback
Long Parameter List,Reactor.IP,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\ip\Socket.cs,Send,The method has 5 parameters. Parameters: address' port' data' index' count
Long Parameter List,Reactor.Udp,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.cs,Send,The method has 5 parameters. Parameters: address' port' data' index' count
Long Parameter List,Reactor.File,ReadStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\file\ReadStream.cs,ReadStream,The method has 5 parameters. Parameters: filename' index' count' mode' share
Long Parameter List,Reactor.File,ReadStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\file\ReadStream.cs,Create,The method has 5 parameters. Parameters: filename' index' count' mode' share
Long Statement,Reactor.Net,ListenerAsyncResult,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The length of the statement  "                if ((schemes == AuthenticationSchemes.Basic || context.Listener.AuthenticationSchemes == AuthenticationSchemes.Negotiate) && context.Request.Headers["Authorization"] == null) " is 174.
Long Statement,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The length of the statement  "                msg[offset++] = (byte)(Convert.ToInt32(this.ChangeRequest.ChangeIP) << 2 | Convert.ToInt32(this.ChangeRequest.ChangePort) << 1); " is 128.
Complex Conditional,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The conditional expression  "(ic >= 'A' && ic <= 'Z') ||                      (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&                       c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&                       c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&                       c != ']' && c != '?' && c != '=' && c != '{' && c != '}')"  is complex.
Complex Conditional,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,IsPredefinedScheme,The conditional expression  "(c == 'g' && scheme == "gopher") || (c == 'm' && scheme == "mailto")"  is complex.
Complex Conditional,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The conditional expression  "(c < '0') ||                  (c < 'A' && c > '9') ||                  (c > 'Z' && c < 'a') ||                  (c > 'z')"  is complex.
Complex Conditional,Reactor.Net,WebHeaderCollection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,IsHeaderValue,The conditional expression  "c < 0x20 && (c != '\r' && c != '\n' && c != '\t')"  is complex.
Empty Catch Block,Reactor.Net,EndPointListener,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointListener.cs,LoadCertificateAndKey,The method has an empty catch block.
Empty Catch Block,Reactor.Net,EndPointListener,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointListener.cs,OnAccept,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,SendError,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,Reactor.Net,ListenerAsyncResult,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,InvokeCallback,The method has an empty catch block.
Empty Catch Block,Reactor.Net,ResponseStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ResponseStream.cs,InternalWrite,The method has an empty catch block.
Empty Catch Block,Reactor.Net,ResponseStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ResponseStream.cs,EndWrite,The method has an empty catch block.
Empty Catch Block,Reactor.Http,Request,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\Request.cs,Write,The method has an empty catch block.
Empty Catch Block,Reactor.Udp,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.cs,StunRequest,The method has an empty catch block.
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: types.Length == 2
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2] });
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2] });
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: types.Length == 3
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2]' types[3] });
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: Type genericActionType = actionType.MakeGenericType(new Type[] { types[0]' types[1]' types[2]' types[3] });
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2]' types[3] });
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: var genericMethodInfo = methodinfo.MakeGenericMethod(new Type[] { types[0]' types[1]' types[2]' types[3] });
Magic Number,Reactor,DynamicAction,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\delegates\DynamicAction.cs,DynamicAction,The following statement contains a magic number: types.Length == 4
Magic Number,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,The following statement contains a magic number: ares.Buffer = new byte[8192];
Magic Number,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,BeginRead,The following statement contains a magic number: ares.Count = 8192;
Magic Number,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: ares.Count = Math.Min(8192' decoder.ChunkLeft + 6);
Magic Number,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: ares.Count = Math.Min(8192' decoder.ChunkLeft + 6);
Magic Number,Reactor.Net,ChunkedInputStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkedInputStream.cs,EndRead,The following statement contains a magic number: throw new HttpListenerException(400' "I/O operation aborted: " + my_ares.Error.Message);
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,GetChunkSize,The following statement contains a magic number: saved.Length > 20
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,GetChunkSize,The following statement contains a magic number: trailerState = 2;
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: trailerState == 2 && (char)buffer[offset] == '\r' && saved.Length == 0
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: (st == 0 || st == 2) && c == '\r'
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: (st == 1 || st == 3) && c == '\n'
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: saved.Append(stString.Substring(0' saved.Length == 0 ? st - 2 : st));
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: saved.Length > 4196
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: offset < size && st < 4
Magic Number,Reactor.Net,ChunkStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: st < 4
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,hash,The following statement contains a magic number: return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25) ^ (m << 20 | m >> 12);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,ToString,The following statement contains a magic number: StringBuilder result = new StringBuilder(64);
Magic Number,Reactor.Net,Cookie,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\Cookie.cs,ToClientString,The following statement contains a magic number: StringBuilder result = new StringBuilder(64);
Magic Number,Reactor.Net,EndPointListener,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointListener.cs,EndPointListener,The following statement contains a magic number: sock.Listen(500);
Magic Number,Reactor.Net,EndPointListener,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointListener.cs,AddSpecial,The following statement contains a magic number: throw new HttpListenerException(400' "Prefix already in use.");
Magic Number,Reactor.Net,EndPointListener,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointListener.cs,AddPrefix,The following statement contains a magic number: throw new HttpListenerException(400' "There's another listener for " + prefix);
Magic Number,Reactor.Net,EndPointManager,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointManager.cs,AddPrefixInternal,The following statement contains a magic number: throw new HttpListenerException(400' "Invalid path.");
Magic Number,Reactor.Net,EndPointManager,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\EndPointManager.cs,AddPrefixInternal,The following statement contains a magic number: throw new HttpListenerException(400' "Invalid path.");
Magic Number,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,BeginReadRequest,The following statement contains a magic number: s_timeout = 15000;
Magic Number,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,The following statement contains a magic number: SendError("Bad request"' 400);
Magic Number,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,The following statement contains a magic number: ms.Length > 32768
Magic Number,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,OnReadInternal,The following statement contains a magic number: SendError("Invalid host"' 400);
Magic Number,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ReadLine,The following statement contains a magic number: current_line = new StringBuilder(128);
Magic Number,Reactor.Net,HttpConnection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpConnection.cs,ReadLine,The following statement contains a magic number: b == 13
Magic Number,Reactor.Net,HttpListenerContext,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerContext.cs,ParseAuthentication,The following statement contains a magic number: header == null || header.Length < 2
Magic Number,Reactor.Net,HttpListenerContext,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerContext.cs,ParseAuthentication,The following statement contains a magic number: string[] authenticationData = header.Split(new char[] { ' ' }' 2);
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: string[] parts = req.Split(separators' 3);
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: parts.Length != 3
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: (ic >= 'A' && ic <= 'Z') ||                      (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&                       c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&                       c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&                       c != ']' && c != '?' && c != '=' && c != '{' && c != '}')
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: (ic >= 'A' && ic <= 'Z') ||                      (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&                       c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&                       c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&                       c != ']' && c != '?' && c != '=' && c != '{' && c != '}')
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: parts[2].Length != 8 || !parts[2].StartsWith("HTTP/")
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: parts[2].Length != 8 || !parts[2].StartsWith("HTTP/")
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: parts[2].Length != 8 || !parts[2].StartsWith("HTTP/")
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: version = new Version(parts[2].Substring(5));
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: version = new Version(parts[2].Substring(5));
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,IsPredefinedScheme,The following statement contains a magic number: scheme == null || scheme.Length < 3
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,MaybeUri,The following statement contains a magic number: p >= 10
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: context.Connection.SendError(null' 501);
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: context.Connection.SendError(null' 411);
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,AddHeader,The following statement contains a magic number: context.ErrorStatus = 400;
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: int length = 2048;
Magic Number,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,FlushInput,The following statement contains a magic number: !ares.IsCompleted && !ares.AsyncWaitHandle.WaitOne(1000)
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,AddHeader,The following statement contains a magic number: value.Length > 65535
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,AppendHeader,The following statement contains a magic number: value.Length > 65535
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,Redirect,The following statement contains a magic number: StatusCode = 302;
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||                      status_code == 413 || status_code == 414 || status_code == 500 ||                      status_code == 503);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: reuses >= 100
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: headers.SetInternal("Keep-Alive"' String.Format("timeout=15'max={0}"' 100 - reuses));
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: StreamWriter writer = new StreamWriter(ms' encoding' 256);
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: int preamble = (encoding.CodePage == 65001) ? 3 : encoding.GetPreamble().Length;
Magic Number,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: int preamble = (encoding.CodePage == 65001) ? 3 : encoding.GetPreamble().Length;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,WriteCharBytes,The following statement contains a magic number: ch > 255
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(s' i + 2' 4);
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(s' i + 2' 4);
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: s[i + 1] == 'u' && i + 5 < len
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: ch == '%' && i + 2 < len && s[i + 1] != '%'
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'a' + 10;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetInt,The following statement contains a magic number: return c - 'A' + 10;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetChar,The following statement contains a magic number: value = (value << 4) + current;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetChar,The following statement contains a magic number: c > 127
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,GetChar,The following statement contains a magic number: val = (val << 4) + current;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(bytes' i + 2' 4);
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar(bytes' i + 2' 4);
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: i += 5;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: bytes[i + 1] == (byte)'u' && i + 5 < end
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlDecode,The following statement contains a magic number: bytes[i] == '%' && i + 2 < count && bytes[i + 1] != '%'
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: idx = i >> 12;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 8) & 0x0F;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 4) & 0x0F;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: c > 255
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: isUnicode && c > 127
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlEncodeChar,The following statement contains a magic number: int idx = ((int)c) >> 4;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,CalculateKeyValue,The following statement contains a magic number: s.Length > 8
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,CalculateKeyValue,The following statement contains a magic number: key |= ch << ((7 - i) * 8);
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,CalculateKeyValue,The following statement contains a magic number: key |= ch << ((7 - i) * 8);
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following statement contains a magic number: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: switch (c)                  {                      case '&':                      case '"':                      case '<':                      case '>':                      case '\'':                          needEncode = true;                          break;                      default:                          if (c > 159)                          {                              needEncode = true;                              break;                          }                            continue;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: StringBuilder output = new StringBuilder(s' 0' i' s.Length * 2);
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlEncode,The following statement contains a magic number: switch (c)                  {                      case '&':                          output.Append("&amp;");                          break;                      case '>':                          output.Append("&gt;");                          break;                      case '<':                          output.Append("&lt;");                          break;                      case '"':                          output.Append("&quot;");                          break;                      case '\'':                          output.Append("&#39;");                          break;                      default:                          // MS starts encoding with &# from 160 and stops at 255.                          // We don't do that. One reason is the 65308/65310 unicode                          // characters that look like '<' and '>'.                            if (c > 159)                          {                              output.Append("&#");                                if (char.IsSurrogate(c))                              {                                  output.Append(char.ConvertToUtf32(s' i++));                              }                              else                              {                                  output.Append(((int)c).ToString(CultureInfo.InvariantCulture));                              }                                output.Append(";");                          }                          else                          {                              output.Append(c);                          }                          break;                  }
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlPathEncodeChar,The following statement contains a magic number: int idx = ((int)bIn[i]) >> 4;
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlPathEncodeChar,The following statement contains a magic number: c < 33 || c > 126
Magic Number,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,UrlPathEncodeChar,The following statement contains a magic number: c < 33 || c > 126
Magic Number,Reactor.Net,ListenerAsyncResult,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: exception = new HttpListenerException(500' "Listener closed");
Magic Number,Reactor.Net,ListenerAsyncResult,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: context.Response.StatusCode = 401;
Magic Number,Reactor.Net,ListenerAsyncResult,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: Complete(new HttpListenerException(400' "Too many authentication errors"));
Magic Number,Reactor.Net,ListenerAsyncResult,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: i > 20
Magic Number,Reactor.Net,ListenerPrefix,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,Parse,The following statement contains a magic number: ushort default_port = 80;
Magic Number,Reactor.Net,ListenerPrefix,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,Parse,The following statement contains a magic number: default_port = 443;
Magic Number,Reactor.Net,ListenerPrefix,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,Parse,The following statement contains a magic number: int start_host = uri.IndexOf(':') + 3;
Magic Number,Reactor.Net,ListenerPrefix,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: int start_host = uri.IndexOf(':') + 3;
Magic Number,Reactor.Net,ListenerPrefix,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: p <= 0 || p >= 65536
Magic Number,Reactor.Net,ResponseStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ResponseStream.cs,Write,The following statement contains a magic number: int new_count = Math.Min(count' 16384 - (int)ms.Position + (int)start);
Magic Number,Reactor.Net,ResponseStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ResponseStream.cs,Write,The following statement contains a magic number: InternalWrite(crlf' 0' 2);
Magic Number,Reactor.Net,ResponseStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\ResponseStream.cs,EndWrite,The following statement contains a magic number: stream.Write(crlf' 0' 2);
Magic Number,Reactor.Net,WebHeaderCollection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,IsHeaderValue,The following statement contains a magic number: c == 127
Magic Number,Reactor.Net,WebHeaderCollection,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\WebHeaderCollection.cs,IsHeaderName,The following statement contains a magic number: c > 126 || !allowed_chars[c]
Magic Number,Reactor.Udp,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.cs,StunRequest,The following statement contains a magic number: Reactor.Timeout.Create(() => {                    if (!hasresponded) {                        this.OnMessage -= action;                        callback(null);                  }                }' 2000);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: data.Length < 20
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: int messageType = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: int messageLength = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: byte[] guid = new byte[16];
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: Array.Copy(data' offset' guid' 0' 16);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: offset += 16;
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,Parse,The following statement contains a magic number: (offset - 20) < messageLength
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: byte[] msg = new byte[512];
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[offset++] = (byte)((int)this.Type >> 8);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: Array.Copy(TransactionID.ToByteArray()' 0' msg' offset' 16);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: offset += 16;
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[2] = (byte)((offset - 20) >> 8);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ToByteData,The following statement contains a magic number: msg[3] = (byte)((offset - 20) & 0xFF);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: AttributeType type = (AttributeType)(data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseAttribute,The following statement contains a magic number: int length = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: int port = (data[offset++] << 8 | data[offset++]);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: byte[] ip = new byte[4];
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: ip[2] = data[offset++];
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,ParseEndPoint,The following statement contains a magic number: ip[3] = data[offset++];
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)((int)type >> 8);
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = 8;
Magic Number,Reactor.Udp,StunPacket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\udp\Socket.Stun.cs,StoreEndPoint,The following statement contains a magic number: message[offset++] = (byte)(endPoint.Port >> 8);
Duplicate Code,Reactor.Http,Response,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\Response.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69))
Duplicate Code,Reactor.Http,ServerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\http\ServerRequest.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69))
Duplicate Code,Reactor.Process,ReadStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\process\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69))
Duplicate Code,Reactor.Tls,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\tls\Socket.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((17' 41)' (46' 70))
Duplicate Code,Reactor.File,ReadStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 40)' (84' 110)' (123' 149))
Duplicate Code,Reactor.File,ReadStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 35)' (45' 64)' (86' 105)' (125' 144))
Duplicate Code,Reactor.File,ReadStream,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\file\ReadStream.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 40)' (45' 69)' (86' 110)' (125' 149))
Duplicate Code,Reactor.Tcp,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\tcp\Socket.cs,Read,The method contains a code clone-set at the following line numbers (starting from the method definition): ((20' 44)' (49' 73))
Missing Default,Reactor.Net,HttpListenerRequest,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerRequest.cs,AddHeader,The following switch statement is missing a default case: switch (lower)              {                  case "accept-language":                        user_languages = val.Split('''); // yes' only split with a '''                        break;                    case "accept":                        accept_types = val.Split('''); // yes' only split with a '''                        break;                    case "content-length":                        try                      {                          //TODO: max. content_length?                          content_length = Int64.Parse(val.Trim());                                                    if (content_length < 0)                          {                              context.ErrorMessage = "Invalid Content-Length.";                          }                            cl_set = true;                      }                      catch                      {                          context.ErrorMessage = "Invalid Content-Length.";                      }                        break;                    case "referer":                      try                      {                          referrer = new Uri(val);                      }                      catch                      {                          referrer = new Uri("http://someone.is.screwing.with.the.headers.com/");                      }                      break;                    case "cookie":                      if (cookies == null)                      {                          cookies = new CookieCollection();                      }                        string[] cookieStrings = val.Split(new char[] { '''' ';' });                        Cookie current = null;                        int version = 0;                        foreach (string cookieString in cookieStrings)                      {                          string str = cookieString.Trim();                            if (str.Length == 0)                          {                              continue;                          }                            if (str.StartsWith("$Version"))                          {                              version = Int32.Parse(Unquote(str.Substring(str.IndexOf('=') + 1)));                          }                          else if (str.StartsWith("$Path"))                          {                              if (current != null)                              {                                  current.Path = str.Substring(str.IndexOf('=') + 1).Trim();                              }                          }                          else if (str.StartsWith("$Domain"))                          {                              if (current != null)                              {                                  current.Domain = str.Substring(str.IndexOf('=') + 1).Trim();                              }                          }                          else if (str.StartsWith("$Port"))                          {                              if (current != null)                              {                                  current.Port = str.Substring(str.IndexOf('=') + 1).Trim();                              }                          }                          else                          {                              if (current != null)                              {                                  cookies.Add(current);                              }                              current = new Cookie();                                int idx = str.IndexOf('=');                                if (idx > 0)                              {                                  current.Name = str.Substring(0' idx).Trim();                                    current.Value = str.Substring(idx + 1).Trim();                              }                              else                              {                                  current.Name = str.Trim();                                    current.Value = String.Empty;                              }                              current.Version = version;                          }                      }                      if (current != null)                      {                          cookies.Add(current);                      }                      break;              }
Missing Default,Reactor.Net,HttpListenerResponse,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpListenerResponse.cs,GetStatusDescription,The following switch statement is missing a default case: switch (code)              {                  case 100: return "Continue";                    case 101: return "Switching Protocols";                    case 102: return "Processing";                    case 200: return "OK";                    case 201: return "Created";                    case 202: return "Accepted";                    case 203: return "Non-Authoritative Information";                    case 204: return "No Content";                    case 205: return "Reset Content";                    case 206: return "Partial Content";                    case 207: return "Multi-Status";                    case 300: return "Multiple Choices";                    case 301: return "Moved Permanently";                    case 302: return "Found";                    case 303: return "See Other";                    case 304: return "Not Modified";                    case 305: return "Use Proxy";                    case 307: return "Temporary Redirect";                    case 400: return "Bad Request";                    case 401: return "Unauthorized";                    case 402: return "Payment Required";                    case 403: return "Forbidden";                    case 404: return "Not Found";                    case 405: return "Method Not Allowed";                    case 406: return "Not Acceptable";                    case 407: return "Proxy Authentication Required";                    case 408: return "Request Timeout";                    case 409: return "Conflict";                    case 410: return "Gone";                    case 411: return "Length Required";                    case 412: return "Precondition Failed";                    case 413: return "Request Entity Too Large";                    case 414: return "Request-Uri Too Long";                    case 415: return "Unsupported Media Type";                    case 416: return "Requested Range Not Satisfiable";                    case 417: return "Expectation Failed";                    case 422: return "Unprocessable Entity";                    case 423: return "Locked";                    case 424: return "Failed Dependency";                    case 500: return "Internal Server Error";                    case 501: return "Not Implemented";                    case 502: return "Bad Gateway";                    case 503: return "Service Unavailable";                    case 504: return "Gateway Timeout";                    case 505: return "Http Version Not Supported";                    case 507: return "Insufficient Storage";              }
Missing Default,Reactor.Net,HttpUtility,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor\net\HttpUtility.cs,HtmlDecode,The following switch statement is missing a default case: switch (state)                  {                      case 1:                            if (c == ';')                          {                              state = 0;                                output.Append(entity.ToString());                                output.Append(c);                                entity.Length = 0;                                break;                          }                            number = 0;                            hex_number = false;                            if (c != '#')                          {                              state = 2;                          }                          else                          {                              state = 3;                          }                            entity.Append(c);                            break;                        case 2:                            entity.Append(c);                            if (c == ';')                          {                              string key = entity.ToString();                                state = 0;                                entity.Length = 0;                                if (key.Length > 1)                              {                                  var skey = key.Substring(1' key.Length - 2);                                    if (TryConvertKeyToEntity(skey' out c))                                  {                                      output.Append(c);                                        break;                                  }                              }                                output.Append(key);                          }                            break;                      case 3:                          if (c == ';')                          {                              if (number < 0x10000)                              {                                  output.Append((char)number);                              }                              else                              {                                  output.Append((char)(0xd800 + ((number - 0x10000) >> 10)));                                    output.Append((char)(0xdc00 + ((number - 0x10000) & 0x3ff)));                              }                              state = 0;                                entity.Length = 0;                                digit_start = 0;                                break;                          }                            if (c == 'x' || c == 'X' && !hex_number)                          {                              digit_start = i;                                hex_number = true;                                break;                          }                            if (Char.IsDigit(c))                          {                              if (digit_start == 0)                              {                                  digit_start = i;                              }                                number = number * (hex_number ? 16 : 10) + ((int)c - '0');                              break;                          }                            if (hex_number)                          {                              if (c >= 'a' && c <= 'f')                              {                                  number = number * 16 + 10 + ((int)c - 'a');                                                                    break;                              }                              if (c >= 'A' && c <= 'F')                              {                                  number = number * 16 + 10 + ((int)c - 'A');                                                                    break;                              }                          }                            state = 2;                            if (digit_start > 0)                          {                              entity.Append(s' digit_start' i - digit_start);                                digit_start = 0;                          }                            entity.Append(c);                          break;                  }
