Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,Reactor.Fusion.Protocol,Parser,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\protocol\Parser.cs,Deserialize,The method has an empty catch block.
Magic Number,Reactor.Fusion.Protocol,Parser,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\protocol\Parser.cs,Deserialize,The following statement contains a magic number: switch (packetType)                  {                      case PacketType.Syn:                            return new Syn(BitConverter.ToUInt32(data' 1));                                            case PacketType.SynAck:                            return new SynAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.Ack:                            return new Ack(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.PayloadSyn:                            var sequenceNumber = BitConverter.ToUInt32(data' 1);                            var buffer = new byte[data.Length - 5];                                                    System.Buffer.BlockCopy(data' 5' buffer' 0' buffer.Length);                                                    return new DataSyn(sequenceNumber' buffer);                        case PacketType.PayloadAck:                            return new DataAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt16(data' 5));                        case PacketType.FinSyn:                            return new FinSyn(0' 0);                        case PacketType.FinAck:                            return new FinAck(0' 0);                  }
Magic Number,Reactor.Fusion.Protocol,Parser,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\protocol\Parser.cs,Deserialize,The following statement contains a magic number: switch (packetType)                  {                      case PacketType.Syn:                            return new Syn(BitConverter.ToUInt32(data' 1));                                            case PacketType.SynAck:                            return new SynAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.Ack:                            return new Ack(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.PayloadSyn:                            var sequenceNumber = BitConverter.ToUInt32(data' 1);                            var buffer = new byte[data.Length - 5];                                                    System.Buffer.BlockCopy(data' 5' buffer' 0' buffer.Length);                                                    return new DataSyn(sequenceNumber' buffer);                        case PacketType.PayloadAck:                            return new DataAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt16(data' 5));                        case PacketType.FinSyn:                            return new FinSyn(0' 0);                        case PacketType.FinAck:                            return new FinAck(0' 0);                  }
Magic Number,Reactor.Fusion.Protocol,Parser,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\protocol\Parser.cs,Deserialize,The following statement contains a magic number: switch (packetType)                  {                      case PacketType.Syn:                            return new Syn(BitConverter.ToUInt32(data' 1));                                            case PacketType.SynAck:                            return new SynAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.Ack:                            return new Ack(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.PayloadSyn:                            var sequenceNumber = BitConverter.ToUInt32(data' 1);                            var buffer = new byte[data.Length - 5];                                                    System.Buffer.BlockCopy(data' 5' buffer' 0' buffer.Length);                                                    return new DataSyn(sequenceNumber' buffer);                        case PacketType.PayloadAck:                            return new DataAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt16(data' 5));                        case PacketType.FinSyn:                            return new FinSyn(0' 0);                        case PacketType.FinAck:                            return new FinAck(0' 0);                  }
Magic Number,Reactor.Fusion.Protocol,Parser,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\protocol\Parser.cs,Deserialize,The following statement contains a magic number: switch (packetType)                  {                      case PacketType.Syn:                            return new Syn(BitConverter.ToUInt32(data' 1));                                            case PacketType.SynAck:                            return new SynAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.Ack:                            return new Ack(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.PayloadSyn:                            var sequenceNumber = BitConverter.ToUInt32(data' 1);                            var buffer = new byte[data.Length - 5];                                                    System.Buffer.BlockCopy(data' 5' buffer' 0' buffer.Length);                                                    return new DataSyn(sequenceNumber' buffer);                        case PacketType.PayloadAck:                            return new DataAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt16(data' 5));                        case PacketType.FinSyn:                            return new FinSyn(0' 0);                        case PacketType.FinAck:                            return new FinAck(0' 0);                  }
Magic Number,Reactor.Fusion.Protocol,Parser,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\protocol\Parser.cs,Deserialize,The following statement contains a magic number: switch (packetType)                  {                      case PacketType.Syn:                            return new Syn(BitConverter.ToUInt32(data' 1));                                            case PacketType.SynAck:                            return new SynAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.Ack:                            return new Ack(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.PayloadSyn:                            var sequenceNumber = BitConverter.ToUInt32(data' 1);                            var buffer = new byte[data.Length - 5];                                                    System.Buffer.BlockCopy(data' 5' buffer' 0' buffer.Length);                                                    return new DataSyn(sequenceNumber' buffer);                        case PacketType.PayloadAck:                            return new DataAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt16(data' 5));                        case PacketType.FinSyn:                            return new FinSyn(0' 0);                        case PacketType.FinAck:                            return new FinAck(0' 0);                  }
Magic Number,Reactor.Fusion,Random,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\random\Random.cs,Get,The following statement contains a magic number: byte[] bytes = new byte[2];
Missing Default,Reactor.Fusion.Protocol,Parser,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\protocol\Parser.cs,Deserialize,The following switch statement is missing a default case: switch (packetType)                  {                      case PacketType.Syn:                            return new Syn(BitConverter.ToUInt32(data' 1));                                            case PacketType.SynAck:                            return new SynAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.Ack:                            return new Ack(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt32(data' 5));                                            case PacketType.PayloadSyn:                            var sequenceNumber = BitConverter.ToUInt32(data' 1);                            var buffer = new byte[data.Length - 5];                                                    System.Buffer.BlockCopy(data' 5' buffer' 0' buffer.Length);                                                    return new DataSyn(sequenceNumber' buffer);                        case PacketType.PayloadAck:                            return new DataAck(BitConverter.ToUInt32(data' 1)' BitConverter.ToUInt16(data' 5));                        case PacketType.FinSyn:                            return new FinSyn(0' 0);                        case PacketType.FinAck:                            return new FinAck(0' 0);                  }
Missing Default,Reactor.Fusion,Socket,D:\research\architectureSmells\repos1\sinclairzx81_reactor\reactor.fusion\Socket.cs,Receive,The following switch statement is missing a default case: switch (packetType)              {                  case PacketType.Syn:                        this.ReceiveSyn(packet as Syn);                        break;                    case PacketType.SynAck:                        this.ReceiveSynAck(packet as SynAck);                        break;                    case PacketType.Ack:                        this.ReceiveAck(packet as Ack);                        break;                    case PacketType.PayloadSyn:                        this.ReceiveDataSyn(packet as DataSyn);                        break;                    case PacketType.PayloadAck:                        this.ReceiveDataAck(packet as DataAck);                        break;                    case PacketType.FinSyn:                        this.ReceiveFinSyn(packet as FinSyn);                        break;                    case PacketType.FinAck:                        this.ReceiveFinAck(packet as FinAck);                        break;              }
