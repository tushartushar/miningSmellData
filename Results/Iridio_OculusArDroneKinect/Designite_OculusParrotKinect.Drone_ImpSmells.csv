Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OculusParrotKinect.Drone,DroneClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\DroneClient.cs,ProcessTransition,Cyclomatic complexity of the method is 31
Complex Method,OculusParrotKinect.Drone,DroneClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\DroneClient.cs,ProgressWithMagneto,Cyclomatic complexity of the method is 8
Complex Method,OculusParrotKinect.Drone.Configuration,ConfigurationPacketParser,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\ConfigurationPacketParser.cs,TryUpdate,Cyclomatic complexity of the method is 8
Complex Method,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,Cyclomatic complexity of the method is 23
Complex Method,OculusParrotKinect.Drone.Data.Navigation.Native,NavdataBagParser,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Data\Navigation\Native\NavdataBagParser.cs,ProcessOption,Cyclomatic complexity of the method is 90
Complex Method,OculusParrotKinect.Drone.Data.Navigation,NavdataConverter,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Data\Navigation\NavdataConverter.cs,UpdateStateUsing,Cyclomatic complexity of the method is 9
Complex Method,OculusParrotKinect.Drone.Infrastructure,InteropHelper,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Infrastructure\InteropHelper.cs,RegisterLibrariesSearchPath,Cyclomatic complexity of the method is 11
Long Parameter List,OculusParrotKinect.Drone,DroneClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\DroneClient.cs,Progress,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone,DroneClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\DroneClient.cs,ProgressWithMagneto,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Commands,ProgressCommand,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Commands\ProgressCommand.cs,ProgressCommand,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Commands,ProgressWithMagnetoCommand,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Commands\ProgressWithMagnetoCommand.cs,ProgressWithMagnetoCommand,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_reduce,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_rescale_delta,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_log_format_line,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_samples_get_buffer_size,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_samples_fill_arrays,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_samples_alloc,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_samples_copy,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_samples_set_silence,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_dict_parse_string,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_parser_parse2,The method has 9 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_parser_change,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_audio_resample_init,The method has 10 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_resample_init,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_resample,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avpicture_fill,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avpicture_layout,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avpicture_deinterlace,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_picture_copy,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_picture_crop,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_picture_pad,The method has 10 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avcodec_find_best_pix_fmt_of_2,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avcodec_find_best_pix_fmt2,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avcodec_default_execute,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avcodec_default_execute2,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avcodec_fill_audio_frame,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_bitstream_filter_filter,The method has 8 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avio_alloc_context,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avio_open2,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_probe_input_buffer,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_find_best_stream,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avformat_seek_file,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_guess_codec,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_pkt_dump_log2,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_add_index_entry,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,av_url_split,The method has 10 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avfilter_get_video_buffer_ref_from_arrays,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avfilter_get_audio_buffer_ref_from_arrays,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avfilter_get_audio_buffer_ref_from_arrays_channels,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,avfilter_process_command,The method has 6 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,pp_postprocess,The method has 11 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,swr_alloc_set_opts,The method has 9 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,swr_convert,The method has 5 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,sws_getContext,The method has 10 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,sws_scale,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,sws_setColorspaceDetails,The method has 8 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,sws_getColorspaceDetails,The method has 8 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,sws_getDefaultFilter,The method has 7 parameters.
Long Parameter List,OculusParrotKinect.Drone.Video,FFmpegInvoke,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\FFmpegInvoke.cs,sws_getCachedContext,The method has 11 parameters.
Long Statement,OculusParrotKinect.Drone,DroneClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\DroneClient.cs,ProcessTransition,The length of the statement  "		if (_navigationData.State.HasFlag (NavigationState.Flying) && _navigationData.State.HasFlag (NavigationState.Landing) == false) { " is 129.
Long Statement,OculusParrotKinect.Drone,DroneClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\DroneClient.cs,ProcessTransition,The length of the statement  "		if (_navigationData.State.HasFlag (NavigationState.Landed) && _navigationData.State.HasFlag (NavigationState.Takeoff) == false && _navigationData.State.HasFlag (NavigationState.Emergency) == false && _navigationData.Battery.Low == false) { " is 239.
Long Statement,OculusParrotKinect.Drone.Commands,ConfigIdsCommand,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Commands\ConfigIdsCommand.cs,ToAt,The length of the statement  "	return string.Format ("AT*CONFIG_IDS={0}'\"{1}\"'\"{2}\"'\"{3}\"\r"' sequenceNumber' _sessionId' _userId' _applicationId); " is 122.
Long Statement,OculusParrotKinect.Drone.Commands,ProgressCommand,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Commands\ProgressCommand.cs,ToAt,The length of the statement  "	return string.Format ("AT*PCMD={0}'{1}'{2}'{3}'{4}'{5}\r"' sequenceNumber' (int)_mode' ConversionHelper.ToInt (_roll)' ConversionHelper.ToInt (_pitch)' ConversionHelper.ToInt (_gaz)' ConversionHelper.ToInt (_yaw)); " is 214.
Long Statement,OculusParrotKinect.Drone.Commands,ProgressWithMagnetoCommand,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Commands\ProgressWithMagnetoCommand.cs,ToAt,The length of the statement  "	return string.Format ("AT*PCMD_MAG={0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}\r"' sequenceNumber' (int)_mode' ConversionHelper.ToInt (_roll)' ConversionHelper.ToInt (_pitch)' ConversionHelper.ToInt (_gaz)' ConversionHelper.ToInt (_yaw)' ConversionHelper.ToInt (_psi)' ConversionHelper.ToInt (_accuracy)); " is 293.
Long Statement,OculusParrotKinect.Drone.Configuration,DroneConfiguration,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\DroneConfiguration.cs,GetItems,The length of the statement  "	IEnumerable<IConfigurationItem> items = type.GetFields ().Where (x => typeof(IConfigurationItem).IsAssignableFrom (x.FieldType)).Select (x => (IConfigurationItem)x.GetValue (section)); " is 184.
Long Statement,OculusParrotKinect.Drone.Video,VideoConverter,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Video\VideoConverter.cs,Initialize,The length of the statement  "	_pContext = FFmpegInvoke.sws_getContext (width' height' inFormat' width' height' _pixelFormat' FFmpegInvoke.SWS_FAST_BILINEAR' null' null' null); " is 145.
Complex Conditional,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The conditional expression  "buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E'"  is complex.
Complex Conditional,OculusParrotKinect.Drone,DroneClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\DroneClient.cs,ProcessTransition,The conditional expression  "_navigationData.State.HasFlag (NavigationState.Landed) && _navigationData.State.HasFlag (NavigationState.Takeoff) == false && _navigationData.State.HasFlag (NavigationState.Emergency) == false && _navigationData.Battery.Low == false"  is complex.
Empty Catch Block,OculusParrotKinect.Drone.Acquisition,NavdataAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\NavdataAcquisition.cs,SendKeepAliveSignal,The method has an empty catch block.
Magic Number,OculusParrotKinect.Drone.Acquisition,ConfigurationAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\ConfigurationAcquisition.cs,Loop,The following statement contains a magic number: using (var tcpClient = new TcpClient (_networkConfiguration.DroneHostname' ControlPort))  	using (NetworkStream stream = tcpClient.GetStream ()) {  		var buffer = new byte[NetworkBufferSize];  		Stopwatch swConfigTimeout = Stopwatch.StartNew ();  		while (token.IsCancellationRequested == false && swConfigTimeout.ElapsedMilliseconds < ConfigTimeout) {  			int offset = 0;  			if (tcpClient.Available == 0) {  				Thread.Sleep (10);  			} else {  				offset += stream.Read (buffer' offset' buffer.Length);  				// config eof check  				if (offset > 0 && buffer [offset - 1] == 0x00) {  					var data = new byte[offset];  					Array.Copy (buffer' data' offset);  					var packet = new ConfigurationPacket {  						Timestamp = DateTime.UtcNow.Ticks'  						Data = data  					};  					_configurationAcquired (packet);  					return;  				}  			}  		}  	}  
Magic Number,OculusParrotKinect.Drone.Acquisition,ConfigurationAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\ConfigurationAcquisition.cs,Loop,The following statement contains a magic number: using (NetworkStream stream = tcpClient.GetStream ()) {  	var buffer = new byte[NetworkBufferSize];  	Stopwatch swConfigTimeout = Stopwatch.StartNew ();  	while (token.IsCancellationRequested == false && swConfigTimeout.ElapsedMilliseconds < ConfigTimeout) {  		int offset = 0;  		if (tcpClient.Available == 0) {  			Thread.Sleep (10);  		} else {  			offset += stream.Read (buffer' offset' buffer.Length);  			// config eof check  			if (offset > 0 && buffer [offset - 1] == 0x00) {  				var data = new byte[offset];  				Array.Copy (buffer' data' offset);  				var packet = new ConfigurationPacket {  					Timestamp = DateTime.UtcNow.Ticks'  					Data = data  				};  				_configurationAcquired (packet);  				return;  			}  		}  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,ConfigurationAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\ConfigurationAcquisition.cs,Loop,The following statement contains a magic number: while (token.IsCancellationRequested == false && swConfigTimeout.ElapsedMilliseconds < ConfigTimeout) {  	int offset = 0;  	if (tcpClient.Available == 0) {  		Thread.Sleep (10);  	} else {  		offset += stream.Read (buffer' offset' buffer.Length);  		// config eof check  		if (offset > 0 && buffer [offset - 1] == 0x00) {  			var data = new byte[offset];  			Array.Copy (buffer' data' offset);  			var packet = new ConfigurationPacket {  				Timestamp = DateTime.UtcNow.Ticks'  				Data = data  			};  			_configurationAcquired (packet);  			return;  		}  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,ConfigurationAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\ConfigurationAcquisition.cs,Loop,The following statement contains a magic number: if (tcpClient.Available == 0) {  	Thread.Sleep (10);  } else {  	offset += stream.Read (buffer' offset' buffer.Length);  	// config eof check  	if (offset > 0 && buffer [offset - 1] == 0x00) {  		var data = new byte[offset];  		Array.Copy (buffer' data' offset);  		var packet = new ConfigurationPacket {  			Timestamp = DateTime.UtcNow.Ticks'  			Data = data  		};  		_configurationAcquired (packet);  		return;  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,ConfigurationAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\ConfigurationAcquisition.cs,Loop,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: using (var tcpClient = new TcpClient (_configuration.DroneHostname' VideoPort))  	using (NetworkStream stream = tcpClient.GetStream ()) {  		var packet = new VideoPacket ();  		byte[] packetData = null;  		int offset = 0;  		int frameStart = 0;  		int frameEnd = 0;  		var buffer = new byte[FrameBufferSize];  		fixed (byte* pBuffer = &buffer [0])  			while (token.IsCancellationRequested == false) {  				int read = stream.Read (buffer' offset' NetworkStreamReadSize);  				if (read == 0) {  					Thread.Sleep (1);  					continue;  				}  				offset += read;  				if (packetData == null) {  					// lookup for a frame start  					int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  					for (int i = 0; i < maxSearchIndex; i++) {  						if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  							parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  							packetData = new byte[pve.payload_size];  							packet = new VideoPacket {  								Timestamp = DateTime.UtcNow.Ticks'  								FrameNumber = pve.frame_number'  								Width = pve.display_width'  								Height = pve.display_height'  								FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  								Data = packetData  							};  							frameStart = i + pve.header_size;  							frameEnd = frameStart + packet.Data.Length;  							break;  						}  					}  					if (packetData == null) {  						// frame is not detected  						offset -= maxSearchIndex;  						Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  					}  				}  				if (packetData != null && offset >= frameEnd) {  					// frame acquired  					Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  					_videoPacketAcquired (packet);  					// clean up acquired frame  					packetData = null;  					offset -= frameEnd;  					Array.Copy (buffer' frameEnd' buffer' 0' offset);  				}  			}  	}  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: using (var tcpClient = new TcpClient (_configuration.DroneHostname' VideoPort))  	using (NetworkStream stream = tcpClient.GetStream ()) {  		var packet = new VideoPacket ();  		byte[] packetData = null;  		int offset = 0;  		int frameStart = 0;  		int frameEnd = 0;  		var buffer = new byte[FrameBufferSize];  		fixed (byte* pBuffer = &buffer [0])  			while (token.IsCancellationRequested == false) {  				int read = stream.Read (buffer' offset' NetworkStreamReadSize);  				if (read == 0) {  					Thread.Sleep (1);  					continue;  				}  				offset += read;  				if (packetData == null) {  					// lookup for a frame start  					int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  					for (int i = 0; i < maxSearchIndex; i++) {  						if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  							parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  							packetData = new byte[pve.payload_size];  							packet = new VideoPacket {  								Timestamp = DateTime.UtcNow.Ticks'  								FrameNumber = pve.frame_number'  								Width = pve.display_width'  								Height = pve.display_height'  								FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  								Data = packetData  							};  							frameStart = i + pve.header_size;  							frameEnd = frameStart + packet.Data.Length;  							break;  						}  					}  					if (packetData == null) {  						// frame is not detected  						offset -= maxSearchIndex;  						Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  					}  				}  				if (packetData != null && offset >= frameEnd) {  					// frame acquired  					Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  					_videoPacketAcquired (packet);  					// clean up acquired frame  					packetData = null;  					offset -= frameEnd;  					Array.Copy (buffer' frameEnd' buffer' 0' offset);  				}  			}  	}  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: using (NetworkStream stream = tcpClient.GetStream ()) {  	var packet = new VideoPacket ();  	byte[] packetData = null;  	int offset = 0;  	int frameStart = 0;  	int frameEnd = 0;  	var buffer = new byte[FrameBufferSize];  	fixed (byte* pBuffer = &buffer [0])  		while (token.IsCancellationRequested == false) {  			int read = stream.Read (buffer' offset' NetworkStreamReadSize);  			if (read == 0) {  				Thread.Sleep (1);  				continue;  			}  			offset += read;  			if (packetData == null) {  				// lookup for a frame start  				int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  				for (int i = 0; i < maxSearchIndex; i++) {  					if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  						parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  						packetData = new byte[pve.payload_size];  						packet = new VideoPacket {  							Timestamp = DateTime.UtcNow.Ticks'  							FrameNumber = pve.frame_number'  							Width = pve.display_width'  							Height = pve.display_height'  							FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  							Data = packetData  						};  						frameStart = i + pve.header_size;  						frameEnd = frameStart + packet.Data.Length;  						break;  					}  				}  				if (packetData == null) {  					// frame is not detected  					offset -= maxSearchIndex;  					Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  				}  			}  			if (packetData != null && offset >= frameEnd) {  				// frame acquired  				Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  				_videoPacketAcquired (packet);  				// clean up acquired frame  				packetData = null;  				offset -= frameEnd;  				Array.Copy (buffer' frameEnd' buffer' 0' offset);  			}  		}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: using (NetworkStream stream = tcpClient.GetStream ()) {  	var packet = new VideoPacket ();  	byte[] packetData = null;  	int offset = 0;  	int frameStart = 0;  	int frameEnd = 0;  	var buffer = new byte[FrameBufferSize];  	fixed (byte* pBuffer = &buffer [0])  		while (token.IsCancellationRequested == false) {  			int read = stream.Read (buffer' offset' NetworkStreamReadSize);  			if (read == 0) {  				Thread.Sleep (1);  				continue;  			}  			offset += read;  			if (packetData == null) {  				// lookup for a frame start  				int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  				for (int i = 0; i < maxSearchIndex; i++) {  					if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  						parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  						packetData = new byte[pve.payload_size];  						packet = new VideoPacket {  							Timestamp = DateTime.UtcNow.Ticks'  							FrameNumber = pve.frame_number'  							Width = pve.display_width'  							Height = pve.display_height'  							FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  							Data = packetData  						};  						frameStart = i + pve.header_size;  						frameEnd = frameStart + packet.Data.Length;  						break;  					}  				}  				if (packetData == null) {  					// frame is not detected  					offset -= maxSearchIndex;  					Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  				}  			}  			if (packetData != null && offset >= frameEnd) {  				// frame acquired  				Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  				_videoPacketAcquired (packet);  				// clean up acquired frame  				packetData = null;  				offset -= frameEnd;  				Array.Copy (buffer' frameEnd' buffer' 0' offset);  			}  		}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: fixed (byte* pBuffer = &buffer [0])  	while (token.IsCancellationRequested == false) {  		int read = stream.Read (buffer' offset' NetworkStreamReadSize);  		if (read == 0) {  			Thread.Sleep (1);  			continue;  		}  		offset += read;  		if (packetData == null) {  			// lookup for a frame start  			int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  			for (int i = 0; i < maxSearchIndex; i++) {  				if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  					parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  					packetData = new byte[pve.payload_size];  					packet = new VideoPacket {  						Timestamp = DateTime.UtcNow.Ticks'  						FrameNumber = pve.frame_number'  						Width = pve.display_width'  						Height = pve.display_height'  						FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  						Data = packetData  					};  					frameStart = i + pve.header_size;  					frameEnd = frameStart + packet.Data.Length;  					break;  				}  			}  			if (packetData == null) {  				// frame is not detected  				offset -= maxSearchIndex;  				Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  			}  		}  		if (packetData != null && offset >= frameEnd) {  			// frame acquired  			Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  			_videoPacketAcquired (packet);  			// clean up acquired frame  			packetData = null;  			offset -= frameEnd;  			Array.Copy (buffer' frameEnd' buffer' 0' offset);  		}  	}  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: fixed (byte* pBuffer = &buffer [0])  	while (token.IsCancellationRequested == false) {  		int read = stream.Read (buffer' offset' NetworkStreamReadSize);  		if (read == 0) {  			Thread.Sleep (1);  			continue;  		}  		offset += read;  		if (packetData == null) {  			// lookup for a frame start  			int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  			for (int i = 0; i < maxSearchIndex; i++) {  				if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  					parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  					packetData = new byte[pve.payload_size];  					packet = new VideoPacket {  						Timestamp = DateTime.UtcNow.Ticks'  						FrameNumber = pve.frame_number'  						Width = pve.display_width'  						Height = pve.display_height'  						FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  						Data = packetData  					};  					frameStart = i + pve.header_size;  					frameEnd = frameStart + packet.Data.Length;  					break;  				}  			}  			if (packetData == null) {  				// frame is not detected  				offset -= maxSearchIndex;  				Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  			}  		}  		if (packetData != null && offset >= frameEnd) {  			// frame acquired  			Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  			_videoPacketAcquired (packet);  			// clean up acquired frame  			packetData = null;  			offset -= frameEnd;  			Array.Copy (buffer' frameEnd' buffer' 0' offset);  		}  	}  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: while (token.IsCancellationRequested == false) {  	int read = stream.Read (buffer' offset' NetworkStreamReadSize);  	if (read == 0) {  		Thread.Sleep (1);  		continue;  	}  	offset += read;  	if (packetData == null) {  		// lookup for a frame start  		int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  		for (int i = 0; i < maxSearchIndex; i++) {  			if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  				parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  				packetData = new byte[pve.payload_size];  				packet = new VideoPacket {  					Timestamp = DateTime.UtcNow.Ticks'  					FrameNumber = pve.frame_number'  					Width = pve.display_width'  					Height = pve.display_height'  					FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  					Data = packetData  				};  				frameStart = i + pve.header_size;  				frameEnd = frameStart + packet.Data.Length;  				break;  			}  		}  		if (packetData == null) {  			// frame is not detected  			offset -= maxSearchIndex;  			Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  		}  	}  	if (packetData != null && offset >= frameEnd) {  		// frame acquired  		Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  		_videoPacketAcquired (packet);  		// clean up acquired frame  		packetData = null;  		offset -= frameEnd;  		Array.Copy (buffer' frameEnd' buffer' 0' offset);  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: while (token.IsCancellationRequested == false) {  	int read = stream.Read (buffer' offset' NetworkStreamReadSize);  	if (read == 0) {  		Thread.Sleep (1);  		continue;  	}  	offset += read;  	if (packetData == null) {  		// lookup for a frame start  		int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  		for (int i = 0; i < maxSearchIndex; i++) {  			if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  				parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  				packetData = new byte[pve.payload_size];  				packet = new VideoPacket {  					Timestamp = DateTime.UtcNow.Ticks'  					FrameNumber = pve.frame_number'  					Width = pve.display_width'  					Height = pve.display_height'  					FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  					Data = packetData  				};  				frameStart = i + pve.header_size;  				frameEnd = frameStart + packet.Data.Length;  				break;  			}  		}  		if (packetData == null) {  			// frame is not detected  			offset -= maxSearchIndex;  			Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  		}  	}  	if (packetData != null && offset >= frameEnd) {  		// frame acquired  		Array.Copy (buffer' frameStart' packetData' 0' packetData.Length);  		_videoPacketAcquired (packet);  		// clean up acquired frame  		packetData = null;  		offset -= frameEnd;  		Array.Copy (buffer' frameEnd' buffer' 0' offset);  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: if (packetData == null) {  	// lookup for a frame start  	int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  	for (int i = 0; i < maxSearchIndex; i++) {  		if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  			parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  			packetData = new byte[pve.payload_size];  			packet = new VideoPacket {  				Timestamp = DateTime.UtcNow.Ticks'  				FrameNumber = pve.frame_number'  				Width = pve.display_width'  				Height = pve.display_height'  				FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  				Data = packetData  			};  			frameStart = i + pve.header_size;  			frameEnd = frameStart + packet.Data.Length;  			break;  		}  	}  	if (packetData == null) {  		// frame is not detected  		offset -= maxSearchIndex;  		Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: if (packetData == null) {  	// lookup for a frame start  	int maxSearchIndex = offset - sizeof(parrot_video_encapsulation_t);  	for (int i = 0; i < maxSearchIndex; i++) {  		if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  			parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  			packetData = new byte[pve.payload_size];  			packet = new VideoPacket {  				Timestamp = DateTime.UtcNow.Ticks'  				FrameNumber = pve.frame_number'  				Width = pve.display_width'  				Height = pve.display_height'  				FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  				Data = packetData  			};  			frameStart = i + pve.header_size;  			frameEnd = frameStart + packet.Data.Length;  			break;  		}  	}  	if (packetData == null) {  		// frame is not detected  		offset -= maxSearchIndex;  		Array.Copy (buffer' maxSearchIndex' buffer' 0' offset);  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: for (int i = 0; i < maxSearchIndex; i++) {  	if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  		parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  		packetData = new byte[pve.payload_size];  		packet = new VideoPacket {  			Timestamp = DateTime.UtcNow.Ticks'  			FrameNumber = pve.frame_number'  			Width = pve.display_width'  			Height = pve.display_height'  			FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  			Data = packetData  		};  		frameStart = i + pve.header_size;  		frameEnd = frameStart + packet.Data.Length;  		break;  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: for (int i = 0; i < maxSearchIndex; i++) {  	if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  		parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  		packetData = new byte[pve.payload_size];  		packet = new VideoPacket {  			Timestamp = DateTime.UtcNow.Ticks'  			FrameNumber = pve.frame_number'  			Width = pve.display_width'  			Height = pve.display_height'  			FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  			Data = packetData  		};  		frameStart = i + pve.header_size;  		frameEnd = frameStart + packet.Data.Length;  		break;  	}  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  	parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  	packetData = new byte[pve.payload_size];  	packet = new VideoPacket {  		Timestamp = DateTime.UtcNow.Ticks'  		FrameNumber = pve.frame_number'  		Width = pve.display_width'  		Height = pve.display_height'  		FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  		Data = packetData  	};  	frameStart = i + pve.header_size;  	frameEnd = frameStart + packet.Data.Length;  	break;  }  
Magic Number,OculusParrotKinect.Drone.Acquisition,VideoAcquisition,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Acquisition\VideoAcquisition.cs,Loop,The following statement contains a magic number: if (buffer [i] == 'P' && buffer [i + 1] == 'a' && buffer [i + 2] == 'V' && buffer [i + 3] == 'E') {  	parrot_video_encapsulation_t pve = *(parrot_video_encapsulation_t*)(pBuffer + i);  	packetData = new byte[pve.payload_size];  	packet = new VideoPacket {  		Timestamp = DateTime.UtcNow.Ticks'  		FrameNumber = pve.frame_number'  		Width = pve.display_width'  		Height = pve.display_height'  		FrameType = VideoFrameTypeConverter.Convert (pve.frame_type)'  		Data = packetData  	};  	frameStart = i + pve.header_size;  	frameEnd = frameStart + packet.Data.Length;  	break;  }  
Magic Number,OculusParrotKinect.Drone,CommandSender,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\CommandSender.cs,Loop,The following statement contains a magic number: using (var udpClient = new UdpClient (CommandPort)) {  	udpClient.Connect (_configuration.DroneHostname' CommandPort);  	byte[] firstMessage = BitConverter.GetBytes (1);  	udpClient.Send (firstMessage' firstMessage.Length);  	Stopwatch swKeepAlive = Stopwatch.StartNew ();  	while (token.IsCancellationRequested == false) {  		ATCommand command;  		if (_commandQueue.TryDequeue (out command)) {  			byte[] payload = command.CreatePayload (sequenceNumber);  			Trace.WriteIf ((command is ComWdgCommand) == false' Encoding.ASCII.GetString (payload));  			udpClient.Send (payload' payload.Length);  			sequenceNumber++;  			swKeepAlive.Restart ();  		} else if (swKeepAlive.ElapsedMilliseconds > KeepAliveTimeout) {  			_commandQueue.Enqueue (new ComWdgCommand ());  		} else {  			Thread.Sleep (20);  		}  	}  }  
Magic Number,OculusParrotKinect.Drone,CommandSender,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\CommandSender.cs,Loop,The following statement contains a magic number: while (token.IsCancellationRequested == false) {  	ATCommand command;  	if (_commandQueue.TryDequeue (out command)) {  		byte[] payload = command.CreatePayload (sequenceNumber);  		Trace.WriteIf ((command is ComWdgCommand) == false' Encoding.ASCII.GetString (payload));  		udpClient.Send (payload' payload.Length);  		sequenceNumber++;  		swKeepAlive.Restart ();  	} else if (swKeepAlive.ElapsedMilliseconds > KeepAliveTimeout) {  		_commandQueue.Enqueue (new ComWdgCommand ());  	} else {  		Thread.Sleep (20);  	}  }  
Magic Number,OculusParrotKinect.Drone,CommandSender,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\CommandSender.cs,Loop,The following statement contains a magic number: if (_commandQueue.TryDequeue (out command)) {  	byte[] payload = command.CreatePayload (sequenceNumber);  	Trace.WriteIf ((command is ComWdgCommand) == false' Encoding.ASCII.GetString (payload));  	udpClient.Send (payload' payload.Length);  	sequenceNumber++;  	swKeepAlive.Restart ();  } else if (swKeepAlive.ElapsedMilliseconds > KeepAliveTimeout) {  	_commandQueue.Enqueue (new ComWdgCommand ());  } else {  	Thread.Sleep (20);  }  
Magic Number,OculusParrotKinect.Drone,CommandSender,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\CommandSender.cs,Loop,The following statement contains a magic number: if (swKeepAlive.ElapsedMilliseconds > KeepAliveTimeout) {  	_commandQueue.Enqueue (new ComWdgCommand ());  } else {  	Thread.Sleep (20);  }  
Magic Number,OculusParrotKinect.Drone,CommandSender,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\CommandSender.cs,Loop,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,OculusParrotKinect.Drone,Watchdog,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Watchdog.cs,Loop,The following statement contains a magic number: while (token.IsCancellationRequested == false) {  	if (_navdataAcquisition.IsAlive == false) {  		_navdataAcquisition.Start ();  	} else if (_navdataAcquisition.IsAcquiring) {  		if (_commandSender.IsAlive == false)  			_commandSender.Start ();  		if (_videoAcquisition.IsAlive == false)  			_videoAcquisition.Start ();  	}  	Thread.Sleep (10);  }  
Magic Number,OculusParrotKinect.Drone,Watchdog,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Watchdog.cs,Loop,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: switch (animation) {  case FlightAnimation.PhiM30Deg:  	return 1000;  case FlightAnimation.Phi30Deg:  	return 1000;  case FlightAnimation.ThetaM30Deg:  	return 1000;  case FlightAnimation.Theta30Deg:  	return 1000;  case FlightAnimation.Theta20DegYaw200Deg:  	return 1000;  case FlightAnimation.Theta20DegYawM200Deg:  	return 1000;  case FlightAnimation.Turnaround:  	return 5000;  case FlightAnimation.TurnaroundGodown:  	return 5000;  case FlightAnimation.YawShake:  	return 2000;  case FlightAnimation.YawDance:  	return 5000;  case FlightAnimation.PhiDance:  	return 5000;  case FlightAnimation.ThetaDance:  	return 5000;  case FlightAnimation.VzDance:  	return 5000;  case FlightAnimation.Wave:  	return 5000;  case FlightAnimation.PhiThetaMixed:  	return 5000;  case FlightAnimation.DoublePhiThetaMixed:  	return 5000;  case FlightAnimation.FlipAhead:  	return 15;  case FlightAnimation.FlipBehind:  	return 15;  case FlightAnimation.FlipLeft:  	return 15;  case FlightAnimation.FlipRight:  	return 15;  case FlightAnimation.Mayday:  	return 15;  default:  	throw new ArgumentOutOfRangeException ("animation");  }  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 1000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 1000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 1000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 1000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 1000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 1000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 2000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 5000;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 15;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 15;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 15;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 15;  
Magic Number,OculusParrotKinect.Drone.Configuration.Sections,FlightAnimationItem,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Configuration\Sections\FlightAnimationItem.cs,GetDefaultDuration,The following statement contains a magic number: return 15;  
Magic Number,OculusParrotKinect.Drone.Data.Navigation.Native,NavdataBagParser,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Data\Navigation\Native\NavdataBagParser.cs,CalculateChecksum,The following statement contains a magic number: for (int i = 0; i < buffer.Length - 8; ++i)  	checksum += buffer [i];  
Missing Default,OculusParrotKinect.Drone.Data.Navigation,NavdataConverter,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Data\Navigation\NavdataConverter.cs,UpdateStateUsing,The following switch statement is missing a default case: switch (ctrlStates) {  case CTRL_STATES.CTRL_TRANS_TAKEOFF:  	state |= NavigationState.Takeoff;  	break;  case CTRL_STATES.CTRL_TRANS_LANDING:  	state |= NavigationState.Landing;  	break;  case CTRL_STATES.CTRL_HOVERING:  	state |= NavigationState.Hovering;  	break;  }  
Missing Default,OculusParrotKinect.Drone.Infrastructure,InteropHelper,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Drone\Infrastructure\InteropHelper.cs,RegisterLibrariesSearchPath,The following switch statement is missing a default case: switch (Environment.OSVersion.Platform) {  case PlatformID.Win32NT:  case PlatformID.Win32S:  case PlatformID.Win32Windows:  	SetDllDirectory (path);  	break;  case PlatformID.Unix:  case PlatformID.MacOSX:  	string currentValue = Environment.GetEnvironmentVariable (LD_LIBRARY_PATH) ?? string.Empty;  	string newValue = string.IsNullOrEmpty (currentValue) ? path : currentValue + Path.PathSeparator + path;  	Environment.SetEnvironmentVariable (LD_LIBRARY_PATH' newValue);  	break;  }  
