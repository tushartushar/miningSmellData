Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SpeechRecognized,Cyclomatic complexity of the method is 19
Complex Method,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,Cyclomatic complexity of the method is 13
Long Statement,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,GetKinectRecognizer,The length of the statement  "		if ("True".Equals (value' StringComparison.OrdinalIgnoreCase) && culture.Equals (recognizer.Culture.Name' StringComparison.OrdinalIgnoreCase)) " is 142.
Long Statement,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The length of the statement  "				bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2); " is 152.
Long Statement,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The length of the statement  "				bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2); " is 157.
Complex Conditional,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The conditional expression  "left && !forwardRight && !right && !backwardRight"  is complex.
Complex Conditional,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The conditional expression  "!left && !forwardLeft && right && !backwardLeft"  is complex.
Complex Conditional,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The conditional expression  "forwardLeft && forwardRight && !left && !right"  is complex.
Complex Conditional,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The conditional expression  "backwardRight && backwardLeft && !left && !right"  is complex.
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: if (recognizerInfo != null) {  	speechEngine = new SpeechRecognitionEngine (recognizerInfo.Id);  	speechEngine.LoadGrammar (VoiceCommands.GetCommandsGrammar (recognizerInfo.Culture));  	speechEngine.SpeechRecognized += SpeechRecognized;  	speechEngine.SpeechRecognitionRejected += SpeechRejected;  	speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  	speechEngine.RecognizeAsync (RecognizeMode.Multiple);  } else  	throw new Exception ("Kinect not found.");  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: if (recognizerInfo != null) {  	speechEngine = new SpeechRecognitionEngine (recognizerInfo.Id);  	speechEngine.LoadGrammar (VoiceCommands.GetCommandsGrammar (recognizerInfo.Culture));  	speechEngine.SpeechRecognized += SpeechRecognized;  	speechEngine.SpeechRecognitionRejected += SpeechRejected;  	speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  	speechEngine.RecognizeAsync (RecognizeMode.Multiple);  } else  	throw new Exception ("Kinect not found.");  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: if (recognizerInfo != null) {  	speechEngine = new SpeechRecognitionEngine (recognizerInfo.Id);  	speechEngine.LoadGrammar (VoiceCommands.GetCommandsGrammar (recognizerInfo.Culture));  	speechEngine.SpeechRecognized += SpeechRecognized;  	speechEngine.SpeechRecognitionRejected += SpeechRejected;  	speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  	speechEngine.RecognizeAsync (RecognizeMode.Multiple);  } else  	throw new Exception ("Kinect not found.");  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: if (recognizerInfo != null) {  	speechEngine = new SpeechRecognitionEngine (recognizerInfo.Id);  	speechEngine.LoadGrammar (VoiceCommands.GetCommandsGrammar (recognizerInfo.Culture));  	speechEngine.SpeechRecognized += SpeechRecognized;  	speechEngine.SpeechRecognitionRejected += SpeechRejected;  	speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  	speechEngine.RecognizeAsync (RecognizeMode.Multiple);  } else  	throw new Exception ("Kinect not found.");  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,KinectClient,The following statement contains a magic number: speechEngine.SetInputToAudioStream (sensor.AudioSource.Start ()' new SpeechAudioFormatInfo (EncodingFormat.Pcm' 16000' 16' 1' 32000' 2' null));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  	if (skeletonFrame != null) {  		Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  		skeletonFrame.CopySkeletonDataTo (skeletonData);  		Skeleton playerSkeleton = (from s in skeletonData  		where s.TrackingState == SkeletonTrackingState.Tracked  		select s).FirstOrDefault ();  		IsPlayerActive = playerSkeleton != null;  		if (IsPlayerActive) {  			var spine = playerSkeleton.Joints [JointType.Spine];  			var handRight = playerSkeleton.Joints [JointType.HandRight];  			var handLeft = playerSkeleton.Joints [JointType.HandLeft];  			var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  			var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  			var hip = playerSkeleton.Joints [JointType.HipCenter];  			//for debug  			//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  			bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  			bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  			bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  			bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  			bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  			bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  			if (left && !forwardRight && !right && !backwardRight) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  				return;  			}  			if (!left && !forwardLeft && right && !backwardLeft) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  				return;  			}  			if (left && forwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  				return;  			}  			if (left && backwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  				return;  			}  			if (forwardLeft && forwardRight && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  				return;  			}  			if (right && forwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  				return;  			}  			if (right && backwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  				return;  			}  			if (backwardRight && backwardLeft && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  				return;  			}  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  			return;  		} else  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  	}  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  	if (skeletonFrame != null) {  		Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  		skeletonFrame.CopySkeletonDataTo (skeletonData);  		Skeleton playerSkeleton = (from s in skeletonData  		where s.TrackingState == SkeletonTrackingState.Tracked  		select s).FirstOrDefault ();  		IsPlayerActive = playerSkeleton != null;  		if (IsPlayerActive) {  			var spine = playerSkeleton.Joints [JointType.Spine];  			var handRight = playerSkeleton.Joints [JointType.HandRight];  			var handLeft = playerSkeleton.Joints [JointType.HandLeft];  			var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  			var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  			var hip = playerSkeleton.Joints [JointType.HipCenter];  			//for debug  			//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  			bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  			bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  			bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  			bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  			bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  			bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  			if (left && !forwardRight && !right && !backwardRight) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  				return;  			}  			if (!left && !forwardLeft && right && !backwardLeft) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  				return;  			}  			if (left && forwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  				return;  			}  			if (left && backwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  				return;  			}  			if (forwardLeft && forwardRight && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  				return;  			}  			if (right && forwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  				return;  			}  			if (right && backwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  				return;  			}  			if (backwardRight && backwardLeft && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  				return;  			}  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  			return;  		} else  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  	}  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  	if (skeletonFrame != null) {  		Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  		skeletonFrame.CopySkeletonDataTo (skeletonData);  		Skeleton playerSkeleton = (from s in skeletonData  		where s.TrackingState == SkeletonTrackingState.Tracked  		select s).FirstOrDefault ();  		IsPlayerActive = playerSkeleton != null;  		if (IsPlayerActive) {  			var spine = playerSkeleton.Joints [JointType.Spine];  			var handRight = playerSkeleton.Joints [JointType.HandRight];  			var handLeft = playerSkeleton.Joints [JointType.HandLeft];  			var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  			var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  			var hip = playerSkeleton.Joints [JointType.HipCenter];  			//for debug  			//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  			bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  			bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  			bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  			bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  			bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  			bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  			if (left && !forwardRight && !right && !backwardRight) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  				return;  			}  			if (!left && !forwardLeft && right && !backwardLeft) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  				return;  			}  			if (left && forwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  				return;  			}  			if (left && backwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  				return;  			}  			if (forwardLeft && forwardRight && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  				return;  			}  			if (right && forwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  				return;  			}  			if (right && backwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  				return;  			}  			if (backwardRight && backwardLeft && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  				return;  			}  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  			return;  		} else  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  	}  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  	if (skeletonFrame != null) {  		Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  		skeletonFrame.CopySkeletonDataTo (skeletonData);  		Skeleton playerSkeleton = (from s in skeletonData  		where s.TrackingState == SkeletonTrackingState.Tracked  		select s).FirstOrDefault ();  		IsPlayerActive = playerSkeleton != null;  		if (IsPlayerActive) {  			var spine = playerSkeleton.Joints [JointType.Spine];  			var handRight = playerSkeleton.Joints [JointType.HandRight];  			var handLeft = playerSkeleton.Joints [JointType.HandLeft];  			var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  			var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  			var hip = playerSkeleton.Joints [JointType.HipCenter];  			//for debug  			//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  			bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  			bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  			bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  			bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  			bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  			bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  			if (left && !forwardRight && !right && !backwardRight) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  				return;  			}  			if (!left && !forwardLeft && right && !backwardLeft) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  				return;  			}  			if (left && forwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  				return;  			}  			if (left && backwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  				return;  			}  			if (forwardLeft && forwardRight && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  				return;  			}  			if (right && forwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  				return;  			}  			if (right && backwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  				return;  			}  			if (backwardRight && backwardLeft && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  				return;  			}  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  			return;  		} else  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  	}  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  	if (skeletonFrame != null) {  		Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  		skeletonFrame.CopySkeletonDataTo (skeletonData);  		Skeleton playerSkeleton = (from s in skeletonData  		where s.TrackingState == SkeletonTrackingState.Tracked  		select s).FirstOrDefault ();  		IsPlayerActive = playerSkeleton != null;  		if (IsPlayerActive) {  			var spine = playerSkeleton.Joints [JointType.Spine];  			var handRight = playerSkeleton.Joints [JointType.HandRight];  			var handLeft = playerSkeleton.Joints [JointType.HandLeft];  			var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  			var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  			var hip = playerSkeleton.Joints [JointType.HipCenter];  			//for debug  			//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  			bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  			bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  			bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  			bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  			bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  			bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  			if (left && !forwardRight && !right && !backwardRight) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  				return;  			}  			if (!left && !forwardLeft && right && !backwardLeft) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  				return;  			}  			if (left && forwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  				return;  			}  			if (left && backwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  				return;  			}  			if (forwardLeft && forwardRight && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  				return;  			}  			if (right && forwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  				return;  			}  			if (right && backwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  				return;  			}  			if (backwardRight && backwardLeft && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  				return;  			}  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  			return;  		} else  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  	}  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  	if (skeletonFrame != null) {  		Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  		skeletonFrame.CopySkeletonDataTo (skeletonData);  		Skeleton playerSkeleton = (from s in skeletonData  		where s.TrackingState == SkeletonTrackingState.Tracked  		select s).FirstOrDefault ();  		IsPlayerActive = playerSkeleton != null;  		if (IsPlayerActive) {  			var spine = playerSkeleton.Joints [JointType.Spine];  			var handRight = playerSkeleton.Joints [JointType.HandRight];  			var handLeft = playerSkeleton.Joints [JointType.HandLeft];  			var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  			var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  			var hip = playerSkeleton.Joints [JointType.HipCenter];  			//for debug  			//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  			bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  			bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  			bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  			bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  			bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  			bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  			if (left && !forwardRight && !right && !backwardRight) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  				return;  			}  			if (!left && !forwardLeft && right && !backwardLeft) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  				return;  			}  			if (left && forwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  				return;  			}  			if (left && backwardRight && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  				return;  			}  			if (forwardLeft && forwardRight && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  				return;  			}  			if (right && forwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  				return;  			}  			if (right && backwardLeft && !left) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  				return;  			}  			if (backwardRight && backwardLeft && !left && !right) {  				OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  				return;  			}  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  			return;  		} else  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  	}  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (skeletonFrame != null) {  	Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  	skeletonFrame.CopySkeletonDataTo (skeletonData);  	Skeleton playerSkeleton = (from s in skeletonData  	where s.TrackingState == SkeletonTrackingState.Tracked  	select s).FirstOrDefault ();  	IsPlayerActive = playerSkeleton != null;  	if (IsPlayerActive) {  		var spine = playerSkeleton.Joints [JointType.Spine];  		var handRight = playerSkeleton.Joints [JointType.HandRight];  		var handLeft = playerSkeleton.Joints [JointType.HandLeft];  		var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  		var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  		var hip = playerSkeleton.Joints [JointType.HipCenter];  		//for debug  		//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  		bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  		bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  		bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  		bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  		bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  		bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  		if (left && !forwardRight && !right && !backwardRight) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  			return;  		}  		if (!left && !forwardLeft && right && !backwardLeft) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  			return;  		}  		if (left && forwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  			return;  		}  		if (left && backwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  			return;  		}  		if (forwardLeft && forwardRight && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  			return;  		}  		if (right && forwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  			return;  		}  		if (right && backwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  			return;  		}  		if (backwardRight && backwardLeft && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  			return;  		}  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  		return;  	} else  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (skeletonFrame != null) {  	Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  	skeletonFrame.CopySkeletonDataTo (skeletonData);  	Skeleton playerSkeleton = (from s in skeletonData  	where s.TrackingState == SkeletonTrackingState.Tracked  	select s).FirstOrDefault ();  	IsPlayerActive = playerSkeleton != null;  	if (IsPlayerActive) {  		var spine = playerSkeleton.Joints [JointType.Spine];  		var handRight = playerSkeleton.Joints [JointType.HandRight];  		var handLeft = playerSkeleton.Joints [JointType.HandLeft];  		var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  		var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  		var hip = playerSkeleton.Joints [JointType.HipCenter];  		//for debug  		//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  		bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  		bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  		bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  		bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  		bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  		bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  		if (left && !forwardRight && !right && !backwardRight) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  			return;  		}  		if (!left && !forwardLeft && right && !backwardLeft) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  			return;  		}  		if (left && forwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  			return;  		}  		if (left && backwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  			return;  		}  		if (forwardLeft && forwardRight && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  			return;  		}  		if (right && forwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  			return;  		}  		if (right && backwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  			return;  		}  		if (backwardRight && backwardLeft && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  			return;  		}  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  		return;  	} else  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (skeletonFrame != null) {  	Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  	skeletonFrame.CopySkeletonDataTo (skeletonData);  	Skeleton playerSkeleton = (from s in skeletonData  	where s.TrackingState == SkeletonTrackingState.Tracked  	select s).FirstOrDefault ();  	IsPlayerActive = playerSkeleton != null;  	if (IsPlayerActive) {  		var spine = playerSkeleton.Joints [JointType.Spine];  		var handRight = playerSkeleton.Joints [JointType.HandRight];  		var handLeft = playerSkeleton.Joints [JointType.HandLeft];  		var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  		var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  		var hip = playerSkeleton.Joints [JointType.HipCenter];  		//for debug  		//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  		bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  		bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  		bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  		bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  		bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  		bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  		if (left && !forwardRight && !right && !backwardRight) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  			return;  		}  		if (!left && !forwardLeft && right && !backwardLeft) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  			return;  		}  		if (left && forwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  			return;  		}  		if (left && backwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  			return;  		}  		if (forwardLeft && forwardRight && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  			return;  		}  		if (right && forwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  			return;  		}  		if (right && backwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  			return;  		}  		if (backwardRight && backwardLeft && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  			return;  		}  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  		return;  	} else  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (skeletonFrame != null) {  	Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  	skeletonFrame.CopySkeletonDataTo (skeletonData);  	Skeleton playerSkeleton = (from s in skeletonData  	where s.TrackingState == SkeletonTrackingState.Tracked  	select s).FirstOrDefault ();  	IsPlayerActive = playerSkeleton != null;  	if (IsPlayerActive) {  		var spine = playerSkeleton.Joints [JointType.Spine];  		var handRight = playerSkeleton.Joints [JointType.HandRight];  		var handLeft = playerSkeleton.Joints [JointType.HandLeft];  		var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  		var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  		var hip = playerSkeleton.Joints [JointType.HipCenter];  		//for debug  		//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  		bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  		bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  		bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  		bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  		bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  		bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  		if (left && !forwardRight && !right && !backwardRight) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  			return;  		}  		if (!left && !forwardLeft && right && !backwardLeft) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  			return;  		}  		if (left && forwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  			return;  		}  		if (left && backwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  			return;  		}  		if (forwardLeft && forwardRight && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  			return;  		}  		if (right && forwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  			return;  		}  		if (right && backwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  			return;  		}  		if (backwardRight && backwardLeft && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  			return;  		}  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  		return;  	} else  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (skeletonFrame != null) {  	Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  	skeletonFrame.CopySkeletonDataTo (skeletonData);  	Skeleton playerSkeleton = (from s in skeletonData  	where s.TrackingState == SkeletonTrackingState.Tracked  	select s).FirstOrDefault ();  	IsPlayerActive = playerSkeleton != null;  	if (IsPlayerActive) {  		var spine = playerSkeleton.Joints [JointType.Spine];  		var handRight = playerSkeleton.Joints [JointType.HandRight];  		var handLeft = playerSkeleton.Joints [JointType.HandLeft];  		var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  		var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  		var hip = playerSkeleton.Joints [JointType.HipCenter];  		//for debug  		//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  		bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  		bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  		bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  		bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  		bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  		bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  		if (left && !forwardRight && !right && !backwardRight) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  			return;  		}  		if (!left && !forwardLeft && right && !backwardLeft) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  			return;  		}  		if (left && forwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  			return;  		}  		if (left && backwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  			return;  		}  		if (forwardLeft && forwardRight && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  			return;  		}  		if (right && forwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  			return;  		}  		if (right && backwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  			return;  		}  		if (backwardRight && backwardLeft && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  			return;  		}  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  		return;  	} else  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (skeletonFrame != null) {  	Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  	skeletonFrame.CopySkeletonDataTo (skeletonData);  	Skeleton playerSkeleton = (from s in skeletonData  	where s.TrackingState == SkeletonTrackingState.Tracked  	select s).FirstOrDefault ();  	IsPlayerActive = playerSkeleton != null;  	if (IsPlayerActive) {  		var spine = playerSkeleton.Joints [JointType.Spine];  		var handRight = playerSkeleton.Joints [JointType.HandRight];  		var handLeft = playerSkeleton.Joints [JointType.HandLeft];  		var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  		var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  		var hip = playerSkeleton.Joints [JointType.HipCenter];  		//for debug  		//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  		bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  		bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  		bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  		bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  		bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  		bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  		if (left && !forwardRight && !right && !backwardRight) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  			return;  		}  		if (!left && !forwardLeft && right && !backwardLeft) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  			return;  		}  		if (left && forwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  			return;  		}  		if (left && backwardRight && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  			return;  		}  		if (forwardLeft && forwardRight && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  			return;  		}  		if (right && forwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  			return;  		}  		if (right && backwardLeft && !left) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  			return;  		}  		if (backwardRight && backwardLeft && !left && !right) {  			OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  			return;  		}  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  		return;  	} else  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  }  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (IsPlayerActive) {  	var spine = playerSkeleton.Joints [JointType.Spine];  	var handRight = playerSkeleton.Joints [JointType.HandRight];  	var handLeft = playerSkeleton.Joints [JointType.HandLeft];  	var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  	var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  	var hip = playerSkeleton.Joints [JointType.HipCenter];  	//for debug  	//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  	bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  	bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  	bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  	bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  	bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  	bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  	if (left && !forwardRight && !right && !backwardRight) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  		return;  	}  	if (!left && !forwardLeft && right && !backwardLeft) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  		return;  	}  	if (left && forwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  		return;  	}  	if (left && backwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  		return;  	}  	if (forwardLeft && forwardRight && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  		return;  	}  	if (right && forwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  		return;  	}  	if (right && backwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  		return;  	}  	if (backwardRight && backwardLeft && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  		return;  	}  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  	return;  } else  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (IsPlayerActive) {  	var spine = playerSkeleton.Joints [JointType.Spine];  	var handRight = playerSkeleton.Joints [JointType.HandRight];  	var handLeft = playerSkeleton.Joints [JointType.HandLeft];  	var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  	var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  	var hip = playerSkeleton.Joints [JointType.HipCenter];  	//for debug  	//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  	bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  	bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  	bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  	bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  	bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  	bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  	if (left && !forwardRight && !right && !backwardRight) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  		return;  	}  	if (!left && !forwardLeft && right && !backwardLeft) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  		return;  	}  	if (left && forwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  		return;  	}  	if (left && backwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  		return;  	}  	if (forwardLeft && forwardRight && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  		return;  	}  	if (right && forwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  		return;  	}  	if (right && backwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  		return;  	}  	if (backwardRight && backwardLeft && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  		return;  	}  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  	return;  } else  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (IsPlayerActive) {  	var spine = playerSkeleton.Joints [JointType.Spine];  	var handRight = playerSkeleton.Joints [JointType.HandRight];  	var handLeft = playerSkeleton.Joints [JointType.HandLeft];  	var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  	var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  	var hip = playerSkeleton.Joints [JointType.HipCenter];  	//for debug  	//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  	bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  	bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  	bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  	bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  	bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  	bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  	if (left && !forwardRight && !right && !backwardRight) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  		return;  	}  	if (!left && !forwardLeft && right && !backwardLeft) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  		return;  	}  	if (left && forwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  		return;  	}  	if (left && backwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  		return;  	}  	if (forwardLeft && forwardRight && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  		return;  	}  	if (right && forwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  		return;  	}  	if (right && backwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  		return;  	}  	if (backwardRight && backwardLeft && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  		return;  	}  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  	return;  } else  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (IsPlayerActive) {  	var spine = playerSkeleton.Joints [JointType.Spine];  	var handRight = playerSkeleton.Joints [JointType.HandRight];  	var handLeft = playerSkeleton.Joints [JointType.HandLeft];  	var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  	var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  	var hip = playerSkeleton.Joints [JointType.HipCenter];  	//for debug  	//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  	bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  	bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  	bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  	bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  	bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  	bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  	if (left && !forwardRight && !right && !backwardRight) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  		return;  	}  	if (!left && !forwardLeft && right && !backwardLeft) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  		return;  	}  	if (left && forwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  		return;  	}  	if (left && backwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  		return;  	}  	if (forwardLeft && forwardRight && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  		return;  	}  	if (right && forwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  		return;  	}  	if (right && backwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  		return;  	}  	if (backwardRight && backwardLeft && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  		return;  	}  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  	return;  } else  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (IsPlayerActive) {  	var spine = playerSkeleton.Joints [JointType.Spine];  	var handRight = playerSkeleton.Joints [JointType.HandRight];  	var handLeft = playerSkeleton.Joints [JointType.HandLeft];  	var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  	var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  	var hip = playerSkeleton.Joints [JointType.HipCenter];  	//for debug  	//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  	bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  	bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  	bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  	bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  	bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  	bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  	if (left && !forwardRight && !right && !backwardRight) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  		return;  	}  	if (!left && !forwardLeft && right && !backwardLeft) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  		return;  	}  	if (left && forwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  		return;  	}  	if (left && backwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  		return;  	}  	if (forwardLeft && forwardRight && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  		return;  	}  	if (right && forwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  		return;  	}  	if (right && backwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  		return;  	}  	if (backwardRight && backwardLeft && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  		return;  	}  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  	return;  } else  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  
Magic Number,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SkeletonFrameReady,The following statement contains a magic number: if (IsPlayerActive) {  	var spine = playerSkeleton.Joints [JointType.Spine];  	var handRight = playerSkeleton.Joints [JointType.HandRight];  	var handLeft = playerSkeleton.Joints [JointType.HandLeft];  	var elbowLeft = playerSkeleton.Joints [JointType.ElbowLeft];  	var elbowRight = playerSkeleton.Joints [JointType.ElbowRight];  	var hip = playerSkeleton.Joints [JointType.HipCenter];  	//for debug  	//StatusMessage = String.Format("LH z:{0} - S X:{1} "' handLeft.Position.Z' spine.Position.Z);  	bool left = handLeft.Position.Y > hip.Position.Y && handLeft.Position.X < elbowLeft.Position.X && ((elbowLeft.Position.X - handLeft.Position.X) > -0.2);  	bool right = handRight.Position.Y > hip.Position.Y && handRight.Position.X > elbowRight.Position.X && ((handRight.Position.X - elbowRight.Position.X) > 0.2);  	bool forwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z > 0.5;  	bool forwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z > 0.5;  	bool backwardLeft = handLeft.Position.Y > hip.Position.Y && spine.Position.Z - handLeft.Position.Z < 0.2;  	bool backwardRight = handRight.Position.Y > hip.Position.Y && spine.Position.Z - handRight.Position.Z < 0.2;  	if (left && !forwardRight && !right && !backwardRight) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeLeft));  		return;  	}  	if (!left && !forwardLeft && right && !backwardLeft) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeRight));  		return;  	}  	if (left && forwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardLeft));  		return;  	}  	if (left && backwardRight && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardLeft));  		return;  	}  	if (forwardLeft && forwardRight && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Forward));  		return;  	}  	if (right && forwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeForwardRight));  		return;  	}  	if (right && backwardLeft && !left) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.StrafeBackwardRight));  		return;  	}  	if (backwardRight && backwardLeft && !left && !right) {  		OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Backward));  		return;  	}  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.Hover));  	return;  } else  	OnGestureCommandRecognized (new GestureCommandRecognizedEventArgs (GestureCommandType.NoPlayerDetected));  
Missing Default,OculusParrotKinect.Kinect,KinectClient,F:\newReposMay17\Iridio_OculusArDroneKinect\OculusParrotKinect.Kinect\KinectClient.cs,SpeechRecognized,The following switch statement is missing a default case: switch (e.Result.Semantics.Value.ToString ()) {  case VoiceCommands.TakeOff:  	OnVoiceCommandRecognized (new VoiceCommandRecognizedEventArgs (VoiceCommandType.TakeOff));  	break;  case VoiceCommands.Land:  	OnVoiceCommandRecognized (new VoiceCommandRecognizedEventArgs (VoiceCommandType.Land));  	break;  case VoiceCommands.Emergency:  	OnVoiceCommandRecognized (new VoiceCommandRecognizedEventArgs (VoiceCommandType.Emergency));  	break;  case VoiceCommands.ChangeCamera:  	OnVoiceCommandRecognized (new VoiceCommandRecognizedEventArgs (VoiceCommandType.ChangeCamera));  	break;  case VoiceCommands.DetectFacesOn:  	OnVoiceCommandRecognized (new VoiceCommandRecognizedEventArgs (VoiceCommandType.DetectFacesOn));  	break;  case VoiceCommands.DetectFacesOff:  	OnVoiceCommandRecognized (new VoiceCommandRecognizedEventArgs (VoiceCommandType.DetectFacesOff));  	break;  }  
