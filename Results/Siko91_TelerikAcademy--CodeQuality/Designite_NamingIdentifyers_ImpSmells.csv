Implementation smell,Namespace,Class,File,Method,Description
Long Method,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The method has 106 lines of code.
Complex Method,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,Cyclomatic complexity of the method is 31
Complex Method,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,CountNearbyBombs,Cyclomatic complexity of the method is 17
Long Parameter List,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The method has 5 parameters.
Long Statement,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The length of the statement  "			Console.WriteLine ("Hajde da igraem na “Mini4KI”. Probvaj si kasmeta da otkriesh poleteta bez mini4ki." + " Komanda 'top' pokazva klasiraneto' 'restart' po4va nova igra' 'exit' izliza i hajde 4ao!"); " is 199.
Long Statement,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The length of the statement  "			if (int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)) { " is 205.
Complex Conditional,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The conditional expression  "int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)"  is complex.
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: do {  	if (goingToStartANewGame) {  		Console.WriteLine ("Hajde da igraem na “Mini4KI”. Probvaj si kasmeta da otkriesh poleteta bez mini4ki." + " Komanda 'top' pokazva klasiraneto' 'restart' po4va nova igra' 'exit' izliza i hajde 4ao!");  		DrawGameField (gameBoard);  		goingToStartANewGame = false;  	}  	Console.Write ("Daj red i kolona : ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		DisplayBestScores (bestScores);  		break;  	case "restart":  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		DrawGameField (gameBoard);  		aMineHasExploded = false;  		goingToStartANewGame = false;  		break;  	case "exit":  		Console.WriteLine ("4a0' 4a0' 4a0!");  		break;  	case "turn":  		if (bombs [selectedRow' selectedCol] != '*') {  			if (bombs [selectedRow' selectedCol] == '-') {  				UpdateGameBoard (gameBoard' bombs' selectedRow' selectedCol);  				currentScore++;  			}  			if (MARKS == currentScore) {  				GameCompleated = true;  			}  			else {  				DrawGameField (gameBoard);  			}  		}  		else {  			aMineHasExploded = true;  		}  		break;  	default:  		Console.WriteLine ("\nGreshka! nevalidna Komanda\n");  		break;  	}  	if (aMineHasExploded) {  		DrawGameField (bombs);  		Console.Write ("\nHrrrrrr! Umria gerojski s {0} to4ki. " + "Daj si niknejm: "' currentScore);  		string nickname = Console.ReadLine ();  		PlayerScore score = new PlayerScore (nickname' currentScore);  		if (bestScores.Count < 5) {  			bestScores.Add (score);  		}  		else {  			for (int i = 0; i < bestScores.Count; i++) {  				if (bestScores [i].Score < score.Score) {  					bestScores.Insert (i' score);  					bestScores.RemoveAt (bestScores.Count - 1);  					break;  				}  			}  		}  		bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  		bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Score.CompareTo (r1.Score));  		DisplayBestScores (bestScores);  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		currentScore = 0;  		aMineHasExploded = false;  		goingToStartANewGame = true;  	}  	if (GameCompleated) {  		Console.WriteLine ("\nBRAVOOOS! Otvri 35 kletki bez kapka kryv.");  		DrawGameField (bombs);  		Console.WriteLine ("Daj si imeto' batka: ");  		string nickname = Console.ReadLine ();  		PlayerScore newHighScore = new PlayerScore (nickname' currentScore);  		bestScores.Add (newHighScore);  		DisplayBestScores (bestScores);  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		currentScore = 0;  		GameCompleated = false;  		goingToStartANewGame = true;  	}  }  while (command != "exit");  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: do {  	if (goingToStartANewGame) {  		Console.WriteLine ("Hajde da igraem na “Mini4KI”. Probvaj si kasmeta da otkriesh poleteta bez mini4ki." + " Komanda 'top' pokazva klasiraneto' 'restart' po4va nova igra' 'exit' izliza i hajde 4ao!");  		DrawGameField (gameBoard);  		goingToStartANewGame = false;  	}  	Console.Write ("Daj red i kolona : ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		DisplayBestScores (bestScores);  		break;  	case "restart":  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		DrawGameField (gameBoard);  		aMineHasExploded = false;  		goingToStartANewGame = false;  		break;  	case "exit":  		Console.WriteLine ("4a0' 4a0' 4a0!");  		break;  	case "turn":  		if (bombs [selectedRow' selectedCol] != '*') {  			if (bombs [selectedRow' selectedCol] == '-') {  				UpdateGameBoard (gameBoard' bombs' selectedRow' selectedCol);  				currentScore++;  			}  			if (MARKS == currentScore) {  				GameCompleated = true;  			}  			else {  				DrawGameField (gameBoard);  			}  		}  		else {  			aMineHasExploded = true;  		}  		break;  	default:  		Console.WriteLine ("\nGreshka! nevalidna Komanda\n");  		break;  	}  	if (aMineHasExploded) {  		DrawGameField (bombs);  		Console.Write ("\nHrrrrrr! Umria gerojski s {0} to4ki. " + "Daj si niknejm: "' currentScore);  		string nickname = Console.ReadLine ();  		PlayerScore score = new PlayerScore (nickname' currentScore);  		if (bestScores.Count < 5) {  			bestScores.Add (score);  		}  		else {  			for (int i = 0; i < bestScores.Count; i++) {  				if (bestScores [i].Score < score.Score) {  					bestScores.Insert (i' score);  					bestScores.RemoveAt (bestScores.Count - 1);  					break;  				}  			}  		}  		bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  		bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Score.CompareTo (r1.Score));  		DisplayBestScores (bestScores);  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		currentScore = 0;  		aMineHasExploded = false;  		goingToStartANewGame = true;  	}  	if (GameCompleated) {  		Console.WriteLine ("\nBRAVOOOS! Otvri 35 kletki bez kapka kryv.");  		DrawGameField (bombs);  		Console.WriteLine ("Daj si imeto' batka: ");  		string nickname = Console.ReadLine ();  		PlayerScore newHighScore = new PlayerScore (nickname' currentScore);  		bestScores.Add (newHighScore);  		DisplayBestScores (bestScores);  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		currentScore = 0;  		GameCompleated = false;  		goingToStartANewGame = true;  	}  }  while (command != "exit");  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: do {  	if (goingToStartANewGame) {  		Console.WriteLine ("Hajde da igraem na “Mini4KI”. Probvaj si kasmeta da otkriesh poleteta bez mini4ki." + " Komanda 'top' pokazva klasiraneto' 'restart' po4va nova igra' 'exit' izliza i hajde 4ao!");  		DrawGameField (gameBoard);  		goingToStartANewGame = false;  	}  	Console.Write ("Daj red i kolona : ");  	command = Console.ReadLine ().Trim ();  	if (command.Length >= 3) {  		if (int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)) {  			command = "turn";  		}  	}  	switch (command) {  	case "top":  		DisplayBestScores (bestScores);  		break;  	case "restart":  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		DrawGameField (gameBoard);  		aMineHasExploded = false;  		goingToStartANewGame = false;  		break;  	case "exit":  		Console.WriteLine ("4a0' 4a0' 4a0!");  		break;  	case "turn":  		if (bombs [selectedRow' selectedCol] != '*') {  			if (bombs [selectedRow' selectedCol] == '-') {  				UpdateGameBoard (gameBoard' bombs' selectedRow' selectedCol);  				currentScore++;  			}  			if (MARKS == currentScore) {  				GameCompleated = true;  			}  			else {  				DrawGameField (gameBoard);  			}  		}  		else {  			aMineHasExploded = true;  		}  		break;  	default:  		Console.WriteLine ("\nGreshka! nevalidna Komanda\n");  		break;  	}  	if (aMineHasExploded) {  		DrawGameField (bombs);  		Console.Write ("\nHrrrrrr! Umria gerojski s {0} to4ki. " + "Daj si niknejm: "' currentScore);  		string nickname = Console.ReadLine ();  		PlayerScore score = new PlayerScore (nickname' currentScore);  		if (bestScores.Count < 5) {  			bestScores.Add (score);  		}  		else {  			for (int i = 0; i < bestScores.Count; i++) {  				if (bestScores [i].Score < score.Score) {  					bestScores.Insert (i' score);  					bestScores.RemoveAt (bestScores.Count - 1);  					break;  				}  			}  		}  		bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  		bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Score.CompareTo (r1.Score));  		DisplayBestScores (bestScores);  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		currentScore = 0;  		aMineHasExploded = false;  		goingToStartANewGame = true;  	}  	if (GameCompleated) {  		Console.WriteLine ("\nBRAVOOOS! Otvri 35 kletki bez kapka kryv.");  		DrawGameField (bombs);  		Console.WriteLine ("Daj si imeto' batka: ");  		string nickname = Console.ReadLine ();  		PlayerScore newHighScore = new PlayerScore (nickname' currentScore);  		bestScores.Add (newHighScore);  		DisplayBestScores (bestScores);  		gameBoard = GenerateGameField ();  		bombs = GenerateBombs ();  		currentScore = 0;  		GameCompleated = false;  		goingToStartANewGame = true;  	}  }  while (command != "exit");  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: if (command.Length >= 3) {  	if (int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)) {  		command = "turn";  	}  }  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: if (int.TryParse (command [0].ToString ()' out selectedRow) && int.TryParse (command [2].ToString ()' out selectedCol) && selectedRow <= gameBoard.GetLength (0) && selectedCol <= gameBoard.GetLength (1)) {  	command = "turn";  }  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: if (aMineHasExploded) {  	DrawGameField (bombs);  	Console.Write ("\nHrrrrrr! Umria gerojski s {0} to4ki. " + "Daj si niknejm: "' currentScore);  	string nickname = Console.ReadLine ();  	PlayerScore score = new PlayerScore (nickname' currentScore);  	if (bestScores.Count < 5) {  		bestScores.Add (score);  	}  	else {  		for (int i = 0; i < bestScores.Count; i++) {  			if (bestScores [i].Score < score.Score) {  				bestScores.Insert (i' score);  				bestScores.RemoveAt (bestScores.Count - 1);  				break;  			}  		}  	}  	bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Name.CompareTo (r1.Name));  	bestScores.Sort ((PlayerScore r1' PlayerScore r2) => r2.Score.CompareTo (r1.Score));  	DisplayBestScores (bestScores);  	gameBoard = GenerateGameField ();  	bombs = GenerateBombs ();  	currentScore = 0;  	aMineHasExploded = false;  	goingToStartANewGame = true;  }  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,Main,The following statement contains a magic number: if (bestScores.Count < 5) {  	bestScores.Add (score);  }  else {  	for (int i = 0; i < bestScores.Count; i++) {  		if (bestScores [i].Score < score.Score) {  			bestScores.Insert (i' score);  			bestScores.RemoveAt (bestScores.Count - 1);  			break;  		}  	}  }  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,GenerateBombs,The following statement contains a magic number: while (generatedBombNumbers.Count < 15) {  	Random random = new Random ();  	int generatedBombNum = random.Next (50);  	if (!generatedBombNumbers.Contains (generatedBombNum)) {  		generatedBombNumbers.Add (generatedBombNum);  	}  }  
Magic Number,Minesweeper,MinesweeperGame,C:\repos\Siko91_TelerikAcademy--CodeQuality\HighQualityCoding\NamingIdentifyers\Program.cs,GenerateBombs,The following statement contains a magic number: while (generatedBombNumbers.Count < 15) {  	Random random = new Random ();  	int generatedBombNum = random.Next (50);  	if (!generatedBombNumbers.Contains (generatedBombNum)) {  		generatedBombNumbers.Add (generatedBombNum);  	}  }  
