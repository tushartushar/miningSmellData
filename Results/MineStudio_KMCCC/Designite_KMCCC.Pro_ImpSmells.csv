Implementation smell,Namespace,Class,File,Method,Description
Long Method,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,ReadValue,The method has 124 lines of code.
Long Method,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,WriteValue,The method has 107 lines of code.
Long Method,KMCCC.Modules.JVersion,JVersionLocator,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\JVersion\JVersionLocator.cs,GetVersionInternal,The method has 122 lines of code.
Complex Method,KMCCC.Launcher,MinecraftLaunchArguments,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Launcher\LaunchArguments.cs,ToArguments,Cyclomatic complexity of the method is 17
Complex Method,LitJson,JsonData,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonData.cs,WriteJson,Cyclomatic complexity of the method is 11
Complex Method,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,AddObjectMetadata,Cyclomatic complexity of the method is 11
Complex Method,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,AddTypeProperties,Cyclomatic complexity of the method is 8
Complex Method,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,ReadValue,Cyclomatic complexity of the method is 17
Complex Method,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,ReadValue,Cyclomatic complexity of the method is 10
Complex Method,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,WriteValue,Cyclomatic complexity of the method is 22
Complex Method,LitJson,JsonReader,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonReader.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,KMCCC.Modules.JVersion,JVersionLocator,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\JVersion\JVersionLocator.cs,GetVersionInternal,Cyclomatic complexity of the method is 16
Long Parameter List,KMCCC.Authentication,YggdrasilLogin,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Authentication\Yggdrasil.cs,YggdrasilLogin,The method has 6 parameters. Parameters: email' password' twitchEnabled' clientToken' token' authServer
Long Parameter List,KMCCC.Authentication,YggdrasilLogin,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Authentication\Yggdrasil.cs,YggdrasilLogin,The method has 5 parameters. Parameters: email' password' twitchEnabled' token' authServer
Long Parameter List,KMCCC.Authentication,YggdrasilValidate,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Authentication\Yggdrasil.cs,YggdrasilValidate,The method has 5 parameters. Parameters: accessToken' clientToken' uuid' displayName' authServer
Long Parameter List,KMCCC.Authentication,YggdrasilAuto,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Authentication\Yggdrasil.cs,YggdrasilAuto,The method has 7 parameters. Parameters: email' password' accessToken' clientToken' uuid' displayName' authServer
Long Parameter List,KMCCC.Modules.Yggdrasil,YggdrasilClient,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Yggdrasil\YggdrasilClient.cs,AuthenticateAsync,The method has 5 parameters. Parameters: email' password' ExToken' twitchEnabled' token
Long Parameter List,KMCCC.Tools,WarpedEncoding,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\ZipTools.cs,GetBytes,The method has 5 parameters. Parameters: chars' charIndex' charCount' bytes' byteIndex
Long Parameter List,KMCCC.Tools,WarpedEncoding,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\ZipTools.cs,GetBytes,The method has 5 parameters. Parameters: s' charIndex' charCount' bytes' byteIndex
Long Parameter List,KMCCC.Tools,WarpedEncoding,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\ZipTools.cs,GetChars,The method has 5 parameters. Parameters: bytes' byteIndex' byteCount' chars' charIndex
Long Identifier,KMCCC.Pro.Modules.MojangAPI,MetricKeys,C:\repos\MineStudio_KMCCC\KMCCC.Pro\Modules\MojangAPI\Statistics.cs,,The length of the parameter PREPAID_CARD_REDEEMED_MINECRAFT is 31.
Long Statement,KMCCC.Launcher,LauncherCore,C:\repos\MineStudio_KMCCC\KMCCC.Pro\Launcher\LauncherCore.cs,GenerateArguments,The length of the statement  "                args.AdvencedArguments = new List<string> {"-Dfml.ignoreInvalidMinecraftCertificates=true -Dfml.ignorePatchDiscrepancies=true"};" is 128.
Long Statement,KMCCC.Launcher,LauncherCore,C:\repos\MineStudio_KMCCC\KMCCC.Pro\Launcher\LauncherCore.cs,GenerateArguments,The length of the statement  "				return new LaunchResult {Success = false' ErrorType = ErrorType.Unknown' ErrorMessage = "在生成参数时发生了意外的错误"' Exception = exp};" is 123.
Long Statement,KMCCC.Launcher,LauncherCore,C:\repos\MineStudio_KMCCC\KMCCC.Pro\Launcher\LauncherCore.cs,LaunchInternal,The length of the statement  "						return new LaunchResult {Success = false' ErrorType = ErrorType.OperatorException' ErrorMessage = "指定的操作器引发了异常"' Exception = exp};" is 130.
Long Statement,KMCCC.Launcher,LauncherCoreItemResolverExtensions,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Launcher\Version.cs,GetLibPath,The length of the statement  "			return String.Format(@"{0}\libraries\{1}\{2}\{3}\{2}-{3}.jar"' core.GameRootPath' lib.NS.Replace("."' "\\")' lib.Name' lib.Version); " is 132.
Long Statement,KMCCC.Launcher,LauncherCoreItemResolverExtensions,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Launcher\Version.cs,GetNativePath,The length of the statement  "			return String.Format(@"{0}\libraries\{1}\{2}\{3}\{2}-{3}-{4}.jar"' core.GameRootPath' native.NS.Replace("."' "\\")' native.Name' native.Version' " is 144.
Long Statement,KMCCC.Pro.Modules.MojangAPI,MojangAPIInternal,C:\repos\MineStudio_KMCCC\KMCCC.Pro\Modules\MojangAPI\MojangAPIInternal.cs,GetStatistics,The length of the statement  "                    return new Statistics(long.Parse(value[0].ToString())' long.Parse(value[1].ToString())' double.Parse(value[2].ToString())); " is 123.
Long Statement,KMCCC.Tools,SystemTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\SystemTools.cs,FindJavaInternal,The length of the statement  "				if ((registryKey == null) || ((registry = registryKey.OpenSubKey("Java Runtime Environment")) == null)) return new string[0]; " is 125.
Long Statement,KMCCC.Tools,ZipTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\ZipTools.cs,UnzipFile,The length of the statement  "				using (var zip = (IDisposable) ZipArchive_OpenOnFile.Invoke(null' new object[] {zipFile' FileMode.Open' FileAccess.Read' FileShare.Read' false})) " is 145.
Complex Conditional,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,ReadValue,The conditional expression  "reader.Token == JsonToken.Double ||                  reader.Token == JsonToken.Int ||                  reader.Token == JsonToken.Long ||                  reader.Token == JsonToken.String ||                  reader.Token == JsonToken.Boolean"  is complex.
Complex Conditional,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State22,The conditional expression  "ctx.L.input_char >= '0' && ctx.L.input_char <= '9' ||                      ctx.L.input_char >= 'A' && ctx.L.input_char <= 'F' ||                      ctx.L.input_char >= 'a' && ctx.L.input_char <= 'f'"  is complex.
Magic Number,KMCCC.Launcher,MinLaunchReport,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Launcher\Reporter.cs,MinLaunchReport,The following statement contains a magic number: Memory = ((uint) (SystemTools.GetTotalMemory() >> 20));
Magic Number,KMCCC.Pro.Modules.MojangAPI,MojangAPIInternal,C:\repos\MineStudio_KMCCC\KMCCC.Pro\Modules\MojangAPI\MojangAPIInternal.cs,GetStatistics,The following statement contains a magic number: try              {                  using (WebClient webclient = new WebClient())                  {                      webclient.Headers.Add("Content-Type"' "application/json");                      JsonData data = new JsonData                      {                          ["metricKeys"] = new JsonData()                      };                      JsonData metricKey_sdata = new JsonData                      {                          MetricKeys.ITEM_SOLD_MINECRAFT'                          MetricKeys.PREPAID_CARD_REDEEMED_MINECRAFT                      };                      data["metricKeys"] = metricKey_sdata;                      var value = JsonMapper.ToObject(webclient.UploadString(MojangAPIProvider.Statistics()' data.ToJson()));                      return new Statistics(long.Parse(value[0].ToString())' long.Parse(value[1].ToString())' double.Parse(value[2].ToString()));                  }              }              catch(Exception ex)              {                  throw ex;              }
Magic Number,LitJson,JsonMapper,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonMapper.cs,JsonMapper,The following statement contains a magic number: max_nesting_depth = 100;
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,Init,The following statement contains a magic number: hex_seq = new char[4];
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,Init,The following statement contains a magic number: indent_value = 4;
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++) {                  num = n % 16;                    if (num < 10)                      hex[3 - i] = (char) ('0' + num);                  else                      hex[3 - i] = (char) ('A' + (num - 10));                    n >>= 4;              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++) {                  num = n % 16;                    if (num < 10)                      hex[3 - i] = (char) ('0' + num);                  else                      hex[3 - i] = (char) ('A' + (num - 10));                    n >>= 4;              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++) {                  num = n % 16;                    if (num < 10)                      hex[3 - i] = (char) ('0' + num);                  else                      hex[3 - i] = (char) ('A' + (num - 10));                    n >>= 4;              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++) {                  num = n % 16;                    if (num < 10)                      hex[3 - i] = (char) ('0' + num);                  else                      hex[3 - i] = (char) ('A' + (num - 10));                    n >>= 4;              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++) {                  num = n % 16;                    if (num < 10)                      hex[3 - i] = (char) ('0' + num);                  else                      hex[3 - i] = (char) ('A' + (num - 10));                    n >>= 4;              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++) {                  num = n % 16;                    if (num < 10)                      hex[3 - i] = (char) ('0' + num);                  else                      hex[3 - i] = (char) ('A' + (num - 10));                    n >>= 4;              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,IntToHex,The following statement contains a magic number: for (int i = 0; i < 4; i++) {                  num = n % 16;                    if (num < 10)                      hex[3 - i] = (char) ('0' + num);                  else                      hex[3 - i] = (char) ('A' + (num - 10));                    n >>= 4;              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,PutString,The following statement contains a magic number: for (int i = 0; i < n; i++) {                  switch (str[i]) {                  case '\n':                      writer.Write ("\\n");                      continue;                    case '\r':                      writer.Write ("\\r");                      continue;                    case '\t':                      writer.Write ("\\t");                      continue;                    case '"':                  case '\\':                      writer.Write ('\\');                      writer.Write (str[i]);                      continue;                    case '\f':                      writer.Write ("\\f");                      continue;                    case '\b':                      writer.Write ("\\b");                      continue;                  }                    if ((int) str[i] >= 32 && (int) str[i] <= 126) {                      writer.Write (str[i]);                      continue;                  }                    // Default' turn into a \uXXXX sequence                  IntToHex ((int) str[i]' hex_seq);                  writer.Write ("\\u");                  writer.Write (hex_seq);              }
Magic Number,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,PutString,The following statement contains a magic number: for (int i = 0; i < n; i++) {                  switch (str[i]) {                  case '\n':                      writer.Write ("\\n");                      continue;                    case '\r':                      writer.Write ("\\r");                      continue;                    case '\t':                      writer.Write ("\\t");                      continue;                    case '"':                  case '\\':                      writer.Write ('\\');                      writer.Write (str[i]);                      continue;                    case '\f':                      writer.Write ("\\f");                      continue;                    case '\b':                      writer.Write ("\\b");                      continue;                  }                    if ((int) str[i] >= 32 && (int) str[i] <= 126) {                      writer.Write (str[i]);                      continue;                  }                    // Default' turn into a \uXXXX sequence                  IntToHex ((int) str[i]' hex_seq);                  writer.Write ("\\u");                  writer.Write (hex_seq);              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,Lexer,The following statement contains a magic number: string_buffer = new StringBuilder (128);
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,HexValue,The following statement contains a magic number: switch (digit) {              case 'a':              case 'A':                  return 10;                case 'b':              case 'B':                  return 11;                case 'c':              case 'C':                  return 12;                case 'd':              case 'D':                  return 13;                case 'e':              case 'E':                  return 14;                case 'f':              case 'F':                  return 15;                default:                  return digit - '0';              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,HexValue,The following statement contains a magic number: switch (digit) {              case 'a':              case 'A':                  return 10;                case 'b':              case 'B':                  return 11;                case 'c':              case 'C':                  return 12;                case 'd':              case 'D':                  return 13;                case 'e':              case 'E':                  return 14;                case 'f':              case 'F':                  return 15;                default:                  return digit - '0';              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,HexValue,The following statement contains a magic number: switch (digit) {              case 'a':              case 'A':                  return 10;                case 'b':              case 'B':                  return 11;                case 'c':              case 'C':                  return 12;                case 'd':              case 'D':                  return 13;                case 'e':              case 'E':                  return 14;                case 'f':              case 'F':                  return 15;                default:                  return digit - '0';              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,HexValue,The following statement contains a magic number: switch (digit) {              case 'a':              case 'A':                  return 10;                case 'b':              case 'B':                  return 11;                case 'c':              case 'C':                  return 12;                case 'd':              case 'D':                  return 13;                case 'e':              case 'E':                  return 14;                case 'f':              case 'F':                  return 15;                default:                  return digit - '0';              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,HexValue,The following statement contains a magic number: switch (digit) {              case 'a':              case 'A':                  return 10;                case 'b':              case 'B':                  return 11;                case 'c':              case 'C':                  return 12;                case 'd':              case 'D':                  return 13;                case 'e':              case 'E':                  return 14;                case 'f':              case 'F':                  return 15;                default:                  return digit - '0';              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,HexValue,The following statement contains a magic number: switch (digit) {              case 'a':              case 'A':                  return 10;                case 'b':              case 'B':                  return 11;                case 'c':              case 'C':                  return 12;                case 'd':              case 'D':                  return 13;                case 'e':              case 'E':                  return 14;                case 'f':              case 'F':                  return 15;                default:                  return digit - '0';              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,PopulateFsmTables,The following statement contains a magic number: fsm_handler_table = new StateHandler[28] {                  State1'                  State2'                  State3'                  State4'                  State5'                  State6'                  State7'                  State8'                  State9'                  State10'                  State11'                  State12'                  State13'                  State14'                  State15'                  State16'                  State17'                  State18'                  State19'                  State20'                  State21'                  State22'                  State23'                  State24'                  State25'                  State26'                  State27'                  State28              };
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,PopulateFsmTables,The following statement contains a magic number: fsm_return_table = new int[28] {                  (int) ParserToken.Char'                  0'                  (int) ParserToken.Number'                  (int) ParserToken.Number'                  0'                  (int) ParserToken.Number'                  0'                  (int) ParserToken.Number'                  0'                  0'                  (int) ParserToken.True'                  0'                  0'                  0'                  (int) ParserToken.False'                  0'                  0'                  (int) ParserToken.Null'                  (int) ParserToken.CharSeq'                  (int) ParserToken.Char'                  0'                  0'                  (int) ParserToken.CharSeq'                  (int) ParserToken.Char'                  0'                  0'                  0'                  0              };
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State1,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r')                      continue;                    if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 3;                      return true;                  }                    switch (ctx.L.input_char) {                  case '"':                      ctx.NextState = 19;                      ctx.Return = true;                      return true;                    case ''':                  case ':':                  case '[':                  case ']':                  case '{':                  case '}':                      ctx.NextState = 1;                      ctx.Return = true;                      return true;                    case '-':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 2;                      return true;                    case '0':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 4;                      return true;                    case 'f':                      ctx.NextState = 12;                      return true;                    case 'n':                      ctx.NextState = 16;                      return true;                    case 't':                      ctx.NextState = 9;                      return true;                    case '\'':                      if (! ctx.L.allow_single_quoted_strings)                          return false;                        ctx.L.input_char = '"';                      ctx.NextState = 23;                      ctx.Return = true;                      return true;                    case '/':                      if (! ctx.L.allow_comments)                          return false;                        ctx.NextState = 25;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State2,The following statement contains a magic number: if (ctx.L.input_char >= '1' && ctx.L.input_char<= '9') {                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 3;                  return true;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State2,The following statement contains a magic number: switch (ctx.L.input_char) {              case '0':                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 4;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State3,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }                    if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r') {                      ctx.Return = true;                      ctx.NextState = 1;                      return true;                  }                    switch (ctx.L.input_char) {                  case ''':                  case ']':                  case '}':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 1;                      return true;                    case '.':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 5;                      return true;                    case 'e':                  case 'E':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 7;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State3,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }                    if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r') {                      ctx.Return = true;                      ctx.NextState = 1;                      return true;                  }                    switch (ctx.L.input_char) {                  case ''':                  case ']':                  case '}':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 1;                      return true;                    case '.':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 5;                      return true;                    case 'e':                  case 'E':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 7;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State4,The following statement contains a magic number: switch (ctx.L.input_char) {              case ''':              case ']':              case '}':                  ctx.L.UngetChar ();                  ctx.Return = true;                  ctx.NextState = 1;                  return true;                case '.':                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 5;                  return true;                case 'e':              case 'E':                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 7;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State4,The following statement contains a magic number: switch (ctx.L.input_char) {              case ''':              case ']':              case '}':                  ctx.L.UngetChar ();                  ctx.Return = true;                  ctx.NextState = 1;                  return true;                case '.':                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 5;                  return true;                case 'e':              case 'E':                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 7;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State5,The following statement contains a magic number: if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9') {                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 6;                  return true;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State6,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9') {                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }                    if (ctx.L.input_char == ' ' ||                      ctx.L.input_char >= '\t' && ctx.L.input_char <= '\r') {                      ctx.Return = true;                      ctx.NextState = 1;                      return true;                  }                    switch (ctx.L.input_char) {                  case ''':                  case ']':                  case '}':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 1;                      return true;                    case 'e':                  case 'E':                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      ctx.NextState = 7;                      return true;                    default:                      return false;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State7,The following statement contains a magic number: if (ctx.L.input_char >= '0' && ctx.L.input_char<= '9') {                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 8;                  return true;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State7,The following statement contains a magic number: switch (ctx.L.input_char) {              case '+':              case '-':                  ctx.L.string_buffer.Append ((char) ctx.L.input_char);                  ctx.NextState = 8;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State9,The following statement contains a magic number: switch (ctx.L.input_char) {              case 'r':                  ctx.NextState = 10;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State10,The following statement contains a magic number: switch (ctx.L.input_char) {              case 'u':                  ctx.NextState = 11;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State12,The following statement contains a magic number: switch (ctx.L.input_char) {              case 'a':                  ctx.NextState = 13;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State13,The following statement contains a magic number: switch (ctx.L.input_char) {              case 'l':                  ctx.NextState = 14;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State14,The following statement contains a magic number: switch (ctx.L.input_char) {              case 's':                  ctx.NextState = 15;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State16,The following statement contains a magic number: switch (ctx.L.input_char) {              case 'u':                  ctx.NextState = 17;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State17,The following statement contains a magic number: switch (ctx.L.input_char) {              case 'l':                  ctx.NextState = 18;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State19,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  switch (ctx.L.input_char) {                  case '"':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 20;                      return true;                    case '\\':                      ctx.StateStack = 19;                      ctx.NextState = 21;                      return true;                    default:                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State19,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  switch (ctx.L.input_char) {                  case '"':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 20;                      return true;                    case '\\':                      ctx.StateStack = 19;                      ctx.NextState = 21;                      return true;                    default:                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State19,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  switch (ctx.L.input_char) {                  case '"':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 20;                      return true;                    case '\\':                      ctx.StateStack = 19;                      ctx.NextState = 21;                      return true;                    default:                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State21,The following statement contains a magic number: switch (ctx.L.input_char) {              case 'u':                  ctx.NextState = 22;                  return true;                case '"':              case '\'':              case '/':              case '\\':              case 'b':              case 'f':              case 'n':              case 'r':              case 't':                  ctx.L.string_buffer.Append (                      ProcessEscChar (ctx.L.input_char));                  ctx.NextState = ctx.StateStack;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State22,The following statement contains a magic number: int mult    = 4096;
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State22,The following statement contains a magic number: while (ctx.L.GetChar ()) {                    if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9' ||                      ctx.L.input_char >= 'A' && ctx.L.input_char <= 'F' ||                      ctx.L.input_char >= 'a' && ctx.L.input_char <= 'f') {                        ctx.L.unichar += HexValue (ctx.L.input_char) * mult;                        counter++;                      mult /= 16;                        if (counter == 4) {                          ctx.L.string_buffer.Append (                              Convert.ToChar (ctx.L.unichar));                          ctx.NextState = ctx.StateStack;                          return true;                      }                        continue;                  }                    return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State22,The following statement contains a magic number: while (ctx.L.GetChar ()) {                    if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9' ||                      ctx.L.input_char >= 'A' && ctx.L.input_char <= 'F' ||                      ctx.L.input_char >= 'a' && ctx.L.input_char <= 'f') {                        ctx.L.unichar += HexValue (ctx.L.input_char) * mult;                        counter++;                      mult /= 16;                        if (counter == 4) {                          ctx.L.string_buffer.Append (                              Convert.ToChar (ctx.L.unichar));                          ctx.NextState = ctx.StateStack;                          return true;                      }                        continue;                  }                    return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State23,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  switch (ctx.L.input_char) {                  case '\'':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 24;                      return true;                    case '\\':                      ctx.StateStack = 23;                      ctx.NextState = 21;                      return true;                    default:                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State23,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  switch (ctx.L.input_char) {                  case '\'':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 24;                      return true;                    case '\\':                      ctx.StateStack = 23;                      ctx.NextState = 21;                      return true;                    default:                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State23,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  switch (ctx.L.input_char) {                  case '\'':                      ctx.L.UngetChar ();                      ctx.Return = true;                      ctx.NextState = 24;                      return true;                    case '\\':                      ctx.StateStack = 23;                      ctx.NextState = 21;                      return true;                    default:                      ctx.L.string_buffer.Append ((char) ctx.L.input_char);                      continue;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State25,The following statement contains a magic number: switch (ctx.L.input_char) {              case '*':                  ctx.NextState = 27;                  return true;                case '/':                  ctx.NextState = 26;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State25,The following statement contains a magic number: switch (ctx.L.input_char) {              case '*':                  ctx.NextState = 27;                  return true;                case '/':                  ctx.NextState = 26;                  return true;                default:                  return false;              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State27,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == '*') {                      ctx.NextState = 28;                      return true;                  }              }
Magic Number,LitJson,Lexer,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\Lexer.cs,State28,The following statement contains a magic number: while (ctx.L.GetChar ()) {                  if (ctx.L.input_char == '*')                      continue;                    if (ctx.L.input_char == '/') {                      ctx.NextState = 1;                      return true;                  }                    ctx.NextState = 27;                  return true;              }
Magic Number,KMCCC.Modules.JVersion,JVersionLocator,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\JVersion\JVersionLocator.cs,GetVersionInternal,The following statement contains a magic number: try  			{  				if (_locatingVersion.Contains(id))  				{  					return null;  				}  				_locatingVersion.Add(id);    				Version version;  				if (_versions.TryGetValue(id' out version))  				{  					return version;  				}    				var jver = LoadVersion(_core.GetVersionJsonPath(id));  				if (jver == null)  				{  					return null;  				}    				version = new Version();  				if (string.IsNullOrWhiteSpace(jver.Id))  				{  					return null;  				}                  if (jver.arguments == null && string.IsNullOrWhiteSpace(jver.MinecraftArguments))                  {                      return null;                  }  				if (string.IsNullOrWhiteSpace(jver.MainClass))  				{  					return null;  				}  				if (string.IsNullOrWhiteSpace(jver.Assets))  				{  					jver.Assets = "legacy";  				}  				if (jver.Libraries == null)  				{  					return null;  				}  				version.Id = jver.Id;                  version.MinecraftArguments = jver.MinecraftArguments ?? UsefulTools.PrintfArray(jver.arguments.game);                  version.Assets = jver.Assets;  				version.MainClass = jver.MainClass;  				version.JarId = jver.JarId;  				version.Libraries = new List<Library>();  				version.Natives = new List<Native>();  				foreach (var lib in jver.Libraries)  				{  					if (string.IsNullOrWhiteSpace(lib.Name))  					{  						continue;  					}  					var names = lib.Name.Split(':');  					if (names.Length != 3)  					{  						continue;  					}  					if (lib.Natives == null)  					{  						if (!IfAllowed(lib.Rules))  						{  							continue;  						}  						version.Libraries.Add(new Library  						{  							NS = names[0]'  							Name = names[1]'  							Version = names[2]  						});  					}  					else  					{  						if (!IfAllowed(lib.Rules))  						{  							continue;  						}  						var native = new Native  						{  							NS = names[0]'  							Name = names[1]'  							Version = names[2]'  							NativeSuffix = lib.Natives["windows"].Replace("${arch}"' SystemTools.GetArch())  						};  						version.Natives.Add(native);  						if (lib.Extract != null)  						{  							native.Options = new UnzipOptions {Exclude = lib.Extract.Exculde};  						}  					}  				}  				if (jver.InheritsVersion != null)  				{  					var target = GetVersionInternal(jver.InheritsVersion);  					if (target == null)  					{  						return null;  					}  					else  					{                          if (version.Assets == "legacy")                              version.Assets = null;                          version.Assets = version.Assets ?? target.Assets;  						version.JarId = version.JarId ?? target.JarId;  						version.MainClass = version.MainClass ?? target.MainClass;  						version.MinecraftArguments = version.MinecraftArguments ?? target.MinecraftArguments;  						version.Natives.AddRange(target.Natives);  						version.Libraries.AddRange(target.Libraries);  					}  				}  				version.JarId = version.JarId ?? version.Id;  				_versions.Add(version.Id' version);  				return version;  			}  			catch  			{  				return null;  			}  			finally  			{  				_locatingVersion.Remove(id);  			}
Magic Number,KMCCC.Modules.JVersion,JVersionLocator,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\JVersion\JVersionLocator.cs,GetVersionInternal,The following statement contains a magic number: try  			{  				if (_locatingVersion.Contains(id))  				{  					return null;  				}  				_locatingVersion.Add(id);    				Version version;  				if (_versions.TryGetValue(id' out version))  				{  					return version;  				}    				var jver = LoadVersion(_core.GetVersionJsonPath(id));  				if (jver == null)  				{  					return null;  				}    				version = new Version();  				if (string.IsNullOrWhiteSpace(jver.Id))  				{  					return null;  				}                  if (jver.arguments == null && string.IsNullOrWhiteSpace(jver.MinecraftArguments))                  {                      return null;                  }  				if (string.IsNullOrWhiteSpace(jver.MainClass))  				{  					return null;  				}  				if (string.IsNullOrWhiteSpace(jver.Assets))  				{  					jver.Assets = "legacy";  				}  				if (jver.Libraries == null)  				{  					return null;  				}  				version.Id = jver.Id;                  version.MinecraftArguments = jver.MinecraftArguments ?? UsefulTools.PrintfArray(jver.arguments.game);                  version.Assets = jver.Assets;  				version.MainClass = jver.MainClass;  				version.JarId = jver.JarId;  				version.Libraries = new List<Library>();  				version.Natives = new List<Native>();  				foreach (var lib in jver.Libraries)  				{  					if (string.IsNullOrWhiteSpace(lib.Name))  					{  						continue;  					}  					var names = lib.Name.Split(':');  					if (names.Length != 3)  					{  						continue;  					}  					if (lib.Natives == null)  					{  						if (!IfAllowed(lib.Rules))  						{  							continue;  						}  						version.Libraries.Add(new Library  						{  							NS = names[0]'  							Name = names[1]'  							Version = names[2]  						});  					}  					else  					{  						if (!IfAllowed(lib.Rules))  						{  							continue;  						}  						var native = new Native  						{  							NS = names[0]'  							Name = names[1]'  							Version = names[2]'  							NativeSuffix = lib.Natives["windows"].Replace("${arch}"' SystemTools.GetArch())  						};  						version.Natives.Add(native);  						if (lib.Extract != null)  						{  							native.Options = new UnzipOptions {Exclude = lib.Extract.Exculde};  						}  					}  				}  				if (jver.InheritsVersion != null)  				{  					var target = GetVersionInternal(jver.InheritsVersion);  					if (target == null)  					{  						return null;  					}  					else  					{                          if (version.Assets == "legacy")                              version.Assets = null;                          version.Assets = version.Assets ?? target.Assets;  						version.JarId = version.JarId ?? target.JarId;  						version.MainClass = version.MainClass ?? target.MainClass;  						version.MinecraftArguments = version.MinecraftArguments ?? target.MinecraftArguments;  						version.Natives.AddRange(target.Natives);  						version.Libraries.AddRange(target.Libraries);  					}  				}  				version.JarId = version.JarId ?? version.Id;  				_versions.Add(version.Id' version);  				return version;  			}  			catch  			{  				return null;  			}  			finally  			{  				_locatingVersion.Remove(id);  			}
Magic Number,KMCCC.Modules.JVersion,JVersionLocator,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\JVersion\JVersionLocator.cs,GetVersionInternal,The following statement contains a magic number: try  			{  				if (_locatingVersion.Contains(id))  				{  					return null;  				}  				_locatingVersion.Add(id);    				Version version;  				if (_versions.TryGetValue(id' out version))  				{  					return version;  				}    				var jver = LoadVersion(_core.GetVersionJsonPath(id));  				if (jver == null)  				{  					return null;  				}    				version = new Version();  				if (string.IsNullOrWhiteSpace(jver.Id))  				{  					return null;  				}                  if (jver.arguments == null && string.IsNullOrWhiteSpace(jver.MinecraftArguments))                  {                      return null;                  }  				if (string.IsNullOrWhiteSpace(jver.MainClass))  				{  					return null;  				}  				if (string.IsNullOrWhiteSpace(jver.Assets))  				{  					jver.Assets = "legacy";  				}  				if (jver.Libraries == null)  				{  					return null;  				}  				version.Id = jver.Id;                  version.MinecraftArguments = jver.MinecraftArguments ?? UsefulTools.PrintfArray(jver.arguments.game);                  version.Assets = jver.Assets;  				version.MainClass = jver.MainClass;  				version.JarId = jver.JarId;  				version.Libraries = new List<Library>();  				version.Natives = new List<Native>();  				foreach (var lib in jver.Libraries)  				{  					if (string.IsNullOrWhiteSpace(lib.Name))  					{  						continue;  					}  					var names = lib.Name.Split(':');  					if (names.Length != 3)  					{  						continue;  					}  					if (lib.Natives == null)  					{  						if (!IfAllowed(lib.Rules))  						{  							continue;  						}  						version.Libraries.Add(new Library  						{  							NS = names[0]'  							Name = names[1]'  							Version = names[2]  						});  					}  					else  					{  						if (!IfAllowed(lib.Rules))  						{  							continue;  						}  						var native = new Native  						{  							NS = names[0]'  							Name = names[1]'  							Version = names[2]'  							NativeSuffix = lib.Natives["windows"].Replace("${arch}"' SystemTools.GetArch())  						};  						version.Natives.Add(native);  						if (lib.Extract != null)  						{  							native.Options = new UnzipOptions {Exclude = lib.Extract.Exculde};  						}  					}  				}  				if (jver.InheritsVersion != null)  				{  					var target = GetVersionInternal(jver.InheritsVersion);  					if (target == null)  					{  						return null;  					}  					else  					{                          if (version.Assets == "legacy")                              version.Assets = null;                          version.Assets = version.Assets ?? target.Assets;  						version.JarId = version.JarId ?? target.JarId;  						version.MainClass = version.MainClass ?? target.MainClass;  						version.MinecraftArguments = version.MinecraftArguments ?? target.MinecraftArguments;  						version.Natives.AddRange(target.Natives);  						version.Libraries.AddRange(target.Libraries);  					}  				}  				version.JarId = version.JarId ?? version.Id;  				_versions.Add(version.Id' version);  				return version;  			}  			catch  			{  				return null;  			}  			finally  			{  				_locatingVersion.Remove(id);  			}
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,Ping,The following statement contains a magic number: WriteVarInt(47);
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,Ping,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,ReadVarInt,The following statement contains a magic number: while (((b = ReadByte(buffer)) & 0x80) == 0x80)              {                  value |= (b & 0x7F) << (size++ * 7);                  if (size > 5)                  {                      throw new IOException("This VarInt is an imposter!");                  }              }
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,ReadVarInt,The following statement contains a magic number: while (((b = ReadByte(buffer)) & 0x80) == 0x80)              {                  value |= (b & 0x7F) << (size++ * 7);                  if (size > 5)                  {                      throw new IOException("This VarInt is an imposter!");                  }              }
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,ReadVarInt,The following statement contains a magic number: return value | ((b & 0x7F) << (size * 7));
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,WriteVarInt,The following statement contains a magic number: while ((value & 128) != 0)              {                  _buffer.Add((byte)(value & 127 | 128));                  value = (int)((uint)value) >> 7;              }
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,WriteVarInt,The following statement contains a magic number: while ((value & 128) != 0)              {                  _buffer.Add((byte)(value & 127 | 128));                  value = (int)((uint)value) >> 7;              }
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,WriteVarInt,The following statement contains a magic number: while ((value & 128) != 0)              {                  _buffer.Add((byte)(value & 127 | 128));                  value = (int)((uint)value) >> 7;              }
Magic Number,KMCCC.Modules.Minecraft,MinecraftPing,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Minecraft\MinecraftPing.cs,WriteVarInt,The following statement contains a magic number: while ((value & 128) != 0)              {                  _buffer.Add((byte)(value & 127 | 128));                  value = (int)((uint)value) >> 7;              }
Magic Number,KMCCC.Modules.Yggdrasil,YggdrasilClient,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Yggdrasil\YggdrasilClient.cs,AuthToken,The following statement contains a magic number: lock (_locker)              {                  Clear();                  if(string.IsNullOrWhiteSpace(displayName)) return new Exception("displayName为空");                  try                  {                      WebRequest Http = WebRequest.Create(Auth_Validate);                      Http.Method = "POST";                      Http.ContentType = "application/json";                      Http.Timeout = 100000;                      var requestBody = JsonMapper.ToJson(new ValidateRequest                      {                          AccessToken = accessToken.ToString("N")'                          ClientToken = ClientToken.ToString("N")'                      });                      byte[] postdata = Encoding.UTF8.GetBytes(requestBody);                      Http.GetRequestStream().Write(postdata' 0' postdata.Length);                        using (HttpWebResponse hwr = (HttpWebResponse)Http.GetResponse())                      {                          if (Convert.ToInt32(hwr.StatusCode) == 204)                          {                              var LoginInfo = new AuthenticationResponse()                              {                                  AccessToken = accessToken.ToString("N")'                                  ClientToken = ClientToken.ToString("N")'                                  SelectedProfile = new GameProfile()                                  {                                      Id = uuid.ToString("N")'                                      Name = displayName                                  }                              };                              UpdateFomrResponse(LoginInfo);                              return null;                          }                          else                          {                              StreamReader sr = new StreamReader(hwr.GetResponseStream());                              var response = JsonMapper.ToObject<Error>(sr.ReadToEnd());                              return new Exception(response.ErrorMessage);                          }                      }                     }                    catch (WebException ex)                  {                      try                      {                          using (StreamReader sr = new StreamReader(((HttpWebResponse)ex.Response).GetResponseStream()' true))                          {                              var ErrorJson = JsonMapper.ToObject<Error>(sr.ReadToEnd());                              return new Exception(ErrorJson.ErrorMessage);                          }                      }                      catch                      {                          return ex;                      }                  }              }
Magic Number,KMCCC.Modules.Yggdrasil,YggdrasilClient,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Modules\Yggdrasil\YggdrasilClient.cs,AuthToken,The following statement contains a magic number: lock (_locker)              {                  Clear();                  if(string.IsNullOrWhiteSpace(displayName)) return new Exception("displayName为空");                  try                  {                      WebRequest Http = WebRequest.Create(Auth_Validate);                      Http.Method = "POST";                      Http.ContentType = "application/json";                      Http.Timeout = 100000;                      var requestBody = JsonMapper.ToJson(new ValidateRequest                      {                          AccessToken = accessToken.ToString("N")'                          ClientToken = ClientToken.ToString("N")'                      });                      byte[] postdata = Encoding.UTF8.GetBytes(requestBody);                      Http.GetRequestStream().Write(postdata' 0' postdata.Length);                        using (HttpWebResponse hwr = (HttpWebResponse)Http.GetResponse())                      {                          if (Convert.ToInt32(hwr.StatusCode) == 204)                          {                              var LoginInfo = new AuthenticationResponse()                              {                                  AccessToken = accessToken.ToString("N")'                                  ClientToken = ClientToken.ToString("N")'                                  SelectedProfile = new GameProfile()                                  {                                      Id = uuid.ToString("N")'                                      Name = displayName                                  }                              };                              UpdateFomrResponse(LoginInfo);                              return null;                          }                          else                          {                              StreamReader sr = new StreamReader(hwr.GetResponseStream());                              var response = JsonMapper.ToObject<Error>(sr.ReadToEnd());                              return new Exception(response.ErrorMessage);                          }                      }                     }                    catch (WebException ex)                  {                      try                      {                          using (StreamReader sr = new StreamReader(((HttpWebResponse)ex.Response).GetResponseStream()' true))                          {                              var ErrorJson = JsonMapper.ToObject<Error>(sr.ReadToEnd());                              return new Exception(ErrorJson.ErrorMessage);                          }                      }                      catch                      {                          return ex;                      }                  }              }
Magic Number,KMCCC.Tools,SystemTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\SystemTools.cs,GetRunmemory,The following statement contains a magic number: return ComputerMemory.AvailablePhysicalMemory / 1048576;
Magic Number,KMCCC.Tools,SystemTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\SystemTools.cs,GetIntPtrFromInt,The following statement contains a magic number: if (GetArch() == "64")              {                  ptr2 = Marshal.AllocHGlobal(8);              }              else              {                  ptr2 = Marshal.AllocHGlobal(4);              }
Magic Number,KMCCC.Tools,SystemTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\SystemTools.cs,GetIntPtrFromInt,The following statement contains a magic number: if (GetArch() == "64")              {                  ptr2 = Marshal.AllocHGlobal(8);              }              else              {                  ptr2 = Marshal.AllocHGlobal(4);              }
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,GetPlayerUuid,The following statement contains a magic number: uuidBytes[6] &= 0x0f;
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,GetPlayerUuid,The following statement contains a magic number: uuidBytes[6] |= 0x30;
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,GetPlayerUuid,The following statement contains a magic number: uuidBytes[8] &= 0x3f;
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,GetPlayerUuid,The following statement contains a magic number: uuidBytes[8] |= 0x80;
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: for (int i = 0; i < 8; i++)                  msb = (msb << 8) | (data[i] & 0xff);
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: for (int i = 0; i < 8; i++)                  msb = (msb << 8) | (data[i] & 0xff);
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  lsb = (lsb << 8) | (data[i] & 0xff);
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  lsb = (lsb << 8) | (data[i] & 0xff);
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: for (int i = 8; i < 16; i++)                  lsb = (lsb << 8) | (data[i] & 0xff);
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,toUuidString,The following statement contains a magic number: return (digits(msb >> 32' 8) + "-" +                  digits(msb >> 16' 4) + "-" +                  digits(msb' 4) + "-" +                  digits(lsb >> 48' 4) + "-" +                  digits(lsb' 12));
Magic Number,KMCCC.Tools,UsefulTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\UsefulTools.cs,digits,The following statement contains a magic number: long hi = 1L << (digits * 4);
Magic Number,KMCCC.Tools,ZipTools,C:\repos\MineStudio_KMCCC\KMCCC.Shared\Tools\ZipTools.cs,UnzipFile,The following statement contains a magic number: try  			{  				var root = new DirectoryInfo(outputDirectory);  				root.Create();  				var rootPath = root.FullName + "/";  				using (var zip = (IDisposable) ZipArchive_OpenOnFile.Invoke(null' new object[] {zipFile' FileMode.Open' FileAccess.Read' FileShare.Read' false}))  				{  					var ioManager = ZipArchive_ZipIOBlockManager.GetValue(zip);  					ZipIOBlockManager_Encoding.SetValue(ioManager' new WarpedEncoding(options.Encoding ?? Encoding.Default));    					var files = (IEnumerable) ZipArchive_GetFiles.Invoke(zip' new object[] {});  					IEnumerable<string> exclude = (options.Exclude ?? new List<string>());  					if (exclude.Count() > 1000)  					{  						exclude = exclude.AsParallel();  					}    					foreach (var item in files)  					{  						var name = (string) ZipFileInfo_Name.GetValue(item' null);  						if (exclude.Any(name.StartsWith))  						{  							continue;  						}  						if ((bool) ZipFileInfo_FolderFlag.GetValue(item' null))  						{  							Directory.CreateDirectory(rootPath + name);  							continue;  						}  						using (var stream = (Stream) ZipFileInfo_GetStream.Invoke(item' new object[] {FileMode.Open' FileAccess.Read}))  						{  							var filePath = rootPath + name;  							var directoryInfo = new FileInfo(filePath).Directory;  							if (directoryInfo != null) directoryInfo.Create();  							using (var fs = new FileStream(filePath' FileMode.Create))  							{  								stream.CopyTo(fs);  							}  						}  					}  				}  				return null;  			}  			catch (Exception exp)  			{  				return exp;  			}
Missing Default,LitJson,JsonData,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonData.cs,Equals,The following switch statement is missing a default case: switch (this.type) {              case JsonType.None:                  return true;                case JsonType.Object:                  return this.inst_object.Equals (x.inst_object);                case JsonType.Array:                  return this.inst_array.Equals (x.inst_array);                case JsonType.String:                  return this.inst_string.Equals (x.inst_string);                case JsonType.Int:                  return this.inst_int.Equals (x.inst_int);                case JsonType.Long:                  return this.inst_long.Equals (x.inst_long);                case JsonType.Double:                  return this.inst_double.Equals (x.inst_double);                case JsonType.Boolean:                  return this.inst_boolean.Equals (x.inst_boolean);              }
Missing Default,LitJson,JsonData,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonData.cs,SetJsonType,The following switch statement is missing a default case: switch (type) {              case JsonType.None:                  break;                case JsonType.Object:                  inst_object = new Dictionary<string' JsonData> ();                  object_list = new List<KeyValuePair<string' JsonData>> ();                  break;                case JsonType.Array:                  inst_array = new List<JsonData> ();                  break;                case JsonType.String:                  inst_string = default (String);                  break;                case JsonType.Int:                  inst_int = default (Int32);                  break;                case JsonType.Long:                  inst_long = default (Int64);                  break;                case JsonType.Double:                  inst_double = default (Double);                  break;                case JsonType.Boolean:                  inst_boolean = default (Boolean);                  break;              }
Missing Default,LitJson,JsonData,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonData.cs,ToString,The following switch statement is missing a default case: switch (type) {              case JsonType.Array:                  return "JsonData array";                case JsonType.Boolean:                  return inst_boolean.ToString ();                case JsonType.Double:                  return inst_double.ToString ();                case JsonType.Int:                  return inst_int.ToString ();                case JsonType.Long:                  return inst_long.ToString ();                case JsonType.Object:                  return "JsonData object";                case JsonType.String:                  return inst_string;              }
Missing Default,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,DoValidation,The following switch statement is missing a default case: switch (cond) {              case Condition.InArray:                  if (! context.InArray)                      throw new JsonException (                          "Can't close an array here");                  break;                case Condition.InObject:                  if (! context.InObject || context.ExpectingValue)                      throw new JsonException (                          "Can't close an object here");                  break;                case Condition.NotAProperty:                  if (context.InObject && ! context.ExpectingValue)                      throw new JsonException (                          "Expected a property");                  break;                case Condition.Property:                  if (! context.InObject || context.ExpectingValue)                      throw new JsonException (                          "Can't add a property here");                  break;                case Condition.Value:                  if (! context.InArray &&                      (! context.InObject || ! context.ExpectingValue))                      throw new JsonException (                          "Can't add a value here");                    break;              }
Missing Default,LitJson,JsonWriter,C:\repos\MineStudio_KMCCC\KMCCC.Shared\LitJson\JsonWriter.cs,PutString,The following switch statement is missing a default case: switch (str[i]) {                  case '\n':                      writer.Write ("\\n");                      continue;                    case '\r':                      writer.Write ("\\r");                      continue;                    case '\t':                      writer.Write ("\\t");                      continue;                    case '"':                  case '\\':                      writer.Write ('\\');                      writer.Write (str[i]);                      continue;                    case '\f':                      writer.Write ("\\f");                      continue;                    case '\b':                      writer.Write ("\\b");                      continue;                  }
