Implementation smell,Namespace,Class,File,Method,Description
Long Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Set,The method has 170 lines of code.
Complex Method,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,Cyclomatic complexity of the method is 33
Complex Method,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,Cyclomatic complexity of the method is 9
Complex Method,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crcbitbybit,Cyclomatic complexity of the method is 9
Complex Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Delete,Cyclomatic complexity of the method is 11
Complex Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Set,Cyclomatic complexity of the method is 26
Complex Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,IncrementOrDecrement,Cyclomatic complexity of the method is 8
Complex Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,GetMultiple,Cyclomatic complexity of the method is 12
Complex Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,Cyclomatic complexity of the method is 16
Complex Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,FlushAll,Cyclomatic complexity of the method is 11
Complex Method,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Stats,Cyclomatic complexity of the method is 17
Complex Method,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,TrueClose,Cyclomatic complexity of the method is 8
Complex Method,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ReadLine,Cyclomatic complexity of the method is 8
Complex Method,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,Initialize,Cyclomatic complexity of the method is 17
Complex Method,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,CreateSocket,Cyclomatic complexity of the method is 12
Complex Method,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,GetSock,Cyclomatic complexity of the method is 35
Complex Method,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,GetConnection,Cyclomatic complexity of the method is 14
Complex Method,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,SelfMaintain,Cyclomatic complexity of the method is 22
Long Parameter List,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Set,The method has 6 parameters.
Long Parameter List,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,SockIO,The method has 6 parameters.
Long Parameter List,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,SockIO,The method has 5 parameters.
Long Statement,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Set,The length of the statement  "					log.Info (GetLocalizedString ("set store data as string").Replace ("$$Key$$"' key).Replace ("$$Class$$"' obj.GetType ().Name)); " is 127.
Long Statement,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Set,The length of the statement  "				log.Info (GetLocalizedString ("set compression success").Replace ("$$Size$$"' length.ToString (new NumberFormatInfo ()))); " is 122.
Long Statement,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Set,The length of the statement  "				log.Error (GetLocalizedString ("set error").Replace ("$$Key$$"' key).Replace ("$$Size$$"' length.ToString (new NumberFormatInfo ())).Replace ("$$Line$$"' line)); " is 161.
Long Statement,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Get,The length of the statement  "			log.Debug (GetLocalizedString ("get memcached result").Replace ("$$Results$$"' hm.Count.ToString (new NumberFormatInfo ()))); " is 125.
Long Statement,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,GetMultiple,The length of the statement  "		log.Info (GetLocalizedString ("getmultiple socket count").Replace ("$$Sockets$$"' sockKeys.Count.ToString (new NumberFormatInfo ()))); " is 134.
Long Statement,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,GetMultiple,The length of the statement  "		log.Debug (GetLocalizedString ("getmultiple results").Replace ("$$Results$$"' ret.Count.ToString (new NumberFormatInfo ()))); " is 125.
Long Statement,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The length of the statement  "				log.Debug (GetLocalizedString ("loaditems header").Replace ("$$Key$$"' key).Replace ("$$Flags$$"' flag.ToString (new NumberFormatInfo ())).Replace ("$$Length$$"' length.ToString (new NumberFormatInfo ()))); " is 206.
Long Statement,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,IsHandled,The length of the statement  "	if (value is bool || value is byte || value is string || value is char || value is StringBuilder || value is short || value is long || value is double || value is float || value is DateTime || value is Int32) { " is 210.
Long Statement,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The length of the statement  "	return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56); " is 149.
Long Statement,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The length of the statement  "	return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56); " is 292.
Long Statement,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,GetSocket,The length of the statement  "	throw new IOException (GetLocalizedString ("connect timeout").Replace ("$$timeout$$"' timeout.ToString (new System.Globalization.NumberFormatInfo ()))); " is 152.
Long Statement,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,TrueClose,The length of the statement  "		Log.Debug (GetLocalizedString ("true close socket").Replace ("$$Socket$$"' ToString ()).Replace ("$$Lifespan$$"' DateTime.Now.Subtract (_created).ToString ())); " is 160.
Long Statement,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,TrueClose,The length of the statement  "				Log.Error (GetLocalizedString ("error closing socket").Replace ("$$ToString$$"' ToString ()).Replace ("$$Host$$"' Host)' ioe); " is 126.
Long Statement,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,TrueClose,The length of the statement  "			errMsg.Append (GetLocalizedString ("error closing socket").Replace ("$$ToString$$"' ToString ()).Replace ("$$Host$$"' Host) + System.Environment.NewLine); " is 154.
Long Statement,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,TrueClose,The length of the statement  "				Log.Error (GetLocalizedString ("error closing socket").Replace ("$$ToString$$"' ToString ()).Replace ("$$Host$$"' Host)' soe); " is 126.
Long Statement,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,TrueClose,The length of the statement  "			errMsg.Append (GetLocalizedString ("error closing socket").Replace ("$$ToString$$"' ToString ()).Replace ("$$Host$$"' Host) + System.Environment.NewLine); " is 154.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,Initialize,The length of the statement  "		Log.Debug (GetLocalizedString ("initializing pool").Replace ("$$InitConnections$$"' InitConnections.ToString (new NumberFormatInfo ())).Replace ("$$MinConnections$$"' MinConnections.ToString (new NumberFormatInfo ())).Replace ("$$MaxConnections$$"' MaxConnections.ToString (new NumberFormatInfo ()))); " is 301.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,Initialize,The length of the statement  "			Log.Debug (GetLocalizedString ("create initial connections").Replace ("$$InitConns$$"' InitConnections.ToString (new NumberFormatInfo ())).Replace ("$$Servers[i]$$"' Servers [i].ToString ())); " is 192.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,Initialize,The length of the statement  "					Log.Error (GetLocalizedString ("failed to connect").Replace ("$$Servers[i]$$"' Servers [i].ToString ()).Replace ("$$j$$"' j.ToString (new NumberFormatInfo ()))); " is 161.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,Initialize,The length of the statement  "				Log.Debug (GetLocalizedString ("created and added socket").Replace ("$$ToString$$"' socket.ToString ()).Replace ("$$Servers[i]$$"' Servers [i].ToString ())); " is 157.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,CreateSocket,The length of the statement  "			Log.Debug (GetLocalizedString ("ignoring dead host").Replace ("$$Host$$"' host).Replace ("$$Expire$$"' expire.ToString (new NumberFormatInfo ()))); " is 147.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,CreateSocket,The length of the statement  "			Log.Debug (GetLocalizedString ("created socket").Replace ("$$ToString$$"' socket.ToString ()).Replace ("$$Host$$"' host)); " is 122.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,GetSock,The length of the statement  "			Log.Debug (GetLocalizedString ("cache choose").Replace ("$$Bucket$$"' _buckets [bucket].ToString ()).Replace ("$$Key$$"' key)); " is 127.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,GetConnection,The length of the statement  "						Log.Error (GetLocalizedString ("socket not connected").Replace ("$$Host$$"' host).Replace ("$$Socket$$"' socket.ToString ())); " is 126.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,ClosePool,The length of the statement  "					Log.Error (GetLocalizedString ("failed to true close").Replace ("$$ToString$$"' socket.ToString ()).Replace ("$$Host$$"' host)' ioe); " is 133.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,SelfMaintain,The length of the statement  "			Log.Debug (GetLocalizedString ("size of available pool").Replace ("$$Host$$"' host).Replace ("$$Sockets$$"' sockets.Count.ToString (new NumberFormatInfo ()))); " is 159.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,SelfMaintain,The length of the statement  "				Log.Debug (GetLocalizedString ("need to create new sockets").Replace ("$$Need$$"' need.ToString (new NumberFormatInfo ())).Replace ("$$Host$$"' host)); " is 151.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,SelfMaintain,The length of the statement  "				Log.Debug (GetLocalizedString ("need to remove spare sockets").Replace ("$$NeedToClose$$"' needToClose.ToString (new NumberFormatInfo ()).Replace ("$$Host$$"' host))); " is 167.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,SelfMaintain,The length of the statement  "			Log.Debug (GetLocalizedString ("size of busy pool").Replace ("$$Host$$"' host).Replace ("$$Sockets$$"' sockets.Count.ToString (new NumberFormatInfo ()))); " is 154.
Long Statement,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,SelfMaintain,The length of the statement  "					Log.Error (GetLocalizedString ("removing hung connection").Replace ("$$Time$$"' (new TimeSpan (DateTime.Now.Ticks - hungTime.Ticks).TotalMilliseconds).ToString (new NumberFormatInfo ()))); " is 188.
Complex Conditional,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Set,The conditional expression  "cmdname == null || cmdname.Trim ().Length == 0 || key == null || key.Length == 0"  is complex.
Complex Conditional,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,IsHandled,The conditional expression  "value is bool || value is byte || value is string || value is char || value is StringBuilder || value is short || value is long || value is double || value is float || value is DateTime || value is Int32"  is complex.
Complex Conditional,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,Initialize,The conditional expression  "_initialized && _buckets != null && _availPool != null && _busyPool != null"  is complex.
Empty Catch Block,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,GetSocket,The method has an empty catch block.
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,The following statement contains a magic number: switch (CodingType) {  case CRCCode.CRC_CCITT:  	order = 16;  	direct = 1;  	polynom = 0x1021;  	crcinit = 0xFFFF;  	crcxor = 0;  	refin = 0;  	refout = 0;  	break;  case CRCCode.CRC16:  	order = 16;  	direct = 1;  	polynom = 0x8005;  	crcinit = 0x0;  	crcxor = 0x0;  	refin = 1;  	refout = 1;  	break;  case CRCCode.CRC32:  	order = 32;  	direct = 1;  	polynom = 0x4c11db7;  	crcinit = 0xFFFFFFFF;  	crcxor = 0xFFFFFFFF;  	refin = 1;  	refout = 1;  	break;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,The following statement contains a magic number: switch (CodingType) {  case CRCCode.CRC_CCITT:  	order = 16;  	direct = 1;  	polynom = 0x1021;  	crcinit = 0xFFFF;  	crcxor = 0;  	refin = 0;  	refout = 0;  	break;  case CRCCode.CRC16:  	order = 16;  	direct = 1;  	polynom = 0x8005;  	crcinit = 0x0;  	crcxor = 0x0;  	refin = 1;  	refout = 1;  	break;  case CRCCode.CRC32:  	order = 32;  	direct = 1;  	polynom = 0x4c11db7;  	crcinit = 0xFFFFFFFF;  	crcxor = 0xFFFFFFFF;  	refin = 1;  	refout = 1;  	break;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,The following statement contains a magic number: switch (CodingType) {  case CRCCode.CRC_CCITT:  	order = 16;  	direct = 1;  	polynom = 0x1021;  	crcinit = 0xFFFF;  	crcxor = 0;  	refin = 0;  	refout = 0;  	break;  case CRCCode.CRC16:  	order = 16;  	direct = 1;  	polynom = 0x8005;  	crcinit = 0x0;  	crcxor = 0x0;  	refin = 1;  	refout = 1;  	break;  case CRCCode.CRC32:  	order = 32;  	direct = 1;  	polynom = 0x4c11db7;  	crcinit = 0xFFFFFFFF;  	crcxor = 0xFFFFFFFF;  	refin = 1;  	refout = 1;  	break;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,The following statement contains a magic number: order = 16;  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,The following statement contains a magic number: order = 16;  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,The following statement contains a magic number: order = 32;  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < p.Length; i++) {  		crc = (crc << 8) ^ crctab [((crc >> (order - 8)) & 0xff) ^ p [i]];  	}  }  else {  	for (int i = 0; i < p.Length; i++) {  		crc = (crc >> 8) ^ crctab [(crc & 0xff) ^ p [i]];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < p.Length; i++) {  		crc = (crc << 8) ^ crctab [((crc >> (order - 8)) & 0xff) ^ p [i]];  	}  }  else {  	for (int i = 0; i < p.Length; i++) {  		crc = (crc >> 8) ^ crctab [(crc & 0xff) ^ p [i]];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < p.Length; i++) {  		crc = (crc << 8) ^ crctab [((crc >> (order - 8)) & 0xff) ^ p [i]];  	}  }  else {  	for (int i = 0; i < p.Length; i++) {  		crc = (crc >> 8) ^ crctab [(crc & 0xff) ^ p [i]];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: for (int i = 0; i < p.Length; i++) {  	crc = (crc << 8) ^ crctab [((crc >> (order - 8)) & 0xff) ^ p [i]];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: for (int i = 0; i < p.Length; i++) {  	crc = (crc << 8) ^ crctab [((crc >> (order - 8)) & 0xff) ^ p [i]];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: crc = (crc << 8) ^ crctab [((crc >> (order - 8)) & 0xff) ^ p [i]];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: crc = (crc << 8) ^ crctab [((crc >> (order - 8)) & 0xff) ^ p [i]];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: for (int i = 0; i < p.Length; i++) {  	crc = (crc >> 8) ^ crctab [(crc & 0xff) ^ p [i]];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctablefast,The following statement contains a magic number: crc = (crc >> 8) ^ crctab [(crc & 0xff) ^ p [i]];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < p.Length; i++) {  		crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < p.Length; i++) {  		crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < p.Length; i++) {  		crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < p.Length; i++) {  		crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < p.Length; i++) {  		crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < p.Length; i++) {  		crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < p.Length; i++) {  		crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < p.Length; i++) {  		crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < p.Length; i++) {  	crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < p.Length; i++) {  	crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: crc = ((crc << 8) | p [i]) ^ crctab [(crc >> (order - 8)) & 0xff];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < p.Length; i++) {  	crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < p.Length; i++) {  	crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: crc = (ulong)(((int)(crc >> 8) | (p [i] << (order - 8))) ^ (int)crctab [crc & 0xff]);  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc >> 8) ^ crctab [crc & 0xff];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc >> 8) ^ crctab [crc & 0xff];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc >> 8) ^ crctab [crc & 0xff];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc >> 8) ^ crctab [crc & 0xff];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: if (refin == 0) {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  	}  }  else {  	for (int i = 0; i < order / 8; i++) {  		crc = (crc >> 8) ^ crctab [crc & 0xff];  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < order / 8; i++) {  	crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < order / 8; i++) {  	crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < order / 8; i++) {  	crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: crc = (crc << 8) ^ crctab [(crc >> (order - 8)) & 0xff];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < order / 8; i++) {  	crc = (crc >> 8) ^ crctab [crc & 0xff];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: for (int i = 0; i < order / 8; i++) {  	crc = (crc >> 8) ^ crctab [crc & 0xff];  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crctable,The following statement contains a magic number: crc = (crc >> 8) ^ crctab [crc & 0xff];  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crcbitbybit,The following statement contains a magic number: for (i = 0; i < p.Length; i++) {  	c = (ulong)p [i];  	if (refin != 0) {  		c = reflect (c' 8);  	}  	for (j = 0x80; j != 0; j >>= 1) {  		bit = crc & crchighbit;  		crc <<= 1;  		if ((c & j) != 0) {  			crc |= 1;  		}  		if (bit != 0) {  			crc ^= polynom;  		}  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crcbitbybit,The following statement contains a magic number: if (refin != 0) {  	c = reflect (c' 8);  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crcbitbybit,The following statement contains a magic number: c = reflect (c' 8);  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crcbitbybitfast,The following statement contains a magic number: for (i = 0; i < p.Length; i++) {  	c = (ulong)p [i];  	if (refin != 0) {  		c = reflect (c' 8);  	}  	for (j = 0x80; j > 0; j >>= 1) {  		bit = crc & crchighbit;  		crc <<= 1;  		if ((c & j) > 0)  			bit ^= crchighbit;  		if (bit > 0)  			crc ^= polynom;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crcbitbybitfast,The following statement contains a magic number: if (refin != 0) {  	c = reflect (c' 8);  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,crcbitbybitfast,The following statement contains a magic number: c = reflect (c' 8);  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,CalcCRCITT,The following statement contains a magic number: for (int iBufferIndex = 0; iBufferIndex < p.Length; iBufferIndex++) {  	uiByteValue = ((uint)p [iBufferIndex] << 8);  	for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++) {  		if (((uiCRCITTSum ^ uiByteValue) & 0x8000) != 0) {  			uiCRCITTSum = (uiCRCITTSum << 1) ^ 0x1021;  		}  		else {  			uiCRCITTSum <<= 1;  		}  		uiByteValue <<= 1;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,CalcCRCITT,The following statement contains a magic number: for (int iBufferIndex = 0; iBufferIndex < p.Length; iBufferIndex++) {  	uiByteValue = ((uint)p [iBufferIndex] << 8);  	for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++) {  		if (((uiCRCITTSum ^ uiByteValue) & 0x8000) != 0) {  			uiCRCITTSum = (uiCRCITTSum << 1) ^ 0x1021;  		}  		else {  			uiCRCITTSum <<= 1;  		}  		uiByteValue <<= 1;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,CalcCRCITT,The following statement contains a magic number: uiByteValue = ((uint)p [iBufferIndex] << 8);  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,CalcCRCITT,The following statement contains a magic number: for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++) {  	if (((uiCRCITTSum ^ uiByteValue) & 0x8000) != 0) {  		uiCRCITTSum = (uiCRCITTSum << 1) ^ 0x1021;  	}  	else {  		uiCRCITTSum <<= 1;  	}  	uiByteValue <<= 1;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	crc = (ulong)i;  	if (refin != 0) {  		crc = reflect (crc' 8);  	}  	crc <<= order - 8;  	for (j = 0; j < 8; j++) {  		bit = crc & crchighbit;  		crc <<= 1;  		if (bit != 0)  			crc ^= polynom;  	}  	if (refin != 0) {  		crc = reflect (crc' order);  	}  	crc &= crcmask;  	crctab [i] = crc;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	crc = (ulong)i;  	if (refin != 0) {  		crc = reflect (crc' 8);  	}  	crc <<= order - 8;  	for (j = 0; j < 8; j++) {  		bit = crc & crchighbit;  		crc <<= 1;  		if (bit != 0)  			crc ^= polynom;  	}  	if (refin != 0) {  		crc = reflect (crc' order);  	}  	crc &= crcmask;  	crctab [i] = crc;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	crc = (ulong)i;  	if (refin != 0) {  		crc = reflect (crc' 8);  	}  	crc <<= order - 8;  	for (j = 0; j < 8; j++) {  		bit = crc & crchighbit;  		crc <<= 1;  		if (bit != 0)  			crc ^= polynom;  	}  	if (refin != 0) {  		crc = reflect (crc' order);  	}  	crc &= crcmask;  	crctab [i] = crc;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	crc = (ulong)i;  	if (refin != 0) {  		crc = reflect (crc' 8);  	}  	crc <<= order - 8;  	for (j = 0; j < 8; j++) {  		bit = crc & crchighbit;  		crc <<= 1;  		if (bit != 0)  			crc ^= polynom;  	}  	if (refin != 0) {  		crc = reflect (crc' order);  	}  	crc &= crcmask;  	crctab [i] = crc;  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: if (refin != 0) {  	crc = reflect (crc' 8);  }  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: crc = reflect (crc' 8);  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: crc <<= order - 8;  
Magic Number,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,generate_crc_table,The following statement contains a magic number: for (j = 0; j < 8; j++) {  	bit = crc & crchighbit;  	crc <<= 1;  	if (bit != 0)  		crc ^= polynom;  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Delete,The following statement contains a magic number: if (expiry != DateTime.MaxValue)  	command.Append (" " + GetExpirationTime (expiry) / 1000);  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Delete,The following statement contains a magic number: command.Append (" " + GetExpirationTime (expiry) / 1000);  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: while (true) {  	string line = sock.ReadLine ();  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems line").Replace ("$$Line$$"' line));  	}  	if (line.StartsWith (VALUE)) {  		string[] info = line.Split (' ');  		string key = info [1];  		int flag = int.Parse (info [2]' new NumberFormatInfo ());  		int length = int.Parse (info [3]' new NumberFormatInfo ());  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("loaditems header").Replace ("$$Key$$"' key).Replace ("$$Flags$$"' flag.ToString (new NumberFormatInfo ())).Replace ("$$Length$$"' length.ToString (new NumberFormatInfo ())));  		}  		// read obj into buffer  		byte[] buf = new byte[length];  		sock.Read (buf);  		sock.ClearEndOfLine ();  		// ready object  		object o;  		// check for compression  		if ((flag & F_COMPRESSED) != 0) {  			try {  				// read the input stream' and write to a byte array output stream since  				// we have to read into a byte array' but we don't know how large it  				// will need to be' and we don't want to resize it a bunch  				GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  				MemoryStream bos = new MemoryStream (buf.Length);  				int count;  				byte[] tmp = new byte[2048];  				while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  					bos.Write (tmp' 0' count);  				}  				// store uncompressed back to buffer  				buf = bos.ToArray ();  				gzi.Close ();  			}  			catch (IOException e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  			}  		}  		// we can only take out serialized objects  		if ((flag & F_SERIALIZED) == 0) {  			if (_primitiveAsString || asString) {  				// pulling out string value  				if (log.IsInfoEnabled) {  					log.Info (GetLocalizedString ("loaditems retrieve as string"));  				}  				o = Encoding.GetEncoding (_defaultEncoding).GetString (buf);  			}  			else {  				// decoding object  				try {  					o = NativeHandler.Decode (buf);  				}  				catch (Exception e) {  					if (log.IsErrorEnabled) {  						log.Error (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  					}  					throw new IOException (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  				}  			}  		}  		else {  			// deserialize if the data is serialized  			try {  				MemoryStream memStream = new MemoryStream (buf);  				o = new BinaryFormatter ().Deserialize (memStream);  				if (log.IsInfoEnabled) {  					log.Info (GetLocalizedString ("loaditems deserializing").Replace ("$$Class$$"' o.GetType ().Name));  				}  			}  			catch (SerializationException e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  			}  		}  		// store the object into the cache  		hm [key] = o;  	}  	else if (END == line) {  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("loaditems finished"));  		}  		break;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: while (true) {  	string line = sock.ReadLine ();  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems line").Replace ("$$Line$$"' line));  	}  	if (line.StartsWith (VALUE)) {  		string[] info = line.Split (' ');  		string key = info [1];  		int flag = int.Parse (info [2]' new NumberFormatInfo ());  		int length = int.Parse (info [3]' new NumberFormatInfo ());  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("loaditems header").Replace ("$$Key$$"' key).Replace ("$$Flags$$"' flag.ToString (new NumberFormatInfo ())).Replace ("$$Length$$"' length.ToString (new NumberFormatInfo ())));  		}  		// read obj into buffer  		byte[] buf = new byte[length];  		sock.Read (buf);  		sock.ClearEndOfLine ();  		// ready object  		object o;  		// check for compression  		if ((flag & F_COMPRESSED) != 0) {  			try {  				// read the input stream' and write to a byte array output stream since  				// we have to read into a byte array' but we don't know how large it  				// will need to be' and we don't want to resize it a bunch  				GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  				MemoryStream bos = new MemoryStream (buf.Length);  				int count;  				byte[] tmp = new byte[2048];  				while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  					bos.Write (tmp' 0' count);  				}  				// store uncompressed back to buffer  				buf = bos.ToArray ();  				gzi.Close ();  			}  			catch (IOException e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  			}  		}  		// we can only take out serialized objects  		if ((flag & F_SERIALIZED) == 0) {  			if (_primitiveAsString || asString) {  				// pulling out string value  				if (log.IsInfoEnabled) {  					log.Info (GetLocalizedString ("loaditems retrieve as string"));  				}  				o = Encoding.GetEncoding (_defaultEncoding).GetString (buf);  			}  			else {  				// decoding object  				try {  					o = NativeHandler.Decode (buf);  				}  				catch (Exception e) {  					if (log.IsErrorEnabled) {  						log.Error (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  					}  					throw new IOException (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  				}  			}  		}  		else {  			// deserialize if the data is serialized  			try {  				MemoryStream memStream = new MemoryStream (buf);  				o = new BinaryFormatter ().Deserialize (memStream);  				if (log.IsInfoEnabled) {  					log.Info (GetLocalizedString ("loaditems deserializing").Replace ("$$Class$$"' o.GetType ().Name));  				}  			}  			catch (SerializationException e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  			}  		}  		// store the object into the cache  		hm [key] = o;  	}  	else if (END == line) {  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("loaditems finished"));  		}  		break;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: while (true) {  	string line = sock.ReadLine ();  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems line").Replace ("$$Line$$"' line));  	}  	if (line.StartsWith (VALUE)) {  		string[] info = line.Split (' ');  		string key = info [1];  		int flag = int.Parse (info [2]' new NumberFormatInfo ());  		int length = int.Parse (info [3]' new NumberFormatInfo ());  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("loaditems header").Replace ("$$Key$$"' key).Replace ("$$Flags$$"' flag.ToString (new NumberFormatInfo ())).Replace ("$$Length$$"' length.ToString (new NumberFormatInfo ())));  		}  		// read obj into buffer  		byte[] buf = new byte[length];  		sock.Read (buf);  		sock.ClearEndOfLine ();  		// ready object  		object o;  		// check for compression  		if ((flag & F_COMPRESSED) != 0) {  			try {  				// read the input stream' and write to a byte array output stream since  				// we have to read into a byte array' but we don't know how large it  				// will need to be' and we don't want to resize it a bunch  				GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  				MemoryStream bos = new MemoryStream (buf.Length);  				int count;  				byte[] tmp = new byte[2048];  				while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  					bos.Write (tmp' 0' count);  				}  				// store uncompressed back to buffer  				buf = bos.ToArray ();  				gzi.Close ();  			}  			catch (IOException e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  			}  		}  		// we can only take out serialized objects  		if ((flag & F_SERIALIZED) == 0) {  			if (_primitiveAsString || asString) {  				// pulling out string value  				if (log.IsInfoEnabled) {  					log.Info (GetLocalizedString ("loaditems retrieve as string"));  				}  				o = Encoding.GetEncoding (_defaultEncoding).GetString (buf);  			}  			else {  				// decoding object  				try {  					o = NativeHandler.Decode (buf);  				}  				catch (Exception e) {  					if (log.IsErrorEnabled) {  						log.Error (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  					}  					throw new IOException (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  				}  			}  		}  		else {  			// deserialize if the data is serialized  			try {  				MemoryStream memStream = new MemoryStream (buf);  				o = new BinaryFormatter ().Deserialize (memStream);  				if (log.IsInfoEnabled) {  					log.Info (GetLocalizedString ("loaditems deserializing").Replace ("$$Class$$"' o.GetType ().Name));  				}  			}  			catch (SerializationException e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  			}  		}  		// store the object into the cache  		hm [key] = o;  	}  	else if (END == line) {  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("loaditems finished"));  		}  		break;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: if (line.StartsWith (VALUE)) {  	string[] info = line.Split (' ');  	string key = info [1];  	int flag = int.Parse (info [2]' new NumberFormatInfo ());  	int length = int.Parse (info [3]' new NumberFormatInfo ());  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems header").Replace ("$$Key$$"' key).Replace ("$$Flags$$"' flag.ToString (new NumberFormatInfo ())).Replace ("$$Length$$"' length.ToString (new NumberFormatInfo ())));  	}  	// read obj into buffer  	byte[] buf = new byte[length];  	sock.Read (buf);  	sock.ClearEndOfLine ();  	// ready object  	object o;  	// check for compression  	if ((flag & F_COMPRESSED) != 0) {  		try {  			// read the input stream' and write to a byte array output stream since  			// we have to read into a byte array' but we don't know how large it  			// will need to be' and we don't want to resize it a bunch  			GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  			MemoryStream bos = new MemoryStream (buf.Length);  			int count;  			byte[] tmp = new byte[2048];  			while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  				bos.Write (tmp' 0' count);  			}  			// store uncompressed back to buffer  			buf = bos.ToArray ();  			gzi.Close ();  		}  		catch (IOException e) {  			if (log.IsErrorEnabled) {  				log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  			}  			throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  		}  	}  	// we can only take out serialized objects  	if ((flag & F_SERIALIZED) == 0) {  		if (_primitiveAsString || asString) {  			// pulling out string value  			if (log.IsInfoEnabled) {  				log.Info (GetLocalizedString ("loaditems retrieve as string"));  			}  			o = Encoding.GetEncoding (_defaultEncoding).GetString (buf);  		}  		else {  			// decoding object  			try {  				o = NativeHandler.Decode (buf);  			}  			catch (Exception e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  			}  		}  	}  	else {  		// deserialize if the data is serialized  		try {  			MemoryStream memStream = new MemoryStream (buf);  			o = new BinaryFormatter ().Deserialize (memStream);  			if (log.IsInfoEnabled) {  				log.Info (GetLocalizedString ("loaditems deserializing").Replace ("$$Class$$"' o.GetType ().Name));  			}  		}  		catch (SerializationException e) {  			if (log.IsErrorEnabled) {  				log.Error (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  			}  			throw new IOException (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  		}  	}  	// store the object into the cache  	hm [key] = o;  }  else if (END == line) {  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems finished"));  	}  	break;  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: if (line.StartsWith (VALUE)) {  	string[] info = line.Split (' ');  	string key = info [1];  	int flag = int.Parse (info [2]' new NumberFormatInfo ());  	int length = int.Parse (info [3]' new NumberFormatInfo ());  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems header").Replace ("$$Key$$"' key).Replace ("$$Flags$$"' flag.ToString (new NumberFormatInfo ())).Replace ("$$Length$$"' length.ToString (new NumberFormatInfo ())));  	}  	// read obj into buffer  	byte[] buf = new byte[length];  	sock.Read (buf);  	sock.ClearEndOfLine ();  	// ready object  	object o;  	// check for compression  	if ((flag & F_COMPRESSED) != 0) {  		try {  			// read the input stream' and write to a byte array output stream since  			// we have to read into a byte array' but we don't know how large it  			// will need to be' and we don't want to resize it a bunch  			GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  			MemoryStream bos = new MemoryStream (buf.Length);  			int count;  			byte[] tmp = new byte[2048];  			while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  				bos.Write (tmp' 0' count);  			}  			// store uncompressed back to buffer  			buf = bos.ToArray ();  			gzi.Close ();  		}  		catch (IOException e) {  			if (log.IsErrorEnabled) {  				log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  			}  			throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  		}  	}  	// we can only take out serialized objects  	if ((flag & F_SERIALIZED) == 0) {  		if (_primitiveAsString || asString) {  			// pulling out string value  			if (log.IsInfoEnabled) {  				log.Info (GetLocalizedString ("loaditems retrieve as string"));  			}  			o = Encoding.GetEncoding (_defaultEncoding).GetString (buf);  		}  		else {  			// decoding object  			try {  				o = NativeHandler.Decode (buf);  			}  			catch (Exception e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  			}  		}  	}  	else {  		// deserialize if the data is serialized  		try {  			MemoryStream memStream = new MemoryStream (buf);  			o = new BinaryFormatter ().Deserialize (memStream);  			if (log.IsInfoEnabled) {  				log.Info (GetLocalizedString ("loaditems deserializing").Replace ("$$Class$$"' o.GetType ().Name));  			}  		}  		catch (SerializationException e) {  			if (log.IsErrorEnabled) {  				log.Error (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  			}  			throw new IOException (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  		}  	}  	// store the object into the cache  	hm [key] = o;  }  else if (END == line) {  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems finished"));  	}  	break;  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: if (line.StartsWith (VALUE)) {  	string[] info = line.Split (' ');  	string key = info [1];  	int flag = int.Parse (info [2]' new NumberFormatInfo ());  	int length = int.Parse (info [3]' new NumberFormatInfo ());  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems header").Replace ("$$Key$$"' key).Replace ("$$Flags$$"' flag.ToString (new NumberFormatInfo ())).Replace ("$$Length$$"' length.ToString (new NumberFormatInfo ())));  	}  	// read obj into buffer  	byte[] buf = new byte[length];  	sock.Read (buf);  	sock.ClearEndOfLine ();  	// ready object  	object o;  	// check for compression  	if ((flag & F_COMPRESSED) != 0) {  		try {  			// read the input stream' and write to a byte array output stream since  			// we have to read into a byte array' but we don't know how large it  			// will need to be' and we don't want to resize it a bunch  			GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  			MemoryStream bos = new MemoryStream (buf.Length);  			int count;  			byte[] tmp = new byte[2048];  			while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  				bos.Write (tmp' 0' count);  			}  			// store uncompressed back to buffer  			buf = bos.ToArray ();  			gzi.Close ();  		}  		catch (IOException e) {  			if (log.IsErrorEnabled) {  				log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  			}  			throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  		}  	}  	// we can only take out serialized objects  	if ((flag & F_SERIALIZED) == 0) {  		if (_primitiveAsString || asString) {  			// pulling out string value  			if (log.IsInfoEnabled) {  				log.Info (GetLocalizedString ("loaditems retrieve as string"));  			}  			o = Encoding.GetEncoding (_defaultEncoding).GetString (buf);  		}  		else {  			// decoding object  			try {  				o = NativeHandler.Decode (buf);  			}  			catch (Exception e) {  				if (log.IsErrorEnabled) {  					log.Error (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  				}  				throw new IOException (GetLocalizedString ("loaditems deserialize error").Replace ("$$Key$$"' key)' e);  			}  		}  	}  	else {  		// deserialize if the data is serialized  		try {  			MemoryStream memStream = new MemoryStream (buf);  			o = new BinaryFormatter ().Deserialize (memStream);  			if (log.IsInfoEnabled) {  				log.Info (GetLocalizedString ("loaditems deserializing").Replace ("$$Class$$"' o.GetType ().Name));  			}  		}  		catch (SerializationException e) {  			if (log.IsErrorEnabled) {  				log.Error (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  			}  			throw new IOException (GetLocalizedString ("loaditems SerializationException").Replace ("$$Key$$"' key)' e);  		}  	}  	// store the object into the cache  	hm [key] = o;  }  else if (END == line) {  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("loaditems finished"));  	}  	break;  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: if ((flag & F_COMPRESSED) != 0) {  	try {  		// read the input stream' and write to a byte array output stream since  		// we have to read into a byte array' but we don't know how large it  		// will need to be' and we don't want to resize it a bunch  		GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  		MemoryStream bos = new MemoryStream (buf.Length);  		int count;  		byte[] tmp = new byte[2048];  		while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  			bos.Write (tmp' 0' count);  		}  		// store uncompressed back to buffer  		buf = bos.ToArray ();  		gzi.Close ();  	}  	catch (IOException e) {  		if (log.IsErrorEnabled) {  			log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  		}  		throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  	}  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,LoadItems,The following statement contains a magic number: try {  	// read the input stream' and write to a byte array output stream since  	// we have to read into a byte array' but we don't know how large it  	// will need to be' and we don't want to resize it a bunch  	GZipInputStream gzi = new GZipInputStream (new MemoryStream (buf));  	MemoryStream bos = new MemoryStream (buf.Length);  	int count;  	byte[] tmp = new byte[2048];  	while ((count = gzi.Read (tmp' 0' tmp.Length)) > 0) {  		bos.Write (tmp' 0' count);  	}  	// store uncompressed back to buffer  	buf = bos.ToArray ();  	gzi.Close ();  }  catch (IOException e) {  	if (log.IsErrorEnabled) {  		log.Error (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  	}  	throw new IOException (GetLocalizedString ("loaditems uncompression IOException").Replace ("$$Key$$"' key)' e);  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Stats,The following statement contains a magic number: for (int i = 0; i < servers.Count; i++) {  	SockIO sock = pool.GetConnection ((string)servers [i]);  	if (sock == null) {  		if (log.IsErrorEnabled) {  			log.Error (GetLocalizedString ("unable to connect").Replace ("$$Server$$"' servers [i].ToString ()));  		}  		continue;  	}  	// build command  	string command = "stats\r\n";  	try {  		sock.Write (UTF8Encoding.UTF8.GetBytes (command));  		sock.Flush ();  		// map to hold key value pairs  		Hashtable stats = new Hashtable ();  		// loop over results  		while (true) {  			string line = sock.ReadLine ();  			if (log.IsDebugEnabled) {  				log.Debug (GetLocalizedString ("stats line").Replace ("$$Line$$"' line));  			}  			if (line.StartsWith (STATS)) {  				string[] info = line.Split (' ');  				string key = info [1];  				string val = info [2];  				if (log.IsDebugEnabled) {  					log.Debug (GetLocalizedString ("stats success").Replace ("$$Key$$"' key).Replace ("$$Value$$"' val));  				}  				stats [key] = val;  			}  			else if (END == line) {  				// finish when we get end from server  				if (log.IsDebugEnabled) {  					log.Debug (GetLocalizedString ("stats finished"));  				}  				break;  			}  			statsMaps [servers [i]] = stats;  		}  	}  	catch (IOException e) {  		if (log.IsErrorEnabled) {  			log.Error (GetLocalizedString ("stats IOException")' e);  		}  		try {  			sock.TrueClose ();  		}  		catch (IOException) {  			if (log.IsErrorEnabled) {  				log.Error (GetLocalizedString ("failed to close some socket").Replace ("$$Socket$$"' sock.ToString ()));  			}  		}  		sock = null;  	}  	if (sock != null)  		sock.Close ();  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Stats,The following statement contains a magic number: try {  	sock.Write (UTF8Encoding.UTF8.GetBytes (command));  	sock.Flush ();  	// map to hold key value pairs  	Hashtable stats = new Hashtable ();  	// loop over results  	while (true) {  		string line = sock.ReadLine ();  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("stats line").Replace ("$$Line$$"' line));  		}  		if (line.StartsWith (STATS)) {  			string[] info = line.Split (' ');  			string key = info [1];  			string val = info [2];  			if (log.IsDebugEnabled) {  				log.Debug (GetLocalizedString ("stats success").Replace ("$$Key$$"' key).Replace ("$$Value$$"' val));  			}  			stats [key] = val;  		}  		else if (END == line) {  			// finish when we get end from server  			if (log.IsDebugEnabled) {  				log.Debug (GetLocalizedString ("stats finished"));  			}  			break;  		}  		statsMaps [servers [i]] = stats;  	}  }  catch (IOException e) {  	if (log.IsErrorEnabled) {  		log.Error (GetLocalizedString ("stats IOException")' e);  	}  	try {  		sock.TrueClose ();  	}  	catch (IOException) {  		if (log.IsErrorEnabled) {  			log.Error (GetLocalizedString ("failed to close some socket").Replace ("$$Socket$$"' sock.ToString ()));  		}  	}  	sock = null;  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Stats,The following statement contains a magic number: while (true) {  	string line = sock.ReadLine ();  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("stats line").Replace ("$$Line$$"' line));  	}  	if (line.StartsWith (STATS)) {  		string[] info = line.Split (' ');  		string key = info [1];  		string val = info [2];  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("stats success").Replace ("$$Key$$"' key).Replace ("$$Value$$"' val));  		}  		stats [key] = val;  	}  	else if (END == line) {  		// finish when we get end from server  		if (log.IsDebugEnabled) {  			log.Debug (GetLocalizedString ("stats finished"));  		}  		break;  	}  	statsMaps [servers [i]] = stats;  }  
Magic Number,ZY.FC.Cache.Memcached,MemcachedClient,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\MemcachedClient.cs,Stats,The following statement contains a magic number: if (line.StartsWith (STATS)) {  	string[] info = line.Split (' ');  	string key = info [1];  	string val = info [2];  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("stats success").Replace ("$$Key$$"' key).Replace ("$$Value$$"' val));  	}  	stats [key] = val;  }  else if (END == line) {  	// finish when we get end from server  	if (log.IsDebugEnabled) {  		log.Debug (GetLocalizedString ("stats finished"));  	}  	break;  }  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [2] = b1;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [3] = b2;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [4] = b3;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [5] = b4;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [6] = b5;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [7] = b6;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [8] = b7;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [2] = b1;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [3] = b2;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,GetBytes,The following statement contains a magic number: bytes [4] = b3;  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The following statement contains a magic number: return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The following statement contains a magic number: return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The following statement contains a magic number: return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The following statement contains a magic number: return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The following statement contains a magic number: return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The following statement contains a magic number: return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToInt,The following statement contains a magic number: return ((((int)bytes [4]) & 0xFF) << 32) + ((((int)bytes [3]) & 0xFF) << 40) + ((((int)bytes [2]) & 0xFF) << 48) + ((((int)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,NativeHandler,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\NativeHandler.cs,ToLong,The following statement contains a magic number: return (((long)bytes [8]) & 0xFF) + ((((long)bytes [7]) & 0xFF) << 8) + ((((long)bytes [6]) & 0xFF) << 16) + ((((long)bytes [5]) & 0xFF) << 24) + ((((long)bytes [4]) & 0xFF) << 32) + ((((long)bytes [3]) & 0xFF) << 40) + ((((long)bytes [2]) & 0xFF) << 48) + ((((long)bytes [1]) & 0xFF) << 56);  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ReadLine,The following statement contains a magic number: while (_networkStream.Read (b' 0' 1) != -1) {  	if (b [0] == 13) {  		eol = true;  	}  	else {  		if (eol) {  			if (b [0] == 10)  				break;  			eol = false;  		}  	}  	// cast byte into char array  	memoryStream.Write (b' 0' 1);  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ReadLine,The following statement contains a magic number: while (_networkStream.Read (b' 0' 1) != -1) {  	if (b [0] == 13) {  		eol = true;  	}  	else {  		if (eol) {  			if (b [0] == 10)  				break;  			eol = false;  		}  	}  	// cast byte into char array  	memoryStream.Write (b' 0' 1);  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ReadLine,The following statement contains a magic number: if (b [0] == 13) {  	eol = true;  }  else {  	if (eol) {  		if (b [0] == 10)  			break;  		eol = false;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ReadLine,The following statement contains a magic number: if (b [0] == 13) {  	eol = true;  }  else {  	if (eol) {  		if (b [0] == 10)  			break;  		eol = false;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ReadLine,The following statement contains a magic number: if (eol) {  	if (b [0] == 10)  		break;  	eol = false;  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ReadLine,The following statement contains a magic number: if (b [0] == 10)  	break;  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ClearEndOfLine,The following statement contains a magic number: while (_networkStream.Read (b' 0' 1) != -1) {  	// only stop when we see  	// \r (13) followed by \n (10)  	if (b [0] == 13) {  		eol = true;  		continue;  	}  	if (eol) {  		if (b [0] == 10)  			break;  		eol = false;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ClearEndOfLine,The following statement contains a magic number: while (_networkStream.Read (b' 0' 1) != -1) {  	// only stop when we see  	// \r (13) followed by \n (10)  	if (b [0] == 13) {  		eol = true;  		continue;  	}  	if (eol) {  		if (b [0] == 10)  			break;  		eol = false;  	}  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ClearEndOfLine,The following statement contains a magic number: if (b [0] == 13) {  	eol = true;  	continue;  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ClearEndOfLine,The following statement contains a magic number: if (eol) {  	if (b [0] == 10)  		break;  	eol = false;  }  
Magic Number,ZY.FC.Cache.Memcached,SockIO,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIO.cs,ClearEndOfLine,The following statement contains a magic number: if (b [0] == 10)  	break;  
Magic Number,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,OriginalHashingAlgorithm,The following statement contains a magic number: for (int i = 0; i < cArr.Length; ++i) {  	hash = (hash * 33) + cArr [i];  }  
Magic Number,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,OriginalHashingAlgorithm,The following statement contains a magic number: hash = (hash * 33) + cArr [i];  
Magic Number,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,NewHashingAlgorithm,The following statement contains a magic number: return (crc >> 16) & 0x7fff;  
Magic Number,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,CreateSocket,The following statement contains a magic number: if (socket == null) {  	DateTime now = DateTime.Now;  	_hostDead [host] = now;  	long expire = (_hostDeadDuration.ContainsKey (host)) ? (((long)_hostDeadDuration [host]) * 2) : 100;  	_hostDeadDuration [host] = expire;  	if (Log.IsDebugEnabled) {  		Log.Debug (GetLocalizedString ("ignoring dead host").Replace ("$$Host$$"' host).Replace ("$$Expire$$"' expire.ToString (new NumberFormatInfo ())));  	}  	// also clear all entries for this host from availPool  	ClearHostFromPool (_availPool' host);  }  else {  	if (Log.IsDebugEnabled) {  		Log.Debug (GetLocalizedString ("created socket").Replace ("$$ToString$$"' socket.ToString ()).Replace ("$$Host$$"' host));  	}  	_hostDead.Remove (host);  	_hostDeadDuration.Remove (host);  	if (_buckets.BinarySearch (host) < 0)  		_buckets.Add (host);  }  
Magic Number,ZY.FC.Cache.Memcached,SockIOPool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\SockIOPool.cs,CreateSocket,The following statement contains a magic number: if (socket == null) {  	DateTime now = DateTime.Now;  	_hostDead [host] = now;  	long expire = (_hostDeadDuration.ContainsKey (host)) ? (((long)_hostDeadDuration [host]) * 2) : 100;  	_hostDeadDuration [host] = expire;  	if (Log.IsDebugEnabled) {  		Log.Debug (GetLocalizedString ("ignoring dead host").Replace ("$$Host$$"' host).Replace ("$$Expire$$"' expire.ToString (new NumberFormatInfo ())));  	}  	// also clear all entries for this host from availPool  	ClearHostFromPool (_availPool' host);  }  else {  	if (Log.IsDebugEnabled) {  		Log.Debug (GetLocalizedString ("created socket").Replace ("$$ToString$$"' socket.ToString ()).Replace ("$$Host$$"' host));  	}  	_hostDead.Remove (host);  	_hostDeadDuration.Remove (host);  	if (_buckets.BinarySearch (host) < 0)  		_buckets.Add (host);  }  
Missing Default,ZY.FC.Cache.Memcached,CRCTool,C:\repos\neo2018_ZYFC\ZY.FC.Cache\Memcached\CRCTool.cs,Init,The following switch statement is missing a default case: switch (CodingType) {  case CRCCode.CRC_CCITT:  	order = 16;  	direct = 1;  	polynom = 0x1021;  	crcinit = 0xFFFF;  	crcxor = 0;  	refin = 0;  	refout = 0;  	break;  case CRCCode.CRC16:  	order = 16;  	direct = 1;  	polynom = 0x8005;  	crcinit = 0x0;  	crcxor = 0x0;  	refin = 1;  	refout = 1;  	break;  case CRCCode.CRC32:  	order = 32;  	direct = 1;  	polynom = 0x4c11db7;  	crcinit = 0xFFFFFFFF;  	crcxor = 0xFFFFFFFF;  	refin = 1;  	refout = 1;  	break;  }  
