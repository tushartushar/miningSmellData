Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SisLar.View,CadastroAluno,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAluno.xaml.cs,btnConfirmar_Click,Cyclomatic complexity of the method is 10
Complex Method,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,Index,Cyclomatic complexity of the method is 36
Complex Method,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnInserir_Click,Cyclomatic complexity of the method is 28
Complex Method,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,Cyclomatic complexity of the method is 30
Complex Method,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,EditarRegistro,Cyclomatic complexity of the method is 28
Complex Method,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnPesquisar_Click,Cyclomatic complexity of the method is 29
Complex Method,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,AtualizarGrid,Cyclomatic complexity of the method is 18
Long Parameter List,SisLar.Model.Entities,AlunoMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\AlunoMapping.cs,AlunoMapping,The method has 29 parameters.
Long Parameter List,SisLar.Model.Entities,LancamentoMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\LancamentoMapping.cs,LancamentoMapping,The method has 8 parameters.
Long Parameter List,SisLar.Model.Entities,ProdutoMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\ProdutoMapping.cs,ProdutoMapping,The method has 7 parameters.
Long Parameter List,SisLar.Model.Entities,FuncionarioMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\FuncionarioMapping.cs,FuncionarioMapping,The method has 13 parameters.
Long Parameter List,SisLar.Model.Entities,UsuarioMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\UsuarioMapping.cs,UsuarioMapping,The method has 5 parameters.
Long Parameter List,SisLar.Model.Mappings,AnexoMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\AnexoMapping.cs,AnexoMapping,The method has 6 parameters.
Long Statement,SisLar.Model,EnumConvention,C:\repos\IgorZanne_SisLar\SisLar\Model\EnumConvention.cs,Accept,The length of the statement  "	criteria.Expect (x => x.Property.PropertyType.IsEnum || (x.Property.PropertyType.IsGenericType && x.Property.PropertyType.GetGenericTypeDefinition () == typeof(Nullable<>) && x.Property.PropertyType.GetGenericArguments () [0].IsEnum)); " is 235.
Long Statement,SisLar.Model,NHibernateHelper,C:\repos\IgorZanne_SisLar\SisLar\Model\NHibernateHelper.cs,InitializeSessionFactory,The length of the statement  "	_sessionFactory = Fluently.Configure ().Database (CreateDbConfig ()).Mappings (m => m.AutoMappings.Add (CreateMappings ().Conventions.Add (new BooleanConvention ()).Conventions.Add<EnumConvention> ())).ExposeConfiguration (config => new SchemaExport (config).Execute (true' false' true)).ExposeConfiguration (x => x.SetProperty ("connection.release_mode"' "on_close")).BuildSessionFactory (); " is 392.
Long Statement,SisLar.Model,NHibernateHelper,C:\repos\IgorZanne_SisLar\SisLar\Model\NHibernateHelper.cs,CreateDbConfig,The length of the statement  "	return MsSqlConfiguration.MsSql2008.ConnectionString (c => c.Server ("ZANNE-PC\\SQLEXPRESS").Database ("BD_SISLAR").Username ("sa").Password ("admin1")).DefaultSchema ("dbo").QuerySubstitutions ("true 1' false 0' yes 'Y'' no 'N'").ShowSql (); " is 242.
Long Statement,SisLar.Model,QueryableExtensions,C:\repos\IgorZanne_SisLar\SisLar\Model\QueryableExtensions.cs,Search,The length of the statement  "	var checkContainsExpression = Expression.Call (stringProperty.Body' typeof(string).GetMethod ("Contains")' searchTermExpression); " is 129.
Long Statement,SisLar.View,CadastroAluno,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAluno.xaml.cs,btnConfirmar_Click,The length of the statement  "		System.Windows.MessageBox.Show ("O número da matrícula é inválido"' "Erro"' MessageBoxButton.OK' MessageBoxImage.Error); " is 120.
Long Statement,SisLar.View,CadastroAluno,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAluno.xaml.cs,btnConfirmar_Click,The length of the statement  "	var matriculaJaExiste = repAluno.Consulta (a => a.Matricula == numeroMatricula && a.Handle != AlunoAtual.Handle).Any (); " is 120.
Long Statement,SisLar.View,CadastroAluno,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAluno.xaml.cs,btnConfirmar_Click,The length of the statement  "		System.Windows.MessageBox.Show ("Já existe outro aluno cadastrado com esta matrícula"' "Erro"' MessageBoxButton.OK' MessageBoxImage.Error); " is 139.
Long Statement,SisLar.View,CadastroAnexo,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAnexo.xaml.cs,btnProcurar_Click,The length of the statement  "	dlg.Filter = "Image files (*.jpg' *.jpeg' *.png' *.gif' *.tiff' *.bmp' *.doc' *.docx' *.xls)|*.jpg;*.jpeg;*.png;*.gif;*.tiff;*.bmp;*.doc;*.docx;*.xls"; " is 151.
Long Statement,SisLar.View,CadastroAnexo,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAnexo.xaml.cs,gridDocumentos_MouseDoubleClick,The length of the statement  "		System.Windows.MessageBox.Show ("Selecione um registro para edita-lo"' "Editar"' MessageBoxButton.OK' MessageBoxImage.Warning); " is 127.
Long Statement,SisLar.View,CadastroUsuario,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroUsuario.xaml.cs,btnConfirmar_Click,The length of the statement  "		var jaExiste = repUsuario.Consulta (u => u.Handle != UsuarioAtual.Handle && u.Login.ToUpper ().Equals (edtLogin.Text.ToUpper ())).Any (); " is 137.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The length of the statement  "		var decisao = MessageBox.Show ("Confirma exclusão do registro?"' "Excluir"' MessageBoxButton.YesNo' MessageBoxImage.Question); " is 126.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The length of the statement  "					MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error); " is 122.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,EditarRegistro,The length of the statement  "			var novoLancamentoPagar = new Contas (frameTelaPrincipal' TipoLancamentoEnum.Pagar' GridResultados.SelectedItem as Lancamento); " is 127.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,EditarRegistro,The length of the statement  "			var novoLancamentoReceber = new Contas (frameTelaPrincipal' TipoLancamentoEnum.Receber' GridResultados.SelectedItem as Lancamento); " is 131.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnPesquisar_Click,The length of the statement  "			GridResultados.ItemsSource = QueryableExtensions.Search<Funcionario> (repFuncionario.RetornaTodos ()' coluna.Name' edtFiltro.Text); " is 131.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnPesquisar_Click,The length of the statement  "			GridResultados.ItemsSource = QueryableExtensions.Search<Lancamento> (repLancamento.Consulta (cons => cons.Tipo == TipoLancamentoEnum.Pagar)' coluna.Name' edtFiltro.Text); " is 170.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnPesquisar_Click,The length of the statement  "			GridResultados.ItemsSource = QueryableExtensions.Search<Lancamento> (repLancamento.Consulta (cons => cons.Tipo == TipoLancamentoEnum.Receber)' coluna.Name' edtFiltro.Text); " is 172.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnPesquisar_Click,The length of the statement  "			GridResultados.ItemsSource = QueryableExtensions.Search<Produto> (repProduto.RetornaTodos ()' coluna.Name' edtFiltro.Text); " is 123.
Long Statement,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnPesquisar_Click,The length of the statement  "			GridResultados.ItemsSource = QueryableExtensions.Search<Usuario> (repUsuario.RetornaTodos ()' coluna.Name' edtFiltro.Text); " is 123.
Magic Number,SisLar.Model.Entities,UsuarioMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\UsuarioMapping.cs,UsuarioMapping,The following statement contains a magic number: Map (x => x.Login' "LOGIN").Length (50);  
Magic Number,SisLar.Model.Entities,UsuarioMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\UsuarioMapping.cs,UsuarioMapping,The following statement contains a magic number: Map (x => x.Nome' "NOME").Length (100);  
Magic Number,SisLar.Model.Entities,UsuarioMapping,C:\repos\IgorZanne_SisLar\SisLar\Model\Mappings\UsuarioMapping.cs,UsuarioMapping,The following statement contains a magic number: Map (x => x.Senha' "SENHA").Length (50);  
Magic Number,SisLar.View,CadastroAluno,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAluno.xaml.cs,CalculaIdade,The following statement contains a magic number: if (months < 0) {  	hoje = hoje.AddYears (-1);  	months += 12;  }  
Magic Number,SisLar.View,CadastroAluno,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroAluno.xaml.cs,CalculaIdade,The following statement contains a magic number: months += 12;  
Magic Number,SisLar.View,CadastroUsuario,C:\repos\IgorZanne_SisLar\SisLar\View\CadastroUsuario.xaml.cs,btnConfirmar_Click,The following statement contains a magic number: if (edtSenha.Password.Length <= 4) {  	MessageBox.Show ("A senha deve conter mais de 4 caracteres"' "Erro"' MessageBoxButton.OK' MessageBoxImage.Error);  	this.edtSenha.Focus ();  	return;  }  else {  	this.UsuarioAtual.Senha = edtSenha.Password;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (GridResultados.SelectedItem != null) {  	var decisao = MessageBox.Show ("Confirma exclusão do registro?"' "Excluir"' MessageBoxButton.YesNo' MessageBoxImage.Question);  	if (decisao == MessageBoxResult.Yes) {  		switch (tipoCadastro) {  		case TipoCadastroEnum.Aluno:  			repAluno.Excluir (GridResultados.SelectedItem as Aluno);  			GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Funcionario:  			repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  			GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Produto:  			repProduto.Excluir (GridResultados.SelectedItem as Produto);  			GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Usuario:  			var usuarioExcluir = GridResultados.SelectedItem as Usuario;  			if (usuarioExcluir.Handle != 1) {  				repUsuario.Excluir (usuarioExcluir);  			}  			else {  				MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  				return;  			}  			GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoPagar:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoReceber:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		default:  			break;  		}  		MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  		return;  	}  }  else {  	MessageBox.Show ("Selecione um registro para excluí-lo"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Warning);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (GridResultados.SelectedItem != null) {  	var decisao = MessageBox.Show ("Confirma exclusão do registro?"' "Excluir"' MessageBoxButton.YesNo' MessageBoxImage.Question);  	if (decisao == MessageBoxResult.Yes) {  		switch (tipoCadastro) {  		case TipoCadastroEnum.Aluno:  			repAluno.Excluir (GridResultados.SelectedItem as Aluno);  			GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Funcionario:  			repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  			GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Produto:  			repProduto.Excluir (GridResultados.SelectedItem as Produto);  			GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Usuario:  			var usuarioExcluir = GridResultados.SelectedItem as Usuario;  			if (usuarioExcluir.Handle != 1) {  				repUsuario.Excluir (usuarioExcluir);  			}  			else {  				MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  				return;  			}  			GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoPagar:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoReceber:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		default:  			break;  		}  		MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  		return;  	}  }  else {  	MessageBox.Show ("Selecione um registro para excluí-lo"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Warning);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (GridResultados.SelectedItem != null) {  	var decisao = MessageBox.Show ("Confirma exclusão do registro?"' "Excluir"' MessageBoxButton.YesNo' MessageBoxImage.Question);  	if (decisao == MessageBoxResult.Yes) {  		switch (tipoCadastro) {  		case TipoCadastroEnum.Aluno:  			repAluno.Excluir (GridResultados.SelectedItem as Aluno);  			GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Funcionario:  			repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  			GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Produto:  			repProduto.Excluir (GridResultados.SelectedItem as Produto);  			GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Usuario:  			var usuarioExcluir = GridResultados.SelectedItem as Usuario;  			if (usuarioExcluir.Handle != 1) {  				repUsuario.Excluir (usuarioExcluir);  			}  			else {  				MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  				return;  			}  			GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoPagar:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoReceber:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		default:  			break;  		}  		MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  		return;  	}  }  else {  	MessageBox.Show ("Selecione um registro para excluí-lo"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Warning);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (GridResultados.SelectedItem != null) {  	var decisao = MessageBox.Show ("Confirma exclusão do registro?"' "Excluir"' MessageBoxButton.YesNo' MessageBoxImage.Question);  	if (decisao == MessageBoxResult.Yes) {  		switch (tipoCadastro) {  		case TipoCadastroEnum.Aluno:  			repAluno.Excluir (GridResultados.SelectedItem as Aluno);  			GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Funcionario:  			repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  			GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Produto:  			repProduto.Excluir (GridResultados.SelectedItem as Produto);  			GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Usuario:  			var usuarioExcluir = GridResultados.SelectedItem as Usuario;  			if (usuarioExcluir.Handle != 1) {  				repUsuario.Excluir (usuarioExcluir);  			}  			else {  				MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  				return;  			}  			GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoPagar:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoReceber:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		default:  			break;  		}  		MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  		return;  	}  }  else {  	MessageBox.Show ("Selecione um registro para excluí-lo"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Warning);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (GridResultados.SelectedItem != null) {  	var decisao = MessageBox.Show ("Confirma exclusão do registro?"' "Excluir"' MessageBoxButton.YesNo' MessageBoxImage.Question);  	if (decisao == MessageBoxResult.Yes) {  		switch (tipoCadastro) {  		case TipoCadastroEnum.Aluno:  			repAluno.Excluir (GridResultados.SelectedItem as Aluno);  			GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Funcionario:  			repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  			GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Produto:  			repProduto.Excluir (GridResultados.SelectedItem as Produto);  			GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Usuario:  			var usuarioExcluir = GridResultados.SelectedItem as Usuario;  			if (usuarioExcluir.Handle != 1) {  				repUsuario.Excluir (usuarioExcluir);  			}  			else {  				MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  				return;  			}  			GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoPagar:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoReceber:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		default:  			break;  		}  		MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  		return;  	}  }  else {  	MessageBox.Show ("Selecione um registro para excluí-lo"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Warning);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (GridResultados.SelectedItem != null) {  	var decisao = MessageBox.Show ("Confirma exclusão do registro?"' "Excluir"' MessageBoxButton.YesNo' MessageBoxImage.Question);  	if (decisao == MessageBoxResult.Yes) {  		switch (tipoCadastro) {  		case TipoCadastroEnum.Aluno:  			repAluno.Excluir (GridResultados.SelectedItem as Aluno);  			GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Funcionario:  			repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  			GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Produto:  			repProduto.Excluir (GridResultados.SelectedItem as Produto);  			GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.Usuario:  			var usuarioExcluir = GridResultados.SelectedItem as Usuario;  			if (usuarioExcluir.Handle != 1) {  				repUsuario.Excluir (usuarioExcluir);  			}  			else {  				MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  				return;  			}  			GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoPagar:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		case TipoCadastroEnum.LancamentoReceber:  			repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  			GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  			break;  		default:  			break;  		}  		MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  		return;  	}  }  else {  	MessageBox.Show ("Selecione um registro para excluí-lo"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Warning);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (decisao == MessageBoxResult.Yes) {  	switch (tipoCadastro) {  	case TipoCadastroEnum.Aluno:  		repAluno.Excluir (GridResultados.SelectedItem as Aluno);  		GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Funcionario:  		repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  		GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Produto:  		repProduto.Excluir (GridResultados.SelectedItem as Produto);  		GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Usuario:  		var usuarioExcluir = GridResultados.SelectedItem as Usuario;  		if (usuarioExcluir.Handle != 1) {  			repUsuario.Excluir (usuarioExcluir);  		}  		else {  			MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  			return;  		}  		GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoPagar:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoReceber:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	default:  		break;  	}  	MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (decisao == MessageBoxResult.Yes) {  	switch (tipoCadastro) {  	case TipoCadastroEnum.Aluno:  		repAluno.Excluir (GridResultados.SelectedItem as Aluno);  		GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Funcionario:  		repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  		GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Produto:  		repProduto.Excluir (GridResultados.SelectedItem as Produto);  		GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Usuario:  		var usuarioExcluir = GridResultados.SelectedItem as Usuario;  		if (usuarioExcluir.Handle != 1) {  			repUsuario.Excluir (usuarioExcluir);  		}  		else {  			MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  			return;  		}  		GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoPagar:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoReceber:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	default:  		break;  	}  	MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (decisao == MessageBoxResult.Yes) {  	switch (tipoCadastro) {  	case TipoCadastroEnum.Aluno:  		repAluno.Excluir (GridResultados.SelectedItem as Aluno);  		GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Funcionario:  		repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  		GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Produto:  		repProduto.Excluir (GridResultados.SelectedItem as Produto);  		GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Usuario:  		var usuarioExcluir = GridResultados.SelectedItem as Usuario;  		if (usuarioExcluir.Handle != 1) {  			repUsuario.Excluir (usuarioExcluir);  		}  		else {  			MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  			return;  		}  		GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoPagar:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoReceber:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	default:  		break;  	}  	MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (decisao == MessageBoxResult.Yes) {  	switch (tipoCadastro) {  	case TipoCadastroEnum.Aluno:  		repAluno.Excluir (GridResultados.SelectedItem as Aluno);  		GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Funcionario:  		repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  		GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Produto:  		repProduto.Excluir (GridResultados.SelectedItem as Produto);  		GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Usuario:  		var usuarioExcluir = GridResultados.SelectedItem as Usuario;  		if (usuarioExcluir.Handle != 1) {  			repUsuario.Excluir (usuarioExcluir);  		}  		else {  			MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  			return;  		}  		GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoPagar:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoReceber:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	default:  		break;  	}  	MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (decisao == MessageBoxResult.Yes) {  	switch (tipoCadastro) {  	case TipoCadastroEnum.Aluno:  		repAluno.Excluir (GridResultados.SelectedItem as Aluno);  		GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Funcionario:  		repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  		GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Produto:  		repProduto.Excluir (GridResultados.SelectedItem as Produto);  		GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Usuario:  		var usuarioExcluir = GridResultados.SelectedItem as Usuario;  		if (usuarioExcluir.Handle != 1) {  			repUsuario.Excluir (usuarioExcluir);  		}  		else {  			MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  			return;  		}  		GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoPagar:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoReceber:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	default:  		break;  	}  	MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: if (decisao == MessageBoxResult.Yes) {  	switch (tipoCadastro) {  	case TipoCadastroEnum.Aluno:  		repAluno.Excluir (GridResultados.SelectedItem as Aluno);  		GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Funcionario:  		repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  		GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Produto:  		repProduto.Excluir (GridResultados.SelectedItem as Produto);  		GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.Usuario:  		var usuarioExcluir = GridResultados.SelectedItem as Usuario;  		if (usuarioExcluir.Handle != 1) {  			repUsuario.Excluir (usuarioExcluir);  		}  		else {  			MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  			return;  		}  		GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoPagar:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	case TipoCadastroEnum.LancamentoReceber:  		repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  		GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  		break;  	default:  		break;  	}  	MessageBox.Show ("Registro excluido com sucesso"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Information);  	return;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	repAluno.Excluir (GridResultados.SelectedItem as Aluno);  	GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Funcionario:  	repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  	GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Produto:  	repProduto.Excluir (GridResultados.SelectedItem as Produto);  	GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Usuario:  	var usuarioExcluir = GridResultados.SelectedItem as Usuario;  	if (usuarioExcluir.Handle != 1) {  		repUsuario.Excluir (usuarioExcluir);  	}  	else {  		MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  		return;  	}  	GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoPagar:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoReceber:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  default:  	break;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	repAluno.Excluir (GridResultados.SelectedItem as Aluno);  	GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Funcionario:  	repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  	GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Produto:  	repProduto.Excluir (GridResultados.SelectedItem as Produto);  	GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Usuario:  	var usuarioExcluir = GridResultados.SelectedItem as Usuario;  	if (usuarioExcluir.Handle != 1) {  		repUsuario.Excluir (usuarioExcluir);  	}  	else {  		MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  		return;  	}  	GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoPagar:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoReceber:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  default:  	break;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	repAluno.Excluir (GridResultados.SelectedItem as Aluno);  	GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Funcionario:  	repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  	GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Produto:  	repProduto.Excluir (GridResultados.SelectedItem as Produto);  	GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Usuario:  	var usuarioExcluir = GridResultados.SelectedItem as Usuario;  	if (usuarioExcluir.Handle != 1) {  		repUsuario.Excluir (usuarioExcluir);  	}  	else {  		MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  		return;  	}  	GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoPagar:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoReceber:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  default:  	break;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	repAluno.Excluir (GridResultados.SelectedItem as Aluno);  	GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Funcionario:  	repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  	GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Produto:  	repProduto.Excluir (GridResultados.SelectedItem as Produto);  	GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Usuario:  	var usuarioExcluir = GridResultados.SelectedItem as Usuario;  	if (usuarioExcluir.Handle != 1) {  		repUsuario.Excluir (usuarioExcluir);  	}  	else {  		MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  		return;  	}  	GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoPagar:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoReceber:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  default:  	break;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	repAluno.Excluir (GridResultados.SelectedItem as Aluno);  	GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Funcionario:  	repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  	GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Produto:  	repProduto.Excluir (GridResultados.SelectedItem as Produto);  	GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Usuario:  	var usuarioExcluir = GridResultados.SelectedItem as Usuario;  	if (usuarioExcluir.Handle != 1) {  		repUsuario.Excluir (usuarioExcluir);  	}  	else {  		MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  		return;  	}  	GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoPagar:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoReceber:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  default:  	break;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	repAluno.Excluir (GridResultados.SelectedItem as Aluno);  	GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Funcionario:  	repFuncionario.Excluir (GridResultados.SelectedItem as Funcionario);  	GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Produto:  	repProduto.Excluir (GridResultados.SelectedItem as Produto);  	GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.Usuario:  	var usuarioExcluir = GridResultados.SelectedItem as Usuario;  	if (usuarioExcluir.Handle != 1) {  		repUsuario.Excluir (usuarioExcluir);  	}  	else {  		MessageBox.Show ("Não é possível excluir o usuário administrador"' "Excluir"' MessageBoxButton.OK' MessageBoxImage.Error);  		return;  	}  	GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoPagar:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  case TipoCadastroEnum.LancamentoReceber:  	repLancamento.Excluir (GridResultados.SelectedItem as Lancamento);  	GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  	break;  default:  	break;  }  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: GridResultados.ItemsSource = repAluno.RetornaTodos ().Take (100);  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: GridResultados.ItemsSource = repFuncionario.RetornaTodos ().Take (100);  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: GridResultados.ItemsSource = repProduto.RetornaTodos ().Take (100);  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: GridResultados.ItemsSource = repUsuario.RetornaTodos ().Take (100);  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  
Magic Number,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,btnExcluir_Click,The following statement contains a magic number: GridResultados.ItemsSource = repLancamento.RetornaTodos ().Take (100);  
Missing Default,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,Index,The following switch statement is missing a default case: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	gbContainer.Header = "Alunos";  	cbFiltro.ItemsSource = EntidadeHelper.GetListaPropriedades<Aluno> ();  	this.repAluno = new Repositorio<Aluno> ();  	AlteraTextoStatusBar ("Lista de alunos cadastrados no sistema.");  	break;  case TipoCadastroEnum.Funcionario:  	gbContainer.Header = "Funcionários";  	cbFiltro.ItemsSource = EntidadeHelper.GetListaPropriedades<Funcionario> ();  	this.repFuncionario = new Repositorio<Funcionario> ();  	AlteraTextoStatusBar ("Lista de funcionários cadastrados no sistema.");  	break;  case TipoCadastroEnum.LancamentoPagar:  	gbContainer.Header = "Contas a pagar";  	cbFiltro.ItemsSource = EntidadeHelper.GetListaPropriedades<Lancamento> ();  	this.repLancamento = new Repositorio<Lancamento> ();  	AlteraTextoStatusBar ("Lista de contas a pagar cadastradas no sistema.");  	break;  case TipoCadastroEnum.LancamentoReceber:  	gbContainer.Header = "Contas a receber";  	cbFiltro.ItemsSource = EntidadeHelper.GetListaPropriedades<Lancamento> ();  	this.repLancamento = new Repositorio<Lancamento> ();  	AlteraTextoStatusBar ("Lista de contas a receber cadastradsas no sistema.");  	break;  case TipoCadastroEnum.Produto:  	gbContainer.Header = "Produtos";  	cbFiltro.ItemsSource = EntidadeHelper.GetListaPropriedades<Produto> ();  	this.repProduto = new Repositorio<Produto> ();  	AlteraTextoStatusBar ("Lista de produtos cadastrados no sistema.");  	break;  case TipoCadastroEnum.Usuario:  	gbContainer.Header = "Usuários";  	cbFiltro.ItemsSource = EntidadeHelper.GetListaPropriedades<Usuario> ();  	this.repUsuario = new Repositorio<Usuario> ();  	AlteraTextoStatusBar ("Lista de usuários cadastrados no sistema.");  	break;  }  
Missing Default,SisLar.View,Index,C:\repos\IgorZanne_SisLar\SisLar\View\Index.xaml.cs,AtualizarGrid,The following switch statement is missing a default case: switch (tipoCadastro) {  case TipoCadastroEnum.Aluno:  	GridResultados.ItemsSource = repAluno.RetornaTodos ();  	break;  case TipoCadastroEnum.Funcionario:  	GridResultados.ItemsSource = repFuncionario.RetornaTodos ();  	break;  case TipoCadastroEnum.LancamentoPagar:  	GridResultados.ItemsSource = repLancamento.Consulta (e => e.Tipo == TipoLancamentoEnum.Pagar);  	break;  case TipoCadastroEnum.LancamentoReceber:  	GridResultados.ItemsSource = repLancamento.Consulta (e => e.Tipo == TipoLancamentoEnum.Receber);  	break;  case TipoCadastroEnum.Produto:  	GridResultados.ItemsSource = repProduto.RetornaTodos ();  	break;  case TipoCadastroEnum.Usuario:  	GridResultados.ItemsSource = repUsuario.RetornaTodos ();  	break;  }  
