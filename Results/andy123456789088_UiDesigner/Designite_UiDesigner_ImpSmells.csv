Implementation smell,Namespace,Class,File,Method,Description
Long Method,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getPCodeDesign,The method has 190 lines of code.
Long Method,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The method has 105 lines of code.
Long Method,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The method has 254 lines of code.
Complex Method,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getPCodeDesign,Cyclomatic complexity of the method is 24
Complex Method,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,MoveControl,Cyclomatic complexity of the method is 9
Complex Method,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToList,Cyclomatic complexity of the method is 33
Complex Method,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,Cyclomatic complexity of the method is 107
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddItemToList,The length of the statement  "	Item.Add (new UserInterface.Classes.Desktop.Desktop.ListItem (Name' Icon' new EventHandler (delegate (object sender' EventArgs e) { " is 131.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,GetTitleInfo,The length of the statement  "	return new UserInterface.Classes.Desktop.Window.TitleInfo (Name' 20' Color.LightSkyBlue' Color.Black' UserInterface.Classes.Communication.Helper.SelectedColor' null); " is 166.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getPCodeDesign,The length of the statement  "		cr.Add (brd + "this.Size = new Size(" + this.getCurrentWindow ().Size.Width.ToString () + "' " + this.getCurrentWindow ().Size.Height.ToString () + ");"); " is 154.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The length of the statement  "			cd.Add ("        public Run() {} // Now overgiven types here please' the UI.dll couldn't initialisized your app' so users could't use it!"); " is 140.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The length of the statement  "			cd.Add ("            // Apps can try to find this app' and when they find this app' they try to send a command to this app. You can work here with the SpezialInfo."); " is 166.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The length of the statement  "			cd.Add ("            // This class contains an dictonary' which say e.g. {navigate to }{google.de}. It contains the action and the right value which have sended another app!"); " is 176.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The length of the statement  "			cd.Add ("            // In this method you can save the given StartupInformation. It's often useful' if antoher app wants to start this app' so you can call OnStart(inf); or save it and call it later!"); " is 203.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The length of the statement  "			cd.Add (String.Format ("        public {0}(UserInterface.Classes.Desktop.Window.TitleInfo Title' UserInterface.Classes.Desktop.Desktop.Desktop Desk)"' pName)); " is 159.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The length of the statement  "			cd.Add ("            // Ctor! It's very important' you can add events here or chaning some things' which you the designer hasn't done right!"); " is 143.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The length of the statement  "			cd.Add ("            // Please don't change the overgiven types' but when you are doing that the programm would be crashed!"); " is 126.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,Save_Click,The length of the statement  "		System.IO.File.WriteAllText (System.IO.Path.Combine (this.cpPath' "Run.cs")' getCodeFile (CodeType.StartClass' this.cpName)); " is 125.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,Save_Click,The length of the statement  "		System.IO.File.WriteAllText (System.IO.Path.Combine (this.cpPath' this.cpName + ".cs")' getCodeFile (CodeType.DesignClass' this.cpName' getPCodeDesign (this.cpName)' getpControlDefinitions (this.cpName))); " is 205.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The length of the statement  "					if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) { " is 136.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The length of the statement  "					if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) { " is 124.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The length of the statement  "									MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 151.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The length of the statement  "					if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) { " is 162.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The length of the statement  "					if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) { " is 164.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The length of the statement  "					if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) { " is 205.
Long Statement,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The length of the statement  "				if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) { " is 182.
Empty Catch Block,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,Save_Click,The method has an empty catch block.
Empty Catch Block,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,Save_Click,The method has an empty catch block.
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,GetTitleInfo,The following statement contains a magic number: return new UserInterface.Classes.Desktop.Window.TitleInfo (Name' 20' Color.LightSkyBlue' Color.Black' UserInterface.Classes.Communication.Helper.SelectedColor' null);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getControls,The following statement contains a magic number: if (getCurrentWindow () != null) {  	if (!initialiszed) {  		foreach (Control m in getCurrentWindow ().Controls) {  			cr += m.Name + "' ";  		}  		cr = cr.Remove (cr.Length - 2' 2);  	}  	else {  		foreach (Control m in getCurrentWindow ().Controls) {  			cr += brd + String.Concat (new string[] {  				"this."'  				m.Name'  				" ="'  				" new "'  				m.GetType ().FullName'  				"();"  			}) + Environment.NewLine;  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getControls,The following statement contains a magic number: if (getCurrentWindow () != null) {  	if (!initialiszed) {  		foreach (Control m in getCurrentWindow ().Controls) {  			cr += m.Name + "' ";  		}  		cr = cr.Remove (cr.Length - 2' 2);  	}  	else {  		foreach (Control m in getCurrentWindow ().Controls) {  			cr += brd + String.Concat (new string[] {  				"this."'  				m.Name'  				" ="'  				" new "'  				m.GetType ().FullName'  				"();"  			}) + Environment.NewLine;  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getControls,The following statement contains a magic number: if (!initialiszed) {  	foreach (Control m in getCurrentWindow ().Controls) {  		cr += m.Name + "' ";  	}  	cr = cr.Remove (cr.Length - 2' 2);  }  else {  	foreach (Control m in getCurrentWindow ().Controls) {  		cr += brd + String.Concat (new string[] {  			"this."'  			m.Name'  			" ="'  			" new "'  			m.GetType ().FullName'  			"();"  		}) + Environment.NewLine;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getControls,The following statement contains a magic number: if (!initialiszed) {  	foreach (Control m in getCurrentWindow ().Controls) {  		cr += m.Name + "' ";  	}  	cr = cr.Remove (cr.Length - 2' 2);  }  else {  	foreach (Control m in getCurrentWindow ().Controls) {  		cr += brd + String.Concat (new string[] {  			"this."'  			m.Name'  			" ="'  			" new "'  			m.GetType ().FullName'  			"();"  		}) + Environment.NewLine;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getControls,The following statement contains a magic number: cr = cr.Remove (cr.Length - 2' 2);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getControls,The following statement contains a magic number: cr = cr.Remove (cr.Length - 2' 2);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: if (this.currentWindow != null) {  	foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  		Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    		}) as Control;  		b.Size = new Size (50' 50);  		b.Location = new Point (30' 30);  		b.MouseDown += b_MouseDown;  		b.MouseMove += b_MouseMove;  		b.MouseUp += b_MouseUp;  		b.Text = "text";  		if (b.GetType () == typeof(Panel))  			b.BackColor = SystemColors.Control;  		// Otherwise you couldn't see it!                      		b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  		w.Controls.Add (b);  		w.Invalidate ();  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: if (this.currentWindow != null) {  	foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  		Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    		}) as Control;  		b.Size = new Size (50' 50);  		b.Location = new Point (30' 30);  		b.MouseDown += b_MouseDown;  		b.MouseMove += b_MouseMove;  		b.MouseUp += b_MouseUp;  		b.Text = "text";  		if (b.GetType () == typeof(Panel))  			b.BackColor = SystemColors.Control;  		// Otherwise you couldn't see it!                      		b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  		w.Controls.Add (b);  		w.Invalidate ();  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: if (this.currentWindow != null) {  	foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  		Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    		}) as Control;  		b.Size = new Size (50' 50);  		b.Location = new Point (30' 30);  		b.MouseDown += b_MouseDown;  		b.MouseMove += b_MouseMove;  		b.MouseUp += b_MouseUp;  		b.Text = "text";  		if (b.GetType () == typeof(Panel))  			b.BackColor = SystemColors.Control;  		// Otherwise you couldn't see it!                      		b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  		w.Controls.Add (b);  		w.Invalidate ();  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: if (this.currentWindow != null) {  	foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  		Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    		}) as Control;  		b.Size = new Size (50' 50);  		b.Location = new Point (30' 30);  		b.MouseDown += b_MouseDown;  		b.MouseMove += b_MouseMove;  		b.MouseUp += b_MouseUp;  		b.Text = "text";  		if (b.GetType () == typeof(Panel))  			b.BackColor = SystemColors.Control;  		// Otherwise you couldn't see it!                      		b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  		w.Controls.Add (b);  		w.Invalidate ();  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  	Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    	}) as Control;  	b.Size = new Size (50' 50);  	b.Location = new Point (30' 30);  	b.MouseDown += b_MouseDown;  	b.MouseMove += b_MouseMove;  	b.MouseUp += b_MouseUp;  	b.Text = "text";  	if (b.GetType () == typeof(Panel))  		b.BackColor = SystemColors.Control;  	// Otherwise you couldn't see it!                      	b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  	w.Controls.Add (b);  	w.Invalidate ();  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  	Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    	}) as Control;  	b.Size = new Size (50' 50);  	b.Location = new Point (30' 30);  	b.MouseDown += b_MouseDown;  	b.MouseMove += b_MouseMove;  	b.MouseUp += b_MouseUp;  	b.Text = "text";  	if (b.GetType () == typeof(Panel))  		b.BackColor = SystemColors.Control;  	// Otherwise you couldn't see it!                      	b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  	w.Controls.Add (b);  	w.Invalidate ();  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  	Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    	}) as Control;  	b.Size = new Size (50' 50);  	b.Location = new Point (30' 30);  	b.MouseDown += b_MouseDown;  	b.MouseMove += b_MouseMove;  	b.MouseUp += b_MouseUp;  	b.Text = "text";  	if (b.GetType () == typeof(Panel))  		b.BackColor = SystemColors.Control;  	// Otherwise you couldn't see it!                      	b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  	w.Controls.Add (b);  	w.Invalidate ();  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: foreach (UserInterface.Classes.Desktop.Window.Window w in this.currentDesk.ListOfWindows) {  	Control b = (T)Activator.CreateInstance (typeof(T)' new object[] {    	}) as Control;  	b.Size = new Size (50' 50);  	b.Location = new Point (30' 30);  	b.MouseDown += b_MouseDown;  	b.MouseMove += b_MouseMove;  	b.MouseUp += b_MouseUp;  	b.Text = "text";  	if (b.GetType () == typeof(Panel))  		b.BackColor = SystemColors.Control;  	// Otherwise you couldn't see it!                      	b.Name = b.GetType ().Name + getNumber (true' b.GetType ()).ToString ();  	w.Controls.Add (b);  	w.Invalidate ();  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: b.Size = new Size (50' 50);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: b.Size = new Size (50' 50);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: b.Location = new Point (30' 30);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToForm,The following statement contains a magic number: b.Location = new Point (30' 30);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,b_MouseMove,The following statement contains a magic number: if (mouseMove) {  	// Length + Difference from mouse old between mouse new point. This difference must be added to the width/height.  	(sender as Control).Size = new Size (mpSize.Width + (e.X - mpBase.X)' mpSize.Height + (e.Y - mpBase.Y));  }  else {  	Rectangle rec1 = (sender as Control).DisplayRectangle;  	Rectangle rec2 = rec1;  	rec2.Inflate (-2' -2);  	Point mp = e.Location;  	if (rec1.Contains (mp) && !rec2.Contains (mp)) {  		(sender as Control).Cursor = Cursors.SizeAll;  	}  	else  		(sender as Control).Cursor = Cursors.Default;  	MoveControl (sender as Control' e);  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,b_MouseMove,The following statement contains a magic number: if (mouseMove) {  	// Length + Difference from mouse old between mouse new point. This difference must be added to the width/height.  	(sender as Control).Size = new Size (mpSize.Width + (e.X - mpBase.X)' mpSize.Height + (e.Y - mpBase.Y));  }  else {  	Rectangle rec1 = (sender as Control).DisplayRectangle;  	Rectangle rec2 = rec1;  	rec2.Inflate (-2' -2);  	Point mp = e.Location;  	if (rec1.Contains (mp) && !rec2.Contains (mp)) {  		(sender as Control).Cursor = Cursors.SizeAll;  	}  	else  		(sender as Control).Cursor = Cursors.Default;  	MoveControl (sender as Control' e);  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,b_MouseMove,The following statement contains a magic number: rec2.Inflate (-2' -2);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,b_MouseMove,The following statement contains a magic number: rec2.Inflate (-2' -2);  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (lstProperties.SelectedIndex != -1) {  	mItem.DefintionValue w;  	if (Enum.TryParse<mItem.DefintionValue> (Convert.ToString (lstProperties.SelectedItem)' out w)) {  		mItem.DefintionType t = mItem.getType (w);  		if (this.currentControl == null)  			return;  		// Create inputboxes for such fields.  		#region mDesigner  		switch (t) {  		case mItem.DefintionType.String:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					switch (w) {  					case mItem.DefintionValue.Name:  						this.currentControl.Name = sr;  						break;  					case mItem.DefintionValue.Text:  						this.currentControl.Text = sr;  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Booelan:  			{  				if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					int outt;  					if (!int.TryParse (sr' out outt))  						return;  					bool tr = false;  					tr = (Convert.ToInt32 (sr) == 1);  					switch (w) {  					case mItem.DefintionValue.ReadOnly:  						(this.currentControl as TextBox).ReadOnly = tr;  						break;  					case mItem.DefintionValue.MultiLine:  						(this.currentControl as TextBox).Multiline = tr;  						break;  					case mItem.DefintionValue.Checked:  						{  							if (this.currentControl.GetType () == typeof(RadioButton))  								(this.currentControl as RadioButton).Checked = tr;  							else if (this.currentControl.GetType () == typeof(CheckBox))  								(this.currentControl as CheckBox).Checked = tr;  						}  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Font:  			{  				using (FontDialog ufd = new FontDialog ()) {  					if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  						this.currentControl.Font = ufd.Font;  					}  				}  			}  			break;  		case mItem.DefintionType.Color:  			{  				using (ColorDialog col = new ColorDialog ()) {  					if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  						switch (w) {  						case mItem.DefintionValue.ForeColor:  							{  								this.currentControl.ForeColor = col.Color;  							}  							break;  						case mItem.DefintionValue.BackColor:  							{  								this.currentControl.BackColor = col.Color;  							}  							break;  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Integer:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					int outt;  					if (!int.TryParse (sr' out outt))  						return;  					switch (w) {  					case mItem.DefintionValue.Maximum:  						{  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Maximum = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Maximum = outt;  						}  						break;  					case mItem.DefintionValue.Minimum:  						{  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Minimum = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Minimum = outt;  						}  						break;  					case mItem.DefintionValue.Value:  						{  							try {  								if (currentControl.GetType () == typeof(ProgressBar))  									(currentControl as ProgressBar).Value = outt;  								else if (currentControl.GetType () == typeof(TrackBar))  									(currentControl as TrackBar).Value = outt;  							}  							catch {  								MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  							}  						}  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Point:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length - 1 == 1) {  							switch (w) {  							case mItem.DefintionValue.Location:  								{  									int x1 = 0;  									int x2 = 0;  									if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  										this.currentControl.Location = new Point (x1' x2);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Size:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length - 1 == 1) {  							switch (w) {  							case mItem.DefintionValue.Size:  								{  									int w_ = 0;  									int h = 0;  									if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  										this.currentControl.Size = new Size (w_' h);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.StringArr:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length != 0) {  							switch (w) {  							case mItem.DefintionValue.Items:  								{  									if (currentControl.GetType () == typeof(ListBox)) {  										ListBox tmp = currentControl as ListBox;  										tmp.Items.Clear ();  										tmp.Items.AddRange (spltArr);  									}  									else if (currentControl.GetType () == typeof(ComboBox)) {  										ComboBox tmp = currentControl as ComboBox;  										tmp.Items.Clear ();  										tmp.Items.AddRange (spltArr);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Anchor: {  			if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  					List<AnchorStyles> mLst = new List<AnchorStyles> ();  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					for (int i = 0; i <= spltArr.Length - 1; i++) {  						string current = spltArr [i];  						int outT;  						if (int.TryParse (current' out outT)) {  							switch (outT) {  							case 1:  								{  									mLst.Add (AnchorStyles.Top);  								}  								break;  							case 2:  								{  									mLst.Add (AnchorStyles.Left);  								}  								break;  							case 3:  								{  									mLst.Add (AnchorStyles.Bottom);  								}  								break;  							case 4:  								{  									mLst.Add (AnchorStyles.Right);  								}  								break;  							}  						}  					}  					AnchorStyles currentStyle = AnchorStyles.None;  					for (int i = 0; i <= mLst.Count - 1; i++) {  						currentStyle |= mLst [i];  					}  					currentControl.Anchor = currentStyle;  				}  			}  			break;  		}  		#endregion  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (lstProperties.SelectedIndex != -1) {  	mItem.DefintionValue w;  	if (Enum.TryParse<mItem.DefintionValue> (Convert.ToString (lstProperties.SelectedItem)' out w)) {  		mItem.DefintionType t = mItem.getType (w);  		if (this.currentControl == null)  			return;  		// Create inputboxes for such fields.  		#region mDesigner  		switch (t) {  		case mItem.DefintionType.String:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					switch (w) {  					case mItem.DefintionValue.Name:  						this.currentControl.Name = sr;  						break;  					case mItem.DefintionValue.Text:  						this.currentControl.Text = sr;  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Booelan:  			{  				if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					int outt;  					if (!int.TryParse (sr' out outt))  						return;  					bool tr = false;  					tr = (Convert.ToInt32 (sr) == 1);  					switch (w) {  					case mItem.DefintionValue.ReadOnly:  						(this.currentControl as TextBox).ReadOnly = tr;  						break;  					case mItem.DefintionValue.MultiLine:  						(this.currentControl as TextBox).Multiline = tr;  						break;  					case mItem.DefintionValue.Checked:  						{  							if (this.currentControl.GetType () == typeof(RadioButton))  								(this.currentControl as RadioButton).Checked = tr;  							else if (this.currentControl.GetType () == typeof(CheckBox))  								(this.currentControl as CheckBox).Checked = tr;  						}  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Font:  			{  				using (FontDialog ufd = new FontDialog ()) {  					if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  						this.currentControl.Font = ufd.Font;  					}  				}  			}  			break;  		case mItem.DefintionType.Color:  			{  				using (ColorDialog col = new ColorDialog ()) {  					if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  						switch (w) {  						case mItem.DefintionValue.ForeColor:  							{  								this.currentControl.ForeColor = col.Color;  							}  							break;  						case mItem.DefintionValue.BackColor:  							{  								this.currentControl.BackColor = col.Color;  							}  							break;  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Integer:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					int outt;  					if (!int.TryParse (sr' out outt))  						return;  					switch (w) {  					case mItem.DefintionValue.Maximum:  						{  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Maximum = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Maximum = outt;  						}  						break;  					case mItem.DefintionValue.Minimum:  						{  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Minimum = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Minimum = outt;  						}  						break;  					case mItem.DefintionValue.Value:  						{  							try {  								if (currentControl.GetType () == typeof(ProgressBar))  									(currentControl as ProgressBar).Value = outt;  								else if (currentControl.GetType () == typeof(TrackBar))  									(currentControl as TrackBar).Value = outt;  							}  							catch {  								MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  							}  						}  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Point:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length - 1 == 1) {  							switch (w) {  							case mItem.DefintionValue.Location:  								{  									int x1 = 0;  									int x2 = 0;  									if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  										this.currentControl.Location = new Point (x1' x2);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Size:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length - 1 == 1) {  							switch (w) {  							case mItem.DefintionValue.Size:  								{  									int w_ = 0;  									int h = 0;  									if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  										this.currentControl.Size = new Size (w_' h);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.StringArr:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length != 0) {  							switch (w) {  							case mItem.DefintionValue.Items:  								{  									if (currentControl.GetType () == typeof(ListBox)) {  										ListBox tmp = currentControl as ListBox;  										tmp.Items.Clear ();  										tmp.Items.AddRange (spltArr);  									}  									else if (currentControl.GetType () == typeof(ComboBox)) {  										ComboBox tmp = currentControl as ComboBox;  										tmp.Items.Clear ();  										tmp.Items.AddRange (spltArr);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Anchor: {  			if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  					List<AnchorStyles> mLst = new List<AnchorStyles> ();  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					for (int i = 0; i <= spltArr.Length - 1; i++) {  						string current = spltArr [i];  						int outT;  						if (int.TryParse (current' out outT)) {  							switch (outT) {  							case 1:  								{  									mLst.Add (AnchorStyles.Top);  								}  								break;  							case 2:  								{  									mLst.Add (AnchorStyles.Left);  								}  								break;  							case 3:  								{  									mLst.Add (AnchorStyles.Bottom);  								}  								break;  							case 4:  								{  									mLst.Add (AnchorStyles.Right);  								}  								break;  							}  						}  					}  					AnchorStyles currentStyle = AnchorStyles.None;  					for (int i = 0; i <= mLst.Count - 1; i++) {  						currentStyle |= mLst [i];  					}  					currentControl.Anchor = currentStyle;  				}  			}  			break;  		}  		#endregion  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (lstProperties.SelectedIndex != -1) {  	mItem.DefintionValue w;  	if (Enum.TryParse<mItem.DefintionValue> (Convert.ToString (lstProperties.SelectedItem)' out w)) {  		mItem.DefintionType t = mItem.getType (w);  		if (this.currentControl == null)  			return;  		// Create inputboxes for such fields.  		#region mDesigner  		switch (t) {  		case mItem.DefintionType.String:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					switch (w) {  					case mItem.DefintionValue.Name:  						this.currentControl.Name = sr;  						break;  					case mItem.DefintionValue.Text:  						this.currentControl.Text = sr;  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Booelan:  			{  				if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					int outt;  					if (!int.TryParse (sr' out outt))  						return;  					bool tr = false;  					tr = (Convert.ToInt32 (sr) == 1);  					switch (w) {  					case mItem.DefintionValue.ReadOnly:  						(this.currentControl as TextBox).ReadOnly = tr;  						break;  					case mItem.DefintionValue.MultiLine:  						(this.currentControl as TextBox).Multiline = tr;  						break;  					case mItem.DefintionValue.Checked:  						{  							if (this.currentControl.GetType () == typeof(RadioButton))  								(this.currentControl as RadioButton).Checked = tr;  							else if (this.currentControl.GetType () == typeof(CheckBox))  								(this.currentControl as CheckBox).Checked = tr;  						}  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Font:  			{  				using (FontDialog ufd = new FontDialog ()) {  					if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  						this.currentControl.Font = ufd.Font;  					}  				}  			}  			break;  		case mItem.DefintionType.Color:  			{  				using (ColorDialog col = new ColorDialog ()) {  					if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  						switch (w) {  						case mItem.DefintionValue.ForeColor:  							{  								this.currentControl.ForeColor = col.Color;  							}  							break;  						case mItem.DefintionValue.BackColor:  							{  								this.currentControl.BackColor = col.Color;  							}  							break;  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Integer:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					int outt;  					if (!int.TryParse (sr' out outt))  						return;  					switch (w) {  					case mItem.DefintionValue.Maximum:  						{  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Maximum = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Maximum = outt;  						}  						break;  					case mItem.DefintionValue.Minimum:  						{  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Minimum = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Minimum = outt;  						}  						break;  					case mItem.DefintionValue.Value:  						{  							try {  								if (currentControl.GetType () == typeof(ProgressBar))  									(currentControl as ProgressBar).Value = outt;  								else if (currentControl.GetType () == typeof(TrackBar))  									(currentControl as TrackBar).Value = outt;  							}  							catch {  								MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  							}  						}  						break;  					}  				}  			}  			break;  		case mItem.DefintionType.Point:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length - 1 == 1) {  							switch (w) {  							case mItem.DefintionValue.Location:  								{  									int x1 = 0;  									int x2 = 0;  									if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  										this.currentControl.Location = new Point (x1' x2);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Size:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length - 1 == 1) {  							switch (w) {  							case mItem.DefintionValue.Size:  								{  									int w_ = 0;  									int h = 0;  									if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  										this.currentControl.Size = new Size (w_' h);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.StringArr:  			{  				if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  					string sr = _InputBox.Input.Rückgabe;  					if (sr.Contains ("'")) {  						string[] spltArr = sr.Split (new string[] {  							"'"  						}' StringSplitOptions.RemoveEmptyEntries);  						if (spltArr.Length != 0) {  							switch (w) {  							case mItem.DefintionValue.Items:  								{  									if (currentControl.GetType () == typeof(ListBox)) {  										ListBox tmp = currentControl as ListBox;  										tmp.Items.Clear ();  										tmp.Items.AddRange (spltArr);  									}  									else if (currentControl.GetType () == typeof(ComboBox)) {  										ComboBox tmp = currentControl as ComboBox;  										tmp.Items.Clear ();  										tmp.Items.AddRange (spltArr);  									}  								}  								break;  							}  						}  					}  				}  			}  			break;  		case mItem.DefintionType.Anchor: {  			if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  					List<AnchorStyles> mLst = new List<AnchorStyles> ();  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					for (int i = 0; i <= spltArr.Length - 1; i++) {  						string current = spltArr [i];  						int outT;  						if (int.TryParse (current' out outT)) {  							switch (outT) {  							case 1:  								{  									mLst.Add (AnchorStyles.Top);  								}  								break;  							case 2:  								{  									mLst.Add (AnchorStyles.Left);  								}  								break;  							case 3:  								{  									mLst.Add (AnchorStyles.Bottom);  								}  								break;  							case 4:  								{  									mLst.Add (AnchorStyles.Right);  								}  								break;  							}  						}  					}  					AnchorStyles currentStyle = AnchorStyles.None;  					for (int i = 0; i <= mLst.Count - 1; i++) {  						currentStyle |= mLst [i];  					}  					currentControl.Anchor = currentStyle;  				}  			}  			break;  		}  		#endregion  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (Enum.TryParse<mItem.DefintionValue> (Convert.ToString (lstProperties.SelectedItem)' out w)) {  	mItem.DefintionType t = mItem.getType (w);  	if (this.currentControl == null)  		return;  	// Create inputboxes for such fields.  	#region mDesigner  	switch (t) {  	case mItem.DefintionType.String:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				switch (w) {  				case mItem.DefintionValue.Name:  					this.currentControl.Name = sr;  					break;  				case mItem.DefintionValue.Text:  					this.currentControl.Text = sr;  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Booelan:  		{  			if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				int outt;  				if (!int.TryParse (sr' out outt))  					return;  				bool tr = false;  				tr = (Convert.ToInt32 (sr) == 1);  				switch (w) {  				case mItem.DefintionValue.ReadOnly:  					(this.currentControl as TextBox).ReadOnly = tr;  					break;  				case mItem.DefintionValue.MultiLine:  					(this.currentControl as TextBox).Multiline = tr;  					break;  				case mItem.DefintionValue.Checked:  					{  						if (this.currentControl.GetType () == typeof(RadioButton))  							(this.currentControl as RadioButton).Checked = tr;  						else if (this.currentControl.GetType () == typeof(CheckBox))  							(this.currentControl as CheckBox).Checked = tr;  					}  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Font:  		{  			using (FontDialog ufd = new FontDialog ()) {  				if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  					this.currentControl.Font = ufd.Font;  				}  			}  		}  		break;  	case mItem.DefintionType.Color:  		{  			using (ColorDialog col = new ColorDialog ()) {  				if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  					switch (w) {  					case mItem.DefintionValue.ForeColor:  						{  							this.currentControl.ForeColor = col.Color;  						}  						break;  					case mItem.DefintionValue.BackColor:  						{  							this.currentControl.BackColor = col.Color;  						}  						break;  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Integer:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				int outt;  				if (!int.TryParse (sr' out outt))  					return;  				switch (w) {  				case mItem.DefintionValue.Maximum:  					{  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Maximum = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Maximum = outt;  					}  					break;  				case mItem.DefintionValue.Minimum:  					{  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Minimum = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Minimum = outt;  					}  					break;  				case mItem.DefintionValue.Value:  					{  						try {  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Value = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Value = outt;  						}  						catch {  							MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  						}  					}  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Point:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length - 1 == 1) {  						switch (w) {  						case mItem.DefintionValue.Location:  							{  								int x1 = 0;  								int x2 = 0;  								if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  									this.currentControl.Location = new Point (x1' x2);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Size:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length - 1 == 1) {  						switch (w) {  						case mItem.DefintionValue.Size:  							{  								int w_ = 0;  								int h = 0;  								if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  									this.currentControl.Size = new Size (w_' h);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.StringArr:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length != 0) {  						switch (w) {  						case mItem.DefintionValue.Items:  							{  								if (currentControl.GetType () == typeof(ListBox)) {  									ListBox tmp = currentControl as ListBox;  									tmp.Items.Clear ();  									tmp.Items.AddRange (spltArr);  								}  								else if (currentControl.GetType () == typeof(ComboBox)) {  									ComboBox tmp = currentControl as ComboBox;  									tmp.Items.Clear ();  									tmp.Items.AddRange (spltArr);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Anchor: {  		if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  				List<AnchorStyles> mLst = new List<AnchorStyles> ();  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				for (int i = 0; i <= spltArr.Length - 1; i++) {  					string current = spltArr [i];  					int outT;  					if (int.TryParse (current' out outT)) {  						switch (outT) {  						case 1:  							{  								mLst.Add (AnchorStyles.Top);  							}  							break;  						case 2:  							{  								mLst.Add (AnchorStyles.Left);  							}  							break;  						case 3:  							{  								mLst.Add (AnchorStyles.Bottom);  							}  							break;  						case 4:  							{  								mLst.Add (AnchorStyles.Right);  							}  							break;  						}  					}  				}  				AnchorStyles currentStyle = AnchorStyles.None;  				for (int i = 0; i <= mLst.Count - 1; i++) {  					currentStyle |= mLst [i];  				}  				currentControl.Anchor = currentStyle;  			}  		}  		break;  	}  	#endregion  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (Enum.TryParse<mItem.DefintionValue> (Convert.ToString (lstProperties.SelectedItem)' out w)) {  	mItem.DefintionType t = mItem.getType (w);  	if (this.currentControl == null)  		return;  	// Create inputboxes for such fields.  	#region mDesigner  	switch (t) {  	case mItem.DefintionType.String:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				switch (w) {  				case mItem.DefintionValue.Name:  					this.currentControl.Name = sr;  					break;  				case mItem.DefintionValue.Text:  					this.currentControl.Text = sr;  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Booelan:  		{  			if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				int outt;  				if (!int.TryParse (sr' out outt))  					return;  				bool tr = false;  				tr = (Convert.ToInt32 (sr) == 1);  				switch (w) {  				case mItem.DefintionValue.ReadOnly:  					(this.currentControl as TextBox).ReadOnly = tr;  					break;  				case mItem.DefintionValue.MultiLine:  					(this.currentControl as TextBox).Multiline = tr;  					break;  				case mItem.DefintionValue.Checked:  					{  						if (this.currentControl.GetType () == typeof(RadioButton))  							(this.currentControl as RadioButton).Checked = tr;  						else if (this.currentControl.GetType () == typeof(CheckBox))  							(this.currentControl as CheckBox).Checked = tr;  					}  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Font:  		{  			using (FontDialog ufd = new FontDialog ()) {  				if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  					this.currentControl.Font = ufd.Font;  				}  			}  		}  		break;  	case mItem.DefintionType.Color:  		{  			using (ColorDialog col = new ColorDialog ()) {  				if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  					switch (w) {  					case mItem.DefintionValue.ForeColor:  						{  							this.currentControl.ForeColor = col.Color;  						}  						break;  					case mItem.DefintionValue.BackColor:  						{  							this.currentControl.BackColor = col.Color;  						}  						break;  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Integer:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				int outt;  				if (!int.TryParse (sr' out outt))  					return;  				switch (w) {  				case mItem.DefintionValue.Maximum:  					{  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Maximum = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Maximum = outt;  					}  					break;  				case mItem.DefintionValue.Minimum:  					{  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Minimum = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Minimum = outt;  					}  					break;  				case mItem.DefintionValue.Value:  					{  						try {  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Value = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Value = outt;  						}  						catch {  							MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  						}  					}  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Point:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length - 1 == 1) {  						switch (w) {  						case mItem.DefintionValue.Location:  							{  								int x1 = 0;  								int x2 = 0;  								if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  									this.currentControl.Location = new Point (x1' x2);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Size:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length - 1 == 1) {  						switch (w) {  						case mItem.DefintionValue.Size:  							{  								int w_ = 0;  								int h = 0;  								if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  									this.currentControl.Size = new Size (w_' h);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.StringArr:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length != 0) {  						switch (w) {  						case mItem.DefintionValue.Items:  							{  								if (currentControl.GetType () == typeof(ListBox)) {  									ListBox tmp = currentControl as ListBox;  									tmp.Items.Clear ();  									tmp.Items.AddRange (spltArr);  								}  								else if (currentControl.GetType () == typeof(ComboBox)) {  									ComboBox tmp = currentControl as ComboBox;  									tmp.Items.Clear ();  									tmp.Items.AddRange (spltArr);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Anchor: {  		if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  				List<AnchorStyles> mLst = new List<AnchorStyles> ();  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				for (int i = 0; i <= spltArr.Length - 1; i++) {  					string current = spltArr [i];  					int outT;  					if (int.TryParse (current' out outT)) {  						switch (outT) {  						case 1:  							{  								mLst.Add (AnchorStyles.Top);  							}  							break;  						case 2:  							{  								mLst.Add (AnchorStyles.Left);  							}  							break;  						case 3:  							{  								mLst.Add (AnchorStyles.Bottom);  							}  							break;  						case 4:  							{  								mLst.Add (AnchorStyles.Right);  							}  							break;  						}  					}  				}  				AnchorStyles currentStyle = AnchorStyles.None;  				for (int i = 0; i <= mLst.Count - 1; i++) {  					currentStyle |= mLst [i];  				}  				currentControl.Anchor = currentStyle;  			}  		}  		break;  	}  	#endregion  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (Enum.TryParse<mItem.DefintionValue> (Convert.ToString (lstProperties.SelectedItem)' out w)) {  	mItem.DefintionType t = mItem.getType (w);  	if (this.currentControl == null)  		return;  	// Create inputboxes for such fields.  	#region mDesigner  	switch (t) {  	case mItem.DefintionType.String:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				switch (w) {  				case mItem.DefintionValue.Name:  					this.currentControl.Name = sr;  					break;  				case mItem.DefintionValue.Text:  					this.currentControl.Text = sr;  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Booelan:  		{  			if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				int outt;  				if (!int.TryParse (sr' out outt))  					return;  				bool tr = false;  				tr = (Convert.ToInt32 (sr) == 1);  				switch (w) {  				case mItem.DefintionValue.ReadOnly:  					(this.currentControl as TextBox).ReadOnly = tr;  					break;  				case mItem.DefintionValue.MultiLine:  					(this.currentControl as TextBox).Multiline = tr;  					break;  				case mItem.DefintionValue.Checked:  					{  						if (this.currentControl.GetType () == typeof(RadioButton))  							(this.currentControl as RadioButton).Checked = tr;  						else if (this.currentControl.GetType () == typeof(CheckBox))  							(this.currentControl as CheckBox).Checked = tr;  					}  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Font:  		{  			using (FontDialog ufd = new FontDialog ()) {  				if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  					this.currentControl.Font = ufd.Font;  				}  			}  		}  		break;  	case mItem.DefintionType.Color:  		{  			using (ColorDialog col = new ColorDialog ()) {  				if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  					switch (w) {  					case mItem.DefintionValue.ForeColor:  						{  							this.currentControl.ForeColor = col.Color;  						}  						break;  					case mItem.DefintionValue.BackColor:  						{  							this.currentControl.BackColor = col.Color;  						}  						break;  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Integer:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				int outt;  				if (!int.TryParse (sr' out outt))  					return;  				switch (w) {  				case mItem.DefintionValue.Maximum:  					{  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Maximum = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Maximum = outt;  					}  					break;  				case mItem.DefintionValue.Minimum:  					{  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Minimum = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Minimum = outt;  					}  					break;  				case mItem.DefintionValue.Value:  					{  						try {  							if (currentControl.GetType () == typeof(ProgressBar))  								(currentControl as ProgressBar).Value = outt;  							else if (currentControl.GetType () == typeof(TrackBar))  								(currentControl as TrackBar).Value = outt;  						}  						catch {  							MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  						}  					}  					break;  				}  			}  		}  		break;  	case mItem.DefintionType.Point:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length - 1 == 1) {  						switch (w) {  						case mItem.DefintionValue.Location:  							{  								int x1 = 0;  								int x2 = 0;  								if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  									this.currentControl.Location = new Point (x1' x2);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Size:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length - 1 == 1) {  						switch (w) {  						case mItem.DefintionValue.Size:  							{  								int w_ = 0;  								int h = 0;  								if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  									this.currentControl.Size = new Size (w_' h);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.StringArr:  		{  			if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  				string sr = _InputBox.Input.Rückgabe;  				if (sr.Contains ("'")) {  					string[] spltArr = sr.Split (new string[] {  						"'"  					}' StringSplitOptions.RemoveEmptyEntries);  					if (spltArr.Length != 0) {  						switch (w) {  						case mItem.DefintionValue.Items:  							{  								if (currentControl.GetType () == typeof(ListBox)) {  									ListBox tmp = currentControl as ListBox;  									tmp.Items.Clear ();  									tmp.Items.AddRange (spltArr);  								}  								else if (currentControl.GetType () == typeof(ComboBox)) {  									ComboBox tmp = currentControl as ComboBox;  									tmp.Items.Clear ();  									tmp.Items.AddRange (spltArr);  								}  							}  							break;  						}  					}  				}  			}  		}  		break;  	case mItem.DefintionType.Anchor: {  		if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  				List<AnchorStyles> mLst = new List<AnchorStyles> ();  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				for (int i = 0; i <= spltArr.Length - 1; i++) {  					string current = spltArr [i];  					int outT;  					if (int.TryParse (current' out outT)) {  						switch (outT) {  						case 1:  							{  								mLst.Add (AnchorStyles.Top);  							}  							break;  						case 2:  							{  								mLst.Add (AnchorStyles.Left);  							}  							break;  						case 3:  							{  								mLst.Add (AnchorStyles.Bottom);  							}  							break;  						case 4:  							{  								mLst.Add (AnchorStyles.Right);  							}  							break;  						}  					}  				}  				AnchorStyles currentStyle = AnchorStyles.None;  				for (int i = 0; i <= mLst.Count - 1; i++) {  					currentStyle |= mLst [i];  				}  				currentControl.Anchor = currentStyle;  			}  		}  		break;  	}  	#endregion  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: switch (t) {  case mItem.DefintionType.String:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			switch (w) {  			case mItem.DefintionValue.Name:  				this.currentControl.Name = sr;  				break;  			case mItem.DefintionValue.Text:  				this.currentControl.Text = sr;  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Booelan:  	{  		if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			bool tr = false;  			tr = (Convert.ToInt32 (sr) == 1);  			switch (w) {  			case mItem.DefintionValue.ReadOnly:  				(this.currentControl as TextBox).ReadOnly = tr;  				break;  			case mItem.DefintionValue.MultiLine:  				(this.currentControl as TextBox).Multiline = tr;  				break;  			case mItem.DefintionValue.Checked:  				{  					if (this.currentControl.GetType () == typeof(RadioButton))  						(this.currentControl as RadioButton).Checked = tr;  					else if (this.currentControl.GetType () == typeof(CheckBox))  						(this.currentControl as CheckBox).Checked = tr;  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Font:  	{  		using (FontDialog ufd = new FontDialog ()) {  			if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				this.currentControl.Font = ufd.Font;  			}  		}  	}  	break;  case mItem.DefintionType.Color:  	{  		using (ColorDialog col = new ColorDialog ()) {  			if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				switch (w) {  				case mItem.DefintionValue.ForeColor:  					{  						this.currentControl.ForeColor = col.Color;  					}  					break;  				case mItem.DefintionValue.BackColor:  					{  						this.currentControl.BackColor = col.Color;  					}  					break;  				}  			}  		}  	}  	break;  case mItem.DefintionType.Integer:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			switch (w) {  			case mItem.DefintionValue.Maximum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Maximum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Maximum = outt;  				}  				break;  			case mItem.DefintionValue.Minimum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Minimum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Minimum = outt;  				}  				break;  			case mItem.DefintionValue.Value:  				{  					try {  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Value = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Value = outt;  					}  					catch {  						MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  					}  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Point:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Location:  						{  							int x1 = 0;  							int x2 = 0;  							if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  								this.currentControl.Location = new Point (x1' x2);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Size:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Size:  						{  							int w_ = 0;  							int h = 0;  							if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  								this.currentControl.Size = new Size (w_' h);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.StringArr:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length != 0) {  					switch (w) {  					case mItem.DefintionValue.Items:  						{  							if (currentControl.GetType () == typeof(ListBox)) {  								ListBox tmp = currentControl as ListBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  							else if (currentControl.GetType () == typeof(ComboBox)) {  								ComboBox tmp = currentControl as ComboBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Anchor: {  	if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  		string sr = _InputBox.Input.Rückgabe;  		if (sr.Contains ("'")) {  			currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  			List<AnchorStyles> mLst = new List<AnchorStyles> ();  			string[] spltArr = sr.Split (new string[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			for (int i = 0; i <= spltArr.Length - 1; i++) {  				string current = spltArr [i];  				int outT;  				if (int.TryParse (current' out outT)) {  					switch (outT) {  					case 1:  						{  							mLst.Add (AnchorStyles.Top);  						}  						break;  					case 2:  						{  							mLst.Add (AnchorStyles.Left);  						}  						break;  					case 3:  						{  							mLst.Add (AnchorStyles.Bottom);  						}  						break;  					case 4:  						{  							mLst.Add (AnchorStyles.Right);  						}  						break;  					}  				}  			}  			AnchorStyles currentStyle = AnchorStyles.None;  			for (int i = 0; i <= mLst.Count - 1; i++) {  				currentStyle |= mLst [i];  			}  			currentControl.Anchor = currentStyle;  		}  	}  	break;  }  #endregion  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: switch (t) {  case mItem.DefintionType.String:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			switch (w) {  			case mItem.DefintionValue.Name:  				this.currentControl.Name = sr;  				break;  			case mItem.DefintionValue.Text:  				this.currentControl.Text = sr;  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Booelan:  	{  		if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			bool tr = false;  			tr = (Convert.ToInt32 (sr) == 1);  			switch (w) {  			case mItem.DefintionValue.ReadOnly:  				(this.currentControl as TextBox).ReadOnly = tr;  				break;  			case mItem.DefintionValue.MultiLine:  				(this.currentControl as TextBox).Multiline = tr;  				break;  			case mItem.DefintionValue.Checked:  				{  					if (this.currentControl.GetType () == typeof(RadioButton))  						(this.currentControl as RadioButton).Checked = tr;  					else if (this.currentControl.GetType () == typeof(CheckBox))  						(this.currentControl as CheckBox).Checked = tr;  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Font:  	{  		using (FontDialog ufd = new FontDialog ()) {  			if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				this.currentControl.Font = ufd.Font;  			}  		}  	}  	break;  case mItem.DefintionType.Color:  	{  		using (ColorDialog col = new ColorDialog ()) {  			if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				switch (w) {  				case mItem.DefintionValue.ForeColor:  					{  						this.currentControl.ForeColor = col.Color;  					}  					break;  				case mItem.DefintionValue.BackColor:  					{  						this.currentControl.BackColor = col.Color;  					}  					break;  				}  			}  		}  	}  	break;  case mItem.DefintionType.Integer:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			switch (w) {  			case mItem.DefintionValue.Maximum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Maximum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Maximum = outt;  				}  				break;  			case mItem.DefintionValue.Minimum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Minimum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Minimum = outt;  				}  				break;  			case mItem.DefintionValue.Value:  				{  					try {  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Value = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Value = outt;  					}  					catch {  						MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  					}  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Point:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Location:  						{  							int x1 = 0;  							int x2 = 0;  							if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  								this.currentControl.Location = new Point (x1' x2);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Size:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Size:  						{  							int w_ = 0;  							int h = 0;  							if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  								this.currentControl.Size = new Size (w_' h);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.StringArr:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length != 0) {  					switch (w) {  					case mItem.DefintionValue.Items:  						{  							if (currentControl.GetType () == typeof(ListBox)) {  								ListBox tmp = currentControl as ListBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  							else if (currentControl.GetType () == typeof(ComboBox)) {  								ComboBox tmp = currentControl as ComboBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Anchor: {  	if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  		string sr = _InputBox.Input.Rückgabe;  		if (sr.Contains ("'")) {  			currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  			List<AnchorStyles> mLst = new List<AnchorStyles> ();  			string[] spltArr = sr.Split (new string[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			for (int i = 0; i <= spltArr.Length - 1; i++) {  				string current = spltArr [i];  				int outT;  				if (int.TryParse (current' out outT)) {  					switch (outT) {  					case 1:  						{  							mLst.Add (AnchorStyles.Top);  						}  						break;  					case 2:  						{  							mLst.Add (AnchorStyles.Left);  						}  						break;  					case 3:  						{  							mLst.Add (AnchorStyles.Bottom);  						}  						break;  					case 4:  						{  							mLst.Add (AnchorStyles.Right);  						}  						break;  					}  				}  			}  			AnchorStyles currentStyle = AnchorStyles.None;  			for (int i = 0; i <= mLst.Count - 1; i++) {  				currentStyle |= mLst [i];  			}  			currentControl.Anchor = currentStyle;  		}  	}  	break;  }  #endregion  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: switch (t) {  case mItem.DefintionType.String:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			switch (w) {  			case mItem.DefintionValue.Name:  				this.currentControl.Name = sr;  				break;  			case mItem.DefintionValue.Text:  				this.currentControl.Text = sr;  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Booelan:  	{  		if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			bool tr = false;  			tr = (Convert.ToInt32 (sr) == 1);  			switch (w) {  			case mItem.DefintionValue.ReadOnly:  				(this.currentControl as TextBox).ReadOnly = tr;  				break;  			case mItem.DefintionValue.MultiLine:  				(this.currentControl as TextBox).Multiline = tr;  				break;  			case mItem.DefintionValue.Checked:  				{  					if (this.currentControl.GetType () == typeof(RadioButton))  						(this.currentControl as RadioButton).Checked = tr;  					else if (this.currentControl.GetType () == typeof(CheckBox))  						(this.currentControl as CheckBox).Checked = tr;  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Font:  	{  		using (FontDialog ufd = new FontDialog ()) {  			if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				this.currentControl.Font = ufd.Font;  			}  		}  	}  	break;  case mItem.DefintionType.Color:  	{  		using (ColorDialog col = new ColorDialog ()) {  			if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				switch (w) {  				case mItem.DefintionValue.ForeColor:  					{  						this.currentControl.ForeColor = col.Color;  					}  					break;  				case mItem.DefintionValue.BackColor:  					{  						this.currentControl.BackColor = col.Color;  					}  					break;  				}  			}  		}  	}  	break;  case mItem.DefintionType.Integer:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			switch (w) {  			case mItem.DefintionValue.Maximum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Maximum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Maximum = outt;  				}  				break;  			case mItem.DefintionValue.Minimum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Minimum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Minimum = outt;  				}  				break;  			case mItem.DefintionValue.Value:  				{  					try {  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Value = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Value = outt;  					}  					catch {  						MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  					}  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Point:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Location:  						{  							int x1 = 0;  							int x2 = 0;  							if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  								this.currentControl.Location = new Point (x1' x2);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Size:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Size:  						{  							int w_ = 0;  							int h = 0;  							if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  								this.currentControl.Size = new Size (w_' h);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.StringArr:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length != 0) {  					switch (w) {  					case mItem.DefintionValue.Items:  						{  							if (currentControl.GetType () == typeof(ListBox)) {  								ListBox tmp = currentControl as ListBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  							else if (currentControl.GetType () == typeof(ComboBox)) {  								ComboBox tmp = currentControl as ComboBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Anchor: {  	if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  		string sr = _InputBox.Input.Rückgabe;  		if (sr.Contains ("'")) {  			currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  			List<AnchorStyles> mLst = new List<AnchorStyles> ();  			string[] spltArr = sr.Split (new string[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			for (int i = 0; i <= spltArr.Length - 1; i++) {  				string current = spltArr [i];  				int outT;  				if (int.TryParse (current' out outT)) {  					switch (outT) {  					case 1:  						{  							mLst.Add (AnchorStyles.Top);  						}  						break;  					case 2:  						{  							mLst.Add (AnchorStyles.Left);  						}  						break;  					case 3:  						{  							mLst.Add (AnchorStyles.Bottom);  						}  						break;  					case 4:  						{  							mLst.Add (AnchorStyles.Right);  						}  						break;  					}  				}  			}  			AnchorStyles currentStyle = AnchorStyles.None;  			for (int i = 0; i <= mLst.Count - 1; i++) {  				currentStyle |= mLst [i];  			}  			currentControl.Anchor = currentStyle;  		}  	}  	break;  }  #endregion  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  	string sr = _InputBox.Input.Rückgabe;  	if (sr.Contains ("'")) {  		currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  		List<AnchorStyles> mLst = new List<AnchorStyles> ();  		string[] spltArr = sr.Split (new string[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries);  		for (int i = 0; i <= spltArr.Length - 1; i++) {  			string current = spltArr [i];  			int outT;  			if (int.TryParse (current' out outT)) {  				switch (outT) {  				case 1:  					{  						mLst.Add (AnchorStyles.Top);  					}  					break;  				case 2:  					{  						mLst.Add (AnchorStyles.Left);  					}  					break;  				case 3:  					{  						mLst.Add (AnchorStyles.Bottom);  					}  					break;  				case 4:  					{  						mLst.Add (AnchorStyles.Right);  					}  					break;  				}  			}  		}  		AnchorStyles currentStyle = AnchorStyles.None;  		for (int i = 0; i <= mLst.Count - 1; i++) {  			currentStyle |= mLst [i];  		}  		currentControl.Anchor = currentStyle;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  	string sr = _InputBox.Input.Rückgabe;  	if (sr.Contains ("'")) {  		currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  		List<AnchorStyles> mLst = new List<AnchorStyles> ();  		string[] spltArr = sr.Split (new string[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries);  		for (int i = 0; i <= spltArr.Length - 1; i++) {  			string current = spltArr [i];  			int outT;  			if (int.TryParse (current' out outT)) {  				switch (outT) {  				case 1:  					{  						mLst.Add (AnchorStyles.Top);  					}  					break;  				case 2:  					{  						mLst.Add (AnchorStyles.Left);  					}  					break;  				case 3:  					{  						mLst.Add (AnchorStyles.Bottom);  					}  					break;  				case 4:  					{  						mLst.Add (AnchorStyles.Right);  					}  					break;  				}  			}  		}  		AnchorStyles currentStyle = AnchorStyles.None;  		for (int i = 0; i <= mLst.Count - 1; i++) {  			currentStyle |= mLst [i];  		}  		currentControl.Anchor = currentStyle;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  	string sr = _InputBox.Input.Rückgabe;  	if (sr.Contains ("'")) {  		currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  		List<AnchorStyles> mLst = new List<AnchorStyles> ();  		string[] spltArr = sr.Split (new string[] {  			"'"  		}' StringSplitOptions.RemoveEmptyEntries);  		for (int i = 0; i <= spltArr.Length - 1; i++) {  			string current = spltArr [i];  			int outT;  			if (int.TryParse (current' out outT)) {  				switch (outT) {  				case 1:  					{  						mLst.Add (AnchorStyles.Top);  					}  					break;  				case 2:  					{  						mLst.Add (AnchorStyles.Left);  					}  					break;  				case 3:  					{  						mLst.Add (AnchorStyles.Bottom);  					}  					break;  				case 4:  					{  						mLst.Add (AnchorStyles.Right);  					}  					break;  				}  			}  		}  		AnchorStyles currentStyle = AnchorStyles.None;  		for (int i = 0; i <= mLst.Count - 1; i++) {  			currentStyle |= mLst [i];  		}  		currentControl.Anchor = currentStyle;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (sr.Contains ("'")) {  	currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  	List<AnchorStyles> mLst = new List<AnchorStyles> ();  	string[] spltArr = sr.Split (new string[] {  		"'"  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i <= spltArr.Length - 1; i++) {  		string current = spltArr [i];  		int outT;  		if (int.TryParse (current' out outT)) {  			switch (outT) {  			case 1:  				{  					mLst.Add (AnchorStyles.Top);  				}  				break;  			case 2:  				{  					mLst.Add (AnchorStyles.Left);  				}  				break;  			case 3:  				{  					mLst.Add (AnchorStyles.Bottom);  				}  				break;  			case 4:  				{  					mLst.Add (AnchorStyles.Right);  				}  				break;  			}  		}  	}  	AnchorStyles currentStyle = AnchorStyles.None;  	for (int i = 0; i <= mLst.Count - 1; i++) {  		currentStyle |= mLst [i];  	}  	currentControl.Anchor = currentStyle;  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (sr.Contains ("'")) {  	currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  	List<AnchorStyles> mLst = new List<AnchorStyles> ();  	string[] spltArr = sr.Split (new string[] {  		"'"  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i <= spltArr.Length - 1; i++) {  		string current = spltArr [i];  		int outT;  		if (int.TryParse (current' out outT)) {  			switch (outT) {  			case 1:  				{  					mLst.Add (AnchorStyles.Top);  				}  				break;  			case 2:  				{  					mLst.Add (AnchorStyles.Left);  				}  				break;  			case 3:  				{  					mLst.Add (AnchorStyles.Bottom);  				}  				break;  			case 4:  				{  					mLst.Add (AnchorStyles.Right);  				}  				break;  			}  		}  	}  	AnchorStyles currentStyle = AnchorStyles.None;  	for (int i = 0; i <= mLst.Count - 1; i++) {  		currentStyle |= mLst [i];  	}  	currentControl.Anchor = currentStyle;  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (sr.Contains ("'")) {  	currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  	List<AnchorStyles> mLst = new List<AnchorStyles> ();  	string[] spltArr = sr.Split (new string[] {  		"'"  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i <= spltArr.Length - 1; i++) {  		string current = spltArr [i];  		int outT;  		if (int.TryParse (current' out outT)) {  			switch (outT) {  			case 1:  				{  					mLst.Add (AnchorStyles.Top);  				}  				break;  			case 2:  				{  					mLst.Add (AnchorStyles.Left);  				}  				break;  			case 3:  				{  					mLst.Add (AnchorStyles.Bottom);  				}  				break;  			case 4:  				{  					mLst.Add (AnchorStyles.Right);  				}  				break;  			}  		}  	}  	AnchorStyles currentStyle = AnchorStyles.None;  	for (int i = 0; i <= mLst.Count - 1; i++) {  		currentStyle |= mLst [i];  	}  	currentControl.Anchor = currentStyle;  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: for (int i = 0; i <= spltArr.Length - 1; i++) {  	string current = spltArr [i];  	int outT;  	if (int.TryParse (current' out outT)) {  		switch (outT) {  		case 1:  			{  				mLst.Add (AnchorStyles.Top);  			}  			break;  		case 2:  			{  				mLst.Add (AnchorStyles.Left);  			}  			break;  		case 3:  			{  				mLst.Add (AnchorStyles.Bottom);  			}  			break;  		case 4:  			{  				mLst.Add (AnchorStyles.Right);  			}  			break;  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: for (int i = 0; i <= spltArr.Length - 1; i++) {  	string current = spltArr [i];  	int outT;  	if (int.TryParse (current' out outT)) {  		switch (outT) {  		case 1:  			{  				mLst.Add (AnchorStyles.Top);  			}  			break;  		case 2:  			{  				mLst.Add (AnchorStyles.Left);  			}  			break;  		case 3:  			{  				mLst.Add (AnchorStyles.Bottom);  			}  			break;  		case 4:  			{  				mLst.Add (AnchorStyles.Right);  			}  			break;  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: for (int i = 0; i <= spltArr.Length - 1; i++) {  	string current = spltArr [i];  	int outT;  	if (int.TryParse (current' out outT)) {  		switch (outT) {  		case 1:  			{  				mLst.Add (AnchorStyles.Top);  			}  			break;  		case 2:  			{  				mLst.Add (AnchorStyles.Left);  			}  			break;  		case 3:  			{  				mLst.Add (AnchorStyles.Bottom);  			}  			break;  		case 4:  			{  				mLst.Add (AnchorStyles.Right);  			}  			break;  		}  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (int.TryParse (current' out outT)) {  	switch (outT) {  	case 1:  		{  			mLst.Add (AnchorStyles.Top);  		}  		break;  	case 2:  		{  			mLst.Add (AnchorStyles.Left);  		}  		break;  	case 3:  		{  			mLst.Add (AnchorStyles.Bottom);  		}  		break;  	case 4:  		{  			mLst.Add (AnchorStyles.Right);  		}  		break;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (int.TryParse (current' out outT)) {  	switch (outT) {  	case 1:  		{  			mLst.Add (AnchorStyles.Top);  		}  		break;  	case 2:  		{  			mLst.Add (AnchorStyles.Left);  		}  		break;  	case 3:  		{  			mLst.Add (AnchorStyles.Bottom);  		}  		break;  	case 4:  		{  			mLst.Add (AnchorStyles.Right);  		}  		break;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: if (int.TryParse (current' out outT)) {  	switch (outT) {  	case 1:  		{  			mLst.Add (AnchorStyles.Top);  		}  		break;  	case 2:  		{  			mLst.Add (AnchorStyles.Left);  		}  		break;  	case 3:  		{  			mLst.Add (AnchorStyles.Bottom);  		}  		break;  	case 4:  		{  			mLst.Add (AnchorStyles.Right);  		}  		break;  	}  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: switch (outT) {  case 1:  	{  		mLst.Add (AnchorStyles.Top);  	}  	break;  case 2:  	{  		mLst.Add (AnchorStyles.Left);  	}  	break;  case 3:  	{  		mLst.Add (AnchorStyles.Bottom);  	}  	break;  case 4:  	{  		mLst.Add (AnchorStyles.Right);  	}  	break;  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: switch (outT) {  case 1:  	{  		mLst.Add (AnchorStyles.Top);  	}  	break;  case 2:  	{  		mLst.Add (AnchorStyles.Left);  	}  	break;  case 3:  	{  		mLst.Add (AnchorStyles.Bottom);  	}  	break;  case 4:  	{  		mLst.Add (AnchorStyles.Right);  	}  	break;  }  
Magic Number,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following statement contains a magic number: switch (outT) {  case 1:  	{  		mLst.Add (AnchorStyles.Top);  	}  	break;  case 2:  	{  		mLst.Add (AnchorStyles.Left);  	}  	break;  case 3:  	{  		mLst.Add (AnchorStyles.Bottom);  	}  	break;  case 4:  	{  		mLst.Add (AnchorStyles.Right);  	}  	break;  }  
Duplicate Code,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getPCodeDesign,The method contains a code clone-set at the following line numbers (starting from the method definition): ((97' 118)' (121' 142))
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getPCodeDesign,The following switch statement is missing a default case: switch (ctnl.GetType ().Name) {  case "Button":  case "TextBox":  case "CheckBox":  case "RadioButton":  case "Label":  	{  		cr.Add (String.Concat (new string[] {  			brd'  			init'  			"Text = \""'  			ctnl.Text'  			"\";"  		}));  		;  	}  	break;  case "TrackBar":  case "ProgressBar":  	{  		if (ctnl.GetType () == typeof(ProgressBar)) {  			ProgressBar tmp = ctnl as ProgressBar;  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Value = "'  				tmp.Value.ToString ()'  				";"  			}));  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Minimum = "'  				tmp.Minimum.ToString ()'  				";"  			}));  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Maximum = "'  				tmp.Maximum.ToString ()'  				";"  			}));  		}  		else {  			TrackBar tmp = ctnl as TrackBar;  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Value = "'  				tmp.Value.ToString ()'  				";"  			}));  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Minimum = "'  				tmp.Minimum.ToString ()'  				";"  			}));  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Maximum = "'  				tmp.Maximum.ToString ()'  				";"  			}));  		}  	}  	break;  case "ListBox":  case "ComoBox":  	{  		if (ctnl.GetType () == typeof(ListBox)) {  			ListBox tmp = ctnl as ListBox;  			string current = string.Empty;  			for (int i = 0; i <= tmp.Items.Count - 1; i++) {  				if (i != tmp.Items.Count - 1)  					current += "\"" + Convert.ToString (tmp.Items [i]) + "\"' ";  				else  					current += "\"" + Convert.ToString (tmp.Items [i]) + "\"";  			}  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Items.AddRange(new string[] {"'  				current'  				"});"  			}));  		}  		else if (ctnl.GetType () == typeof(ComboBox)) {  			ComboBox tmp = ctnl as ComboBox;  			string current = string.Empty;  			for (int i = 0; i <= tmp.Items.Count - 1; i++) {  				if (i != tmp.Items.Count - 1)  					current += "\"" + Convert.ToString (tmp.Items [i]) + "\"' ";  				else  					current += "\"" + Convert.ToString (tmp.Items [i]) + "\"";  			}  			cr.Add (String.Concat (new string[] {  				brd'  				init'  				"Items.AddRange(new string[] {"'  				current'  				"});"  			}));  		}  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,getCodeFile,The following switch statement is missing a default case: switch (type) {  case CodeType.StartClass:  	{  		StringExtension cd = new StringExtension (true);  		cd.Add ("using System;");  		cd.Add ("using System.Collections.Generic;");  		cd.Add ("using System.ComponentModel;");  		cd.Add ("using System.Data;");  		cd.Add ("using System.Drawing;");  		cd.Add ("using System.Linq;");  		cd.Add ("using System.Text;");  		cd.Add ("using System.Windows.Forms;");  		cd.Add ("");  		cd.Add (String.Format ("namespace {0}"' pName));  		cd.Add ("{");  		cd.Add ("");  		cd.Add ("    public class Run : ISD.Classes.IConnector");  		cd.Add ("    {");  		cd.Add ("        public Run() {} // Now overgiven types here please' the UI.dll couldn't initialisized your app' so users could't use it!");  		cd.Add ("");  		// New method which is implementaded from the IConnector interface!  		cd.Add ("        public string Name()");  		cd.Add ("        {");  		cd.Add ("            return \"Uhr\";");  		cd.Add ("        }");  		cd.Add ("");  		// New method which is implementaded from the IConnector interface!  		cd.Add ("        public System.Drawing.Image Icon()");  		cd.Add ("        {");  		cd.Add ("            return Properties.Ressources._YOURIMAGE_;");  		cd.Add ("        }");  		cd.Add ("");  		// New method which is implementaded from the IConnector interface!  		cd.Add ("        public void OnStart(ISD.Classes.StartupInformation inf)");  		cd.Add ("        {");  		cd.Add ("            ISD.Classes.Host.SetConnection(inf);");  		cd.Add ("");  		cd.Add ("            if (inf.UseOwnStyle)");  		cd.Add ("            {");  		cd.Add ("                if (inf.Desk != null)");  		cd.Add ("                {");  		cd.Add (String.Format ("                    inf.Desk.AddWindow(new {0}(inf.Title' inf.Desk));"' pName));  		cd.Add ("                }");  		cd.Add ("            }");  		cd.Add ("        }");  		cd.Add ("");  		// New method which is implementaded from the IConnector interface!  		cd.Add ("        public void RunChanges(Delegate doWhat' ISD.Classes.SpezialInfo info)");  		cd.Add ("        {");  		cd.Add ("            // Apps can try to find this app' and when they find this app' they try to send a command to this app. You can work here with the SpezialInfo.");  		cd.Add ("            // This class contains an dictonary' which say e.g. {navigate to }{google.de}. It contains the action and the right value which have sended another app!");  		cd.Add ("        }");  		cd.Add ("");  		// New method which is implementaded from the IConnector interface!  		cd.Add ("        public void SetStartupInformation(ISD.Classes.StartupInformation inf)");  		cd.Add ("        {");  		cd.Add ("            // In this method you can save the given StartupInformation. It's often useful' if antoher app wants to start this app' so you can call OnStart(inf); or save it and call it later!");  		cd.Add ("        }");  		cd.Add ("");  		cd.Add ("    }");  		cd.Add ("}");  		return cd.ToString ();  	}  	break;  case CodeType.DesignClass:  	{  		StringExtension cd = new StringExtension (true);  		cd.Add ("using System;");  		cd.Add ("using System.Collections.Generic;");  		cd.Add ("using System.ComponentModel;");  		cd.Add ("using System.Data;");  		cd.Add ("using System.Drawing;");  		cd.Add ("using System.Linq;");  		cd.Add ("using System.Text;");  		cd.Add ("using System.Windows.Forms;");  		cd.Add ("");  		cd.Add (String.Format ("namespace {0}"' pName));  		cd.Add ("{");  		cd.Add (String.Format ("    public class {0} : UserInterface.Classes.Desktop.Window.Window"' pName));  		cd.Add ("    {");  		cd.Add (pControlDefinitons);  		cd.Add (String.Format ("        public {0}(UserInterface.Classes.Desktop.Window.TitleInfo Title' UserInterface.Classes.Desktop.Desktop.Desktop Desk)"' pName));  		cd.Add ("            : base(Title' Desk)");  		cd.Add ("        {");  		cd.Add ("            // Ctor! It's very important' you can add events here or chaning some things' which you the designer hasn't done right!");  		cd.Add ("            // Please don't change the overgiven types' but when you are doing that the programm would be crashed!");  		cd.Add ("            InitializeComponent();");  		cd.Add ("        }");  		cd.Add ("");  		// New method which is implementaded from the IConnector interface!  		cd.Add ("        private void InitializeComponent()");  		cd.Add ("        {");  		cd.Add (pCodeDesign_);  		cd.Add ("        }");  		cd.Add ("");  		cd.Add ("    }");  		cd.Add ("}");  		return cd.ToString ();  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,AddToList,The following switch statement is missing a default case: switch (key.GetType ().Name) {  case "Button":  	AddToForm<Button> ();  	break;  case "TrackBar":  	AddToForm<TrackBar> ();  	break;  case "TextBox":  	AddToForm<TextBox> ();  	break;  case "ProgressBar":  	AddToForm<ProgressBar> ();  	break;  case "Label":  	AddToForm<Label> ();  	break;  case "Panel":  	AddToForm<Panel> ();  	break;  case "CheckBox":  	AddToForm<CheckBox> ();  	break;  case "RadioButton":  	AddToForm<RadioButton> ();  	break;  case "ListBox":  	AddToForm<ListBox> ();  	break;  case "ComboBox":  	AddToForm<ComboBox> ();  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (t) {  case mItem.DefintionType.String:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den String ein!"' "Text"' "Text") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			switch (w) {  			case mItem.DefintionValue.Name:  				this.currentControl.Name = sr;  				break;  			case mItem.DefintionValue.Text:  				this.currentControl.Text = sr;  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Booelan:  	{  		if (_InputBox.Input.Show ("1 = Ja' 2 = Nein. Bitte als Zahl eingeben!"' "Ja oder Nein?"' "2") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			bool tr = false;  			tr = (Convert.ToInt32 (sr) == 1);  			switch (w) {  			case mItem.DefintionValue.ReadOnly:  				(this.currentControl as TextBox).ReadOnly = tr;  				break;  			case mItem.DefintionValue.MultiLine:  				(this.currentControl as TextBox).Multiline = tr;  				break;  			case mItem.DefintionValue.Checked:  				{  					if (this.currentControl.GetType () == typeof(RadioButton))  						(this.currentControl as RadioButton).Checked = tr;  					else if (this.currentControl.GetType () == typeof(CheckBox))  						(this.currentControl as CheckBox).Checked = tr;  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Font:  	{  		using (FontDialog ufd = new FontDialog ()) {  			if (ufd.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				this.currentControl.Font = ufd.Font;  			}  		}  	}  	break;  case mItem.DefintionType.Color:  	{  		using (ColorDialog col = new ColorDialog ()) {  			if (col.ShowDialog (this) == System.Windows.Forms.DialogResult.OK) {  				switch (w) {  				case mItem.DefintionValue.ForeColor:  					{  						this.currentControl.ForeColor = col.Color;  					}  					break;  				case mItem.DefintionValue.BackColor:  					{  						this.currentControl.BackColor = col.Color;  					}  					break;  				}  			}  		}  	}  	break;  case mItem.DefintionType.Integer:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie eine Zahl ein!"' "Zahl eingeben"' "0") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			int outt;  			if (!int.TryParse (sr' out outt))  				return;  			switch (w) {  			case mItem.DefintionValue.Maximum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Maximum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Maximum = outt;  				}  				break;  			case mItem.DefintionValue.Minimum:  				{  					if (currentControl.GetType () == typeof(ProgressBar))  						(currentControl as ProgressBar).Minimum = outt;  					else if (currentControl.GetType () == typeof(TrackBar))  						(currentControl as TrackBar).Minimum = outt;  				}  				break;  			case mItem.DefintionValue.Value:  				{  					try {  						if (currentControl.GetType () == typeof(ProgressBar))  							(currentControl as ProgressBar).Value = outt;  						else if (currentControl.GetType () == typeof(TrackBar))  							(currentControl as TrackBar).Value = outt;  					}  					catch {  						MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  					}  				}  				break;  			}  		}  	}  	break;  case mItem.DefintionType.Point:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie den Punkt ein! Trennen Sie Ihn mit einem Komma!"' "Punkt eingeben"' "50'50") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Location:  						{  							int x1 = 0;  							int x2 = 0;  							if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  								this.currentControl.Location = new Point (x1' x2);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Size:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie die Größe ein! Trennen Sie sie mit einem Komma!"' "Größe eingeben"' "100'100") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length - 1 == 1) {  					switch (w) {  					case mItem.DefintionValue.Size:  						{  							int w_ = 0;  							int h = 0;  							if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  								this.currentControl.Size = new Size (w_' h);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.StringArr:  	{  		if (_InputBox.Input.Show ("Bitte geben Sie mehrere die Werte für ihr string[]-Array ein! Trennen Sie sie mit einem Komma!"' "Werte eingeben"' "Item1'Item2'Item3") == System.Windows.Forms.DialogResult.OK) {  			string sr = _InputBox.Input.Rückgabe;  			if (sr.Contains ("'")) {  				string[] spltArr = sr.Split (new string[] {  					"'"  				}' StringSplitOptions.RemoveEmptyEntries);  				if (spltArr.Length != 0) {  					switch (w) {  					case mItem.DefintionValue.Items:  						{  							if (currentControl.GetType () == typeof(ListBox)) {  								ListBox tmp = currentControl as ListBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  							else if (currentControl.GetType () == typeof(ComboBox)) {  								ComboBox tmp = currentControl as ComboBox;  								tmp.Items.Clear ();  								tmp.Items.AddRange (spltArr);  							}  						}  						break;  					}  				}  			}  		}  	}  	break;  case mItem.DefintionType.Anchor: {  	if (_InputBox.Input.Show ("Bitte setzen Sie den Wert für das Control (Anchor). 1 = Top' 2 = Left' 3 = Bottom' 4 = Right"' "Eingabe"' "1'2") == System.Windows.Forms.DialogResult.OK) {  		string sr = _InputBox.Input.Rückgabe;  		if (sr.Contains ("'")) {  			currentControl.Anchor = AnchorStyles.Top | AnchorStyles.Left;  			List<AnchorStyles> mLst = new List<AnchorStyles> ();  			string[] spltArr = sr.Split (new string[] {  				"'"  			}' StringSplitOptions.RemoveEmptyEntries);  			for (int i = 0; i <= spltArr.Length - 1; i++) {  				string current = spltArr [i];  				int outT;  				if (int.TryParse (current' out outT)) {  					switch (outT) {  					case 1:  						{  							mLst.Add (AnchorStyles.Top);  						}  						break;  					case 2:  						{  							mLst.Add (AnchorStyles.Left);  						}  						break;  					case 3:  						{  							mLst.Add (AnchorStyles.Bottom);  						}  						break;  					case 4:  						{  							mLst.Add (AnchorStyles.Right);  						}  						break;  					}  				}  			}  			AnchorStyles currentStyle = AnchorStyles.None;  			for (int i = 0; i <= mLst.Count - 1; i++) {  				currentStyle |= mLst [i];  			}  			currentControl.Anchor = currentStyle;  		}  	}  	break;  }  #endregion  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (w) {  case mItem.DefintionValue.Name:  	this.currentControl.Name = sr;  	break;  case mItem.DefintionValue.Text:  	this.currentControl.Text = sr;  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (w) {  case mItem.DefintionValue.ReadOnly:  	(this.currentControl as TextBox).ReadOnly = tr;  	break;  case mItem.DefintionValue.MultiLine:  	(this.currentControl as TextBox).Multiline = tr;  	break;  case mItem.DefintionValue.Checked:  	{  		if (this.currentControl.GetType () == typeof(RadioButton))  			(this.currentControl as RadioButton).Checked = tr;  		else if (this.currentControl.GetType () == typeof(CheckBox))  			(this.currentControl as CheckBox).Checked = tr;  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (w) {  case mItem.DefintionValue.ForeColor:  	{  		this.currentControl.ForeColor = col.Color;  	}  	break;  case mItem.DefintionValue.BackColor:  	{  		this.currentControl.BackColor = col.Color;  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (w) {  case mItem.DefintionValue.Maximum:  	{  		if (currentControl.GetType () == typeof(ProgressBar))  			(currentControl as ProgressBar).Maximum = outt;  		else if (currentControl.GetType () == typeof(TrackBar))  			(currentControl as TrackBar).Maximum = outt;  	}  	break;  case mItem.DefintionValue.Minimum:  	{  		if (currentControl.GetType () == typeof(ProgressBar))  			(currentControl as ProgressBar).Minimum = outt;  		else if (currentControl.GetType () == typeof(TrackBar))  			(currentControl as TrackBar).Minimum = outt;  	}  	break;  case mItem.DefintionValue.Value:  	{  		try {  			if (currentControl.GetType () == typeof(ProgressBar))  				(currentControl as ProgressBar).Value = outt;  			else if (currentControl.GetType () == typeof(TrackBar))  				(currentControl as TrackBar).Value = outt;  		}  		catch {  			MessageBox.Show (this' "Die Value muss zwischen dem Minimum und dem Maximum liegen!"' "Ungültige Eingabe"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		}  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (w) {  case mItem.DefintionValue.Location:  	{  		int x1 = 0;  		int x2 = 0;  		if (int.TryParse (spltArr [0]' out x1) && int.TryParse (spltArr [1]' out x2)) {  			this.currentControl.Location = new Point (x1' x2);  		}  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (w) {  case mItem.DefintionValue.Size:  	{  		int w_ = 0;  		int h = 0;  		if (int.TryParse (spltArr [0]' out w_) && int.TryParse (spltArr [1]' out h)) {  			this.currentControl.Size = new Size (w_' h);  		}  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (w) {  case mItem.DefintionValue.Items:  	{  		if (currentControl.GetType () == typeof(ListBox)) {  			ListBox tmp = currentControl as ListBox;  			tmp.Items.Clear ();  			tmp.Items.AddRange (spltArr);  		}  		else if (currentControl.GetType () == typeof(ComboBox)) {  			ComboBox tmp = currentControl as ComboBox;  			tmp.Items.Clear ();  			tmp.Items.AddRange (spltArr);  		}  	}  	break;  }  
Missing Default,UiDesigner,frmMain,C:\repos\andy123456789088_UiDesigner\UiDesigner\frmMain.cs,lstProperties_SelectedIndexChanged,The following switch statement is missing a default case: switch (outT) {  case 1:  	{  		mLst.Add (AnchorStyles.Top);  	}  	break;  case 2:  	{  		mLst.Add (AnchorStyles.Left);  	}  	break;  case 3:  	{  		mLst.Add (AnchorStyles.Bottom);  	}  	break;  case 4:  	{  		mLst.Add (AnchorStyles.Right);  	}  	break;  }  
