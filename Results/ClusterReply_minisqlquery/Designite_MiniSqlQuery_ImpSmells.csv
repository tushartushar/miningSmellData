Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,Cyclomatic complexity of the method is 10
Complex Method,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,copyToolStripMenuItem_Click,Cyclomatic complexity of the method is 14
Complex Method,MiniSqlQuery.Commands,SaveResultsAsDataSetCommand,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\Commands\SaveResultsAsDataSetCommand.cs,Execute,Cyclomatic complexity of the method is 10
Complex Method,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorForm.cs,NavigateTo,Cyclomatic complexity of the method is 20
Complex Method,MiniSqlQuery.PlugIns.DatabaseInspector,FindObjectForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\FindObjectForm.cs,ProcessCmdKey,Cyclomatic complexity of the method is 11
Long Parameter List,MiniSqlQuery,MainForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\MainForm.cs,DisplayMessageBox,The method has 9 parameters.
Long Statement,MiniSqlQuery,ApplicationSettings,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\ApplicationSettings.cs,CloseConnection,The length of the statement  "	if (_dbConnection != null && (_dbConnection.State != ConnectionState.Closed && _dbConnection.State != ConnectionState.Broken)) { " is 128.
Long Statement,MiniSqlQuery,BasicEditor,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\BasicEditor.cs,HighlightString,The length of the statement  "	txtEdit.ActiveTextAreaControl.SelectionManager.SetSelection (txtEdit.Document.OffsetToPosition (offset)' txtEdit.Document.OffsetToPosition (endPos)); " is 149.
Long Statement,MiniSqlQuery,BasicEditor,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\BasicEditor.cs,BasicEditor_FormClosing,The length of the statement  "		DialogResult saveFile = _services.HostWindow.DisplayMessageBox (this' "Contents changed' do you want to save the file?\r\n" + TabText' "Save Changes?"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1' 0' null' null); " is 256.
Long Statement,MiniSqlQuery,MainForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\MainForm.cs,ShowDatabaseInspector,The length of the statement  "		throw new InvalidOperationException ("The 'databaseInspector' must be a 'WeifenLuo.WinFormsUI.Docking.DockContent' based form."); " is 129.
Long Statement,MiniSqlQuery,OptionsForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\OptionsForm.cs,AskToSaveChanges,The length of the statement  "	return _host.DisplayMessageBox (null' "Configuration changes made' would you like to save them?"' "Save Changes?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1' MessageBoxOptions.ServiceNotification' null' null); " is 249.
Long Statement,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,ExecuteQuery,The length of the statement  "	_runner = QueryRunner.Create (_settings.ProviderFactory' _settings.ConnectionDefinition.ConnectionString' _settings.EnableQueryBatching' _settings.CommandTimeout); " is 163.
Long Statement,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,HighlightString,The length of the statement  "	txtQuery.ActiveTextAreaControl.SelectionManager.SetSelection (txtQuery.Document.OffsetToPosition (offset)' txtQuery.Document.OffsetToPosition (endPos)); " is 152.
Long Statement,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,QueryForm_FormClosing,The length of the statement  "		DialogResult saveFile = _hostWindow.DisplayMessageBox (this' "Contents changed' do you want to save the file?\r\n" + TabText' "Save Changes?"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1' 0' null' null); " is 247.
Long Statement,MiniSqlQuery.PlugIns.ConnectionStringsManager,ConnectionStringBuilderForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ConnectionStringsManager\ConnectionStringBuilderForm.cs,ConnectionStringBuilderForm_FormClosing,The length of the statement  "		DialogResult saveFile = _hostWindow.DisplayMessageBox (this' Resources.The_connection_details_have_changed__do_you_want_to_save' Resources.Save_Changes' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1' 0' null' null); " is 257.
Long Statement,MiniSqlQuery.PlugIns.ConnectionStringsManager,ConnectionStringBuilderForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ConnectionStringsManager\ConnectionStringBuilderForm.cs,BindNewConnectionStringBuilder,The length of the statement  "		MessageBox.Show (Resources.BindNewConnectionStringBuilder_Could_not_populate_with_current_connection_string___ + argExp.Message); " is 129.
Long Statement,MiniSqlQuery.PlugIns.ConnectionStringsManager,ConnectionStringBuilderForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ConnectionStringsManager\ConnectionStringBuilderForm.cs,ToString,The length of the statement  "	return string.Format ("[ConnectionStringBuilderForm => Name: {0}; Provider: {1}; ConnectionString: {2}]"' ConnectionName' ProviderName' ConnectionString); " is 154.
Long Statement,MiniSqlQuery.PlugIns.ConnectionStringsManager,DbConnectionsForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ConnectionStringsManager\DbConnectionsForm.cs,DbConnectionsForm_FormClosing,The length of the statement  "		DialogResult saveFile = _hostWindow.DisplayMessageBox (this' Resources.The_connection_details_have_changed__do_you_want_to_save' Resources.Save_Changes' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1' 0' null' null); " is 257.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector.Commands,TruncateTableCommand,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\Commands\TruncateTableCommand.cs,Execute,The length of the statement  "	if (tableName != null && MessageBox.Show (msg' caption' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question) == DialogResult.Yes) { " is 134.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorForm.cs,BuildToolTip,The length of the statement  "		toolTip += string.Format ("; FK -> {0}.{1}"' column.ForeignKeyReference.ReferenceTable.FullName' column.ForeignKeyReference.ReferenceColumn.Name); " is 146.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorForm.cs,DatabaseTreeView_NodeMouseClick,The length of the statement  "		if (namedObject != null && (namedObject.ObjectType == ObjectTypes.Table || namedObject.ObjectType == ObjectTypes.View)) { " is 121.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.TableMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<GenerateSelectStatementCommand> ()); " is 132.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.TableMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<GenerateSelectCountStatementCommand> ()); " is 137.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.TableMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<GenerateInsertStatementCommand> ()); " is 132.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.TableMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<GenerateUpdateStatementCommand> ()); " is 132.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.TableMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<GenerateDeleteStatementCommand> ()); " is 132.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.TableMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<CopyTableNameCommand> ()); " is 122.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.TableMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<TruncateTableCommand> ()); " is 122.
Long Statement,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorLoader.cs,InitializePlugIn,The length of the statement  "	hostWindow.DatabaseInspector.ColumnMenu.Items.Add (CommandControlBuilder.CreateToolStripMenuItem<LocateFkReferenceColumnCommand> ()); " is 133.
Long Statement,MiniSqlQuery.PlugIns.SearchTools.Commands,ReplaceStringCommand,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\SearchTools\Commands\ReplaceStringCommand.cs,Execute,The length of the statement  "			if (editorFindProvider.ReplaceString (req.ReplaceValue' req.Position - req.SearchValue.Length' req.SearchValue.Length)) { " is 121.
Long Statement,MiniSqlQuery.PlugIns.TemplateViewer,TemplateEditorForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\TemplateViewer\TemplateEditorForm.cs,HighlightString,The length of the statement  "	txtEdit.ActiveTextAreaControl.SelectionManager.SetSelection (txtEdit.Document.OffsetToPosition (offset)' txtEdit.Document.OffsetToPosition (endPos)); " is 149.
Long Statement,MiniSqlQuery.PlugIns.TemplateViewer,TemplateEditorForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\TemplateViewer\TemplateEditorForm.cs,TemplateEditorForm_FormClosing,The length of the statement  "		DialogResult saveFile = _hostWindow.DisplayMessageBox (this' "Contents changed' do you want to save the file?\r\n" + TabText' "Save Changes?"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1' 0' null' null); " is 247.
Long Statement,MiniSqlQuery.PlugIns.ViewTable,ViewTableLoader,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ViewTable\ViewTableLoader.cs,InitializePlugIn,The length of the statement  "		Services.HostWindow.DatabaseInspector.TableMenu.Items.Insert (0' CommandControlBuilder.CreateToolStripMenuItem<ViewTableFromInspectorCommand> ()); " is 146.
Magic Number,MiniSqlQuery,MainForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\MainForm.cs,MainForm_Shown,The following statement contains a magic number: if (_arguements != null && _arguements.Length > 0) {  	foreach (string arg in _arguements) {  		if (arg.StartsWith ("/cmd:")) {  			string cmdName = arg.Substring (5);  			ICommand cmd = CommandManager.GetCommandInstanceByPartialName (cmdName);  			if (cmd != null) {  				cmd.Execute ();  			}  		}  	}  }  else {  	CommandManager.GetCommandInstance<NewQueryFormCommand> ().Execute ();  }  
Magic Number,MiniSqlQuery,MainForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\MainForm.cs,MainForm_Shown,The following statement contains a magic number: foreach (string arg in _arguements) {  	if (arg.StartsWith ("/cmd:")) {  		string cmdName = arg.Substring (5);  		ICommand cmd = CommandManager.GetCommandInstanceByPartialName (cmdName);  		if (cmd != null) {  			cmd.Execute ();  		}  	}  }  
Magic Number,MiniSqlQuery,MainForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\MainForm.cs,MainForm_Shown,The following statement contains a magic number: if (arg.StartsWith ("/cmd:")) {  	string cmdName = arg.Substring (5);  	ICommand cmd = CommandManager.GetCommandInstanceByPartialName (cmdName);  	if (cmd != null) {  		cmd.Execute ();  	}  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (Batch != null) {  	string nullText = _settings.NullText;  	int counter = 1;  	_resizingGrid = true;  	foreach (Query query in Batch.Queries) {  		DataSet ds = query.Result;  		if (ds != null) {  			foreach (DataTable dt in ds.Tables) {  				DataGridView grid = new DataGridView ();  				DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  				grid.AllowUserToAddRows = false;  				grid.AllowUserToDeleteRows = false;  				grid.Dock = DockStyle.Fill;  				grid.Name = "gridResults_" + counter;  				grid.ReadOnly = true;  				grid.DataSource = dt;  				grid.DataError += GridDataError;  				grid.DefaultCellStyle = cellStyle;  				cellStyle.NullValue = nullText;  				cellStyle.Font = CreateDefaultFont ();  				grid.DataBindingComplete += GridDataBindingComplete;  				grid.Disposed += GridDisposed;  				grid.ColumnWidthChanged += OnColumnWidthChanged;  				TabPage tabPage = new TabPage ();  				tabPage.Controls.Add (grid);  				tabPage.Name = "tabPageResults_" + counter;  				tabPage.Padding = new Padding (3);  				tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  				tabPage.UseVisualStyleBackColor = false;  				_resultsTabControl.TabPages.Add (tabPage);  				// create a reasonable default max width for columns  				int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  				// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  				grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  				for (int i = 0; i < grid.Columns.Count; i++) {  					int columnWidth = grid.Columns [i].Width;  					grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  					string headerText = grid.Columns [i].HeaderText;  					if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  						// use the previous column size in case its been adjusted etc  						grid.Columns [i].Width = _columnSizes [headerText];  					}  					else {  						// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  						grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  						if (!string.IsNullOrEmpty (headerText)) {  							_columnSizes [headerText] = grid.Columns [i].Width;  						}  					}  				}  				// set the row count for the first tab for now.  				if (counter == 1) {  					SetRowCount (dt.Rows.Count);  				}  				counter++;  			}  		}  	}  	if (!string.IsNullOrEmpty (Batch.Messages)) {  		RichTextBox rtf = new RichTextBox ();  		rtf.Font = CreateDefaultFont ();  		rtf.Dock = DockStyle.Fill;  		rtf.ScrollBars = RichTextBoxScrollBars.ForcedBoth;  		rtf.Text = Batch.Messages;  		TabPage tabPage = new TabPage ();  		tabPage.Controls.Add (rtf);  		tabPage.Name = "tabPageResults_Messages";  		tabPage.Padding = new Padding (3);  		tabPage.Dock = DockStyle.Fill;  		tabPage.Text = Resources.Messages;  		tabPage.UseVisualStyleBackColor = false;  		_resultsTabControl.TabPages.Add (tabPage);  	}  	_resizingGrid = false;  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (Batch != null) {  	string nullText = _settings.NullText;  	int counter = 1;  	_resizingGrid = true;  	foreach (Query query in Batch.Queries) {  		DataSet ds = query.Result;  		if (ds != null) {  			foreach (DataTable dt in ds.Tables) {  				DataGridView grid = new DataGridView ();  				DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  				grid.AllowUserToAddRows = false;  				grid.AllowUserToDeleteRows = false;  				grid.Dock = DockStyle.Fill;  				grid.Name = "gridResults_" + counter;  				grid.ReadOnly = true;  				grid.DataSource = dt;  				grid.DataError += GridDataError;  				grid.DefaultCellStyle = cellStyle;  				cellStyle.NullValue = nullText;  				cellStyle.Font = CreateDefaultFont ();  				grid.DataBindingComplete += GridDataBindingComplete;  				grid.Disposed += GridDisposed;  				grid.ColumnWidthChanged += OnColumnWidthChanged;  				TabPage tabPage = new TabPage ();  				tabPage.Controls.Add (grid);  				tabPage.Name = "tabPageResults_" + counter;  				tabPage.Padding = new Padding (3);  				tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  				tabPage.UseVisualStyleBackColor = false;  				_resultsTabControl.TabPages.Add (tabPage);  				// create a reasonable default max width for columns  				int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  				// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  				grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  				for (int i = 0; i < grid.Columns.Count; i++) {  					int columnWidth = grid.Columns [i].Width;  					grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  					string headerText = grid.Columns [i].HeaderText;  					if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  						// use the previous column size in case its been adjusted etc  						grid.Columns [i].Width = _columnSizes [headerText];  					}  					else {  						// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  						grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  						if (!string.IsNullOrEmpty (headerText)) {  							_columnSizes [headerText] = grid.Columns [i].Width;  						}  					}  				}  				// set the row count for the first tab for now.  				if (counter == 1) {  					SetRowCount (dt.Rows.Count);  				}  				counter++;  			}  		}  	}  	if (!string.IsNullOrEmpty (Batch.Messages)) {  		RichTextBox rtf = new RichTextBox ();  		rtf.Font = CreateDefaultFont ();  		rtf.Dock = DockStyle.Fill;  		rtf.ScrollBars = RichTextBoxScrollBars.ForcedBoth;  		rtf.Text = Batch.Messages;  		TabPage tabPage = new TabPage ();  		tabPage.Controls.Add (rtf);  		tabPage.Name = "tabPageResults_Messages";  		tabPage.Padding = new Padding (3);  		tabPage.Dock = DockStyle.Fill;  		tabPage.Text = Resources.Messages;  		tabPage.UseVisualStyleBackColor = false;  		_resultsTabControl.TabPages.Add (tabPage);  	}  	_resizingGrid = false;  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (Batch != null) {  	string nullText = _settings.NullText;  	int counter = 1;  	_resizingGrid = true;  	foreach (Query query in Batch.Queries) {  		DataSet ds = query.Result;  		if (ds != null) {  			foreach (DataTable dt in ds.Tables) {  				DataGridView grid = new DataGridView ();  				DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  				grid.AllowUserToAddRows = false;  				grid.AllowUserToDeleteRows = false;  				grid.Dock = DockStyle.Fill;  				grid.Name = "gridResults_" + counter;  				grid.ReadOnly = true;  				grid.DataSource = dt;  				grid.DataError += GridDataError;  				grid.DefaultCellStyle = cellStyle;  				cellStyle.NullValue = nullText;  				cellStyle.Font = CreateDefaultFont ();  				grid.DataBindingComplete += GridDataBindingComplete;  				grid.Disposed += GridDisposed;  				grid.ColumnWidthChanged += OnColumnWidthChanged;  				TabPage tabPage = new TabPage ();  				tabPage.Controls.Add (grid);  				tabPage.Name = "tabPageResults_" + counter;  				tabPage.Padding = new Padding (3);  				tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  				tabPage.UseVisualStyleBackColor = false;  				_resultsTabControl.TabPages.Add (tabPage);  				// create a reasonable default max width for columns  				int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  				// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  				grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  				for (int i = 0; i < grid.Columns.Count; i++) {  					int columnWidth = grid.Columns [i].Width;  					grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  					string headerText = grid.Columns [i].HeaderText;  					if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  						// use the previous column size in case its been adjusted etc  						grid.Columns [i].Width = _columnSizes [headerText];  					}  					else {  						// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  						grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  						if (!string.IsNullOrEmpty (headerText)) {  							_columnSizes [headerText] = grid.Columns [i].Width;  						}  					}  				}  				// set the row count for the first tab for now.  				if (counter == 1) {  					SetRowCount (dt.Rows.Count);  				}  				counter++;  			}  		}  	}  	if (!string.IsNullOrEmpty (Batch.Messages)) {  		RichTextBox rtf = new RichTextBox ();  		rtf.Font = CreateDefaultFont ();  		rtf.Dock = DockStyle.Fill;  		rtf.ScrollBars = RichTextBoxScrollBars.ForcedBoth;  		rtf.Text = Batch.Messages;  		TabPage tabPage = new TabPage ();  		tabPage.Controls.Add (rtf);  		tabPage.Name = "tabPageResults_Messages";  		tabPage.Padding = new Padding (3);  		tabPage.Dock = DockStyle.Fill;  		tabPage.Text = Resources.Messages;  		tabPage.UseVisualStyleBackColor = false;  		_resultsTabControl.TabPages.Add (tabPage);  	}  	_resizingGrid = false;  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (Batch != null) {  	string nullText = _settings.NullText;  	int counter = 1;  	_resizingGrid = true;  	foreach (Query query in Batch.Queries) {  		DataSet ds = query.Result;  		if (ds != null) {  			foreach (DataTable dt in ds.Tables) {  				DataGridView grid = new DataGridView ();  				DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  				grid.AllowUserToAddRows = false;  				grid.AllowUserToDeleteRows = false;  				grid.Dock = DockStyle.Fill;  				grid.Name = "gridResults_" + counter;  				grid.ReadOnly = true;  				grid.DataSource = dt;  				grid.DataError += GridDataError;  				grid.DefaultCellStyle = cellStyle;  				cellStyle.NullValue = nullText;  				cellStyle.Font = CreateDefaultFont ();  				grid.DataBindingComplete += GridDataBindingComplete;  				grid.Disposed += GridDisposed;  				grid.ColumnWidthChanged += OnColumnWidthChanged;  				TabPage tabPage = new TabPage ();  				tabPage.Controls.Add (grid);  				tabPage.Name = "tabPageResults_" + counter;  				tabPage.Padding = new Padding (3);  				tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  				tabPage.UseVisualStyleBackColor = false;  				_resultsTabControl.TabPages.Add (tabPage);  				// create a reasonable default max width for columns  				int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  				// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  				grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  				for (int i = 0; i < grid.Columns.Count; i++) {  					int columnWidth = grid.Columns [i].Width;  					grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  					string headerText = grid.Columns [i].HeaderText;  					if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  						// use the previous column size in case its been adjusted etc  						grid.Columns [i].Width = _columnSizes [headerText];  					}  					else {  						// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  						grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  						if (!string.IsNullOrEmpty (headerText)) {  							_columnSizes [headerText] = grid.Columns [i].Width;  						}  					}  				}  				// set the row count for the first tab for now.  				if (counter == 1) {  					SetRowCount (dt.Rows.Count);  				}  				counter++;  			}  		}  	}  	if (!string.IsNullOrEmpty (Batch.Messages)) {  		RichTextBox rtf = new RichTextBox ();  		rtf.Font = CreateDefaultFont ();  		rtf.Dock = DockStyle.Fill;  		rtf.ScrollBars = RichTextBoxScrollBars.ForcedBoth;  		rtf.Text = Batch.Messages;  		TabPage tabPage = new TabPage ();  		tabPage.Controls.Add (rtf);  		tabPage.Name = "tabPageResults_Messages";  		tabPage.Padding = new Padding (3);  		tabPage.Dock = DockStyle.Fill;  		tabPage.Text = Resources.Messages;  		tabPage.UseVisualStyleBackColor = false;  		_resultsTabControl.TabPages.Add (tabPage);  	}  	_resizingGrid = false;  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: foreach (Query query in Batch.Queries) {  	DataSet ds = query.Result;  	if (ds != null) {  		foreach (DataTable dt in ds.Tables) {  			DataGridView grid = new DataGridView ();  			DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  			grid.AllowUserToAddRows = false;  			grid.AllowUserToDeleteRows = false;  			grid.Dock = DockStyle.Fill;  			grid.Name = "gridResults_" + counter;  			grid.ReadOnly = true;  			grid.DataSource = dt;  			grid.DataError += GridDataError;  			grid.DefaultCellStyle = cellStyle;  			cellStyle.NullValue = nullText;  			cellStyle.Font = CreateDefaultFont ();  			grid.DataBindingComplete += GridDataBindingComplete;  			grid.Disposed += GridDisposed;  			grid.ColumnWidthChanged += OnColumnWidthChanged;  			TabPage tabPage = new TabPage ();  			tabPage.Controls.Add (grid);  			tabPage.Name = "tabPageResults_" + counter;  			tabPage.Padding = new Padding (3);  			tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  			tabPage.UseVisualStyleBackColor = false;  			_resultsTabControl.TabPages.Add (tabPage);  			// create a reasonable default max width for columns  			int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  			// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  			grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  			for (int i = 0; i < grid.Columns.Count; i++) {  				int columnWidth = grid.Columns [i].Width;  				grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  				string headerText = grid.Columns [i].HeaderText;  				if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  					// use the previous column size in case its been adjusted etc  					grid.Columns [i].Width = _columnSizes [headerText];  				}  				else {  					// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  					grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  					if (!string.IsNullOrEmpty (headerText)) {  						_columnSizes [headerText] = grid.Columns [i].Width;  					}  				}  			}  			// set the row count for the first tab for now.  			if (counter == 1) {  				SetRowCount (dt.Rows.Count);  			}  			counter++;  		}  	}  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: foreach (Query query in Batch.Queries) {  	DataSet ds = query.Result;  	if (ds != null) {  		foreach (DataTable dt in ds.Tables) {  			DataGridView grid = new DataGridView ();  			DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  			grid.AllowUserToAddRows = false;  			grid.AllowUserToDeleteRows = false;  			grid.Dock = DockStyle.Fill;  			grid.Name = "gridResults_" + counter;  			grid.ReadOnly = true;  			grid.DataSource = dt;  			grid.DataError += GridDataError;  			grid.DefaultCellStyle = cellStyle;  			cellStyle.NullValue = nullText;  			cellStyle.Font = CreateDefaultFont ();  			grid.DataBindingComplete += GridDataBindingComplete;  			grid.Disposed += GridDisposed;  			grid.ColumnWidthChanged += OnColumnWidthChanged;  			TabPage tabPage = new TabPage ();  			tabPage.Controls.Add (grid);  			tabPage.Name = "tabPageResults_" + counter;  			tabPage.Padding = new Padding (3);  			tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  			tabPage.UseVisualStyleBackColor = false;  			_resultsTabControl.TabPages.Add (tabPage);  			// create a reasonable default max width for columns  			int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  			// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  			grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  			for (int i = 0; i < grid.Columns.Count; i++) {  				int columnWidth = grid.Columns [i].Width;  				grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  				string headerText = grid.Columns [i].HeaderText;  				if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  					// use the previous column size in case its been adjusted etc  					grid.Columns [i].Width = _columnSizes [headerText];  				}  				else {  					// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  					grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  					if (!string.IsNullOrEmpty (headerText)) {  						_columnSizes [headerText] = grid.Columns [i].Width;  					}  				}  			}  			// set the row count for the first tab for now.  			if (counter == 1) {  				SetRowCount (dt.Rows.Count);  			}  			counter++;  		}  	}  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: foreach (Query query in Batch.Queries) {  	DataSet ds = query.Result;  	if (ds != null) {  		foreach (DataTable dt in ds.Tables) {  			DataGridView grid = new DataGridView ();  			DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  			grid.AllowUserToAddRows = false;  			grid.AllowUserToDeleteRows = false;  			grid.Dock = DockStyle.Fill;  			grid.Name = "gridResults_" + counter;  			grid.ReadOnly = true;  			grid.DataSource = dt;  			grid.DataError += GridDataError;  			grid.DefaultCellStyle = cellStyle;  			cellStyle.NullValue = nullText;  			cellStyle.Font = CreateDefaultFont ();  			grid.DataBindingComplete += GridDataBindingComplete;  			grid.Disposed += GridDisposed;  			grid.ColumnWidthChanged += OnColumnWidthChanged;  			TabPage tabPage = new TabPage ();  			tabPage.Controls.Add (grid);  			tabPage.Name = "tabPageResults_" + counter;  			tabPage.Padding = new Padding (3);  			tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  			tabPage.UseVisualStyleBackColor = false;  			_resultsTabControl.TabPages.Add (tabPage);  			// create a reasonable default max width for columns  			int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  			// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  			grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  			for (int i = 0; i < grid.Columns.Count; i++) {  				int columnWidth = grid.Columns [i].Width;  				grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  				string headerText = grid.Columns [i].HeaderText;  				if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  					// use the previous column size in case its been adjusted etc  					grid.Columns [i].Width = _columnSizes [headerText];  				}  				else {  					// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  					grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  					if (!string.IsNullOrEmpty (headerText)) {  						_columnSizes [headerText] = grid.Columns [i].Width;  					}  				}  			}  			// set the row count for the first tab for now.  			if (counter == 1) {  				SetRowCount (dt.Rows.Count);  			}  			counter++;  		}  	}  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (ds != null) {  	foreach (DataTable dt in ds.Tables) {  		DataGridView grid = new DataGridView ();  		DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  		grid.AllowUserToAddRows = false;  		grid.AllowUserToDeleteRows = false;  		grid.Dock = DockStyle.Fill;  		grid.Name = "gridResults_" + counter;  		grid.ReadOnly = true;  		grid.DataSource = dt;  		grid.DataError += GridDataError;  		grid.DefaultCellStyle = cellStyle;  		cellStyle.NullValue = nullText;  		cellStyle.Font = CreateDefaultFont ();  		grid.DataBindingComplete += GridDataBindingComplete;  		grid.Disposed += GridDisposed;  		grid.ColumnWidthChanged += OnColumnWidthChanged;  		TabPage tabPage = new TabPage ();  		tabPage.Controls.Add (grid);  		tabPage.Name = "tabPageResults_" + counter;  		tabPage.Padding = new Padding (3);  		tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  		tabPage.UseVisualStyleBackColor = false;  		_resultsTabControl.TabPages.Add (tabPage);  		// create a reasonable default max width for columns  		int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  		// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  		grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  		for (int i = 0; i < grid.Columns.Count; i++) {  			int columnWidth = grid.Columns [i].Width;  			grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  			string headerText = grid.Columns [i].HeaderText;  			if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  				// use the previous column size in case its been adjusted etc  				grid.Columns [i].Width = _columnSizes [headerText];  			}  			else {  				// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  				grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  				if (!string.IsNullOrEmpty (headerText)) {  					_columnSizes [headerText] = grid.Columns [i].Width;  				}  			}  		}  		// set the row count for the first tab for now.  		if (counter == 1) {  			SetRowCount (dt.Rows.Count);  		}  		counter++;  	}  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (ds != null) {  	foreach (DataTable dt in ds.Tables) {  		DataGridView grid = new DataGridView ();  		DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  		grid.AllowUserToAddRows = false;  		grid.AllowUserToDeleteRows = false;  		grid.Dock = DockStyle.Fill;  		grid.Name = "gridResults_" + counter;  		grid.ReadOnly = true;  		grid.DataSource = dt;  		grid.DataError += GridDataError;  		grid.DefaultCellStyle = cellStyle;  		cellStyle.NullValue = nullText;  		cellStyle.Font = CreateDefaultFont ();  		grid.DataBindingComplete += GridDataBindingComplete;  		grid.Disposed += GridDisposed;  		grid.ColumnWidthChanged += OnColumnWidthChanged;  		TabPage tabPage = new TabPage ();  		tabPage.Controls.Add (grid);  		tabPage.Name = "tabPageResults_" + counter;  		tabPage.Padding = new Padding (3);  		tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  		tabPage.UseVisualStyleBackColor = false;  		_resultsTabControl.TabPages.Add (tabPage);  		// create a reasonable default max width for columns  		int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  		// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  		grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  		for (int i = 0; i < grid.Columns.Count; i++) {  			int columnWidth = grid.Columns [i].Width;  			grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  			string headerText = grid.Columns [i].HeaderText;  			if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  				// use the previous column size in case its been adjusted etc  				grid.Columns [i].Width = _columnSizes [headerText];  			}  			else {  				// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  				grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  				if (!string.IsNullOrEmpty (headerText)) {  					_columnSizes [headerText] = grid.Columns [i].Width;  				}  			}  		}  		// set the row count for the first tab for now.  		if (counter == 1) {  			SetRowCount (dt.Rows.Count);  		}  		counter++;  	}  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (ds != null) {  	foreach (DataTable dt in ds.Tables) {  		DataGridView grid = new DataGridView ();  		DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  		grid.AllowUserToAddRows = false;  		grid.AllowUserToDeleteRows = false;  		grid.Dock = DockStyle.Fill;  		grid.Name = "gridResults_" + counter;  		grid.ReadOnly = true;  		grid.DataSource = dt;  		grid.DataError += GridDataError;  		grid.DefaultCellStyle = cellStyle;  		cellStyle.NullValue = nullText;  		cellStyle.Font = CreateDefaultFont ();  		grid.DataBindingComplete += GridDataBindingComplete;  		grid.Disposed += GridDisposed;  		grid.ColumnWidthChanged += OnColumnWidthChanged;  		TabPage tabPage = new TabPage ();  		tabPage.Controls.Add (grid);  		tabPage.Name = "tabPageResults_" + counter;  		tabPage.Padding = new Padding (3);  		tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  		tabPage.UseVisualStyleBackColor = false;  		_resultsTabControl.TabPages.Add (tabPage);  		// create a reasonable default max width for columns  		int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  		// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  		grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  		for (int i = 0; i < grid.Columns.Count; i++) {  			int columnWidth = grid.Columns [i].Width;  			grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  			string headerText = grid.Columns [i].HeaderText;  			if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  				// use the previous column size in case its been adjusted etc  				grid.Columns [i].Width = _columnSizes [headerText];  			}  			else {  				// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  				grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  				if (!string.IsNullOrEmpty (headerText)) {  					_columnSizes [headerText] = grid.Columns [i].Width;  				}  			}  		}  		// set the row count for the first tab for now.  		if (counter == 1) {  			SetRowCount (dt.Rows.Count);  		}  		counter++;  	}  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: foreach (DataTable dt in ds.Tables) {  	DataGridView grid = new DataGridView ();  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	grid.AllowUserToAddRows = false;  	grid.AllowUserToDeleteRows = false;  	grid.Dock = DockStyle.Fill;  	grid.Name = "gridResults_" + counter;  	grid.ReadOnly = true;  	grid.DataSource = dt;  	grid.DataError += GridDataError;  	grid.DefaultCellStyle = cellStyle;  	cellStyle.NullValue = nullText;  	cellStyle.Font = CreateDefaultFont ();  	grid.DataBindingComplete += GridDataBindingComplete;  	grid.Disposed += GridDisposed;  	grid.ColumnWidthChanged += OnColumnWidthChanged;  	TabPage tabPage = new TabPage ();  	tabPage.Controls.Add (grid);  	tabPage.Name = "tabPageResults_" + counter;  	tabPage.Padding = new Padding (3);  	tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  	tabPage.UseVisualStyleBackColor = false;  	_resultsTabControl.TabPages.Add (tabPage);  	// create a reasonable default max width for columns  	int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  	// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  	grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  	for (int i = 0; i < grid.Columns.Count; i++) {  		int columnWidth = grid.Columns [i].Width;  		grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  		string headerText = grid.Columns [i].HeaderText;  		if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  			// use the previous column size in case its been adjusted etc  			grid.Columns [i].Width = _columnSizes [headerText];  		}  		else {  			// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  			grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  			if (!string.IsNullOrEmpty (headerText)) {  				_columnSizes [headerText] = grid.Columns [i].Width;  			}  		}  	}  	// set the row count for the first tab for now.  	if (counter == 1) {  		SetRowCount (dt.Rows.Count);  	}  	counter++;  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: foreach (DataTable dt in ds.Tables) {  	DataGridView grid = new DataGridView ();  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	grid.AllowUserToAddRows = false;  	grid.AllowUserToDeleteRows = false;  	grid.Dock = DockStyle.Fill;  	grid.Name = "gridResults_" + counter;  	grid.ReadOnly = true;  	grid.DataSource = dt;  	grid.DataError += GridDataError;  	grid.DefaultCellStyle = cellStyle;  	cellStyle.NullValue = nullText;  	cellStyle.Font = CreateDefaultFont ();  	grid.DataBindingComplete += GridDataBindingComplete;  	grid.Disposed += GridDisposed;  	grid.ColumnWidthChanged += OnColumnWidthChanged;  	TabPage tabPage = new TabPage ();  	tabPage.Controls.Add (grid);  	tabPage.Name = "tabPageResults_" + counter;  	tabPage.Padding = new Padding (3);  	tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  	tabPage.UseVisualStyleBackColor = false;  	_resultsTabControl.TabPages.Add (tabPage);  	// create a reasonable default max width for columns  	int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  	// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  	grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  	for (int i = 0; i < grid.Columns.Count; i++) {  		int columnWidth = grid.Columns [i].Width;  		grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  		string headerText = grid.Columns [i].HeaderText;  		if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  			// use the previous column size in case its been adjusted etc  			grid.Columns [i].Width = _columnSizes [headerText];  		}  		else {  			// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  			grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  			if (!string.IsNullOrEmpty (headerText)) {  				_columnSizes [headerText] = grid.Columns [i].Width;  			}  		}  	}  	// set the row count for the first tab for now.  	if (counter == 1) {  		SetRowCount (dt.Rows.Count);  	}  	counter++;  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: foreach (DataTable dt in ds.Tables) {  	DataGridView grid = new DataGridView ();  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	grid.AllowUserToAddRows = false;  	grid.AllowUserToDeleteRows = false;  	grid.Dock = DockStyle.Fill;  	grid.Name = "gridResults_" + counter;  	grid.ReadOnly = true;  	grid.DataSource = dt;  	grid.DataError += GridDataError;  	grid.DefaultCellStyle = cellStyle;  	cellStyle.NullValue = nullText;  	cellStyle.Font = CreateDefaultFont ();  	grid.DataBindingComplete += GridDataBindingComplete;  	grid.Disposed += GridDisposed;  	grid.ColumnWidthChanged += OnColumnWidthChanged;  	TabPage tabPage = new TabPage ();  	tabPage.Controls.Add (grid);  	tabPage.Name = "tabPageResults_" + counter;  	tabPage.Padding = new Padding (3);  	tabPage.Text = string.Format ("{0}/Table {1}"' ds.DataSetName' counter);  	tabPage.UseVisualStyleBackColor = false;  	_resultsTabControl.TabPages.Add (tabPage);  	// create a reasonable default max width for columns  	int maxColWidth = Math.Max (grid.ClientSize.Width / 2' 100);  	// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  	grid.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  	for (int i = 0; i < grid.Columns.Count; i++) {  		int columnWidth = grid.Columns [i].Width;  		grid.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  		string headerText = grid.Columns [i].HeaderText;  		if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  			// use the previous column size in case its been adjusted etc  			grid.Columns [i].Width = _columnSizes [headerText];  		}  		else {  			// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  			grid.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  			if (!string.IsNullOrEmpty (headerText)) {  				_columnSizes [headerText] = grid.Columns [i].Width;  			}  		}  	}  	// set the row count for the first tab for now.  	if (counter == 1) {  		SetRowCount (dt.Rows.Count);  	}  	counter++;  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: tabPage.Padding = new Padding (3);  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: if (!string.IsNullOrEmpty (Batch.Messages)) {  	RichTextBox rtf = new RichTextBox ();  	rtf.Font = CreateDefaultFont ();  	rtf.Dock = DockStyle.Fill;  	rtf.ScrollBars = RichTextBoxScrollBars.ForcedBoth;  	rtf.Text = Batch.Messages;  	TabPage tabPage = new TabPage ();  	tabPage.Controls.Add (rtf);  	tabPage.Name = "tabPageResults_Messages";  	tabPage.Padding = new Padding (3);  	tabPage.Dock = DockStyle.Fill;  	tabPage.Text = Resources.Messages;  	tabPage.UseVisualStyleBackColor = false;  	_resultsTabControl.TabPages.Add (tabPage);  }  
Magic Number,MiniSqlQuery,QueryForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\QueryForm.cs,AddTables,The following statement contains a magic number: tabPage.Padding = new Padding (3);  
Magic Number,MiniSqlQuery.PlugIns,CoreApplicationPlugIn,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\CoreApplicationPlugIn.cs,InitializePlugIn,The following statement contains a magic number: hostWindow.AddToolStripCommand<SaveFileCommand> (2);  
Magic Number,MiniSqlQuery.PlugIns,CoreApplicationPlugIn,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\CoreApplicationPlugIn.cs,InitializePlugIn,The following statement contains a magic number: hostWindow.AddToolStripSeperator (3);  
Magic Number,MiniSqlQuery.PlugIns,CoreApplicationPlugIn,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\CoreApplicationPlugIn.cs,InitializePlugIn,The following statement contains a magic number: hostWindow.AddToolStripCommand<ExecuteTaskCommand> (4);  
Magic Number,MiniSqlQuery.PlugIns,CoreApplicationPlugIn,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\CoreApplicationPlugIn.cs,InitializePlugIn,The following statement contains a magic number: hostWindow.AddToolStripCommand<CancelTaskCommand> (5);  
Magic Number,MiniSqlQuery.PlugIns,CoreApplicationPlugIn,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\CoreApplicationPlugIn.cs,InitializePlugIn,The following statement contains a magic number: hostWindow.AddToolStripSeperator (6);  
Magic Number,MiniSqlQuery.PlugIns,CoreApplicationPlugIn,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\CoreApplicationPlugIn.cs,InitializePlugIn,The following statement contains a magic number: _timer.Interval = 1000;  
Magic Number,MiniSqlQuery.PlugIns.SearchTools,FindReplaceForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\SearchTools\FindReplaceForm.cs,DimForm,The following statement contains a magic number: Opacity = 0.8;  
Magic Number,MiniSqlQuery.PlugIns.ViewTable,ViewTableForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ViewTable\ViewTableForm.cs,DataGridViewResultDataBindingComplete,The following statement contains a magic number: try {  	_resizingGrid = true;  	// create a reasonable default max width for columns  	int maxColWidth = Math.Max (dataGridViewResult.ClientSize.Width / 2' 100);  	// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  	dataGridViewResult.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  	string nullText = _settings.NullText;  	string dateTimeFormat = _settings.DateTimeFormat;  	for (int i = 0; i < dt.Columns.Count; i++) {  		if (dt.Columns [i].DataType == typeof(DateTime)) {  			DataGridViewCellStyle dateCellStyle = new DataGridViewCellStyle ();  			dateCellStyle.NullValue = nullText;  			dateCellStyle.Format = dateTimeFormat;  			dataGridViewResult.Columns [i].DefaultCellStyle = dateCellStyle;  		}  		// sync column sizes:  		int columnWidth = dataGridViewResult.Columns [i].Width;  		dataGridViewResult.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  		string headerText = dataGridViewResult.Columns [i].HeaderText;  		if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  			// use the previous column size in case its been adjusted etc  			dataGridViewResult.Columns [i].Width = _columnSizes [headerText];  		}  		else {  			// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  			dataGridViewResult.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  			if (!string.IsNullOrEmpty (headerText)) {  				_columnSizes [headerText] = dataGridViewResult.Columns [i].Width;  			}  		}  	}  }  finally {  	_resizingGrid = false;  }  
Magic Number,MiniSqlQuery.PlugIns.ViewTable,ViewTableForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ViewTable\ViewTableForm.cs,DataGridViewResultDataBindingComplete,The following statement contains a magic number: try {  	_resizingGrid = true;  	// create a reasonable default max width for columns  	int maxColWidth = Math.Max (dataGridViewResult.ClientSize.Width / 2' 100);  	// Autosize the columns then change the widths' gleaned from SO - http://stackoverflow.com/a/1031871/276563  	dataGridViewResult.AutoResizeColumns (DataGridViewAutoSizeColumnsMode.DisplayedCells);  	string nullText = _settings.NullText;  	string dateTimeFormat = _settings.DateTimeFormat;  	for (int i = 0; i < dt.Columns.Count; i++) {  		if (dt.Columns [i].DataType == typeof(DateTime)) {  			DataGridViewCellStyle dateCellStyle = new DataGridViewCellStyle ();  			dateCellStyle.NullValue = nullText;  			dateCellStyle.Format = dateTimeFormat;  			dataGridViewResult.Columns [i].DefaultCellStyle = dateCellStyle;  		}  		// sync column sizes:  		int columnWidth = dataGridViewResult.Columns [i].Width;  		dataGridViewResult.Columns [i].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;  		string headerText = dataGridViewResult.Columns [i].HeaderText;  		if (!string.IsNullOrEmpty (headerText) && _columnSizes.ContainsKey (headerText)) {  			// use the previous column size in case its been adjusted etc  			dataGridViewResult.Columns [i].Width = _columnSizes [headerText];  		}  		else {  			// reset to a the smaller of the 2 sizes' this is mainly for the bigger text columns that throw the size out  			dataGridViewResult.Columns [i].Width = Math.Min (columnWidth' maxColWidth);  			if (!string.IsNullOrEmpty (headerText)) {  				_columnSizes [headerText] = dataGridViewResult.Columns [i].Width;  			}  		}  	}  }  finally {  	_resizingGrid = false;  }  
Magic Number,MiniSqlQuery.PlugIns.ViewTable,ViewTableForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ViewTable\ViewTableForm.cs,lnkExportScript_LinkClicked,The following statement contains a magic number: if (dt != null) {  	var stringWriter = new StringWriter ();  	var hostWindow = _services.HostWindow;  	var dbModelTable = hostWindow.DatabaseInspector.DbSchema.FindTableOrView (TableName);  	var sqlWriter = _services.Resolve<ISqlWriter> ();  	sqlWriter.IncludeComments = false;  	sqlWriter.InsertLineBreaksBetweenColumns = false;  	sqlWriter.IncludeReadOnlyColumnsInExport = _settings.IncludeReadOnlyColumnsInExport;  	for (int i = 0; i < dt.Rows.Count; i++) {  		DataRow dataRow = dt.Rows [i];  		foreach (var column in dbModelTable.Columns) {  			column.DbType.Value = dataRow [dt.Columns [column.Name]];  		}  		sqlWriter.WriteInsert (stringWriter' dbModelTable);  		if (_settings.EnableQueryBatching) {  			stringWriter.WriteLine ("GO");  		}  		stringWriter.WriteLine ();  		if (i % 10 == 0) {  			UpdateStatus (string.Format ("Processing {0} of {1} rows"' i + 1' dt.Rows.Count));  		}  	}  	UpdateStatus (string.Format ("Processed {0} rows. Opening file..."' dt.Rows.Count));  	// HACK - need to clean up the values for now as the model is holding the last rows data  ;-)  	// TODO - add a "deep clone" method to the table/columns  	foreach (var column in dbModelTable.Columns) {  		column.DbType.Value = null;  	}  	// create a new sql editor and push the sql into it  	IEditor editor = _services.Resolve<IQueryEditor> ();  	editor.AllText = stringWriter.ToString ();  	hostWindow.DisplayDockedForm (editor as DockContent);  	UpdateStatus (null);  }  
Magic Number,MiniSqlQuery.PlugIns.ViewTable,ViewTableForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ViewTable\ViewTableForm.cs,lnkExportScript_LinkClicked,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	DataRow dataRow = dt.Rows [i];  	foreach (var column in dbModelTable.Columns) {  		column.DbType.Value = dataRow [dt.Columns [column.Name]];  	}  	sqlWriter.WriteInsert (stringWriter' dbModelTable);  	if (_settings.EnableQueryBatching) {  		stringWriter.WriteLine ("GO");  	}  	stringWriter.WriteLine ();  	if (i % 10 == 0) {  		UpdateStatus (string.Format ("Processing {0} of {1} rows"' i + 1' dt.Rows.Count));  	}  }  
Magic Number,MiniSqlQuery.PlugIns.ViewTable,ViewTableForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ViewTable\ViewTableForm.cs,lnkExportScript_LinkClicked,The following statement contains a magic number: if (i % 10 == 0) {  	UpdateStatus (string.Format ("Processing {0} of {1} rows"' i + 1' dt.Rows.Count));  }  
Missing Default,MiniSqlQuery.PlugIns.ConnectionStringsManager,ConnectionStringBuilderForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ConnectionStringsManager\ConnectionStringBuilderForm.cs,ConnectionStringBuilderForm_FormClosing,The following switch statement is missing a default case: switch (saveFile) {  case DialogResult.Yes:  	WriteValuesBack ();  	break;  case DialogResult.Cancel:  	e.Cancel = true;  	break;  }  
Missing Default,MiniSqlQuery.PlugIns.ConnectionStringsManager,DbConnectionsForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\ConnectionStringsManager\DbConnectionsForm.cs,DbConnectionsForm_FormClosing,The following switch statement is missing a default case: switch (saveFile) {  case DialogResult.Yes:  	SaveConnectionDefinitions (_definitionList);  	break;  case DialogResult.Cancel:  	e.Cancel = true;  	break;  }  
Missing Default,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorForm.cs,NavigateTo,The following switch statement is missing a default case: switch (modelObject.ObjectType) {  case ObjectTypes.Table:  	foreach (TreeNode treeNode in _tablesNode.Nodes) {  		IDbModelNamedObject obj = treeNode.Tag as IDbModelNamedObject;  		if (obj != null && modelObject == obj) {  			SelectNode (treeNode);  		}  	}  	break;  case ObjectTypes.View:  	foreach (TreeNode treeNode in _viewsNode.Nodes) {  		IDbModelNamedObject obj = treeNode.Tag as IDbModelNamedObject;  		if (obj != null && modelObject == obj) {  			SelectNode (treeNode);  		}  	}  	break;  case ObjectTypes.Column:  	DbModelColumn modelColumn = modelObject as DbModelColumn;  	if (modelColumn != null) {  		foreach (TreeNode treeNode in _tablesNode.Nodes) {  			// only look in the tables nodw for FK refs  			DbModelTable modelTable = treeNode.Tag as DbModelTable;  			if (modelTable != null && modelTable == modelColumn.ParentTable) {  				// now find the column in the child nodes  				foreach (TreeNode columnNode in treeNode.Nodes) {  					DbModelColumn modelReferingColumn = columnNode.Tag as DbModelColumn;  					if (modelReferingColumn != null && modelReferingColumn == modelColumn) {  						SelectNode (columnNode);  					}  				}  			}  		}  	}  	break;  }  
Missing Default,MiniSqlQuery.PlugIns.DatabaseInspector,DatabaseInspectorForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\DatabaseInspectorForm.cs,CreateTreeNodes,The following switch statement is missing a default case: switch (table.ObjectType) {  case ObjectTypes.Table:  	_tablesNode.Nodes.Add (tableNode);  	break;  case ObjectTypes.View:  	_viewsNode.Nodes.Add (tableNode);  	break;  }  
Missing Default,MiniSqlQuery.PlugIns.DatabaseInspector,FindObjectForm,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery\PlugIns\DatabaseInspector\FindObjectForm.cs,ProcessCmdKey,The following switch statement is missing a default case: switch (keyData) {  case Keys.Escape:  	DialogResult = DialogResult.Cancel;  	Close ();  	break;  case Keys.Enter:  	Done ();  	break;  case Keys.Up:  	MoveSelectionUp ();  	return true;  case Keys.Down:  	MoveSelectionDown ();  	return true;  }  
