Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MiniSqlQuery.Core.DbModel,DbModelType,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\DbModelType.cs,ToDDLValue,Cyclomatic complexity of the method is 10
Complex Method,MiniSqlQuery.Core.DbModel,GenericSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\GenericSchemaService.cs,GetDbObjectModel,Cyclomatic complexity of the method is 10
Complex Method,MiniSqlQuery.Core.DbModel,OleDbSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\OleDbSchemaService.cs,GetDbTypes,Cyclomatic complexity of the method is 8
Complex Method,MiniSqlQuery.Core.DbModel,OracleSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\OracleSchemaService.cs,GetDbObjectModel,Cyclomatic complexity of the method is 10
Complex Method,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,AssignSystemTypes,Cyclomatic complexity of the method is 40
Complex Method,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,FixCreateFormat,Cyclomatic complexity of the method is 10
Complex Method,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,FixMaxLengths,Cyclomatic complexity of the method is 14
Complex Method,MiniSqlQuery.Core.DbModel,SqlWriter,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlWriter.cs,WriteInsert,Cyclomatic complexity of the method is 11
Long Parameter List,MiniSqlQuery.Core,IHostWindow,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\IHostWindow.cs,DisplayMessageBox,The method has 9 parameters.
Long Parameter List,MiniSqlQuery.Core.DbModel,DbModelType,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\DbModelType.cs,Create,The method has 6 parameters.
Long Statement,MiniSqlQuery.Core,ApplicationServices,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\ApplicationServices.cs,InitializePlugIns,The length of the statement  "			HostWindow.DisplayMessageBox (null' string.Format ("Error Initializing {0}:{1}{2}"' plugIn.PluginName' Environment.NewLine' exp)' "Plugin Error"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1' 0' null' null); " is 240.
Long Statement,MiniSqlQuery.Core,Utility,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\Utility.cs,GetAppFolderPath,The length of the statement  "	string folder = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData)' Resources.ShortAppTitle); " is 126.
Long Statement,MiniSqlQuery.Core.DbModel,DbModelDependencyWalker,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\DbModelDependencyWalker.cs,ProcessForeignKeyReferences,The length of the statement  "		throw new InvalidOperationException (string.Format ("FK processor exceeded recursive level of 1000 at '{0}'."' table.Name)); " is 124.
Long Statement,MiniSqlQuery.Core.DbModel,GenericSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\GenericSchemaService.cs,GetDbObjectModel,The length of the statement  "		DataView tablesDV = new DataView (tables' "TABLE_TYPE='TABLE' OR TABLE_TYPE='BASE TABLE'"' "TABLE_SCHEMA' TABLE_NAME"' DataViewRowState.CurrentRows); " is 149.
Long Statement,MiniSqlQuery.Core.DbModel,GenericSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\GenericSchemaService.cs,GetDbObjectModel,The length of the statement  "		DataView viewsDV = new DataView (tables' "TABLE_TYPE='VIEW'"' "TABLE_SCHEMA' TABLE_NAME"' DataViewRowState.CurrentRows); " is 120.
Long Statement,MiniSqlQuery.Core.DbModel,GenericSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\GenericSchemaService.cs,GetColumnsForTable,The length of the statement  "		DbModelType dbType = DbModelType.Create (dbTypes' dataType' SafeGetInt (columnRow' "ColumnSize")' SafeGetInt (columnRow' "Precision")' SafeGetInt (columnRow' "Scale")' SafeGetString (columnRow' "DataType")); " is 207.
Long Statement,MiniSqlQuery.Core.DbModel,GenericSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\GenericSchemaService.cs,SafeGetInt,The length of the statement  "		// In Oracle Maximum size for column is larger than Max Int32' instead of changing return value' just coerce on Max.Int32. " is 122.
Long Statement,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The length of the statement  "			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME  " is 203.
Long Statement,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,ProcessForeignKeyReferencesForTable,The length of the statement  "		var refTable = dbTable.ParentDb.FindTable (Utility.RenderSafeSchemaObjectName (constraint.UniqueConstraintTableSchema' constraint.UniqueConstraintTableName)); " is 158.
Long Statement,MiniSqlQuery.Core.DbModel,SqlClientSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlClientSchemaService.cs,ProcessForeignKeyReferencesForTable,The length of the statement  "		var refTable = dbTable.ParentDb.FindTable (Utility.RenderSafeSchemaObjectName (constraint.UniqueConstraintTableSchema' constraint.UniqueConstraintTableName)); " is 158.
Magic Number,MiniSqlQuery.Core,CommandControlBuilder,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\CommandControlBuilder.cs,CreateLinkLabel,The following statement contains a magic number: linkLabel.Padding = new Padding (4);  
Magic Number,MiniSqlQuery.Core.DbModel,DbModelDependencyWalker,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\DbModelDependencyWalker.cs,ProcessForeignKeyReferences,The following statement contains a magic number: if (level > 1000) {  	throw new InvalidOperationException (string.Format ("FK processor exceeded recursive level of 1000 at '{0}'."' table.Name));  }  
Magic Number,MiniSqlQuery.Core.DbModel,DbModelColumn,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\DbModelColumn.cs,DbModelColumn,The following statement contains a magic number: DbType = new DbModelType ("varchar"' 50);  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: try {  	using (var cmd = dbConn.CreateCommand ()) {  		cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  		cmd.CommandType = CommandType.Text;  		using (var dr = cmd.ExecuteReader ()) {  			while (dr.Read ()) {  				dbTable.Constraints.Add (new DbModelConstraint {  					ConstraintTableName = dr.GetString (0)'  					ConstraintName = dr.GetString (1)'  					ColumnName = dr.GetString (2)'  					UniqueConstraintTableName = dr.GetString (3)'  					UniqueConstraintName = dr.GetString (4)'  					UniqueColumnName = dr.GetString (5)'  					UpdateRule = dr.GetString (6)'  					DeleteRule = dr.GetString (7)  				});  			}  		}  	}  }  catch (DbException) {  	ForeignKeyInformationAvailable = false;  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: try {  	using (var cmd = dbConn.CreateCommand ()) {  		cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  		cmd.CommandType = CommandType.Text;  		using (var dr = cmd.ExecuteReader ()) {  			while (dr.Read ()) {  				dbTable.Constraints.Add (new DbModelConstraint {  					ConstraintTableName = dr.GetString (0)'  					ConstraintName = dr.GetString (1)'  					ColumnName = dr.GetString (2)'  					UniqueConstraintTableName = dr.GetString (3)'  					UniqueConstraintName = dr.GetString (4)'  					UniqueColumnName = dr.GetString (5)'  					UpdateRule = dr.GetString (6)'  					DeleteRule = dr.GetString (7)  				});  			}  		}  	}  }  catch (DbException) {  	ForeignKeyInformationAvailable = false;  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: try {  	using (var cmd = dbConn.CreateCommand ()) {  		cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  		cmd.CommandType = CommandType.Text;  		using (var dr = cmd.ExecuteReader ()) {  			while (dr.Read ()) {  				dbTable.Constraints.Add (new DbModelConstraint {  					ConstraintTableName = dr.GetString (0)'  					ConstraintName = dr.GetString (1)'  					ColumnName = dr.GetString (2)'  					UniqueConstraintTableName = dr.GetString (3)'  					UniqueConstraintName = dr.GetString (4)'  					UniqueColumnName = dr.GetString (5)'  					UpdateRule = dr.GetString (6)'  					DeleteRule = dr.GetString (7)  				});  			}  		}  	}  }  catch (DbException) {  	ForeignKeyInformationAvailable = false;  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: try {  	using (var cmd = dbConn.CreateCommand ()) {  		cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  		cmd.CommandType = CommandType.Text;  		using (var dr = cmd.ExecuteReader ()) {  			while (dr.Read ()) {  				dbTable.Constraints.Add (new DbModelConstraint {  					ConstraintTableName = dr.GetString (0)'  					ConstraintName = dr.GetString (1)'  					ColumnName = dr.GetString (2)'  					UniqueConstraintTableName = dr.GetString (3)'  					UniqueConstraintName = dr.GetString (4)'  					UniqueColumnName = dr.GetString (5)'  					UpdateRule = dr.GetString (6)'  					DeleteRule = dr.GetString (7)  				});  			}  		}  	}  }  catch (DbException) {  	ForeignKeyInformationAvailable = false;  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: try {  	using (var cmd = dbConn.CreateCommand ()) {  		cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  		cmd.CommandType = CommandType.Text;  		using (var dr = cmd.ExecuteReader ()) {  			while (dr.Read ()) {  				dbTable.Constraints.Add (new DbModelConstraint {  					ConstraintTableName = dr.GetString (0)'  					ConstraintName = dr.GetString (1)'  					ColumnName = dr.GetString (2)'  					UniqueConstraintTableName = dr.GetString (3)'  					UniqueConstraintName = dr.GetString (4)'  					UniqueColumnName = dr.GetString (5)'  					UpdateRule = dr.GetString (6)'  					DeleteRule = dr.GetString (7)  				});  			}  		}  	}  }  catch (DbException) {  	ForeignKeyInformationAvailable = false;  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: try {  	using (var cmd = dbConn.CreateCommand ()) {  		cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  		cmd.CommandType = CommandType.Text;  		using (var dr = cmd.ExecuteReader ()) {  			while (dr.Read ()) {  				dbTable.Constraints.Add (new DbModelConstraint {  					ConstraintTableName = dr.GetString (0)'  					ConstraintName = dr.GetString (1)'  					ColumnName = dr.GetString (2)'  					UniqueConstraintTableName = dr.GetString (3)'  					UniqueConstraintName = dr.GetString (4)'  					UniqueColumnName = dr.GetString (5)'  					UpdateRule = dr.GetString (6)'  					DeleteRule = dr.GetString (7)  				});  			}  		}  	}  }  catch (DbException) {  	ForeignKeyInformationAvailable = false;  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var cmd = dbConn.CreateCommand ()) {  	cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  	cmd.CommandType = CommandType.Text;  	using (var dr = cmd.ExecuteReader ()) {  		while (dr.Read ()) {  			dbTable.Constraints.Add (new DbModelConstraint {  				ConstraintTableName = dr.GetString (0)'  				ConstraintName = dr.GetString (1)'  				ColumnName = dr.GetString (2)'  				UniqueConstraintTableName = dr.GetString (3)'  				UniqueConstraintName = dr.GetString (4)'  				UniqueColumnName = dr.GetString (5)'  				UpdateRule = dr.GetString (6)'  				DeleteRule = dr.GetString (7)  			});  		}  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var cmd = dbConn.CreateCommand ()) {  	cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  	cmd.CommandType = CommandType.Text;  	using (var dr = cmd.ExecuteReader ()) {  		while (dr.Read ()) {  			dbTable.Constraints.Add (new DbModelConstraint {  				ConstraintTableName = dr.GetString (0)'  				ConstraintName = dr.GetString (1)'  				ColumnName = dr.GetString (2)'  				UniqueConstraintTableName = dr.GetString (3)'  				UniqueConstraintName = dr.GetString (4)'  				UniqueColumnName = dr.GetString (5)'  				UpdateRule = dr.GetString (6)'  				DeleteRule = dr.GetString (7)  			});  		}  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var cmd = dbConn.CreateCommand ()) {  	cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  	cmd.CommandType = CommandType.Text;  	using (var dr = cmd.ExecuteReader ()) {  		while (dr.Read ()) {  			dbTable.Constraints.Add (new DbModelConstraint {  				ConstraintTableName = dr.GetString (0)'  				ConstraintName = dr.GetString (1)'  				ColumnName = dr.GetString (2)'  				UniqueConstraintTableName = dr.GetString (3)'  				UniqueConstraintName = dr.GetString (4)'  				UniqueColumnName = dr.GetString (5)'  				UpdateRule = dr.GetString (6)'  				DeleteRule = dr.GetString (7)  			});  		}  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var cmd = dbConn.CreateCommand ()) {  	cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  	cmd.CommandType = CommandType.Text;  	using (var dr = cmd.ExecuteReader ()) {  		while (dr.Read ()) {  			dbTable.Constraints.Add (new DbModelConstraint {  				ConstraintTableName = dr.GetString (0)'  				ConstraintName = dr.GetString (1)'  				ColumnName = dr.GetString (2)'  				UniqueConstraintTableName = dr.GetString (3)'  				UniqueConstraintName = dr.GetString (4)'  				UniqueColumnName = dr.GetString (5)'  				UpdateRule = dr.GetString (6)'  				DeleteRule = dr.GetString (7)  			});  		}  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var cmd = dbConn.CreateCommand ()) {  	cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  	cmd.CommandType = CommandType.Text;  	using (var dr = cmd.ExecuteReader ()) {  		while (dr.Read ()) {  			dbTable.Constraints.Add (new DbModelConstraint {  				ConstraintTableName = dr.GetString (0)'  				ConstraintName = dr.GetString (1)'  				ColumnName = dr.GetString (2)'  				UniqueConstraintTableName = dr.GetString (3)'  				UniqueConstraintName = dr.GetString (4)'  				UniqueColumnName = dr.GetString (5)'  				UpdateRule = dr.GetString (6)'  				DeleteRule = dr.GetString (7)  			});  		}  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var cmd = dbConn.CreateCommand ()) {  	cmd.CommandText = string.Format (@"SELECT   	KCU1.TABLE_NAME AS FK_TABLE_NAME'    	KCU1.CONSTRAINT_NAME AS FK_CONSTRAINT_NAME'   	KCU1.COLUMN_NAME AS FK_COLUMN_NAME'  	KCU2.TABLE_NAME AS UQ_TABLE_NAME'   	KCU2.CONSTRAINT_NAME AS UQ_CONSTRAINT_NAME'   	KCU2.COLUMN_NAME AS UQ_COLUMN_NAME'   	RC.UPDATE_RULE'   	RC.DELETE_RULE'   	KCU2.ORDINAL_POSITION AS UQ_ORDINAL_POSITION'   	KCU1.ORDINAL_POSITION AS FK_ORDINAL_POSITION  FROM   	INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC   		JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME   			JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON  KCU2.CONSTRAINT_NAME =  RC.UNIQUE_CONSTRAINT_NAME AND KCU2.ORDINAL_POSITION = KCU1.ORDINAL_POSITION AND KCU2.TABLE_NAME = RC.UNIQUE_CONSTRAINT_TABLE_NAME   WHERE KCU1.TABLE_NAME = '{0}'  ORDER BY   	FK_TABLE_NAME'   	FK_CONSTRAINT_NAME'   	FK_ORDINAL_POSITION  "' dbTable.Name);  	cmd.CommandType = CommandType.Text;  	using (var dr = cmd.ExecuteReader ()) {  		while (dr.Read ()) {  			dbTable.Constraints.Add (new DbModelConstraint {  				ConstraintTableName = dr.GetString (0)'  				ConstraintName = dr.GetString (1)'  				ColumnName = dr.GetString (2)'  				UniqueConstraintTableName = dr.GetString (3)'  				UniqueConstraintName = dr.GetString (4)'  				UniqueColumnName = dr.GetString (5)'  				UpdateRule = dr.GetString (6)'  				DeleteRule = dr.GetString (7)  			});  		}  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var dr = cmd.ExecuteReader ()) {  	while (dr.Read ()) {  		dbTable.Constraints.Add (new DbModelConstraint {  			ConstraintTableName = dr.GetString (0)'  			ConstraintName = dr.GetString (1)'  			ColumnName = dr.GetString (2)'  			UniqueConstraintTableName = dr.GetString (3)'  			UniqueConstraintName = dr.GetString (4)'  			UniqueColumnName = dr.GetString (5)'  			UpdateRule = dr.GetString (6)'  			DeleteRule = dr.GetString (7)  		});  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var dr = cmd.ExecuteReader ()) {  	while (dr.Read ()) {  		dbTable.Constraints.Add (new DbModelConstraint {  			ConstraintTableName = dr.GetString (0)'  			ConstraintName = dr.GetString (1)'  			ColumnName = dr.GetString (2)'  			UniqueConstraintTableName = dr.GetString (3)'  			UniqueConstraintName = dr.GetString (4)'  			UniqueColumnName = dr.GetString (5)'  			UpdateRule = dr.GetString (6)'  			DeleteRule = dr.GetString (7)  		});  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var dr = cmd.ExecuteReader ()) {  	while (dr.Read ()) {  		dbTable.Constraints.Add (new DbModelConstraint {  			ConstraintTableName = dr.GetString (0)'  			ConstraintName = dr.GetString (1)'  			ColumnName = dr.GetString (2)'  			UniqueConstraintTableName = dr.GetString (3)'  			UniqueConstraintName = dr.GetString (4)'  			UniqueColumnName = dr.GetString (5)'  			UpdateRule = dr.GetString (6)'  			DeleteRule = dr.GetString (7)  		});  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var dr = cmd.ExecuteReader ()) {  	while (dr.Read ()) {  		dbTable.Constraints.Add (new DbModelConstraint {  			ConstraintTableName = dr.GetString (0)'  			ConstraintName = dr.GetString (1)'  			ColumnName = dr.GetString (2)'  			UniqueConstraintTableName = dr.GetString (3)'  			UniqueConstraintName = dr.GetString (4)'  			UniqueColumnName = dr.GetString (5)'  			UpdateRule = dr.GetString (6)'  			DeleteRule = dr.GetString (7)  		});  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var dr = cmd.ExecuteReader ()) {  	while (dr.Read ()) {  		dbTable.Constraints.Add (new DbModelConstraint {  			ConstraintTableName = dr.GetString (0)'  			ConstraintName = dr.GetString (1)'  			ColumnName = dr.GetString (2)'  			UniqueConstraintTableName = dr.GetString (3)'  			UniqueConstraintName = dr.GetString (4)'  			UniqueColumnName = dr.GetString (5)'  			UpdateRule = dr.GetString (6)'  			DeleteRule = dr.GetString (7)  		});  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: using (var dr = cmd.ExecuteReader ()) {  	while (dr.Read ()) {  		dbTable.Constraints.Add (new DbModelConstraint {  			ConstraintTableName = dr.GetString (0)'  			ConstraintName = dr.GetString (1)'  			ColumnName = dr.GetString (2)'  			UniqueConstraintTableName = dr.GetString (3)'  			UniqueConstraintName = dr.GetString (4)'  			UniqueColumnName = dr.GetString (5)'  			UpdateRule = dr.GetString (6)'  			DeleteRule = dr.GetString (7)  		});  	}  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: while (dr.Read ()) {  	dbTable.Constraints.Add (new DbModelConstraint {  		ConstraintTableName = dr.GetString (0)'  		ConstraintName = dr.GetString (1)'  		ColumnName = dr.GetString (2)'  		UniqueConstraintTableName = dr.GetString (3)'  		UniqueConstraintName = dr.GetString (4)'  		UniqueColumnName = dr.GetString (5)'  		UpdateRule = dr.GetString (6)'  		DeleteRule = dr.GetString (7)  	});  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: while (dr.Read ()) {  	dbTable.Constraints.Add (new DbModelConstraint {  		ConstraintTableName = dr.GetString (0)'  		ConstraintName = dr.GetString (1)'  		ColumnName = dr.GetString (2)'  		UniqueConstraintTableName = dr.GetString (3)'  		UniqueConstraintName = dr.GetString (4)'  		UniqueColumnName = dr.GetString (5)'  		UpdateRule = dr.GetString (6)'  		DeleteRule = dr.GetString (7)  	});  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: while (dr.Read ()) {  	dbTable.Constraints.Add (new DbModelConstraint {  		ConstraintTableName = dr.GetString (0)'  		ConstraintName = dr.GetString (1)'  		ColumnName = dr.GetString (2)'  		UniqueConstraintTableName = dr.GetString (3)'  		UniqueConstraintName = dr.GetString (4)'  		UniqueColumnName = dr.GetString (5)'  		UpdateRule = dr.GetString (6)'  		DeleteRule = dr.GetString (7)  	});  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: while (dr.Read ()) {  	dbTable.Constraints.Add (new DbModelConstraint {  		ConstraintTableName = dr.GetString (0)'  		ConstraintName = dr.GetString (1)'  		ColumnName = dr.GetString (2)'  		UniqueConstraintTableName = dr.GetString (3)'  		UniqueConstraintName = dr.GetString (4)'  		UniqueColumnName = dr.GetString (5)'  		UpdateRule = dr.GetString (6)'  		DeleteRule = dr.GetString (7)  	});  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: while (dr.Read ()) {  	dbTable.Constraints.Add (new DbModelConstraint {  		ConstraintTableName = dr.GetString (0)'  		ConstraintName = dr.GetString (1)'  		ColumnName = dr.GetString (2)'  		UniqueConstraintTableName = dr.GetString (3)'  		UniqueConstraintName = dr.GetString (4)'  		UniqueColumnName = dr.GetString (5)'  		UpdateRule = dr.GetString (6)'  		DeleteRule = dr.GetString (7)  	});  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: while (dr.Read ()) {  	dbTable.Constraints.Add (new DbModelConstraint {  		ConstraintTableName = dr.GetString (0)'  		ConstraintName = dr.GetString (1)'  		ColumnName = dr.GetString (2)'  		UniqueConstraintTableName = dr.GetString (3)'  		UniqueConstraintName = dr.GetString (4)'  		UniqueColumnName = dr.GetString (5)'  		UpdateRule = dr.GetString (6)'  		DeleteRule = dr.GetString (7)  	});  }  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: dbTable.Constraints.Add (new DbModelConstraint {  	ConstraintTableName = dr.GetString (0)'  	ConstraintName = dr.GetString (1)'  	ColumnName = dr.GetString (2)'  	UniqueConstraintTableName = dr.GetString (3)'  	UniqueConstraintName = dr.GetString (4)'  	UniqueColumnName = dr.GetString (5)'  	UpdateRule = dr.GetString (6)'  	DeleteRule = dr.GetString (7)  });  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: dbTable.Constraints.Add (new DbModelConstraint {  	ConstraintTableName = dr.GetString (0)'  	ConstraintName = dr.GetString (1)'  	ColumnName = dr.GetString (2)'  	UniqueConstraintTableName = dr.GetString (3)'  	UniqueConstraintName = dr.GetString (4)'  	UniqueColumnName = dr.GetString (5)'  	UpdateRule = dr.GetString (6)'  	DeleteRule = dr.GetString (7)  });  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: dbTable.Constraints.Add (new DbModelConstraint {  	ConstraintTableName = dr.GetString (0)'  	ConstraintName = dr.GetString (1)'  	ColumnName = dr.GetString (2)'  	UniqueConstraintTableName = dr.GetString (3)'  	UniqueConstraintName = dr.GetString (4)'  	UniqueColumnName = dr.GetString (5)'  	UpdateRule = dr.GetString (6)'  	DeleteRule = dr.GetString (7)  });  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: dbTable.Constraints.Add (new DbModelConstraint {  	ConstraintTableName = dr.GetString (0)'  	ConstraintName = dr.GetString (1)'  	ColumnName = dr.GetString (2)'  	UniqueConstraintTableName = dr.GetString (3)'  	UniqueConstraintName = dr.GetString (4)'  	UniqueColumnName = dr.GetString (5)'  	UpdateRule = dr.GetString (6)'  	DeleteRule = dr.GetString (7)  });  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: dbTable.Constraints.Add (new DbModelConstraint {  	ConstraintTableName = dr.GetString (0)'  	ConstraintName = dr.GetString (1)'  	ColumnName = dr.GetString (2)'  	UniqueConstraintTableName = dr.GetString (3)'  	UniqueConstraintName = dr.GetString (4)'  	UniqueColumnName = dr.GetString (5)'  	UpdateRule = dr.GetString (6)'  	DeleteRule = dr.GetString (7)  });  
Magic Number,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,GetForeignKeyReferencesForTable,The following statement contains a magic number: dbTable.Constraints.Add (new DbModelConstraint {  	ConstraintTableName = dr.GetString (0)'  	ConstraintName = dr.GetString (1)'  	ColumnName = dr.GetString (2)'  	UniqueConstraintTableName = dr.GetString (3)'  	UniqueConstraintName = dr.GetString (4)'  	UniqueColumnName = dr.GetString (5)'  	UpdateRule = dr.GetString (6)'  	DeleteRule = dr.GetString (7)  });  
Missing Default,MiniSqlQuery.Core.DbModel,GenericSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\GenericSchemaService.cs,SafeGetBool,The following switch statement is missing a default case: switch (value.ToLower ()) {  case "no":  case "false":  	return false;  case "yes":  case "true":  	return true;  }  
Missing Default,MiniSqlQuery.Core.DbModel,OleDbSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\OleDbSchemaService.cs,GetDbTypes,The following switch statement is missing a default case: switch (dbType.Name) {  case "VarChar":  	dbType.CreateFormat = "VarChar({0})";  	break;  case "VarBinary":  	dbType.CreateFormat = "VarBinary({0})";  	break;  }  
Missing Default,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,AssignSystemTypes,The following switch statement is missing a default case: switch (dbType.Name.ToLower ()) {  case "smallint":  	dbType.SystemType = typeof(byte);  	break;  case "int":  	dbType.SystemType = typeof(int);  	break;  case "tinyint":  	dbType.SystemType = typeof(byte);  	break;  case "bigint":  	dbType.SystemType = typeof(long);  	break;  case "float":  	dbType.SystemType = typeof(double);  	// yes' float is double ;-)  	break;  case "numeric":  case "money":  case "real":  	dbType.SystemType = typeof(decimal);  	break;  case "bit":  	dbType.SystemType = typeof(bool);  	break;  case "uniqueidentifier":  	dbType.SystemType = typeof(Guid);  	break;  case "nvarchar":  case "nchar":  case "ntext":  	dbType.SystemType = typeof(string);  	break;  case "datetime":  	dbType.SystemType = typeof(DateTime);  	break;  case "varbinary":  case "binary":  case "image":  case "rowversion":  	dbType.SystemType = typeof(byte[]);  	break;  }  
Missing Default,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,FixCreateFormat,The following switch statement is missing a default case: switch (dbType.Name.ToLower ()) {  case "nchar":  case "nvarchar":  case "binary":  case "varbinary":  	dbType.CreateFormat = dbType.Name.ToLower () + "({0})";  	break;  case "decimal":  case "numeric":  	dbType.CreateFormat = dbType.Name.ToLower () + "({0}' {1})";  	break;  }  
Missing Default,MiniSqlQuery.Core.DbModel,SqlCeSchemaService,C:\repos\ClusterReply_minisqlquery\src\MiniSqlQuery.Core\DbModel\SqlCeSchemaService.cs,FixMaxLengths,The following switch statement is missing a default case: switch (dbType.Name.ToLower ()) {  case "nchar":  case "nvarchar":  	dbType.Length = MAX_NCHAR_COLUMN_SIZE;  	break;  case "ntext":  	dbType.Length = MAX_NTEXT_COLUMN_SIZE;  	break;  case "binary":  case "varbinary":  	dbType.Length = MAX_BINARY_COLUMN_SIZE;  	break;  case "image":  	dbType.Length = MAX_IMAGE_COLUMN_SIZE;  	break;  }  
