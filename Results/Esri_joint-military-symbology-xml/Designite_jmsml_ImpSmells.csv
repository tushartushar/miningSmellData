Implementation smell,Namespace,Class,File,Method,Description
Long Method,jmsml,Program,C:\repos\Esri_joint-military-symbology-xml\source\JointMilitarySymbologyLibraryCS\jmsml\Program.cs,Run,The method has 176 lines of code.
Complex Method,jmsml,Program,C:\repos\Esri_joint-military-symbology-xml\source\JointMilitarySymbologyLibraryCS\jmsml\Program.cs,Run,Cyclomatic complexity of the method is 19
Long Statement,jmsml,Program,C:\repos\Esri_joint-military-symbology-xml\source\JointMilitarySymbologyLibraryCS\jmsml\Program.cs,Run,The length of the statement  "            CommandLineArgs.I.parseArgs(args' "/e=false;/+=false;/-source=false;/-legacy=false;/xas=SIMPLE;/size=32;/asOriginal=false;/+amplifiers=false"); " is 143.
Long Statement,jmsml,Program,C:\repos\Esri_joint-military-symbology-xml\source\JointMilitarySymbologyLibraryCS\jmsml\Program.cs,Run,The length of the statement  "                _etl.ExportFrames(framePath' contextQuery' identityQuery' dimensionQuery' _exportThisAs' appendFiles' omitSource' omitLegacyTag' size); " is 135.
Magic Number,jmsml,Program,C:\repos\Esri_joint-military-symbology-xml\source\JointMilitarySymbologyLibraryCS\jmsml\Program.cs,Run,The following statement contains a magic number: if (ocaPath != "")              {                  string[] paths = ocaPath.Split(''');                    if (paths.Count() == 2)                  {                      _etl.ExportOCA(paths[0]' paths[1]' _exportThisAs' appendFiles' omitSource' omitLegacyTag' size);                  }                  else                  {                      _etl.ExportOCA(ocaPath' ""' _exportThisAs' appendFiles' omitSource' omitLegacyTag' size);                  }              }
Magic Number,jmsml,Program,C:\repos\Esri_joint-military-symbology-xml\source\JointMilitarySymbologyLibraryCS\jmsml\Program.cs,Main,The following statement contains a magic number: try              {                  Run(args);                  return Environment.ExitCode;              }              catch (Exception e)              {                  Console.Error.WriteLine(e.Message);                  Trace.TraceError(e.ToString());                    return Environment.ExitCode != 0                       ? Environment.ExitCode : 100;              }
