Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: absoluteLayout = new AbsoluteLayout              {                  BackgroundColor = Color.FromRgb(240' 220' 130)'                  HorizontalOptions = LayoutOptions.Center'                  VerticalOptions = LayoutOptions.Center              };
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: absoluteLayout = new AbsoluteLayout              {                  BackgroundColor = Color.FromRgb(240' 220' 130)'                  HorizontalOptions = LayoutOptions.Center'                  VerticalOptions = LayoutOptions.Center              };
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: absoluteLayout = new AbsoluteLayout              {                  BackgroundColor = Color.FromRgb(240' 220' 130)'                  HorizontalOptions = LayoutOptions.Center'                  VerticalOptions = LayoutOptions.Center              };
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: for (int i = 0; i < 32; i++)              {                  BoxView boxView = new BoxView                  {                      Color = Color.FromRgb(0' 64' 0)                  };                  absoluteLayout.Children.Add(boxView);              }
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: for (int i = 0; i < 32; i++)              {                  BoxView boxView = new BoxView                  {                      Color = Color.FromRgb(0' 64' 0)                  };                  absoluteLayout.Children.Add(boxView);              }
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: this.Padding = new Thickness(5' Device.OnPlatform(25' 5' 5)' 5' 5);
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: this.Padding = new Thickness(5' Device.OnPlatform(25' 5' 5)' 5' 5);
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: this.Padding = new Thickness(5' Device.OnPlatform(25' 5' 5)' 5' 5);
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: this.Padding = new Thickness(5' Device.OnPlatform(25' 5' 5)' 5' 5);
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: this.Padding = new Thickness(5' Device.OnPlatform(25' 5' 5)' 5' 5);
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,ChessboardDynamicPage,The following statement contains a magic number: this.Padding = new Thickness(5' Device.OnPlatform(25' 5' 5)' 5' 5);
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,OnContentViewSizeChanged,The following statement contains a magic number: double squareSize = Math.Min(contentView.Width' contentView.Height) / 8;
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,OnContentViewSizeChanged,The following statement contains a magic number: for (int row = 0; row < 8; row++)              {                  for (int col = 0; col < 8; col++)                  {                      // Skip every other square.                      if (((row ^ col) & 1) == 0)                          continue;                        View view = absoluteLayout.Children[index];                      Rectangle rect = new Rectangle(col * squareSize'                                                     row * squareSize'                                                     squareSize' squareSize);                        AbsoluteLayout.SetLayoutBounds(view' rect);                      index++;                  }              }
Magic Number,ChessboardDynamic,ChessboardDynamicPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter14\ChessboardDynamic\ChessboardDynamic\ChessboardDynamic\ChessboardDynamicPage.cs,OnContentViewSizeChanged,The following statement contains a magic number: for (int row = 0; row < 8; row++)              {                  for (int col = 0; col < 8; col++)                  {                      // Skip every other square.                      if (((row ^ col) & 1) == 0)                          continue;                        View view = absoluteLayout.Children[index];                      Rectangle rect = new Rectangle(col * squareSize'                                                     row * squareSize'                                                     squareSize' squareSize);                        AbsoluteLayout.SetLayoutBounds(view' rect);                      index++;                  }              }
