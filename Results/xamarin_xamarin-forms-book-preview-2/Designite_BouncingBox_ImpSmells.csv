Implementation smell,Namespace,Class,File,Method,Description
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,OnAbsoluteLayoutSizeChanged,The following statement contains a magic number: if (!animationGoing && layoutSize > 100)              {                  animationGoing = true;                  AnimationLoop();              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
Magic Number,BouncingBox,BouncingBoxPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\BouncingBox\BouncingBox\BouncingBox\BouncingBoxPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Initial position at top.                  AbsoluteLayout.SetLayoutBounds(boxView'                      new Rectangle((layoutSize - boxSize) / 2' 0' boxSize' boxSize));                    // Arc from top to right.                  boxView.AnchorX = layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on right.                  Rectangle rectNormal = new Rectangle(layoutSize - boxSize'                                                       (layoutSize - boxSize) / 2'                                                       boxSize' boxSize);                    Rectangle rectSquashed = new Rectangle(rectNormal.X + boxSize / 2'                                                         rectNormal.Y - boxSize / 2'                                                         boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from right to bottom.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at bottom.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2'                                             layoutSize - boxSize'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2'                                               rectNormal.Y + boxSize / 2'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from bottom to left.                  boxView.AnchorX = 1 - layoutSize / 2 / boxSize;                  boxView.AnchorY = 0.5;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce at left.                  rectNormal = new Rectangle(0' (layoutSize - boxSize) / 2'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X'                                               rectNormal.Y - boxSize / 2'                                               boxSize / 2' 2 * boxSize);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);                    // Arc from left to top.                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 1 - layoutSize / 2 / boxSize;                  await boxView.RotateTo(-90' arcDuration);                    // Bounce on top.                  rectNormal = new Rectangle((layoutSize - boxSize) / 2' 0'                                             boxSize' boxSize);                    rectSquashed = new Rectangle(rectNormal.X - boxSize / 2' 0'                                               2 * boxSize' boxSize / 2);                    boxView.BatchBegin();                  boxView.Rotation = 0;                  boxView.AnchorX = 0.5;                  boxView.AnchorY = 0.5;                  AbsoluteLayout.SetLayoutBounds(boxView' rectNormal);                  boxView.BatchCommit();                    await boxView.LayoutTo(rectSquashed' bounceDuration' Easing.SinOut);                  await boxView.LayoutTo(rectNormal' bounceDuration' Easing.SinIn);              }
