Implementation smell,Namespace,Class,File,Method,Description
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: double width = 0.8 * this.Width / stackLayout.Children.Count;
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: foreach (Label label in stackLayout.Children.OfType<Label>())              {                  label.FontSize = 1.4 * width;                  label.WidthRequest = width;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
Magic Number,PalindromeAnimation,PalindromeAnimationPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\PalindromeAnimation\PalindromeAnimation\PalindromeAnimation\PalindromeAnimationPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  // Let's just sit here a second.                  await Task.Delay(1000);                    // Prepare for overlapping rotations.                  Label previousLabel = null;                    // Loop through all the labels.                  IEnumerable<Label> labels = stackLayout.Children.OfType<Label>();                    foreach (Label label in backwards ? labels.Reverse() : labels)                  {                      uint flipTime = 250;                        // Set the AnchorX and AnchorY properties.                      int index = stackLayout.Children.IndexOf(label);                      label.AnchorX = anchorX[index];                      label.AnchorY = 1;                        if (previousLabel == null)                      {                          // For the first Label in the sequence' rotate it 90 degrees.                          await label.RelRotateTo(90' flipTime / 2);                      }                      else                      {                          // For the second and subsequent' also finish the previous flip.                          await Task.WhenAll(label.RelRotateTo(90' flipTime / 2)'                                             previousLabel.RelRotateTo(90' flipTime / 2));                      }                        // If it's the last one' finish the flip.                      if (label == (backwards ? labels.First() : labels.Last()))                      {                          await label.RelRotateTo(90' flipTime / 2);                      }                        previousLabel = label;                  }                    // Rotate the entire stack.                  stackLayout.AnchorY = 1;                   await stackLayout.RelRotateTo(180' 1000);                    // Flip the backwards flag.                  backwards ^= true;              }
