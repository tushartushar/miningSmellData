Implementation smell,Namespace,Class,File,Method,Description
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: Point center = new Point(dimension / 2' dimension / 2);
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: Point center = new Point(dimension / 2' dimension / 2);
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: Size boxViewSize = new Size(dimension / 2' 3);
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: Size boxViewSize = new Size(dimension / 2' 3);
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: for (int i = 0; i < numSpokes; i++)              {                  // Find an angle for each spoke.                  double degrees = i * 360 / numSpokes;                  double radians = Math.PI * degrees / 180;                    // Find the point of the center of each BoxView spoke.                  Point boxViewCenter =                       new Point(center.X + boxViewSize.Width / 2 * Math.Cos(radians)'                                center.Y + boxViewSize.Width / 2 * Math.Sin(radians));                    // Find the upper-left corner of the BoxView and position it.                  Point boxViewOrigin = boxViewCenter - boxViewSize * 0.5;                  AbsoluteLayout.SetLayoutBounds(boxViews[i]'                                           new Rectangle(boxViewOrigin' boxViewSize));                    // Rotate the BoxView around its center.                  boxViews[i].Rotation = degrees;              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: for (int i = 0; i < numSpokes; i++)              {                  // Find an angle for each spoke.                  double degrees = i * 360 / numSpokes;                  double radians = Math.PI * degrees / 180;                    // Find the point of the center of each BoxView spoke.                  Point boxViewCenter =                       new Point(center.X + boxViewSize.Width / 2 * Math.Cos(radians)'                                center.Y + boxViewSize.Width / 2 * Math.Sin(radians));                    // Find the upper-left corner of the BoxView and position it.                  Point boxViewOrigin = boxViewCenter - boxViewSize * 0.5;                  AbsoluteLayout.SetLayoutBounds(boxViews[i]'                                           new Rectangle(boxViewOrigin' boxViewSize));                    // Rotate the BoxView around its center.                  boxViews[i].Rotation = degrees;              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: for (int i = 0; i < numSpokes; i++)              {                  // Find an angle for each spoke.                  double degrees = i * 360 / numSpokes;                  double radians = Math.PI * degrees / 180;                    // Find the point of the center of each BoxView spoke.                  Point boxViewCenter =                       new Point(center.X + boxViewSize.Width / 2 * Math.Cos(radians)'                                center.Y + boxViewSize.Width / 2 * Math.Sin(radians));                    // Find the upper-left corner of the BoxView and position it.                  Point boxViewOrigin = boxViewCenter - boxViewSize * 0.5;                  AbsoluteLayout.SetLayoutBounds(boxViews[i]'                                           new Rectangle(boxViewOrigin' boxViewSize));                    // Rotate the BoxView around its center.                  boxViews[i].Rotation = degrees;              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: for (int i = 0; i < numSpokes; i++)              {                  // Find an angle for each spoke.                  double degrees = i * 360 / numSpokes;                  double radians = Math.PI * degrees / 180;                    // Find the point of the center of each BoxView spoke.                  Point boxViewCenter =                       new Point(center.X + boxViewSize.Width / 2 * Math.Cos(radians)'                                center.Y + boxViewSize.Width / 2 * Math.Sin(radians));                    // Find the upper-left corner of the BoxView and position it.                  Point boxViewOrigin = boxViewCenter - boxViewSize * 0.5;                  AbsoluteLayout.SetLayoutBounds(boxViews[i]'                                           new Rectangle(boxViewOrigin' boxViewSize));                    // Rotate the BoxView around its center.                  boxViews[i].Rotation = degrees;              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,OnPageSizeChanged,The following statement contains a magic number: for (int i = 0; i < numSpokes; i++)              {                  // Find an angle for each spoke.                  double degrees = i * 360 / numSpokes;                  double radians = Math.PI * degrees / 180;                    // Find the point of the center of each BoxView spoke.                  Point boxViewCenter =                       new Point(center.X + boxViewSize.Width / 2 * Math.Cos(radians)'                                center.Y + boxViewSize.Width / 2 * Math.Sin(radians));                    // Find the upper-left corner of the BoxView and position it.                  Point boxViewOrigin = boxViewCenter - boxViewSize * 0.5;                  AbsoluteLayout.SetLayoutBounds(boxViews[i]'                                           new Rectangle(boxViewOrigin' boxViewSize));                    // Rotate the BoxView around its center.                  boxViews[i].Rotation = degrees;              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: uint count = 3;
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: await absoluteLayout.RotateTo(360 * count' 3000 * count);
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: await absoluteLayout.RotateTo(360 * count' 3000 * count);
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  foreach (BoxView boxView in boxViews)                  {                      // Task to rotate each spoke.                      taskList.Add(boxView.RelRotateTo(360' 3000));                  }                    // Task to rotate the whole configuration.                  taskList.Add(absoluteLayout.RelRotateTo(360' 3000));                    // Run all the animations; continue in 3 seconds.                  await Task.WhenAll(taskList);                    // Clear the List.                  taskList.Clear();              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  foreach (BoxView boxView in boxViews)                  {                      // Task to rotate each spoke.                      taskList.Add(boxView.RelRotateTo(360' 3000));                  }                    // Task to rotate the whole configuration.                  taskList.Add(absoluteLayout.RelRotateTo(360' 3000));                    // Run all the animations; continue in 3 seconds.                  await Task.WhenAll(taskList);                    // Clear the List.                  taskList.Clear();              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  foreach (BoxView boxView in boxViews)                  {                      // Task to rotate each spoke.                      taskList.Add(boxView.RelRotateTo(360' 3000));                  }                    // Task to rotate the whole configuration.                  taskList.Add(absoluteLayout.RelRotateTo(360' 3000));                    // Run all the animations; continue in 3 seconds.                  await Task.WhenAll(taskList);                    // Clear the List.                  taskList.Clear();              }
Magic Number,RotatingSpokes,RotatingSpokesPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter22\RotatingSpokes\RotatingSpokes\RotatingSpokes\RotatingSpokesPage.xaml.cs,AnimationLoop,The following statement contains a magic number: while (true)              {                  foreach (BoxView boxView in boxViews)                  {                      // Task to rotate each spoke.                      taskList.Add(boxView.RelRotateTo(360' 3000));                  }                    // Task to rotate the whole configuration.                  taskList.Add(absoluteLayout.RelRotateTo(360' 3000));                    // Run all the animations; continue in 3 seconds.                  await Task.WhenAll(taskList);                    // Clear the List.                  taskList.Clear();              }
