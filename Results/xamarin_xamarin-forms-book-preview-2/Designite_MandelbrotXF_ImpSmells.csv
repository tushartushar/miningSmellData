Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The method has 8 parameters. Parameters: Center' width' height' pixelWidth' pixelHeight' iterations' progress' cancelToken
Empty Catch Block,MandelbrotXF,MandelbrotViewModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotViewModel.cs,MandelbrotViewModel,The method has an empty catch block.
Empty Catch Block,MandelbrotXF,MandelbrotViewModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotViewModel.cs,MandelbrotViewModel,The method has an empty catch block.
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotModel.cs,CalculateAsync,The following statement contains a magic number: return Task.Run(() =>              {                  int[] iterationCounts = new int[pixelWidth * pixelHeight];                  int index = 0;                    for (int row = 0; row < pixelHeight; row++)                  {                      progress.Report((double)row / pixelHeight);                      cancelToken.ThrowIfCancellationRequested();                        double y = Center.Imaginary - height / 2 + row * height / pixelHeight;                        for (int col = 0; col < pixelWidth; col++)                      {                          double x = Center.Real - width / 2 + col * width / pixelWidth;                          Complex c = new Complex(x' y);                            if ((c - new Complex(-1' 0)).MagnitudeSquared < 1.0 / 16)                          {                              iterationCounts[index++] = -1;                          }                          // http://www.reenigne.org/blog/algorithm-for-mandelbrot-cardioid/                          else if (c.MagnitudeSquared * (8 * c.MagnitudeSquared - 3) <                                                                          3.0 / 32 - c.Real)                          {                              iterationCounts[index++] = -1;                          }                          else                          {                              Complex z = 0;                              int iteration = 0;                                do                              {                                  z = z * z + c;                                  iteration++;                              }                              while (iteration < iterations && z.MagnitudeSquared < 4);                                if (iteration == iterations)                              {                                  iterationCounts[index++] = -1;                              }                              else                              {                                  iterationCounts[index++] = iteration;                              }                          }                      }                  }                  return new BitmapInfo(pixelWidth' pixelHeight' iterationCounts);              }' cancelToken);
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: mandelbrotViewModel = new MandelbrotViewModel(2.5' 2.5)              {                  PixelWidth = 1000'                  PixelHeight = 1000'                  CurrentCenter = new Complex(GetProperty("CenterReal"' -0.75)'                                              GetProperty("CenterImaginary"' 0.0))'                  CurrentMagnification = GetProperty("Magnification"' 1.0)'                  TargetMagnification = GetProperty("Magnification"' 1.0)'                  Iterations = GetProperty("Iterations"' 8)'                  RealOffset = 0.5'                  ImaginaryOffset = 0.5              };
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: BmpMaker bmpMaker = new BmpMaker(120' 120);
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: BmpMaker bmpMaker = new BmpMaker(120' 120);
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(100)' () =>                  {                      realCrossHair.Opacity -= 0.01;                      imagCrossHair.Opacity -= 0.01;                      return true;                  });
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(100)' () =>                  {                      realCrossHair.Opacity -= 0.01;                      imagCrossHair.Opacity -= 0.01;                      return true;                  });
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,MandelbrotXFPage,The following statement contains a magic number: Device.StartTimer(TimeSpan.FromMilliseconds(100)' () =>                  {                      realCrossHair.Opacity -= 0.01;                      imagCrossHair.Opacity -= 0.01;                      return true;                  });
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,SetCrossHairs,The following statement contains a magic number: double xLeft = xCenter - boxSize / 2;
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,SetCrossHairs,The following statement contains a magic number: double xRight = xCenter + boxSize / 2;
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,SetCrossHairs,The following statement contains a magic number: double yTop = yCenter - boxSize / 2;
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,SetCrossHairs,The following statement contains a magic number: double yBottom = yCenter + boxSize / 2;
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,DisplayNewBitmap,The following statement contains a magic number: for (int row = 0; row < bitmapInfo.PixelHeight; row++)              {                  for (int col = 0; col < bitmapInfo.PixelWidth; col++)                  {                      int iterationCount = bitmapInfo.IterationCounts[index++];                        // In the Mandelbrot set: Color black.                      if (iterationCount == -1)                      {                          bmpMaker.SetPixel(row' col' 0' 0' 0);                      }                      // Not in the Mandelbrot set: Pick a color based on count.                      else                      {                          double proportion = (iterationCount / 32.0) % 1;                            if (proportion < 0.5)                          {                              bmpMaker.SetPixel(row' col' (int)(255 * (1 - 2 * proportion))'                                                          0'                                                          (int)(255 * 2 * proportion));                          }                          else                          {                              proportion = 2 * (proportion - 0.5);                              bmpMaker.SetPixel(row' col' 0'                                                          (int)(255 * proportion)'                                                          (int)(255 * (1 - proportion)));                          }                      }                  }              }
Magic Number,MandelbrotXF,MandelbrotViewModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotViewModel.cs,MandelbrotViewModel,The following statement contains a magic number: CalculateCommand = new Command(                  execute: async () =>                      {                          // Disable this button and enable Cancel button.                          IsBusy = true;                          ((Command)CalculateCommand).ChangeCanExecute();                          ((Command)CancelCommand).ChangeCanExecute();                            // Create CancellationToken.                          cancelTokenSource = new CancellationTokenSource();                          CancellationToken cancelToken = cancelTokenSource.Token;                            try                          {                              // Perform the calculation.                              BitmapInfo = await model.CalculateAsync(TargetCenter'                                                                       baseWidth / TargetMagnification'                                                                       baseHeight / TargetMagnification'                                                                      PixelWidth' PixelHeight'                                                                       Iterations'                                                                      progressReporter'                                                                       cancelToken);                                // Processing only for a successful completion.                              CurrentCenter = TargetCenter;                              CurrentMagnification = TargetMagnification;                              RealOffset = 0.5;                              ImaginaryOffset = 0.5;                          }                          catch (OperationCanceledException)                          {                              // Operation cancelled!                          }                          catch                          {                              // Another type of exception? This should not occur.                          }                            // Processing regardless of success or cancellation.                          Progress = 0;                          IsBusy = false;                            // Disable Cancel button and enable this button.                          ((Command)CalculateCommand).ChangeCanExecute();                          ((Command)CancelCommand).ChangeCanExecute();                      }'                   canExecute: () =>                      {                          return !IsBusy;                      });
Magic Number,MandelbrotXF,MandelbrotViewModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotViewModel.cs,MandelbrotViewModel,The following statement contains a magic number: CalculateCommand = new Command(                  execute: async () =>                      {                          // Disable this button and enable Cancel button.                          IsBusy = true;                          ((Command)CalculateCommand).ChangeCanExecute();                          ((Command)CancelCommand).ChangeCanExecute();                            // Create CancellationToken.                          cancelTokenSource = new CancellationTokenSource();                          CancellationToken cancelToken = cancelTokenSource.Token;                            try                          {                              // Perform the calculation.                              BitmapInfo = await model.CalculateAsync(TargetCenter'                                                                       baseWidth / TargetMagnification'                                                                       baseHeight / TargetMagnification'                                                                      PixelWidth' PixelHeight'                                                                       Iterations'                                                                      progressReporter'                                                                       cancelToken);                                // Processing only for a successful completion.                              CurrentCenter = TargetCenter;                              CurrentMagnification = TargetMagnification;                              RealOffset = 0.5;                              ImaginaryOffset = 0.5;                          }                          catch (OperationCanceledException)                          {                              // Operation cancelled!                          }                          catch                          {                              // Another type of exception? This should not occur.                          }                            // Processing regardless of success or cancellation.                          Progress = 0;                          IsBusy = false;                            // Disable Cancel button and enable this button.                          ((Command)CalculateCommand).ChangeCanExecute();                          ((Command)CancelCommand).ChangeCanExecute();                      }'                   canExecute: () =>                      {                          return !IsBusy;                      });
Magic Number,MandelbrotXF,MandelbrotViewModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotViewModel.cs,CalculateTargetCenter,The following statement contains a magic number: TargetCenter = new Complex(CurrentCenter.Real + (RealOffset - 0.5) * width'                                         CurrentCenter.Imaginary + (ImaginaryOffset - 0.5) * height);
Magic Number,MandelbrotXF,MandelbrotViewModel,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotViewModel.cs,CalculateTargetCenter,The following statement contains a magic number: TargetCenter = new Complex(CurrentCenter.Real + (RealOffset - 0.5) * width'                                         CurrentCenter.Imaginary + (ImaginaryOffset - 0.5) * height);
Missing Default,MandelbrotXF,MandelbrotXFPage,C:\repos\xamarin_xamarin-forms-book-preview-2\Chapter20\MandelbrotXF\MandelbrotXF\MandelbrotXF\MandelbrotXFPage.xaml.cs,OnMandelbrotViewModelPropertyChanged,The following switch statement is missing a default case: switch (args.PropertyName)              {                  case "RealOffset":                  case "ImaginaryOffset":                  case "CurrentMagnification":                  case "TargetMagnification":                      // Redraw cross-hairs if these properties change                      SetCrossHairs();                      break;                    case "BitmapInfo":                      // Create bitmap based on the iteration counts.                      DisplayNewBitmap(mandelbrotViewModel.BitmapInfo);                        // Save properties for the next time program is run.                      IDictionary<string' object> properties = Application.Current.Properties;                      properties["CenterReal"] = mandelbrotViewModel.TargetCenter.Real;                      properties["CenterImaginary"] = mandelbrotViewModel.TargetCenter.Imaginary;                      properties["Magnification"] = mandelbrotViewModel.TargetMagnification;                      properties["Iterations"] = mandelbrotViewModel.Iterations;                      await Application.Current.SavePropertiesAsync();                      break;              }
