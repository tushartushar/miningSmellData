Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DnDHelper.WPF,BattleMemberAddWindow,C:\repos\macper_dndhelper\DnDHelper\BattleMemberAddWindow.xaml.cs,button2_Click,Cyclomatic complexity of the method is 9
Complex Method,DnDHelper.WPF,SpellEditWindow,C:\repos\macper_dndhelper\DnDHelper\SpellEditWindow.xaml.cs,button3_Click,Cyclomatic complexity of the method is 9
Complex Method,DnDHelper.WPF,SpellEditWindow,C:\repos\macper_dndhelper\DnDHelper\SpellEditWindow.xaml.cs,listView1_SelectionChanged,Cyclomatic complexity of the method is 11
Complex Method,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,AddSkill_Click,Cyclomatic complexity of the method is 19
Complex Method,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button9_Click,Cyclomatic complexity of the method is 20
Complex Method,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button10_Click,Cyclomatic complexity of the method is 11
Complex Method,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,Cyclomatic complexity of the method is 15
Complex Method,DnDHelper.WPF,ItemsWindow,C:\repos\macper_dndhelper\DnDHelper\ItemsWindow.xaml.cs,button4_Click,Cyclomatic complexity of the method is 39
Complex Method,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,Cyclomatic complexity of the method is 10
Complex Method,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,Cyclomatic complexity of the method is 26
Complex Method,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_MouseUp,Cyclomatic complexity of the method is 8
Long Parameter List,DnDHelper.WPF,BattleMemberAddWindow,C:\repos\macper_dndhelper\DnDHelper\BattleMemberAddWindow.xaml.cs,button2_Click,The method has 5 parameters.
Long Statement,DnDHelper.WPF,AttackWindow,C:\repos\macper_dndhelper\DnDHelper\AttackWindow.xaml.cs,Refresh,The length of the statement  "	label4.Content = string.Format ("{0} (KP:{1} PŻ:{2})"' _defender.Name' _defender.CurrentStats.AC.ToString ()' _defender.CurrentStats.HP.ToString ()); " is 149.
Long Statement,DnDHelper.WPF,ImageWindow,C:\repos\macper_dndhelper\DnDHelper\ImageWindow.xaml.cs,button1_Click,The length of the statement  "			System.IO.File.Copy (open1.FileName' AppDomain.CurrentDomain.BaseDirectory + "\\Images\\" + open1.FileName.Substring (open1.FileName.LastIndexOf ('\\'))); " is 154.
Long Statement,DnDHelper.WPF,ImageWindow,C:\repos\macper_dndhelper\DnDHelper\ImageWindow.xaml.cs,button1_Click,The length of the statement  "			image1.Source = new BitmapImage (new Uri (AppDomain.CurrentDomain.BaseDirectory + "\\Images\\" + _character.ImagePath)); " is 120.
Long Statement,DnDHelper.WPF,Map,C:\repos\macper_dndhelper\DnDHelper\Map.cs,Deserialize,The length of the statement  "			Color = Color.FromArgb (byte.Parse (colorArray [0])' byte.Parse (colorArray [1])' byte.Parse (colorArray [2])' byte.Parse (colorArray [3]))' " is 140.
Long Statement,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,Init,The length of the statement  "			image1.Source = new BitmapImage (new Uri (AppDomain.CurrentDomain.BaseDirectory + "\\Images\\" + _character.ImagePath)); " is 120.
Long Statement,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,comboBox2_SelectionChanged,The length of the statement  "		listView5.ItemsSource = _character.Spells.Where (f => f.Definition.SpellTypes.Contains (sCast.Type) && f.Definition.Level == sCast.Level); " is 138.
Long Statement,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button6_Click,The length of the statement  "		var spells = _character.Spells.Where (f => f.Definition.SpellTypes.Contains (sCast.Type) && f.Definition.Level == sCast.Level); " is 127.
Long Statement,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button6_Click,The length of the statement  "		listView5.ItemsSource = _character.Spells.Where (f => f.Definition.SpellTypes.Contains (sCast.Type) && f.Definition.Level == sCast.Level); " is 138.
Long Statement,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,UsunCzarPrzygotowany_Click,The length of the statement  "		listView5.ItemsSource = _character.Spells.Where (f => f.Definition.SpellTypes.Contains (sCast.Type) && f.Definition.Level == sCast.Level); " is 138.
Long Statement,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button9_Click,The length of the statement  "		_character.OriginalStats.HP = (int)((Rules.ClassTable [tbClass.Text].PW / 2) * level) + (int)(Rules.ClassTable [tbClass.Text].PW / 2); " is 134.
Long Statement,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button10_Click,The length of the statement  "					atak.Damage = _character.RightHand.Damage + "+" + Rules.GetStandardBonus (_character.OriginalStats.Strength).ToString (); " is 121.
Long Statement,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,_helper_CurrentTimeChanged,The length of the statement  "	var entry = _helper.Calendar.Entries.Where (w => w.Time >= _helper.CurrentTime).OrderBy (o => o.Time).FirstOrDefault (); " is 120.
Long Statement,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button13_Click,The length of the statement  "				System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer (typeof(SerializableMap)); " is 121.
Long Statement,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button12_Click,The length of the statement  "				System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer (typeof(SerializableMap)); " is 121.
Long Statement,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,bitmapToSource,The length of the statement  "	destination = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (hBitmap' IntPtr.Zero' Int32Rect.Empty' sizeOptions); " is 128.
Long Statement,DnDHelper,Sound,C:\repos\macper_dndhelper\DnDHelper\Sound.cs,SaveState,The length of the statement  "	using (FileStream fs = new FileStream (AppDomain.CurrentDomain.BaseDirectory + "\\Sounds.xml"' FileMode.OpenOrCreate)) { " is 120.
Empty Catch Block,DnDHelper.WPF,AddGold,C:\repos\macper_dndhelper\DnDHelper\AddGold.xaml.cs,button1_Click,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF,AttackWindow,C:\repos\macper_dndhelper\DnDHelper\AttackWindow.xaml.cs,button1_Click,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF,BattleMemberAddWindow,C:\repos\macper_dndhelper\DnDHelper\BattleMemberAddWindow.xaml.cs,button2_Click,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF,DoDamageWindow,C:\repos\macper_dndhelper\DnDHelper\DoDamageWindow.xaml.cs,button1_Click,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF,ImageWindow,C:\repos\macper_dndhelper\DnDHelper\ImageWindow.xaml.cs,button2_Click,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button14_Click,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF,ItemsWindow,C:\repos\macper_dndhelper\DnDHelper\ItemsWindow.xaml.cs,listView1_SelectionChanged,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button26_Click,The method has an empty catch block.
Empty Catch Block,DnDHelper.WPF.PopUp,HealWindow,C:\repos\macper_dndhelper\DnDHelper\PopUp\HealWindow.xaml.cs,button1_Click,The method has an empty catch block.
Magic Number,DnDHelper.WPF,BattleMemberAddWindow,C:\repos\macper_dndhelper\DnDHelper\BattleMemberAddWindow.xaml.cs,button2_Click,The following statement contains a magic number: if (listBox2.SelectedItem != null) {  	Character character = (Character)listBox2.SelectedItem;  	try {  		using (MemoryStream ms = new MemoryStream ()) {  			XmlSerializer xmlSerializer = new XmlSerializer (typeof(Character));  			xmlSerializer.Serialize (ms' character);  			ms.Position = 0;  			Character newCharacter = (Character)xmlSerializer.Deserialize (ms);  			newCharacter.DeserializeSelf (_helper);  			newCharacter.Name = textBox2.Text;  			if (_battle.Members.FirstOrDefault (f => f.Name == newCharacter.Name) != null) {  				int counter = 2;  				IEnumerable<Character> lst = _battle.Members.Where (f => f.Name.Contains ('_'));  				if (lst.Count () > 0) {  					string[] parts = lst.OrderByDescending (o => o.Name).ToArray ().First ().Name.Split ('_');  					if (parts.Length > 1) {  						try {  							int number = int.Parse (parts [1]);  							counter = ++number;  						}  						catch {  						}  					}  				}  				newCharacter.Name += "_" + counter.ToString ();  			}  			newCharacter.Initiative = int.Parse (textBox1.Text) + newCharacter.BaseInitiative;  			_battle.AddMember (newCharacter);  			listBox3.Items.Refresh ();  		}  	}  	catch {  		MessageBox.Show ("Nieprawidłowa inicjatywa!");  	}  }  
Magic Number,DnDHelper.WPF,BattleMemberAddWindow,C:\repos\macper_dndhelper\DnDHelper\BattleMemberAddWindow.xaml.cs,button2_Click,The following statement contains a magic number: try {  	using (MemoryStream ms = new MemoryStream ()) {  		XmlSerializer xmlSerializer = new XmlSerializer (typeof(Character));  		xmlSerializer.Serialize (ms' character);  		ms.Position = 0;  		Character newCharacter = (Character)xmlSerializer.Deserialize (ms);  		newCharacter.DeserializeSelf (_helper);  		newCharacter.Name = textBox2.Text;  		if (_battle.Members.FirstOrDefault (f => f.Name == newCharacter.Name) != null) {  			int counter = 2;  			IEnumerable<Character> lst = _battle.Members.Where (f => f.Name.Contains ('_'));  			if (lst.Count () > 0) {  				string[] parts = lst.OrderByDescending (o => o.Name).ToArray ().First ().Name.Split ('_');  				if (parts.Length > 1) {  					try {  						int number = int.Parse (parts [1]);  						counter = ++number;  					}  					catch {  					}  				}  			}  			newCharacter.Name += "_" + counter.ToString ();  		}  		newCharacter.Initiative = int.Parse (textBox1.Text) + newCharacter.BaseInitiative;  		_battle.AddMember (newCharacter);  		listBox3.Items.Refresh ();  	}  }  catch {  	MessageBox.Show ("Nieprawidłowa inicjatywa!");  }  
Magic Number,DnDHelper.WPF,BattleMemberAddWindow,C:\repos\macper_dndhelper\DnDHelper\BattleMemberAddWindow.xaml.cs,button2_Click,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream ()) {  	XmlSerializer xmlSerializer = new XmlSerializer (typeof(Character));  	xmlSerializer.Serialize (ms' character);  	ms.Position = 0;  	Character newCharacter = (Character)xmlSerializer.Deserialize (ms);  	newCharacter.DeserializeSelf (_helper);  	newCharacter.Name = textBox2.Text;  	if (_battle.Members.FirstOrDefault (f => f.Name == newCharacter.Name) != null) {  		int counter = 2;  		IEnumerable<Character> lst = _battle.Members.Where (f => f.Name.Contains ('_'));  		if (lst.Count () > 0) {  			string[] parts = lst.OrderByDescending (o => o.Name).ToArray ().First ().Name.Split ('_');  			if (parts.Length > 1) {  				try {  					int number = int.Parse (parts [1]);  					counter = ++number;  				}  				catch {  				}  			}  		}  		newCharacter.Name += "_" + counter.ToString ();  	}  	newCharacter.Initiative = int.Parse (textBox1.Text) + newCharacter.BaseInitiative;  	_battle.AddMember (newCharacter);  	listBox3.Items.Refresh ();  }  
Magic Number,DnDHelper.WPF,BattleMemberAddWindow,C:\repos\macper_dndhelper\DnDHelper\BattleMemberAddWindow.xaml.cs,button2_Click,The following statement contains a magic number: if (_battle.Members.FirstOrDefault (f => f.Name == newCharacter.Name) != null) {  	int counter = 2;  	IEnumerable<Character> lst = _battle.Members.Where (f => f.Name.Contains ('_'));  	if (lst.Count () > 0) {  		string[] parts = lst.OrderByDescending (o => o.Name).ToArray ().First ().Name.Split ('_');  		if (parts.Length > 1) {  			try {  				int number = int.Parse (parts [1]);  				counter = ++number;  			}  			catch {  			}  		}  	}  	newCharacter.Name += "_" + counter.ToString ();  }  
Magic Number,DnDHelper.WPF,Map,C:\repos\macper_dndhelper\DnDHelper\Map.cs,Deserialize,The following statement contains a magic number: foreach (SerializableBlock sBlock in sMap.Blocks) {  	string[] colorArray = sBlock.Color.Split ('.');  	map.BlockMap [sBlock.X' sBlock.Y] = new Block () {  		Color = Color.FromArgb (byte.Parse (colorArray [0])' byte.Parse (colorArray [1])' byte.Parse (colorArray [2])' byte.Parse (colorArray [3]))'  		Name = sBlock.Name'  		Description = sBlock.Description  	};  }  
Magic Number,DnDHelper.WPF,Map,C:\repos\macper_dndhelper\DnDHelper\Map.cs,Deserialize,The following statement contains a magic number: foreach (SerializableBlock sBlock in sMap.Blocks) {  	string[] colorArray = sBlock.Color.Split ('.');  	map.BlockMap [sBlock.X' sBlock.Y] = new Block () {  		Color = Color.FromArgb (byte.Parse (colorArray [0])' byte.Parse (colorArray [1])' byte.Parse (colorArray [2])' byte.Parse (colorArray [3]))'  		Name = sBlock.Name'  		Description = sBlock.Description  	};  }  
Magic Number,DnDHelper.WPF,Map,C:\repos\macper_dndhelper\DnDHelper\Map.cs,Deserialize,The following statement contains a magic number: map.BlockMap [sBlock.X' sBlock.Y] = new Block () {  	Color = Color.FromArgb (byte.Parse (colorArray [0])' byte.Parse (colorArray [1])' byte.Parse (colorArray [2])' byte.Parse (colorArray [3]))'  	Name = sBlock.Name'  	Description = sBlock.Description  };  
Magic Number,DnDHelper.WPF,Map,C:\repos\macper_dndhelper\DnDHelper\Map.cs,Deserialize,The following statement contains a magic number: map.BlockMap [sBlock.X' sBlock.Y] = new Block () {  	Color = Color.FromArgb (byte.Parse (colorArray [0])' byte.Parse (colorArray [1])' byte.Parse (colorArray [2])' byte.Parse (colorArray [3]))'  	Name = sBlock.Name'  	Description = sBlock.Description  };  
Magic Number,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,Init,The following statement contains a magic number: try {  	_character = chr;  	_helper = help;  	listView1.ItemsSource = _character.Attacks;  	listView2.ItemsSource = _character.Effects;  	listView3.ItemsSource = _character.KnownSpells;  	listView4.ItemsSource = _character.AvailableCastings;  	listView6.ItemsSource = _character.Spells.Where (f => f.IsCasted == false).OrderByDescending (k => k.Definition.Level);  	listView7.ItemsSource = _character.Skills;  	comboBox2.ItemsSource = _character.AvailableCastings;  	comboBox1.ItemsSource = SpellEditWindow.Types;  	comboBox4.ItemsSource = Rules.SkillsDefinition.Values;  	comboBox4.DisplayMemberPath = "Name";  	List<Atut> atutes = Rules.AtutesDictionary.List;  	atutes.Sort (new AtutComparer ());  	comboBox5.ItemsSource = atutes;  	comboBox5.DisplayMemberPath = "Name";  	comboBox6.ItemsSource = _character.Staffes;  	comboBox6.DisplayMemberPath = "ChargesDetails";  	comboBox6.SelectedIndex = 0;  	comboBox7.ItemsSource = _character.Arrows;  	comboBox7.DisplayMemberPath = "ChargesDetails";  	comboBox7.SelectedIndex = 0;  	comboBox8.ItemsSource = _character.Potions;  	comboBox8.DisplayMemberPath = "ChargesDetails";  	comboBox8.SelectedIndex = 0;  	comboBox9.ItemsSource = _character.Others;  	comboBox9.DisplayMemberPath = "ChargesDetails";  	comboBox9.SelectedIndex = 0;  	listView9.ItemsSource = _character.Atutes;  	ContentGrid.DataContext = _character;  	textBox18.Text = _helper.CurrentTime.Date.AddDays (-7).ToString ();  	if (_character.ImagePath != null) {  		image1.Source = new BitmapImage (new Uri (AppDomain.CurrentDomain.BaseDirectory + "\\Images\\" + _character.ImagePath));  	}  }  catch (Exception exc) {  	MessageBox.Show ("Inicjalizacja się nie powiodła:" + exc.ToString ());  }  
Magic Number,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,Init,The following statement contains a magic number: textBox18.Text = _helper.CurrentTime.Date.AddDays (-7).ToString ();  
Magic Number,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button9_Click,The following statement contains a magic number: if (Rules.RaceTable.Any (r => r.Name == tbRace.Text)) {  	int level;  	if (!int.TryParse (tbLevel.Text' out level)) {  		MessageBox.Show ("Nieprawidłowy poziom");  		return;  	}  	_character.OriginalStats.AttackSkill = Rules.ClassTable [tbClass.Text].AttackPerLevel [level];  	_character.OriginalStats.StrongThrow = Rules.ClassTable [tbClass.Text].ThrowPerLevel [level].EnduranceThrow;  	_character.OriginalStats.ReflexThrow = Rules.ClassTable [tbClass.Text].ThrowPerLevel [level].ReflexThrow;  	_character.OriginalStats.WillThrow = Rules.ClassTable [tbClass.Text].ThrowPerLevel [level].WillThrow;  	_character.OriginalStats.HP = (int)((Rules.ClassTable [tbClass.Text].PW / 2) * level) + (int)(Rules.ClassTable [tbClass.Text].PW / 2);  	var raceDef = Rules.RaceTable.Single (r => r.Name == tbRace.Text);  	foreach (var key in raceDef.Bonuses) {  		switch (key.Attribute) {  		case BaseAttribute.Strength:  			_character.OriginalStats.Strength += key.Value;  			break;  		case BaseAttribute.Dexterity:  			_character.OriginalStats.Dexterity += key.Value;  			break;  		case BaseAttribute.Constitution:  			_character.OriginalStats.Constitution += key.Value;  			break;  		case BaseAttribute.Inteligence:  			_character.OriginalStats.Inteligence += key.Value;  			break;  		case BaseAttribute.Wisdom:  			_character.OriginalStats.Wisdom += key.Value;  			break;  		}  	}  	_character.OriginalStats.ReflexThrow += Rules.GetStandardBonus (_character.OriginalStats.Dexterity);  	_character.OriginalStats.StrongThrow += Rules.GetStandardBonus (_character.OriginalStats.Constitution);  	_character.OriginalStats.HP += level * Rules.GetStandardBonus (_character.OriginalStats.Constitution);  	_character.OriginalStats.WillThrow += Rules.GetStandardBonus (_character.OriginalStats.Wisdom);  	Class cl = Rules.ClassTable [tbClass.Text];  	_character.AvailableCastings = new List<SpellCasting> ();  	if (cl.SpellsPerLevel != null && cl.SpellsPerLevel.Count > 0) {  		foreach (SpellCasting sc in cl.SpellsPerLevel [level]) {  			_character.AvailableCastings.Add (sc);  		}  	}  	_character.BaseInitiative = Rules.GetStandardBonus (_character.OriginalStats.Dexterity);  	button7_Click (sender' e);  	button8_Click (sender' e);  	RefreshCharacter ();  	return;  }  
Magic Number,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button9_Click,The following statement contains a magic number: if (Rules.RaceTable.Any (r => r.Name == tbRace.Text)) {  	int level;  	if (!int.TryParse (tbLevel.Text' out level)) {  		MessageBox.Show ("Nieprawidłowy poziom");  		return;  	}  	_character.OriginalStats.AttackSkill = Rules.ClassTable [tbClass.Text].AttackPerLevel [level];  	_character.OriginalStats.StrongThrow = Rules.ClassTable [tbClass.Text].ThrowPerLevel [level].EnduranceThrow;  	_character.OriginalStats.ReflexThrow = Rules.ClassTable [tbClass.Text].ThrowPerLevel [level].ReflexThrow;  	_character.OriginalStats.WillThrow = Rules.ClassTable [tbClass.Text].ThrowPerLevel [level].WillThrow;  	_character.OriginalStats.HP = (int)((Rules.ClassTable [tbClass.Text].PW / 2) * level) + (int)(Rules.ClassTable [tbClass.Text].PW / 2);  	var raceDef = Rules.RaceTable.Single (r => r.Name == tbRace.Text);  	foreach (var key in raceDef.Bonuses) {  		switch (key.Attribute) {  		case BaseAttribute.Strength:  			_character.OriginalStats.Strength += key.Value;  			break;  		case BaseAttribute.Dexterity:  			_character.OriginalStats.Dexterity += key.Value;  			break;  		case BaseAttribute.Constitution:  			_character.OriginalStats.Constitution += key.Value;  			break;  		case BaseAttribute.Inteligence:  			_character.OriginalStats.Inteligence += key.Value;  			break;  		case BaseAttribute.Wisdom:  			_character.OriginalStats.Wisdom += key.Value;  			break;  		}  	}  	_character.OriginalStats.ReflexThrow += Rules.GetStandardBonus (_character.OriginalStats.Dexterity);  	_character.OriginalStats.StrongThrow += Rules.GetStandardBonus (_character.OriginalStats.Constitution);  	_character.OriginalStats.HP += level * Rules.GetStandardBonus (_character.OriginalStats.Constitution);  	_character.OriginalStats.WillThrow += Rules.GetStandardBonus (_character.OriginalStats.Wisdom);  	Class cl = Rules.ClassTable [tbClass.Text];  	_character.AvailableCastings = new List<SpellCasting> ();  	if (cl.SpellsPerLevel != null && cl.SpellsPerLevel.Count > 0) {  		foreach (SpellCasting sc in cl.SpellsPerLevel [level]) {  			_character.AvailableCastings.Add (sc);  		}  	}  	_character.BaseInitiative = Rules.GetStandardBonus (_character.OriginalStats.Dexterity);  	button7_Click (sender' e);  	button8_Click (sender' e);  	RefreshCharacter ();  	return;  }  
Magic Number,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button9_Click,The following statement contains a magic number: _character.OriginalStats.HP = (int)((Rules.ClassTable [tbClass.Text].PW / 2) * level) + (int)(Rules.ClassTable [tbClass.Text].PW / 2);  
Magic Number,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button9_Click,The following statement contains a magic number: _character.OriginalStats.HP = (int)((Rules.ClassTable [tbClass.Text].PW / 2) * level) + (int)(Rules.ClassTable [tbClass.Text].PW / 2);  
Magic Number,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button10_Click,The following statement contains a magic number: try {  	int baseKP = 10;  	int panalties = 0;  	int maxBonus = int.MaxValue;  	if (_character.LeftHand != null && _character.LeftHand.Type == "Zbroja") {  		baseKP += _character.LeftHand.AC;  		panalties += _character.LeftHand.Panalty;  		if (_character.LeftHand.MaxDexterityBonus < maxBonus) {  			maxBonus = _character.LeftHand.MaxDexterityBonus;  		}  	}  	if (_character.Torso != null) {  		baseKP += _character.Torso.AC;  		panalties += _character.Torso.Panalty;  		if (_character.Torso.MaxDexterityBonus < maxBonus) {  			maxBonus = _character.Torso.MaxDexterityBonus;  		}  	}  	int dexterityBonus = Rules.GetStandardBonus (_character.OriginalStats.Dexterity);  	if (dexterityBonus > maxBonus) {  		dexterityBonus = maxBonus;  	}  	baseKP += dexterityBonus;  	_character.OriginalStats.AC = baseKP;  	_character.CurrentStats.AC = baseKP;  	string[] attacks = null;  	if (_character.OriginalStats.AttackSkill.Contains ("\\")) {  		attacks = _character.OriginalStats.AttackSkill.Split ('\\');  	}  	else {  		attacks = new string[1] {  			_character.OriginalStats.AttackSkill  		};  	}  	foreach (string attackSkill in attacks) {  		Attack atak = new Attack ();  		atak.ToHit = int.Parse (attackSkill);  		atak.ToHit += Rules.GetStandardBonus (_character.OriginalStats.Strength);  		if (_character.RightHand != null) {  			if (_character.RightHand.Damage.Contains ("+")) {  				string[] dmgs = _character.RightHand.Damage.Split ('+');  				int bonus = int.Parse (dmgs [1]);  				bonus += Rules.GetStandardBonus (_character.OriginalStats.Strength);  				atak.Damage = dmgs [0] + "+" + bonus.ToString ();  			}  			else {  				atak.Damage = _character.RightHand.Damage + "+" + Rules.GetStandardBonus (_character.OriginalStats.Strength).ToString ();  			}  		}  		else {  			atak.Damage = "K4" + "+" + Rules.GetStandardBonus (_character.OriginalStats.Strength).ToString ();  		}  		_character.Attacks.Add (atak);  	}  	MessageBox.Show ("Policzono");  	RefreshCharacter ();  }  catch (Exception exc) {  	MessageBox.Show ("Nie udało się policzyć: " + exc.ToString ());  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: if (checkBox1.IsChecked == false) {  	string howLong = (string)((ComboBoxItem)comboBox2.SelectedValue).Content;  	int value = int.Parse (textBox3.Text);  	switch (howLong) {  	case "Rund":  		_effect.Duration = value;  		break;  	case "Minut":  		_effect.Duration = value * 10;  		break;  	case "Godzin":  		_effect.Duration = value * 600;  		break;  	case "Dni":  		_effect.Duration = value * 600 * 24;  		break;  	}  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: if (checkBox1.IsChecked == false) {  	string howLong = (string)((ComboBoxItem)comboBox2.SelectedValue).Content;  	int value = int.Parse (textBox3.Text);  	switch (howLong) {  	case "Rund":  		_effect.Duration = value;  		break;  	case "Minut":  		_effect.Duration = value * 10;  		break;  	case "Godzin":  		_effect.Duration = value * 600;  		break;  	case "Dni":  		_effect.Duration = value * 600 * 24;  		break;  	}  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: if (checkBox1.IsChecked == false) {  	string howLong = (string)((ComboBoxItem)comboBox2.SelectedValue).Content;  	int value = int.Parse (textBox3.Text);  	switch (howLong) {  	case "Rund":  		_effect.Duration = value;  		break;  	case "Minut":  		_effect.Duration = value * 10;  		break;  	case "Godzin":  		_effect.Duration = value * 600;  		break;  	case "Dni":  		_effect.Duration = value * 600 * 24;  		break;  	}  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: if (checkBox1.IsChecked == false) {  	string howLong = (string)((ComboBoxItem)comboBox2.SelectedValue).Content;  	int value = int.Parse (textBox3.Text);  	switch (howLong) {  	case "Rund":  		_effect.Duration = value;  		break;  	case "Minut":  		_effect.Duration = value * 10;  		break;  	case "Godzin":  		_effect.Duration = value * 600;  		break;  	case "Dni":  		_effect.Duration = value * 600 * 24;  		break;  	}  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: switch (howLong) {  case "Rund":  	_effect.Duration = value;  	break;  case "Minut":  	_effect.Duration = value * 10;  	break;  case "Godzin":  	_effect.Duration = value * 600;  	break;  case "Dni":  	_effect.Duration = value * 600 * 24;  	break;  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: switch (howLong) {  case "Rund":  	_effect.Duration = value;  	break;  case "Minut":  	_effect.Duration = value * 10;  	break;  case "Godzin":  	_effect.Duration = value * 600;  	break;  case "Dni":  	_effect.Duration = value * 600 * 24;  	break;  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: switch (howLong) {  case "Rund":  	_effect.Duration = value;  	break;  case "Minut":  	_effect.Duration = value * 10;  	break;  case "Godzin":  	_effect.Duration = value * 600;  	break;  case "Dni":  	_effect.Duration = value * 600 * 24;  	break;  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: switch (howLong) {  case "Rund":  	_effect.Duration = value;  	break;  case "Minut":  	_effect.Duration = value * 10;  	break;  case "Godzin":  	_effect.Duration = value * 600;  	break;  case "Dni":  	_effect.Duration = value * 600 * 24;  	break;  }  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: _effect.Duration = value * 10;  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: _effect.Duration = value * 600;  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: _effect.Duration = value * 600 * 24;  
Magic Number,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following statement contains a magic number: _effect.Duration = value * 600 * 24;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button1_Click,The following statement contains a magic number: UpdateEffects (14400);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button2_Click,The following statement contains a magic number: UpdateEffects (600);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button24_Click,The following statement contains a magic number: UpdateEffects (10);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button25_Click,The following statement contains a magic number: _helper.CurrentTime = _helper.CurrentTime.AddSeconds (6);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,button26_Click,The following statement contains a magic number: try {  	TimeSpan sp = TimeSpan.Parse (textBox8.Text);  	int rounds = (int)(sp.TotalSeconds / 6);  	_helper.CurrentTime = _helper.CurrentTime.Add (sp);  	UpdateEffects (rounds);  }  catch {  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,AttackOpportunity_Click,The following statement contains a magic number: if (listView1.SelectedItems.Count == 2) {  	wnd = new AttackCustomWindow (_battle' (Character)listView1.SelectedItems [0]' (Character)listView1.SelectedItems [1]);  	wnd.Show ();  	return;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int i = 0; i < _map.Width; i++) {  	for (int j = 0; j < _map.Height; j++) {  		if (_map.BlockMap [i' j] != null) {  			Rectangle rec = new Rectangle ();  			rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  			rec.Width = fieldSize;  			rec.Height = fieldSize;  			rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			grid1.Children.Add (rec);  			if (_map.BlockMap [i' j].Name != null) {  				TextBlock text = new TextBlock ();  				text.FontSize = 8;  				text.Text = _map.BlockMap [i' j].Name;  				text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  				grid1.Children.Add (text);  				if (_map.BlockMap [i' j] == _activeBlock) {  					text.Foreground = Brushes.Red;  				}  			}  		}  		if (_map.BlockMap [i' j] == _activeBlock) {  			Rectangle actRec = new Rectangle ();  			actRec.Stroke = Brushes.Red;  			actRec.StrokeThickness = 2;  			actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			actRec.Width = fieldSize;  			actRec.Height = fieldSize;  			grid1.Children.Add (actRec);  		}  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int i = 0; i < _map.Width; i++) {  	for (int j = 0; j < _map.Height; j++) {  		if (_map.BlockMap [i' j] != null) {  			Rectangle rec = new Rectangle ();  			rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  			rec.Width = fieldSize;  			rec.Height = fieldSize;  			rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			grid1.Children.Add (rec);  			if (_map.BlockMap [i' j].Name != null) {  				TextBlock text = new TextBlock ();  				text.FontSize = 8;  				text.Text = _map.BlockMap [i' j].Name;  				text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  				grid1.Children.Add (text);  				if (_map.BlockMap [i' j] == _activeBlock) {  					text.Foreground = Brushes.Red;  				}  			}  		}  		if (_map.BlockMap [i' j] == _activeBlock) {  			Rectangle actRec = new Rectangle ();  			actRec.Stroke = Brushes.Red;  			actRec.StrokeThickness = 2;  			actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			actRec.Width = fieldSize;  			actRec.Height = fieldSize;  			grid1.Children.Add (actRec);  		}  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int i = 0; i < _map.Width; i++) {  	for (int j = 0; j < _map.Height; j++) {  		if (_map.BlockMap [i' j] != null) {  			Rectangle rec = new Rectangle ();  			rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  			rec.Width = fieldSize;  			rec.Height = fieldSize;  			rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			grid1.Children.Add (rec);  			if (_map.BlockMap [i' j].Name != null) {  				TextBlock text = new TextBlock ();  				text.FontSize = 8;  				text.Text = _map.BlockMap [i' j].Name;  				text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  				grid1.Children.Add (text);  				if (_map.BlockMap [i' j] == _activeBlock) {  					text.Foreground = Brushes.Red;  				}  			}  		}  		if (_map.BlockMap [i' j] == _activeBlock) {  			Rectangle actRec = new Rectangle ();  			actRec.Stroke = Brushes.Red;  			actRec.StrokeThickness = 2;  			actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			actRec.Width = fieldSize;  			actRec.Height = fieldSize;  			grid1.Children.Add (actRec);  		}  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int i = 0; i < _map.Width; i++) {  	for (int j = 0; j < _map.Height; j++) {  		if (_map.BlockMap [i' j] != null) {  			Rectangle rec = new Rectangle ();  			rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  			rec.Width = fieldSize;  			rec.Height = fieldSize;  			rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			grid1.Children.Add (rec);  			if (_map.BlockMap [i' j].Name != null) {  				TextBlock text = new TextBlock ();  				text.FontSize = 8;  				text.Text = _map.BlockMap [i' j].Name;  				text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  				grid1.Children.Add (text);  				if (_map.BlockMap [i' j] == _activeBlock) {  					text.Foreground = Brushes.Red;  				}  			}  		}  		if (_map.BlockMap [i' j] == _activeBlock) {  			Rectangle actRec = new Rectangle ();  			actRec.Stroke = Brushes.Red;  			actRec.StrokeThickness = 2;  			actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  			actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  			actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  			actRec.Width = fieldSize;  			actRec.Height = fieldSize;  			grid1.Children.Add (actRec);  		}  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int j = 0; j < _map.Height; j++) {  	if (_map.BlockMap [i' j] != null) {  		Rectangle rec = new Rectangle ();  		rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  		rec.Width = fieldSize;  		rec.Height = fieldSize;  		rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		grid1.Children.Add (rec);  		if (_map.BlockMap [i' j].Name != null) {  			TextBlock text = new TextBlock ();  			text.FontSize = 8;  			text.Text = _map.BlockMap [i' j].Name;  			text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  			grid1.Children.Add (text);  			if (_map.BlockMap [i' j] == _activeBlock) {  				text.Foreground = Brushes.Red;  			}  		}  	}  	if (_map.BlockMap [i' j] == _activeBlock) {  		Rectangle actRec = new Rectangle ();  		actRec.Stroke = Brushes.Red;  		actRec.StrokeThickness = 2;  		actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		actRec.Width = fieldSize;  		actRec.Height = fieldSize;  		grid1.Children.Add (actRec);  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int j = 0; j < _map.Height; j++) {  	if (_map.BlockMap [i' j] != null) {  		Rectangle rec = new Rectangle ();  		rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  		rec.Width = fieldSize;  		rec.Height = fieldSize;  		rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		grid1.Children.Add (rec);  		if (_map.BlockMap [i' j].Name != null) {  			TextBlock text = new TextBlock ();  			text.FontSize = 8;  			text.Text = _map.BlockMap [i' j].Name;  			text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  			grid1.Children.Add (text);  			if (_map.BlockMap [i' j] == _activeBlock) {  				text.Foreground = Brushes.Red;  			}  		}  	}  	if (_map.BlockMap [i' j] == _activeBlock) {  		Rectangle actRec = new Rectangle ();  		actRec.Stroke = Brushes.Red;  		actRec.StrokeThickness = 2;  		actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		actRec.Width = fieldSize;  		actRec.Height = fieldSize;  		grid1.Children.Add (actRec);  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int j = 0; j < _map.Height; j++) {  	if (_map.BlockMap [i' j] != null) {  		Rectangle rec = new Rectangle ();  		rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  		rec.Width = fieldSize;  		rec.Height = fieldSize;  		rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		grid1.Children.Add (rec);  		if (_map.BlockMap [i' j].Name != null) {  			TextBlock text = new TextBlock ();  			text.FontSize = 8;  			text.Text = _map.BlockMap [i' j].Name;  			text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  			grid1.Children.Add (text);  			if (_map.BlockMap [i' j] == _activeBlock) {  				text.Foreground = Brushes.Red;  			}  		}  	}  	if (_map.BlockMap [i' j] == _activeBlock) {  		Rectangle actRec = new Rectangle ();  		actRec.Stroke = Brushes.Red;  		actRec.StrokeThickness = 2;  		actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		actRec.Width = fieldSize;  		actRec.Height = fieldSize;  		grid1.Children.Add (actRec);  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: for (int j = 0; j < _map.Height; j++) {  	if (_map.BlockMap [i' j] != null) {  		Rectangle rec = new Rectangle ();  		rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  		rec.Width = fieldSize;  		rec.Height = fieldSize;  		rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		grid1.Children.Add (rec);  		if (_map.BlockMap [i' j].Name != null) {  			TextBlock text = new TextBlock ();  			text.FontSize = 8;  			text.Text = _map.BlockMap [i' j].Name;  			text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  			grid1.Children.Add (text);  			if (_map.BlockMap [i' j] == _activeBlock) {  				text.Foreground = Brushes.Red;  			}  		}  	}  	if (_map.BlockMap [i' j] == _activeBlock) {  		Rectangle actRec = new Rectangle ();  		actRec.Stroke = Brushes.Red;  		actRec.StrokeThickness = 2;  		actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  		actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  		actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  		actRec.Width = fieldSize;  		actRec.Height = fieldSize;  		grid1.Children.Add (actRec);  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: if (_map.BlockMap [i' j] != null) {  	Rectangle rec = new Rectangle ();  	rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  	rec.Width = fieldSize;  	rec.Height = fieldSize;  	rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  	rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  	rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	grid1.Children.Add (rec);  	if (_map.BlockMap [i' j].Name != null) {  		TextBlock text = new TextBlock ();  		text.FontSize = 8;  		text.Text = _map.BlockMap [i' j].Name;  		text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  		grid1.Children.Add (text);  		if (_map.BlockMap [i' j] == _activeBlock) {  			text.Foreground = Brushes.Red;  		}  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: if (_map.BlockMap [i' j] != null) {  	Rectangle rec = new Rectangle ();  	rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  	rec.Width = fieldSize;  	rec.Height = fieldSize;  	rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  	rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  	rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	grid1.Children.Add (rec);  	if (_map.BlockMap [i' j].Name != null) {  		TextBlock text = new TextBlock ();  		text.FontSize = 8;  		text.Text = _map.BlockMap [i' j].Name;  		text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  		grid1.Children.Add (text);  		if (_map.BlockMap [i' j] == _activeBlock) {  			text.Foreground = Brushes.Red;  		}  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: if (_map.BlockMap [i' j] != null) {  	Rectangle rec = new Rectangle ();  	rec.Fill = new SolidColorBrush (_map.BlockMap [i' j].Color);  	rec.Width = fieldSize;  	rec.Height = fieldSize;  	rec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  	rec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  	rec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	grid1.Children.Add (rec);  	if (_map.BlockMap [i' j].Name != null) {  		TextBlock text = new TextBlock ();  		text.FontSize = 8;  		text.Text = _map.BlockMap [i' j].Name;  		text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  		grid1.Children.Add (text);  		if (_map.BlockMap [i' j] == _activeBlock) {  			text.Foreground = Brushes.Red;  		}  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: if (_map.BlockMap [i' j].Name != null) {  	TextBlock text = new TextBlock ();  	text.FontSize = 8;  	text.Text = _map.BlockMap [i' j].Name;  	text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  	grid1.Children.Add (text);  	if (_map.BlockMap [i' j] == _activeBlock) {  		text.Foreground = Brushes.Red;  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: if (_map.BlockMap [i' j].Name != null) {  	TextBlock text = new TextBlock ();  	text.FontSize = 8;  	text.Text = _map.BlockMap [i' j].Name;  	text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  	grid1.Children.Add (text);  	if (_map.BlockMap [i' j] == _activeBlock) {  		text.Foreground = Brushes.Red;  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: if (_map.BlockMap [i' j].Name != null) {  	TextBlock text = new TextBlock ();  	text.FontSize = 8;  	text.Text = _map.BlockMap [i' j].Name;  	text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  	grid1.Children.Add (text);  	if (_map.BlockMap [i' j] == _activeBlock) {  		text.Foreground = Brushes.Red;  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: text.FontSize = 8;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: text.Margin = new Thickness (i * fieldSize + 25' j * fieldSize + 10' 0' 0);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: if (_map.BlockMap [i' j] == _activeBlock) {  	Rectangle actRec = new Rectangle ();  	actRec.Stroke = Brushes.Red;  	actRec.StrokeThickness = 2;  	actRec.Margin = new Thickness (i * fieldSize' j * fieldSize' 0' 0);  	actRec.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;  	actRec.VerticalAlignment = System.Windows.VerticalAlignment.Top;  	actRec.Width = fieldSize;  	actRec.Height = fieldSize;  	grid1.Children.Add (actRec);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: actRec.StrokeThickness = 2;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: foreach (StringBlock sBlock in _map.TextBlocks) {  	TextBlock txtBlock = new TextBlock ();  	txtBlock.Foreground = new SolidColorBrush (sBlock.Color);  	txtBlock.Text = sBlock.Text;  	txtBlock.FontSize = 12;  	txtBlock.Margin = new Thickness (sBlock.Position.X' sBlock.Position.Y' 0' 0);  	grid1.Children.Add (txtBlock);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,DrawMap,The following statement contains a magic number: txtBlock.FontSize = 12;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 0.2;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 0.5;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 0.75;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 1.5;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 2;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 3;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 4;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: Scale = 5;  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if ((string)comboBox1.SelectedItem == "TextBlock") {  	if (listBox3.SelectedItem != null) {  		StringBlock sb = (StringBlock)listBox3.SelectedItem;  		if (e.Key == Key.W) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  		}  		else if (e.Key == Key.S) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  		}  		else if (e.Key == Key.A) {  			sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  		}  		else if (e.Key == Key.D) {  			sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  		}  		DrawMap ();  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if ((string)comboBox1.SelectedItem == "TextBlock") {  	if (listBox3.SelectedItem != null) {  		StringBlock sb = (StringBlock)listBox3.SelectedItem;  		if (e.Key == Key.W) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  		}  		else if (e.Key == Key.S) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  		}  		else if (e.Key == Key.A) {  			sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  		}  		else if (e.Key == Key.D) {  			sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  		}  		DrawMap ();  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if ((string)comboBox1.SelectedItem == "TextBlock") {  	if (listBox3.SelectedItem != null) {  		StringBlock sb = (StringBlock)listBox3.SelectedItem;  		if (e.Key == Key.W) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  		}  		else if (e.Key == Key.S) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  		}  		else if (e.Key == Key.A) {  			sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  		}  		else if (e.Key == Key.D) {  			sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  		}  		DrawMap ();  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if ((string)comboBox1.SelectedItem == "TextBlock") {  	if (listBox3.SelectedItem != null) {  		StringBlock sb = (StringBlock)listBox3.SelectedItem;  		if (e.Key == Key.W) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  		}  		else if (e.Key == Key.S) {  			sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  		}  		else if (e.Key == Key.A) {  			sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  		}  		else if (e.Key == Key.D) {  			sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  		}  		DrawMap ();  	}  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (listBox3.SelectedItem != null) {  	StringBlock sb = (StringBlock)listBox3.SelectedItem;  	if (e.Key == Key.W) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  	}  	else if (e.Key == Key.S) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  	}  	else if (e.Key == Key.A) {  		sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  	}  	else if (e.Key == Key.D) {  		sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  	}  	DrawMap ();  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (listBox3.SelectedItem != null) {  	StringBlock sb = (StringBlock)listBox3.SelectedItem;  	if (e.Key == Key.W) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  	}  	else if (e.Key == Key.S) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  	}  	else if (e.Key == Key.A) {  		sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  	}  	else if (e.Key == Key.D) {  		sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  	}  	DrawMap ();  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (listBox3.SelectedItem != null) {  	StringBlock sb = (StringBlock)listBox3.SelectedItem;  	if (e.Key == Key.W) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  	}  	else if (e.Key == Key.S) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  	}  	else if (e.Key == Key.A) {  		sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  	}  	else if (e.Key == Key.D) {  		sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  	}  	DrawMap ();  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (listBox3.SelectedItem != null) {  	StringBlock sb = (StringBlock)listBox3.SelectedItem;  	if (e.Key == Key.W) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  	}  	else if (e.Key == Key.S) {  		sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  	}  	else if (e.Key == Key.A) {  		sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  	}  	else if (e.Key == Key.D) {  		sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  	}  	DrawMap ();  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.W) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  }  else if (e.Key == Key.S) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  }  else if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.W) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  }  else if (e.Key == Key.S) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  }  else if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.W) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  }  else if (e.Key == Key.S) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  }  else if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.W) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  }  else if (e.Key == Key.S) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  }  else if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: sb.Position = new Point (sb.Position.X' sb.Position.Y - 2);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.S) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  }  else if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.S) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  }  else if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.S) {  	sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  }  else if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: sb.Position = new Point (sb.Position.X' sb.Position.Y + 2);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.A) {  	sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  }  else if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: sb.Position = new Point (sb.Position.X - 2' sb.Position.Y);  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: if (e.Key == Key.D) {  	sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  }  
Magic Number,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,grid1_KeyDown,The following statement contains a magic number: sb.Position = new Point (sb.Position.X + 2' sb.Position.Y);  
Missing Default,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,AddSkill_Click,The following switch statement is missing a default case: switch (((Skill)comboBox4.SelectedItem).BonusProperty) {  case BaseAttribute.Charisma:  	skill.BonusValue += Rules.GetStandardBonus (_character.CurrentStats.Charisma);  	break;  case BaseAttribute.Constitution:  	skill.BonusValue += Rules.GetStandardBonus (_character.CurrentStats.Constitution);  	break;  case BaseAttribute.Dexterity:  	skill.BonusValue += Rules.GetStandardBonus (_character.CurrentStats.Dexterity);  	break;  case BaseAttribute.Inteligence:  	skill.BonusValue += Rules.GetStandardBonus (_character.CurrentStats.Inteligence);  	break;  case BaseAttribute.Strength:  	skill.BonusValue += Rules.GetStandardBonus (_character.CurrentStats.Strength);  	break;  case BaseAttribute.Wisdom:  	skill.BonusValue += Rules.GetStandardBonus (_character.CurrentStats.WillThrow);  	break;  }  
Missing Default,DnDHelper.WPF,CharacterDetails,C:\repos\macper_dndhelper\DnDHelper\CharacterDetails.xaml.cs,button9_Click,The following switch statement is missing a default case: switch (key.Attribute) {  case BaseAttribute.Strength:  	_character.OriginalStats.Strength += key.Value;  	break;  case BaseAttribute.Dexterity:  	_character.OriginalStats.Dexterity += key.Value;  	break;  case BaseAttribute.Constitution:  	_character.OriginalStats.Constitution += key.Value;  	break;  case BaseAttribute.Inteligence:  	_character.OriginalStats.Inteligence += key.Value;  	break;  case BaseAttribute.Wisdom:  	_character.OriginalStats.Wisdom += key.Value;  	break;  }  
Missing Default,DnDHelper.WPF,EffectEditWindow,C:\repos\macper_dndhelper\DnDHelper\EffectEditWindow.xaml.cs,button1_Click,The following switch statement is missing a default case: switch (howLong) {  case "Rund":  	_effect.Duration = value;  	break;  case "Minut":  	_effect.Duration = value * 10;  	break;  case "Godzin":  	_effect.Duration = value * 600;  	break;  case "Dni":  	_effect.Duration = value * 600 * 24;  	break;  }  
Missing Default,DnDHelper.WPF,ItemsWindow,C:\repos\macper_dndhelper\DnDHelper\ItemsWindow.xaml.cs,button4_Click,The following switch statement is missing a default case: switch (_local) {  case ItemLocalization.RightHand:  	_character.RightHand = item;  	break;  case ItemLocalization.LeftHand:  	_character.LeftHand = item;  	break;  case ItemLocalization.Torso:  	_character.Torso = item;  	break;  case ItemLocalization.Belt:  	_character.Belt = item;  	break;  case ItemLocalization.Boots:  	_character.Boots = item;  	break;  case ItemLocalization.Cloak:  	_character.Cloak = item;  	break;  case ItemLocalization.Gloves:  	_character.Gloves = item;  	break;  case ItemLocalization.LeftRing:  	_character.LeftRing = item;  	break;  case ItemLocalization.RightRing:  	_character.RightRing = item;  	break;  case ItemLocalization.SecondWeapon:  	_character.SecondWeapon = item;  	break;  case ItemLocalization.Neclease:  	_character.Neclease = item;  	break;  case ItemLocalization.Helmet:  	_character.Helmet = item;  	break;  }  
Missing Default,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,_helper_PropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) {  case "CurrentTime":  	label1.Content = _helper.CurrentTime.ToString ("yyyy-MM-dd HH:mm:ss");  	break;  }  
Missing Default,DnDHelper.WPF,MainWindow,C:\repos\macper_dndhelper\DnDHelper\MainWindow.xaml.cs,slider1_ValueChanged,The following switch statement is missing a default case: switch ((int)slider1.Value) {  case 1:  	Scale = 0.2;  	break;  case 2:  	Scale = 0.5;  	break;  case 3:  	Scale = 0.75;  	break;  case 5:  	Scale = 1.5;  	break;  case 6:  	Scale = 2;  	break;  case 7:  	Scale = 3;  	break;  case 8:  	Scale = 4;  	break;  case 9:  case 10:  	Scale = 5;  	break;  }  
