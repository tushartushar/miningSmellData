Implementation smell,Namespace,Class,File,Method,Description
Long Method,DnDHelper.Domain,EnumsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\EnumsDictionary.cs,EnumsDictionary,The method has 121 lines of code.
Complex Method,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,EquipItem,Cyclomatic complexity of the method is 23
Complex Method,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,IncreaseMainSkillInternal,Cyclomatic complexity of the method is 18
Complex Method,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,ApplySkillBonus,Cyclomatic complexity of the method is 19
Complex Method,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,Cyclomatic complexity of the method is 17
Complex Method,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,Cyclomatic complexity of the method is 13
Complex Method,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,ApplyBonusFromAtutes,Cyclomatic complexity of the method is 8
Complex Method,DnDHelper.Domain,Damage,C:\repos\macper_dndhelper\DnDHelper.Domain\Damage.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,Cyclomatic complexity of the method is 13
Complex Method,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetDefaultType,Cyclomatic complexity of the method is 14
Complex Method,DnDHelper.Domain,Script,C:\repos\macper_dndhelper\DnDHelper.Domain\Script.cs,Script,Cyclomatic complexity of the method is 18
Complex Method,DnDHelper.Domain,SpellDefinition,C:\repos\macper_dndhelper\DnDHelper.Domain\Spell.cs,ConvertToString,Cyclomatic complexity of the method is 9
Complex Method,DnDHelper.Domain,Throw,C:\repos\macper_dndhelper\DnDHelper.Domain\Throw.cs,Change,Cyclomatic complexity of the method is 9
Complex Method,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,Synchronize,Cyclomatic complexity of the method is 8
Long Parameter List,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,SubscribeEvents,The method has 5 parameters.
Long Parameter List,DnDHelper.Domain,Battle,C:\repos\macper_dndhelper\DnDHelper.Domain\Battle.cs,Battle,The method has 6 parameters.
Long Parameter List,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,EquipItem,The method has 5 parameters.
Long Parameter List,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,ChangeSecondarySkillInternal,The method has 5 parameters.
Long Parameter List,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The method has 8 parameters.
Long Parameter List,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacks,The method has 7 parameters.
Long Parameter List,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,ApplyBonusFromAtutes,The method has 7 parameters.
Long Parameter List,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The method has 12 parameters.
Long Parameter List,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForRangedWeapon,The method has 9 parameters.
Long Statement,DnDHelper.Domain,AC,C:\repos\macper_dndhelper\DnDHelper.Domain\AC.cs,Increase,The length of the statement  "	if (type != ACBonusTypes.Armor && type != ACBonusTypes.Dexterity && type != ACBonusTypes.MagicShield && type != ACBonusTypes.NaturalArmor && type != ACBonusTypes.Other) " is 168.
Long Statement,DnDHelper.Domain,AdvancedQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\AdvancedQueueManager.cs,RepositorySaveRequest,The length of the statement  "	_updateQueue.Add (repository.Name' () => ServiceContainer.GetInstance<IRepositoryStorage> ().SaveRepository (repository)); " is 122.
Long Statement,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,InitBriefService,The length of the statement  "		Logger.Error ("Brak wpisu konfiguracyjnego - BriefGroups"' new ConfigurationException ("Brak wpisu konfiguracyjnego - BriefGroups")); " is 133.
Long Statement,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,InitBriefService,The length of the statement  "	//RepoGroups.Where( r => _briefGroups.Contains( r.Name ) ).ToList().ForEach( g => g.Members.ForEach( m => _briefCharacters.Add( m ) ) ); " is 136.
Long Statement,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,MoveCharacter,The length of the statement  "	Logger.Info (string.Format ("Przeniesiono posta� {0} z grupy {1} do grupy {2}"' character.Name' oldGroup' newGroup.Name)); " is 122.
Long Statement,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,RegisterTypes,The length of the statement  "		RegisterType<IQueueManager> (() => ServiceContainer.Kernel.Bind<IQueueManager> ().ToConstant (new AdvancedQueueManager ())); " is 124.
Long Statement,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,RegisterTypes,The length of the statement  "		RegisterType<ICharacterCalculator> (() => ServiceContainer.Kernel.Bind<ICharacterCalculator> ().ToConstant (new CharacterCalculator (Repositories))); " is 149.
Long Statement,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,RegisterTypes,The length of the statement  "		GameTimer = new GameTimer (DateTime.Parse (Repositories.Get<AppSetting> ().GetElementByName (Const.AppSettings.Time).Value)); " is 125.
Long Statement,DnDHelper.Domain,AppFacade,C:\repos\macper_dndhelper\DnDHelper.Domain\AppFacade.cs,SetUpTime,The length of the statement  "	GameTimer.CurrentTime = DateTime.Parse (Repositories.Get<AppSetting> ().GetElementByName (Const.AppSettings.Time).Value); " is 121.
Long Statement,DnDHelper.Domain,Attack,C:\repos\macper_dndhelper\DnDHelper.Domain\Attack.cs,ToString,The length of the statement  "	return string.Format ("{2}: {4} at. +{0} {1} {3}"' ToHit' Damage' Name' Range > 0 ? "Zas. " + Range.ToString () : ""' NumberOfAttacks); " is 135.
Long Statement,DnDHelper.Domain,Battle,C:\repos\macper_dndhelper\DnDHelper.Domain\Battle.cs,AddMember,The length of the statement  "	Logger.Info (string.Format ("Dodano membera: {0}' Inicjatywa: {1} + {2} = {3}"' character.Name' character.CurrentStats.Initiative' initiative' battleCharacter.Initiative)); " is 172.
Long Statement,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,IncreaseMainSkillInternal,The length of the statement  "	LogDebug (string.Format ("Zwiększono wartość współczynnika {0} ({1}) o {2}"' skill' original ? "Oryginalnego" : "Bieżącego"' value)); " is 133.
Long Statement,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,AddSpell,The length of the statement  "	if (!_owner.AvailableCastings.Any (c => c.Level == spellDefinition.Level && spellDefinition.SpellTypes.Contains (c.Type))) " is 122.
Long Statement,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,AddSpell,The length of the statement  "	if (_owner.Spells.Count (s => s.Definition.Level == spellDefinition.Level) >= _owner.AvailableCastings.Single (c => c.Level == spellDefinition.Level).Count) " is 156.
Long Statement,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,AddKnownSpell,The length of the statement  "	if (!_owner.AvailableCastings.Any (c => c.Level == spellDefinition.Level && spellDefinition.SpellTypes.Contains (c.Type))) " is 122.
Long Statement,DnDHelper.Domain,Character,C:\repos\macper_dndhelper\DnDHelper.Domain\Character.cs,GetActualSkills,The length of the statement  "	foreach (var skillDefinition in ServiceContainer.GetInstance<AppFacade> ().RepoSkills.Where (sd => !skills.Any (s => s.Name == sd.Name))) { " is 139.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The length of the statement  "		foreach (var skill in character.CurrentStats.Skills.Where (s => s.Definition.BonusProperty == BaseAttribute.Strength)) { " is 120.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The length of the statement  "		foreach (var skill in character.CurrentStats.Skills.Where (s => s.Definition.BonusProperty == BaseAttribute.Dexterity)) { " is 121.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The length of the statement  "		foreach (var skill in character.CurrentStats.Skills.Where (s => s.Definition.BonusProperty == BaseAttribute.Constitution)) { " is 124.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The length of the statement  "		foreach (var skill in character.CurrentStats.Skills.Where (s => s.Definition.BonusProperty == BaseAttribute.Inteligence)) { " is 123.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The length of the statement  "		foreach (var skill in character.CurrentStats.Skills.Where (s => s.Definition.BonusProperty == BaseAttribute.Charisma)) { " is 120.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetEffectBonuses,The length of the statement  "			_python.GetMethod<Action<Character' RepositorySet' Effect>> (ScriptContext.Effect' effect.Definition.Script) (character' _repository' effect); " is 142.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAtutesBonuses,The length of the statement  "			_python.GetMethod<Action<Character' RepositorySet' Atut>> (ScriptContext.Atut' atute.Definition.Script) (character' _repository' atute); " is 136.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetItemsBonuses,The length of the statement  "		if (item.Position == ItemPosition.RightHand || (item.Position == ItemPosition.LeftHand && item.Item.Definition.BaseType == BaseTypes.OneHandWeapon)) { " is 150.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetItemsBonuses,The length of the statement  "			_python.GetMethod<Action<Character' RepositorySet' Item>> (ScriptContext.Item' item.Item.Definition.Script) (character' _repository' item.Item); " is 144.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The length of the statement  "		character.OriginalStats.HP += @class.Definition.PW + (@class.Definition.PW / 2 * (@class.Level - 1)) + (@class.Level * Rules.GetStandardBonus (character.OriginalStats.Constitution)); " is 182.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The length of the statement  "		character.OriginalStats.Throws.Add (Rules.GetThrowTable (@class.Definition.HighEnduranceThrow' @class.Definition.HighReflexThrow' @class.Definition.HighWillThrow) [@class.Level]); " is 179.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The length of the statement  "			pythonEngine.GetMethod<Action<Character' RepositorySet>> (ScriptContext.Class' @class.Definition.Script) (character' _repository); " is 130.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacks,The length of the statement  "	var rightHandDmg = rightHandWeapon.Item.Definition.Bonuses.Where (b => b.GetType () == typeof(DamageBonus)).Cast<DamageBonus> (); " is 129.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacks,The length of the statement  "	var rightHandAttack = rightHandWeapon.Item.Definition.Bonuses.SingleOrDefault (b => b.GetType () == typeof(AttackBonus)) as AttackBonus; " is 136.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacks,The length of the statement  "	var rightHandRange = rightHandWeapon.Item.Definition.Bonuses.SingleOrDefault (b => b.GetType () == typeof(RangeBonus)) as RangeBonus; " is 133.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacks,The length of the statement  "	if (rightHandWeapon.Item.Definition.BaseType == BaseTypes.OneHandWeapon && leftHand != null && leftHand.Item.Definition.BaseType == BaseTypes.OneHandWeapon) { " is 158.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The length of the statement  "	bool hasAtutTwoWeaponsCombat = character.CurrentStats.Atutes.Any (a => a.Name == AtutDefinition.CommonAtutes.TwoWeaponsCombat); " is 127.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The length of the statement  "	var leftHandDmg = leftHand.Item.Definition.Bonuses.Where (b => b.GetType () == typeof(DamageBonus)).Cast<DamageBonus> (); " is 121.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForRangedWeapon,The length of the statement  "		var arrowDmgBonus = arrow.Item.Definition.Bonuses.SingleOrDefault (b => b.GetType () == typeof(DamageBonus)) as DamageBonus; " is 124.
Long Statement,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForRangedWeapon,The length of the statement  "		var arrowToHitBonus = arrow.Item.Definition.Bonuses.SingleOrDefault (b => b.GetType () == typeof(AttackBonus)) as AttackBonus; " is 126.
Long Statement,DnDHelper.Domain,Damage,C:\repos\macper_dndhelper\DnDHelper.Domain\Damage.cs,ToString,The length of the statement  "			builder.AppendFormat ("{0}{1}{2}"' damageBone.Count > 0 ? "+" : ""' damageBone.Count' damageBone.MaxValue == 1 ? "" : "K" + damageBone.MaxValue); " is 145.
Long Statement,DnDHelper.Domain,Item,C:\repos\macper_dndhelper\DnDHelper.Domain\Item.cs,ToString,The length of the statement  "	return string.Format ("{0}{1}"' Name' (Definition != null && Definition.Specials != null) ? "(" + Definition.Specials + ")" : string.Empty); " is 140.
Long Statement,DnDHelper.Domain,PythonEngine,C:\repos\macper_dndhelper\DnDHelper.Domain\PythonEngine.cs,GetMethod,The length of the statement  "	var script = ServiceContainer.GetInstance<RepositorySet> ().Get<Script> ().Elements.FirstOrDefault (f => f.ScriptContext == scriptContext && f.Name == name); " is 157.
Long Statement,DnDHelper.Domain,SpellDefinition,C:\repos\macper_dndhelper\DnDHelper.Domain\Spell.cs,ToString,The length of the statement  "{4}"' Name' ConvertTypesToString ()' Level.ToString ()' ConvertToString (SpellShool)' Description' ConvertToString (Range)' Duration); " is 134.
Long Statement,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,Synchronize,The length of the statement  "					Content = entityChange.IsUpdateInsert ? serializer.Serialize (repos.GetByName (repoChange.Name).GetElements ().Single (s => s.Id == entityChange.Id)) : null " is 156.
Long Statement,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,Synchronize,The length of the statement  "			Logger.Debug (string.Format ("To update: {0} Id: {1} {2}"' toChange.RepositoryName' toChange.Id' toChange.UpdateInsert)); " is 121.
Complex Conditional,DnDHelper.Domain,AC,C:\repos\macper_dndhelper\DnDHelper.Domain\AC.cs,Increase,The conditional expression  "type != ACBonusTypes.Armor && type != ACBonusTypes.Dexterity && type != ACBonusTypes.MagicShield && type != ACBonusTypes.NaturalArmor && type != ACBonusTypes.Other"  is complex.
Magic Number,DnDHelper.Domain,AdvancedQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\AdvancedQueueManager.cs,AdvancedQueueManager,The following statement contains a magic number: if (ConfigurationManager.AppSettings [Const.ConfigurationSettings.UpdatesInterval] == null || !int.TryParse (ConfigurationManager.AppSettings [Const.ConfigurationSettings.UpdatesInterval]' out interval)) {  	interval = 20;  }  
Magic Number,DnDHelper.Domain,AdvancedQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\AdvancedQueueManager.cs,AdvancedQueueManager,The following statement contains a magic number: interval = 20;  
Magic Number,DnDHelper.Domain,AdvancedQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\AdvancedQueueManager.cs,SetupWorker,The following statement contains a magic number: _worker.DoWork += (o' e) =>  {  	while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  		if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  			try {  				foreach (var value in _updateQueue) {  					Logger.Info ("Zapisano repozytorium: " + value.Key);  					value.Value ();  				}  				_updateQueue.Clear ();  				ChangeTracker.Instance.SaveChanges ();  				_lastUpdated = DateTime.Now;  			}  			catch (Exception exception) {  				Logger.Error (exception.Message' exception);  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  	Logger.Info ("Kończę pracę");  };  
Magic Number,DnDHelper.Domain,AdvancedQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\AdvancedQueueManager.cs,SetupWorker,The following statement contains a magic number: while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  	if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  		try {  			foreach (var value in _updateQueue) {  				Logger.Info ("Zapisano repozytorium: " + value.Key);  				value.Value ();  			}  			_updateQueue.Clear ();  			ChangeTracker.Instance.SaveChanges ();  			_lastUpdated = DateTime.Now;  		}  		catch (Exception exception) {  			Logger.Error (exception.Message' exception);  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,DnDHelper.Domain,AdvancedQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\AdvancedQueueManager.cs,SetupWorker,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,DnDHelper.Domain,AppSettingDefaultValueProvider,C:\repos\macper_dndhelper\DnDHelper.Domain\AppSettingDefaultValueProvider.cs,AppSettingDefaultValueProvider,The following statement contains a magic number: _defaultValues.Add (Const.AppSettings.Time' new DateTime (1300' 1' 1).ToString ());  
Magic Number,DnDHelper.Domain,Battle,C:\repos\macper_dndhelper\DnDHelper.Domain\Battle.cs,BrutalAttack,The following statement contains a magic number: foreach (var attack in attacker.Attacks) {  	var header = new AttackInfoHeader {  		Header = attack.Name  	};  	for (var i = 0; i < attack.NumberOfAttacks; i++) {  		header.Attacks.Add (new AttackViewModel () {  			Damage = attack.Damage.ToString ()'  			ToHit = defender.CurrentStats.AC.Total - (attack.ToHit - (i * 5)) - environmentModifier'  			Name = attack.Name'  			MissileName = attack.MissileName  		});  	}  	attackInfo.AttacksHeaders.Add (header);  }  
Magic Number,DnDHelper.Domain,Battle,C:\repos\macper_dndhelper\DnDHelper.Domain\Battle.cs,BrutalAttack,The following statement contains a magic number: for (var i = 0; i < attack.NumberOfAttacks; i++) {  	header.Attacks.Add (new AttackViewModel () {  		Damage = attack.Damage.ToString ()'  		ToHit = defender.CurrentStats.AC.Total - (attack.ToHit - (i * 5)) - environmentModifier'  		Name = attack.Name'  		MissileName = attack.MissileName  	});  }  
Magic Number,DnDHelper.Domain,Battle,C:\repos\macper_dndhelper\DnDHelper.Domain\Battle.cs,BrutalAttack,The following statement contains a magic number: header.Attacks.Add (new AttackViewModel () {  	Damage = attack.Damage.ToString ()'  	ToHit = defender.CurrentStats.AC.Total - (attack.ToHit - (i * 5)) - environmentModifier'  	Name = attack.Name'  	MissileName = attack.MissileName  });  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: _worker.DoWork += (o' e) =>  {  	while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  		if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  			Thread.Sleep (60 * 1000);  			Logger.Info ("Tryb offline - czekam...");  			continue;  		}  		if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  			try {  				if (_characterList.Any () || _enemyList.Any ()) {  					briefService.UpdateBriefs (new BriefUpdate {  						Characters = _characterList'  						EnemyCharacters = _enemyList  					});  					Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  					_characterList.Clear ();  					_enemyList.Clear ();  				}  				_lastUpdated = DateTime.Now;  			}  			catch (Exception exception) {  				Logger.Error (exception.Message' exception);  				Thread.Sleep (60 * 1000);  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  };  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: _worker.DoWork += (o' e) =>  {  	while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  		if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  			Thread.Sleep (60 * 1000);  			Logger.Info ("Tryb offline - czekam...");  			continue;  		}  		if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  			try {  				if (_characterList.Any () || _enemyList.Any ()) {  					briefService.UpdateBriefs (new BriefUpdate {  						Characters = _characterList'  						EnemyCharacters = _enemyList  					});  					Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  					_characterList.Clear ();  					_enemyList.Clear ();  				}  				_lastUpdated = DateTime.Now;  			}  			catch (Exception exception) {  				Logger.Error (exception.Message' exception);  				Thread.Sleep (60 * 1000);  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  };  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: _worker.DoWork += (o' e) =>  {  	while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  		if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  			Thread.Sleep (60 * 1000);  			Logger.Info ("Tryb offline - czekam...");  			continue;  		}  		if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  			try {  				if (_characterList.Any () || _enemyList.Any ()) {  					briefService.UpdateBriefs (new BriefUpdate {  						Characters = _characterList'  						EnemyCharacters = _enemyList  					});  					Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  					_characterList.Clear ();  					_enemyList.Clear ();  				}  				_lastUpdated = DateTime.Now;  			}  			catch (Exception exception) {  				Logger.Error (exception.Message' exception);  				Thread.Sleep (60 * 1000);  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  };  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: _worker.DoWork += (o' e) =>  {  	while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  		if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  			Thread.Sleep (60 * 1000);  			Logger.Info ("Tryb offline - czekam...");  			continue;  		}  		if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  			try {  				if (_characterList.Any () || _enemyList.Any ()) {  					briefService.UpdateBriefs (new BriefUpdate {  						Characters = _characterList'  						EnemyCharacters = _enemyList  					});  					Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  					_characterList.Clear ();  					_enemyList.Clear ();  				}  				_lastUpdated = DateTime.Now;  			}  			catch (Exception exception) {  				Logger.Error (exception.Message' exception);  				Thread.Sleep (60 * 1000);  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  };  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: _worker.DoWork += (o' e) =>  {  	while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  		if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  			Thread.Sleep (60 * 1000);  			Logger.Info ("Tryb offline - czekam...");  			continue;  		}  		if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  			try {  				if (_characterList.Any () || _enemyList.Any ()) {  					briefService.UpdateBriefs (new BriefUpdate {  						Characters = _characterList'  						EnemyCharacters = _enemyList  					});  					Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  					_characterList.Clear ();  					_enemyList.Clear ();  				}  				_lastUpdated = DateTime.Now;  			}  			catch (Exception exception) {  				Logger.Error (exception.Message' exception);  				Thread.Sleep (60 * 1000);  			}  		}  		System.Threading.Thread.Sleep (1000);  	}  };  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  	if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  		Thread.Sleep (60 * 1000);  		Logger.Info ("Tryb offline - czekam...");  		continue;  	}  	if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  		try {  			if (_characterList.Any () || _enemyList.Any ()) {  				briefService.UpdateBriefs (new BriefUpdate {  					Characters = _characterList'  					EnemyCharacters = _enemyList  				});  				Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  				_characterList.Clear ();  				_enemyList.Clear ();  			}  			_lastUpdated = DateTime.Now;  		}  		catch (Exception exception) {  			Logger.Error (exception.Message' exception);  			Thread.Sleep (60 * 1000);  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  	if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  		Thread.Sleep (60 * 1000);  		Logger.Info ("Tryb offline - czekam...");  		continue;  	}  	if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  		try {  			if (_characterList.Any () || _enemyList.Any ()) {  				briefService.UpdateBriefs (new BriefUpdate {  					Characters = _characterList'  					EnemyCharacters = _enemyList  				});  				Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  				_characterList.Clear ();  				_enemyList.Clear ();  			}  			_lastUpdated = DateTime.Now;  		}  		catch (Exception exception) {  			Logger.Error (exception.Message' exception);  			Thread.Sleep (60 * 1000);  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  	if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  		Thread.Sleep (60 * 1000);  		Logger.Info ("Tryb offline - czekam...");  		continue;  	}  	if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  		try {  			if (_characterList.Any () || _enemyList.Any ()) {  				briefService.UpdateBriefs (new BriefUpdate {  					Characters = _characterList'  					EnemyCharacters = _enemyList  				});  				Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  				_characterList.Clear ();  				_enemyList.Clear ();  			}  			_lastUpdated = DateTime.Now;  		}  		catch (Exception exception) {  			Logger.Error (exception.Message' exception);  			Thread.Sleep (60 * 1000);  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  	if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  		Thread.Sleep (60 * 1000);  		Logger.Info ("Tryb offline - czekam...");  		continue;  	}  	if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  		try {  			if (_characterList.Any () || _enemyList.Any ()) {  				briefService.UpdateBriefs (new BriefUpdate {  					Characters = _characterList'  					EnemyCharacters = _enemyList  				});  				Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  				_characterList.Clear ();  				_enemyList.Clear ();  			}  			_lastUpdated = DateTime.Now;  		}  		catch (Exception exception) {  			Logger.Error (exception.Message' exception);  			Thread.Sleep (60 * 1000);  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: while (ServiceContainer.GetInstance<IAppStateController> ().IsRunning) {  	if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  		Thread.Sleep (60 * 1000);  		Logger.Info ("Tryb offline - czekam...");  		continue;  	}  	if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  		try {  			if (_characterList.Any () || _enemyList.Any ()) {  				briefService.UpdateBriefs (new BriefUpdate {  					Characters = _characterList'  					EnemyCharacters = _enemyList  				});  				Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  				_characterList.Clear ();  				_enemyList.Clear ();  			}  			_lastUpdated = DateTime.Now;  		}  		catch (Exception exception) {  			Logger.Error (exception.Message' exception);  			Thread.Sleep (60 * 1000);  		}  	}  	System.Threading.Thread.Sleep (1000);  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  	Thread.Sleep (60 * 1000);  	Logger.Info ("Tryb offline - czekam...");  	continue;  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: if (ServiceContainer.GetInstance<IAppStateController> ().IsOffline) {  	Thread.Sleep (60 * 1000);  	Logger.Info ("Tryb offline - czekam...");  	continue;  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: Thread.Sleep (60 * 1000);  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: Thread.Sleep (60 * 1000);  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  	try {  		if (_characterList.Any () || _enemyList.Any ()) {  			briefService.UpdateBriefs (new BriefUpdate {  				Characters = _characterList'  				EnemyCharacters = _enemyList  			});  			Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  			_characterList.Clear ();  			_enemyList.Clear ();  		}  		_lastUpdated = DateTime.Now;  	}  	catch (Exception exception) {  		Logger.Error (exception.Message' exception);  		Thread.Sleep (60 * 1000);  	}  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: if (_lastUpdated.AddSeconds (_updatesInterval) < DateTime.Now) {  	try {  		if (_characterList.Any () || _enemyList.Any ()) {  			briefService.UpdateBriefs (new BriefUpdate {  				Characters = _characterList'  				EnemyCharacters = _enemyList  			});  			Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  			_characterList.Clear ();  			_enemyList.Clear ();  		}  		_lastUpdated = DateTime.Now;  	}  	catch (Exception exception) {  		Logger.Error (exception.Message' exception);  		Thread.Sleep (60 * 1000);  	}  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: try {  	if (_characterList.Any () || _enemyList.Any ()) {  		briefService.UpdateBriefs (new BriefUpdate {  			Characters = _characterList'  			EnemyCharacters = _enemyList  		});  		Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  		_characterList.Clear ();  		_enemyList.Clear ();  	}  	_lastUpdated = DateTime.Now;  }  catch (Exception exception) {  	Logger.Error (exception.Message' exception);  	Thread.Sleep (60 * 1000);  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: try {  	if (_characterList.Any () || _enemyList.Any ()) {  		briefService.UpdateBriefs (new BriefUpdate {  			Characters = _characterList'  			EnemyCharacters = _enemyList  		});  		Logger.Info (string.Format ("Wysłano: {0} briefów' {1} enemy briefów"' _characterList.Count' _enemyList.Count));  		_characterList.Clear ();  		_enemyList.Clear ();  	}  	_lastUpdated = DateTime.Now;  }  catch (Exception exception) {  	Logger.Error (exception.Message' exception);  	Thread.Sleep (60 * 1000);  }  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: Thread.Sleep (60 * 1000);  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: Thread.Sleep (60 * 1000);  
Magic Number,DnDHelper.Domain,BriefServiceQueueManager,C:\repos\macper_dndhelper\DnDHelper.Domain\BriefServiceQueueManager.cs,BriefServiceQueueManager,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,DnDHelper.Domain,DamageBone,C:\repos\macper_dndhelper\DnDHelper.Domain\DamageBone.cs,DamageBone,The following statement contains a magic number: DamageType = arrVal [2];  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The following statement contains a magic number: if (strengthBonus != 0) {  	controller.AddBonus (new AttackBonus (CommonSources.Strength' strengthBonus) {  		Melee = true  	});  	var weapon = character.MainItems.SingleOrDefault (w => w.Position == ItemPosition.RightHand);  	if (weapon != null && !weapon.Item.Definition.IsRangedWeapon) {  		var dmgModifier = strengthBonus;  		if (weapon.Item.Definition.BaseType == BaseTypes.TwoHandedWeapon) {  			dmgModifier = (int)(dmgModifier * 1.5);  		}  		controller.AddBonus (new DamageBonus (CommonSources.Strength' new DamageBone () {  			Count = dmgModifier'  			MaxValue = 1'  			DamageType = DamageTypes.Physical  		}));  	}  	if (character.CustomAttacks.Any ()) {  		var dmgModifier = strengthBonus;  		controller.AddBonus (new DamageBonus (CommonSources.Strength' new DamageBone () {  			Count = dmgModifier'  			MaxValue = 1'  			DamageType = DamageTypes.Physical  		}));  	}  	foreach (var skill in character.CurrentStats.Skills.Where (s => s.Definition.BonusProperty == BaseAttribute.Strength)) {  		controller.AddBonus (new SecondarySkillBonus (CommonSources.Strength' strengthBonus) {  			SkillName = skill.Name  		});  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The following statement contains a magic number: if (weapon != null && !weapon.Item.Definition.IsRangedWeapon) {  	var dmgModifier = strengthBonus;  	if (weapon.Item.Definition.BaseType == BaseTypes.TwoHandedWeapon) {  		dmgModifier = (int)(dmgModifier * 1.5);  	}  	controller.AddBonus (new DamageBonus (CommonSources.Strength' new DamageBone () {  		Count = dmgModifier'  		MaxValue = 1'  		DamageType = DamageTypes.Physical  	}));  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The following statement contains a magic number: if (weapon.Item.Definition.BaseType == BaseTypes.TwoHandedWeapon) {  	dmgModifier = (int)(dmgModifier * 1.5);  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The following statement contains a magic number: dmgModifier = (int)(dmgModifier * 1.5);  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The following statement contains a magic number: if (constitutionBonus != 0) {  	var diff = character.CurrentStats.Constitution - character.OriginalStats.Constitution;  	if (diff != 0) {  		controller.AddBonus (new HPBonus (CommonSources.Constitution' diff / 2 * character.Level));  	}  	controller.AddBonus (new ThrowBonus (CommonSources.Constitution' new Throw () {  		EnduranceThrow = constitutionBonus  	}));  	foreach (var skill in character.CurrentStats.Skills.Where (s => s.Definition.BonusProperty == BaseAttribute.Constitution)) {  		controller.AddBonus (new SecondarySkillBonus (CommonSources.Constitution' constitutionBonus) {  			SkillName = skill.Name  		});  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The following statement contains a magic number: if (diff != 0) {  	controller.AddBonus (new HPBonus (CommonSources.Constitution' diff / 2 * character.Level));  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetMainSkillsBonus,The following statement contains a magic number: controller.AddBonus (new HPBonus (CommonSources.Constitution' diff / 2 * character.Level));  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: foreach (var @class in character.Class) {  	Logger.Debug (string.Format ("{0}: klasa {1} poziom {2}"' character.Name' @class.Name' @class.Level));  	character.OriginalStats.HP += @class.Definition.PW + (@class.Definition.PW / 2 * (@class.Level - 1)) + (@class.Level * Rules.GetStandardBonus (character.OriginalStats.Constitution));  	baseAttack += Rules.GetBaseAttack (@class.Definition.AttackSkill' @class.Level);  	character.OriginalStats.Throws.Add (Rules.GetThrowTable (@class.Definition.HighEnduranceThrow' @class.Definition.HighReflexThrow' @class.Definition.HighWillThrow) [@class.Level]);  	character.SkillPointsLeft.SecondarySkills += 4 * (@class.Definition.SkillsPoints);  	character.SkillPointsLeft.SecondarySkills += @class.Level * (@class.Definition.SkillsPoints);  	var pythonEngine = ServiceContainer.GetInstance<IPythonEngine> ();  	if (!string.IsNullOrEmpty (@class.Definition.Script)) {  		pythonEngine.GetMethod<Action<Character' RepositorySet>> (ScriptContext.Class' @class.Definition.Script) (character' _repository);  	}  	var baseAmount = character.SkillPointsLeft.SecondarySkills;  	var counter = 0;  	var probDictionary = new Dictionary<int' SkillPreference> ();  	foreach (var skillPreference in @class.Definition.SkillsPreference) {  		counter += skillPreference.Wage;  		probDictionary.Add (counter' skillPreference);  		if (counter > 100) {  			Logger.Error ("SkillPreference counter < 100 !!"' null);  		}  	}  	for (var l = 0; l < @class.Level; l++) {  		var skillPoints = @class.Definition.SkillsPoints + (Rules.GetStandardBonus (character.CurrentStats.Inteligence));  		if (skillPoints < 1) {  			skillPoints = 1;  		}  		var rnd = new Random ();  		for (var k = 0; k < skillPoints; k++) {  			var r = rnd.Next (0' 100);  			foreach (var key in probDictionary.Keys) {  				if (r <= key) {  					character.Controller.ChangeSecondarySkillOriginal (probDictionary [key].Name' 1);  					break;  				}  			}  		}  		if (character.SkillPointsLeft.SecondarySkills <= 0)  			break;  	}  	if (@class.Definition.SpellsPerLevel != null && @class.Definition.SpellsPerLevel.Any ()) {  		character.AvailableCastings = new List<SpellCasting> ();  		foreach (var casting in @class.Definition.SpellsPerLevel [@class.Level]) {  			character.AvailableCastings.Add (casting);  		}  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: foreach (var @class in character.Class) {  	Logger.Debug (string.Format ("{0}: klasa {1} poziom {2}"' character.Name' @class.Name' @class.Level));  	character.OriginalStats.HP += @class.Definition.PW + (@class.Definition.PW / 2 * (@class.Level - 1)) + (@class.Level * Rules.GetStandardBonus (character.OriginalStats.Constitution));  	baseAttack += Rules.GetBaseAttack (@class.Definition.AttackSkill' @class.Level);  	character.OriginalStats.Throws.Add (Rules.GetThrowTable (@class.Definition.HighEnduranceThrow' @class.Definition.HighReflexThrow' @class.Definition.HighWillThrow) [@class.Level]);  	character.SkillPointsLeft.SecondarySkills += 4 * (@class.Definition.SkillsPoints);  	character.SkillPointsLeft.SecondarySkills += @class.Level * (@class.Definition.SkillsPoints);  	var pythonEngine = ServiceContainer.GetInstance<IPythonEngine> ();  	if (!string.IsNullOrEmpty (@class.Definition.Script)) {  		pythonEngine.GetMethod<Action<Character' RepositorySet>> (ScriptContext.Class' @class.Definition.Script) (character' _repository);  	}  	var baseAmount = character.SkillPointsLeft.SecondarySkills;  	var counter = 0;  	var probDictionary = new Dictionary<int' SkillPreference> ();  	foreach (var skillPreference in @class.Definition.SkillsPreference) {  		counter += skillPreference.Wage;  		probDictionary.Add (counter' skillPreference);  		if (counter > 100) {  			Logger.Error ("SkillPreference counter < 100 !!"' null);  		}  	}  	for (var l = 0; l < @class.Level; l++) {  		var skillPoints = @class.Definition.SkillsPoints + (Rules.GetStandardBonus (character.CurrentStats.Inteligence));  		if (skillPoints < 1) {  			skillPoints = 1;  		}  		var rnd = new Random ();  		for (var k = 0; k < skillPoints; k++) {  			var r = rnd.Next (0' 100);  			foreach (var key in probDictionary.Keys) {  				if (r <= key) {  					character.Controller.ChangeSecondarySkillOriginal (probDictionary [key].Name' 1);  					break;  				}  			}  		}  		if (character.SkillPointsLeft.SecondarySkills <= 0)  			break;  	}  	if (@class.Definition.SpellsPerLevel != null && @class.Definition.SpellsPerLevel.Any ()) {  		character.AvailableCastings = new List<SpellCasting> ();  		foreach (var casting in @class.Definition.SpellsPerLevel [@class.Level]) {  			character.AvailableCastings.Add (casting);  		}  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: foreach (var @class in character.Class) {  	Logger.Debug (string.Format ("{0}: klasa {1} poziom {2}"' character.Name' @class.Name' @class.Level));  	character.OriginalStats.HP += @class.Definition.PW + (@class.Definition.PW / 2 * (@class.Level - 1)) + (@class.Level * Rules.GetStandardBonus (character.OriginalStats.Constitution));  	baseAttack += Rules.GetBaseAttack (@class.Definition.AttackSkill' @class.Level);  	character.OriginalStats.Throws.Add (Rules.GetThrowTable (@class.Definition.HighEnduranceThrow' @class.Definition.HighReflexThrow' @class.Definition.HighWillThrow) [@class.Level]);  	character.SkillPointsLeft.SecondarySkills += 4 * (@class.Definition.SkillsPoints);  	character.SkillPointsLeft.SecondarySkills += @class.Level * (@class.Definition.SkillsPoints);  	var pythonEngine = ServiceContainer.GetInstance<IPythonEngine> ();  	if (!string.IsNullOrEmpty (@class.Definition.Script)) {  		pythonEngine.GetMethod<Action<Character' RepositorySet>> (ScriptContext.Class' @class.Definition.Script) (character' _repository);  	}  	var baseAmount = character.SkillPointsLeft.SecondarySkills;  	var counter = 0;  	var probDictionary = new Dictionary<int' SkillPreference> ();  	foreach (var skillPreference in @class.Definition.SkillsPreference) {  		counter += skillPreference.Wage;  		probDictionary.Add (counter' skillPreference);  		if (counter > 100) {  			Logger.Error ("SkillPreference counter < 100 !!"' null);  		}  	}  	for (var l = 0; l < @class.Level; l++) {  		var skillPoints = @class.Definition.SkillsPoints + (Rules.GetStandardBonus (character.CurrentStats.Inteligence));  		if (skillPoints < 1) {  			skillPoints = 1;  		}  		var rnd = new Random ();  		for (var k = 0; k < skillPoints; k++) {  			var r = rnd.Next (0' 100);  			foreach (var key in probDictionary.Keys) {  				if (r <= key) {  					character.Controller.ChangeSecondarySkillOriginal (probDictionary [key].Name' 1);  					break;  				}  			}  		}  		if (character.SkillPointsLeft.SecondarySkills <= 0)  			break;  	}  	if (@class.Definition.SpellsPerLevel != null && @class.Definition.SpellsPerLevel.Any ()) {  		character.AvailableCastings = new List<SpellCasting> ();  		foreach (var casting in @class.Definition.SpellsPerLevel [@class.Level]) {  			character.AvailableCastings.Add (casting);  		}  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: foreach (var @class in character.Class) {  	Logger.Debug (string.Format ("{0}: klasa {1} poziom {2}"' character.Name' @class.Name' @class.Level));  	character.OriginalStats.HP += @class.Definition.PW + (@class.Definition.PW / 2 * (@class.Level - 1)) + (@class.Level * Rules.GetStandardBonus (character.OriginalStats.Constitution));  	baseAttack += Rules.GetBaseAttack (@class.Definition.AttackSkill' @class.Level);  	character.OriginalStats.Throws.Add (Rules.GetThrowTable (@class.Definition.HighEnduranceThrow' @class.Definition.HighReflexThrow' @class.Definition.HighWillThrow) [@class.Level]);  	character.SkillPointsLeft.SecondarySkills += 4 * (@class.Definition.SkillsPoints);  	character.SkillPointsLeft.SecondarySkills += @class.Level * (@class.Definition.SkillsPoints);  	var pythonEngine = ServiceContainer.GetInstance<IPythonEngine> ();  	if (!string.IsNullOrEmpty (@class.Definition.Script)) {  		pythonEngine.GetMethod<Action<Character' RepositorySet>> (ScriptContext.Class' @class.Definition.Script) (character' _repository);  	}  	var baseAmount = character.SkillPointsLeft.SecondarySkills;  	var counter = 0;  	var probDictionary = new Dictionary<int' SkillPreference> ();  	foreach (var skillPreference in @class.Definition.SkillsPreference) {  		counter += skillPreference.Wage;  		probDictionary.Add (counter' skillPreference);  		if (counter > 100) {  			Logger.Error ("SkillPreference counter < 100 !!"' null);  		}  	}  	for (var l = 0; l < @class.Level; l++) {  		var skillPoints = @class.Definition.SkillsPoints + (Rules.GetStandardBonus (character.CurrentStats.Inteligence));  		if (skillPoints < 1) {  			skillPoints = 1;  		}  		var rnd = new Random ();  		for (var k = 0; k < skillPoints; k++) {  			var r = rnd.Next (0' 100);  			foreach (var key in probDictionary.Keys) {  				if (r <= key) {  					character.Controller.ChangeSecondarySkillOriginal (probDictionary [key].Name' 1);  					break;  				}  			}  		}  		if (character.SkillPointsLeft.SecondarySkills <= 0)  			break;  	}  	if (@class.Definition.SpellsPerLevel != null && @class.Definition.SpellsPerLevel.Any ()) {  		character.AvailableCastings = new List<SpellCasting> ();  		foreach (var casting in @class.Definition.SpellsPerLevel [@class.Level]) {  			character.AvailableCastings.Add (casting);  		}  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: character.OriginalStats.HP += @class.Definition.PW + (@class.Definition.PW / 2 * (@class.Level - 1)) + (@class.Level * Rules.GetStandardBonus (character.OriginalStats.Constitution));  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: character.SkillPointsLeft.SecondarySkills += 4 * (@class.Definition.SkillsPoints);  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: foreach (var skillPreference in @class.Definition.SkillsPreference) {  	counter += skillPreference.Wage;  	probDictionary.Add (counter' skillPreference);  	if (counter > 100) {  		Logger.Error ("SkillPreference counter < 100 !!"' null);  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: if (counter > 100) {  	Logger.Error ("SkillPreference counter < 100 !!"' null);  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: for (var l = 0; l < @class.Level; l++) {  	var skillPoints = @class.Definition.SkillsPoints + (Rules.GetStandardBonus (character.CurrentStats.Inteligence));  	if (skillPoints < 1) {  		skillPoints = 1;  	}  	var rnd = new Random ();  	for (var k = 0; k < skillPoints; k++) {  		var r = rnd.Next (0' 100);  		foreach (var key in probDictionary.Keys) {  			if (r <= key) {  				character.Controller.ChangeSecondarySkillOriginal (probDictionary [key].Name' 1);  				break;  			}  		}  	}  	if (character.SkillPointsLeft.SecondarySkills <= 0)  		break;  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: for (var k = 0; k < skillPoints; k++) {  	var r = rnd.Next (0' 100);  	foreach (var key in probDictionary.Keys) {  		if (r <= key) {  			character.Controller.ChangeSecondarySkillOriginal (probDictionary [key].Name' 1);  			break;  		}  	}  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetClassBonuses,The following statement contains a magic number: character.OriginalStats.Attack.NumberOfAttacks = 1 + ((baseAttack - 1) / 5);  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,SetCommonParams,The following statement contains a magic number: character.SkillPointsLeft.MainSkills = 10 + (int)Math.Floor ((double)character.Level / 4);  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,SetCommonParams,The following statement contains a magic number: character.SkillPointsLeft.MainSkills = 10 + (int)Math.Floor ((double)character.Level / 4);  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,SetCommonParams,The following statement contains a magic number: character.SkillPointsLeft.Atutes = 1 + (int)Math.Floor ((double)character.Level / 3);  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: if (hasAtutTwoWeaponsCombat) {  	firstWeaponPanalty = -2;  	secondWeaponPanalty = -2;  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: if (hasAtutTwoWeaponsCombat) {  	firstWeaponPanalty = -2;  	secondWeaponPanalty = -2;  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: firstWeaponPanalty = -2;  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: secondWeaponPanalty = -2;  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: if (character.CurrentStats.Atutes.Any (a => a.Name == AtutDefinition.CommonAtutes.AdvancedTwoWeaponsCombat)) {  	additionalWeaponAttacks = 2;  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: additionalWeaponAttacks = 2;  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: if (character.CurrentStats.Atutes.Any (a => a.Name == AtutDefinition.CommonAtutes.MasterTwoWeaponsCombat)) {  	additionalWeaponAttacks = 3;  }  
Magic Number,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,GetAttacksForTwoWeapons,The following statement contains a magic number: additionalWeaponAttacks = 3;  
Magic Number,DnDHelper.Domain,DescriptionsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\DescriptionsDictionary.cs,GetDurationDescription,The following statement contains a magic number: if (duration < 60 / Rules.TurnLengthInSeconds) {  	return string.Format ("{0} tur"' duration);  }  
Magic Number,DnDHelper.Domain,DescriptionsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\DescriptionsDictionary.cs,GetDurationDescription,The following statement contains a magic number: if (duration < 3600 / Rules.TurnLengthInSeconds) {  	var wholeMins = TurnsToMinutes (duration);  	var turns = duration - MinutesToTurns (wholeMins);  	return string.Format ("{0} minut {1} tur"' wholeMins' turns);  }  
Magic Number,DnDHelper.Domain,DescriptionsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\DescriptionsDictionary.cs,TurnsToMinutes,The following statement contains a magic number: return (int)(turns * Rules.TurnLengthInSeconds) / 60;  
Magic Number,DnDHelper.Domain,DescriptionsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\DescriptionsDictionary.cs,MinutesToTurns,The following statement contains a magic number: return (minutes * 60 / Rules.TurnLengthInSeconds);  
Magic Number,DnDHelper.Domain,DescriptionsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\DescriptionsDictionary.cs,TurnsToHours,The following statement contains a magic number: return (int)(turns * Rules.TurnLengthInSeconds) / 3600;  
Magic Number,DnDHelper.Domain,DescriptionsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\DescriptionsDictionary.cs,HoursToTurns,The following statement contains a magic number: return (hours * 3600 / Rules.TurnLengthInSeconds);  
Magic Number,DnDHelper.Domain,EnemyBrief,C:\repos\macper_dndhelper\DnDHelper.Domain\EnemyBrief.cs,Create,The following statement contains a magic number: return new EnemyBrief {  	Name = character.Name'  	Id = character.Character.Id.Value'  	Health = FormatHealth (100 * ((decimal)character.Character.Life / (decimal)character.Character.CurrentStats.HP))'  	TypeOfChange = change  };  
Magic Number,DnDHelper.Domain,EnemyBrief,C:\repos\macper_dndhelper\DnDHelper.Domain\EnemyBrief.cs,FormatHealth,The following statement contains a magic number: if (healthPrc > 80)  	return "Lekkie obra�enia";  
Magic Number,DnDHelper.Domain,EnemyBrief,C:\repos\macper_dndhelper\DnDHelper.Domain\EnemyBrief.cs,FormatHealth,The following statement contains a magic number: if (healthPrc > 50)  	return "�rednie obra�enia";  
Magic Number,DnDHelper.Domain,EnemyBrief,C:\repos\macper_dndhelper\DnDHelper.Domain\EnemyBrief.cs,FormatHealth,The following statement contains a magic number: if (healthPrc > 20)  	return "Powa�ne obra�enia";  
Magic Number,DnDHelper.Domain,EnumsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\EnumsDictionary.cs,EnumsDictionary,The following statement contains a magic number: BonesTypes.AddRange (new[] {  	new EnumDictionaryEntry ("K20"' 20)'  	new EnumDictionaryEntry ("K12"' 12)'  	new EnumDictionaryEntry ("K10"' 10)'  	new EnumDictionaryEntry ("K8"' 8)'  	new EnumDictionaryEntry ("K6"' 6)'  	new EnumDictionaryEntry ("K4"' 4)'  	new EnumDictionaryEntry ("K1"' 1)  });  
Magic Number,DnDHelper.Domain,EnumsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\EnumsDictionary.cs,EnumsDictionary,The following statement contains a magic number: BonesTypes.AddRange (new[] {  	new EnumDictionaryEntry ("K20"' 20)'  	new EnumDictionaryEntry ("K12"' 12)'  	new EnumDictionaryEntry ("K10"' 10)'  	new EnumDictionaryEntry ("K8"' 8)'  	new EnumDictionaryEntry ("K6"' 6)'  	new EnumDictionaryEntry ("K4"' 4)'  	new EnumDictionaryEntry ("K1"' 1)  });  
Magic Number,DnDHelper.Domain,EnumsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\EnumsDictionary.cs,EnumsDictionary,The following statement contains a magic number: BonesTypes.AddRange (new[] {  	new EnumDictionaryEntry ("K20"' 20)'  	new EnumDictionaryEntry ("K12"' 12)'  	new EnumDictionaryEntry ("K10"' 10)'  	new EnumDictionaryEntry ("K8"' 8)'  	new EnumDictionaryEntry ("K6"' 6)'  	new EnumDictionaryEntry ("K4"' 4)'  	new EnumDictionaryEntry ("K1"' 1)  });  
Magic Number,DnDHelper.Domain,EnumsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\EnumsDictionary.cs,EnumsDictionary,The following statement contains a magic number: BonesTypes.AddRange (new[] {  	new EnumDictionaryEntry ("K20"' 20)'  	new EnumDictionaryEntry ("K12"' 12)'  	new EnumDictionaryEntry ("K10"' 10)'  	new EnumDictionaryEntry ("K8"' 8)'  	new EnumDictionaryEntry ("K6"' 6)'  	new EnumDictionaryEntry ("K4"' 4)'  	new EnumDictionaryEntry ("K1"' 1)  });  
Magic Number,DnDHelper.Domain,EnumsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\EnumsDictionary.cs,EnumsDictionary,The following statement contains a magic number: BonesTypes.AddRange (new[] {  	new EnumDictionaryEntry ("K20"' 20)'  	new EnumDictionaryEntry ("K12"' 12)'  	new EnumDictionaryEntry ("K10"' 10)'  	new EnumDictionaryEntry ("K8"' 8)'  	new EnumDictionaryEntry ("K6"' 6)'  	new EnumDictionaryEntry ("K4"' 4)'  	new EnumDictionaryEntry ("K1"' 1)  });  
Magic Number,DnDHelper.Domain,EnumsDictionary,C:\repos\macper_dndhelper\DnDHelper.Domain\EnumsDictionary.cs,EnumsDictionary,The following statement contains a magic number: BonesTypes.AddRange (new[] {  	new EnumDictionaryEntry ("K20"' 20)'  	new EnumDictionaryEntry ("K12"' 12)'  	new EnumDictionaryEntry ("K10"' 10)'  	new EnumDictionaryEntry ("K8"' 8)'  	new EnumDictionaryEntry ("K6"' 6)'  	new EnumDictionaryEntry ("K4"' 4)'  	new EnumDictionaryEntry ("K1"' 1)  });  
Magic Number,DnDHelper.Domain,GameTimer,C:\repos\macper_dndhelper\DnDHelper.Domain\GameTimer.cs,AddDays,The following statement contains a magic number: AddHours (amount * 24);  
Magic Number,DnDHelper.Domain,GameTimer,C:\repos\macper_dndhelper\DnDHelper.Domain\GameTimer.cs,AddHours,The following statement contains a magic number: AddMinutes (amount * 60);  
Magic Number,DnDHelper.Domain,GameTimer,C:\repos\macper_dndhelper\DnDHelper.Domain\GameTimer.cs,AddMinutes,The following statement contains a magic number: AddTurns (amount * (60 / Rules.TurnLengthInSeconds));  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetStandardBonus,The following statement contains a magic number: return (int)Math.Floor (((double)value - 10) / 2);  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetStandardBonus,The following statement contains a magic number: return (int)Math.Floor (((double)value - 10) / 2);  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetBaseAttack,The following statement contains a magic number: switch (skillRate) {  case SkillRate.High:  	return level;  case SkillRate.Medium:  	return (int)(level * 0.75);  case SkillRate.Low:  	return (int)(level * 0.5);  default:  	throw new NotImplementedException ();  }  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetBaseAttack,The following statement contains a magic number: switch (skillRate) {  case SkillRate.High:  	return level;  case SkillRate.Medium:  	return (int)(level * 0.75);  case SkillRate.Low:  	return (int)(level * 0.5);  default:  	throw new NotImplementedException ();  }  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetBaseAttack,The following statement contains a magic number: return (int)(level * 0.75);  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetBaseAttack,The following statement contains a magic number: return (int)(level * 0.5);  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: if (highEndurance)  	currentThrow.EnduranceThrow = 2;  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: currentThrow.EnduranceThrow = 2;  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: if (highReflex)  	currentThrow.ReflexThrow = 2;  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: currentThrow.ReflexThrow = 2;  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: if (highWill)  	currentThrow.WillThrow = 2;  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: currentThrow.WillThrow = 2;  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: while (level <= 20) {  	if (level % 2 == 0) {  		if (highEndurance)  			currentThrow.EnduranceThrow++;  		if (highReflex)  			currentThrow.ReflexThrow++;  		if (highWill)  			currentThrow.WillThrow++;  	}  	if (level % 3 == 0) {  		if (!highEndurance)  			currentThrow.EnduranceThrow++;  		if (!highReflex)  			currentThrow.ReflexThrow++;  		if (!highWill)  			currentThrow.WillThrow++;  	}  	dict [level] = new Throw () {  		EnduranceThrow = currentThrow.EnduranceThrow'  		ReflexThrow = currentThrow.ReflexThrow'  		WillThrow = currentThrow.WillThrow  	};  	level++;  }  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: while (level <= 20) {  	if (level % 2 == 0) {  		if (highEndurance)  			currentThrow.EnduranceThrow++;  		if (highReflex)  			currentThrow.ReflexThrow++;  		if (highWill)  			currentThrow.WillThrow++;  	}  	if (level % 3 == 0) {  		if (!highEndurance)  			currentThrow.EnduranceThrow++;  		if (!highReflex)  			currentThrow.ReflexThrow++;  		if (!highWill)  			currentThrow.WillThrow++;  	}  	dict [level] = new Throw () {  		EnduranceThrow = currentThrow.EnduranceThrow'  		ReflexThrow = currentThrow.ReflexThrow'  		WillThrow = currentThrow.WillThrow  	};  	level++;  }  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: while (level <= 20) {  	if (level % 2 == 0) {  		if (highEndurance)  			currentThrow.EnduranceThrow++;  		if (highReflex)  			currentThrow.ReflexThrow++;  		if (highWill)  			currentThrow.WillThrow++;  	}  	if (level % 3 == 0) {  		if (!highEndurance)  			currentThrow.EnduranceThrow++;  		if (!highReflex)  			currentThrow.ReflexThrow++;  		if (!highWill)  			currentThrow.WillThrow++;  	}  	dict [level] = new Throw () {  		EnduranceThrow = currentThrow.EnduranceThrow'  		ReflexThrow = currentThrow.ReflexThrow'  		WillThrow = currentThrow.WillThrow  	};  	level++;  }  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: if (level % 2 == 0) {  	if (highEndurance)  		currentThrow.EnduranceThrow++;  	if (highReflex)  		currentThrow.ReflexThrow++;  	if (highWill)  		currentThrow.WillThrow++;  }  
Magic Number,DnDHelper.Domain,Rules,C:\repos\macper_dndhelper\DnDHelper.Domain\Rules.cs,GetThrowTable,The following statement contains a magic number: if (level % 3 == 0) {  	if (!highEndurance)  		currentThrow.EnduranceThrow++;  	if (!highReflex)  		currentThrow.ReflexThrow++;  	if (!highWill)  		currentThrow.WillThrow++;  }  
Magic Number,DnDHelper.Domain,Stats,C:\repos\macper_dndhelper\DnDHelper.Domain\Stats.cs,Stats,The following statement contains a magic number: Strength = Dexterity = Constitution = Wisdom = Inteligence = Charisma = 10;  
Magic Number,DnDHelper.Domain,Stats,C:\repos\macper_dndhelper\DnDHelper.Domain\Stats.cs,Stats,The following statement contains a magic number: Speed = 9;  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: try {  	var repos = ServiceContainer.GetInstance<RepositorySet> ();  	var service = ServiceContainer.GetInstance<IUpdateService> ();  	var serializer = ServiceContainer.GetInstance<IEntitySerializer> ();  	var syncTime = DateTime.Now.Ticks;  	foreach (var repo in repos.GetAll ()) {  		var elements = repo.GetElements ().OrderBy (e => e.Name).ToList ();  		var counter = 0;  		var thisElements = elements.Skip (counter).Take (20);  		while (thisElements.Count () > 0) {  			var request = new SyncRequest () {  				SyncTime = syncTime  			};  			request.Updates = thisElements.Select (t => new EntityUpdateInfo {  				Id = t.Id.Value'  				UpdateInsert = true'  				LastChange = syncTime'  				RepositoryName = repo.Name'  				Content = serializer.Serialize (t)  			});  			Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  			var response = service.Synchronize (request);  			if (!response.Success) {  				throw new ApplicationException ("Error during sync: " + response.Error);  			}  			counter += 20;  			thisElements = elements.Skip (counter).Take (20);  		}  	}  }  catch (Exception exc) {  	return OperationResult.Error (exc.Message);  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: try {  	var repos = ServiceContainer.GetInstance<RepositorySet> ();  	var service = ServiceContainer.GetInstance<IUpdateService> ();  	var serializer = ServiceContainer.GetInstance<IEntitySerializer> ();  	var syncTime = DateTime.Now.Ticks;  	foreach (var repo in repos.GetAll ()) {  		var elements = repo.GetElements ().OrderBy (e => e.Name).ToList ();  		var counter = 0;  		var thisElements = elements.Skip (counter).Take (20);  		while (thisElements.Count () > 0) {  			var request = new SyncRequest () {  				SyncTime = syncTime  			};  			request.Updates = thisElements.Select (t => new EntityUpdateInfo {  				Id = t.Id.Value'  				UpdateInsert = true'  				LastChange = syncTime'  				RepositoryName = repo.Name'  				Content = serializer.Serialize (t)  			});  			Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  			var response = service.Synchronize (request);  			if (!response.Success) {  				throw new ApplicationException ("Error during sync: " + response.Error);  			}  			counter += 20;  			thisElements = elements.Skip (counter).Take (20);  		}  	}  }  catch (Exception exc) {  	return OperationResult.Error (exc.Message);  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: try {  	var repos = ServiceContainer.GetInstance<RepositorySet> ();  	var service = ServiceContainer.GetInstance<IUpdateService> ();  	var serializer = ServiceContainer.GetInstance<IEntitySerializer> ();  	var syncTime = DateTime.Now.Ticks;  	foreach (var repo in repos.GetAll ()) {  		var elements = repo.GetElements ().OrderBy (e => e.Name).ToList ();  		var counter = 0;  		var thisElements = elements.Skip (counter).Take (20);  		while (thisElements.Count () > 0) {  			var request = new SyncRequest () {  				SyncTime = syncTime  			};  			request.Updates = thisElements.Select (t => new EntityUpdateInfo {  				Id = t.Id.Value'  				UpdateInsert = true'  				LastChange = syncTime'  				RepositoryName = repo.Name'  				Content = serializer.Serialize (t)  			});  			Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  			var response = service.Synchronize (request);  			if (!response.Success) {  				throw new ApplicationException ("Error during sync: " + response.Error);  			}  			counter += 20;  			thisElements = elements.Skip (counter).Take (20);  		}  	}  }  catch (Exception exc) {  	return OperationResult.Error (exc.Message);  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: foreach (var repo in repos.GetAll ()) {  	var elements = repo.GetElements ().OrderBy (e => e.Name).ToList ();  	var counter = 0;  	var thisElements = elements.Skip (counter).Take (20);  	while (thisElements.Count () > 0) {  		var request = new SyncRequest () {  			SyncTime = syncTime  		};  		request.Updates = thisElements.Select (t => new EntityUpdateInfo {  			Id = t.Id.Value'  			UpdateInsert = true'  			LastChange = syncTime'  			RepositoryName = repo.Name'  			Content = serializer.Serialize (t)  		});  		Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  		var response = service.Synchronize (request);  		if (!response.Success) {  			throw new ApplicationException ("Error during sync: " + response.Error);  		}  		counter += 20;  		thisElements = elements.Skip (counter).Take (20);  	}  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: foreach (var repo in repos.GetAll ()) {  	var elements = repo.GetElements ().OrderBy (e => e.Name).ToList ();  	var counter = 0;  	var thisElements = elements.Skip (counter).Take (20);  	while (thisElements.Count () > 0) {  		var request = new SyncRequest () {  			SyncTime = syncTime  		};  		request.Updates = thisElements.Select (t => new EntityUpdateInfo {  			Id = t.Id.Value'  			UpdateInsert = true'  			LastChange = syncTime'  			RepositoryName = repo.Name'  			Content = serializer.Serialize (t)  		});  		Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  		var response = service.Synchronize (request);  		if (!response.Success) {  			throw new ApplicationException ("Error during sync: " + response.Error);  		}  		counter += 20;  		thisElements = elements.Skip (counter).Take (20);  	}  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: foreach (var repo in repos.GetAll ()) {  	var elements = repo.GetElements ().OrderBy (e => e.Name).ToList ();  	var counter = 0;  	var thisElements = elements.Skip (counter).Take (20);  	while (thisElements.Count () > 0) {  		var request = new SyncRequest () {  			SyncTime = syncTime  		};  		request.Updates = thisElements.Select (t => new EntityUpdateInfo {  			Id = t.Id.Value'  			UpdateInsert = true'  			LastChange = syncTime'  			RepositoryName = repo.Name'  			Content = serializer.Serialize (t)  		});  		Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  		var response = service.Synchronize (request);  		if (!response.Success) {  			throw new ApplicationException ("Error during sync: " + response.Error);  		}  		counter += 20;  		thisElements = elements.Skip (counter).Take (20);  	}  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: while (thisElements.Count () > 0) {  	var request = new SyncRequest () {  		SyncTime = syncTime  	};  	request.Updates = thisElements.Select (t => new EntityUpdateInfo {  		Id = t.Id.Value'  		UpdateInsert = true'  		LastChange = syncTime'  		RepositoryName = repo.Name'  		Content = serializer.Serialize (t)  	});  	Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  	var response = service.Synchronize (request);  	if (!response.Success) {  		throw new ApplicationException ("Error during sync: " + response.Error);  	}  	counter += 20;  	thisElements = elements.Skip (counter).Take (20);  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: while (thisElements.Count () > 0) {  	var request = new SyncRequest () {  		SyncTime = syncTime  	};  	request.Updates = thisElements.Select (t => new EntityUpdateInfo {  		Id = t.Id.Value'  		UpdateInsert = true'  		LastChange = syncTime'  		RepositoryName = repo.Name'  		Content = serializer.Serialize (t)  	});  	Logger.Debug (string.Format ("Sending {0} elements of {1}..."' request.Updates.Count ()' repo.Name));  	var response = service.Synchronize (request);  	if (!response.Success) {  		throw new ApplicationException ("Error during sync: " + response.Error);  	}  	counter += 20;  	thisElements = elements.Skip (counter).Take (20);  }  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: counter += 20;  
Magic Number,DnDHelper.Domain,UpdateClient,C:\repos\macper_dndhelper\DnDHelper.Domain\UpdateClient.cs,InitialPopulate,The following statement contains a magic number: thisElements = elements.Skip (counter).Take (20);  
Missing Default,DnDHelper.Domain,CharacterController,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterController.cs,IncreaseMainSkillInternal,The following switch statement is missing a default case: switch (skill) {  case BaseAttribute.Charisma:  	stats.Charisma += value;  	break;  case BaseAttribute.Constitution:  	stats.Constitution += value;  	break;  case BaseAttribute.Dexterity:  	stats.Dexterity += value;  	break;  case BaseAttribute.Inteligence:  	stats.Inteligence += value;  	break;  case BaseAttribute.Strength:  	stats.Strength += value;  	break;  case BaseAttribute.Wisdom:  	stats.Wisdom += value;  	break;  }  
Missing Default,DnDHelper.Domain,CharacterCalculator,C:\repos\macper_dndhelper\DnDHelper.Domain\CharacterCalculator.cs,ApplySkillBonus,The following switch statement is missing a default case: switch (skill.Definition.BonusProperty) {  case BaseAttribute.Charisma:  	skill.Value += Rules.GetStandardBonus (character.CurrentStats.Charisma);  	break;  case BaseAttribute.Constitution:  	skill.Value += Rules.GetStandardBonus (character.CurrentStats.Constitution);  	break;  case BaseAttribute.Dexterity:  	skill.Value += Rules.GetStandardBonus (character.CurrentStats.Dexterity);  	break;  case BaseAttribute.Inteligence:  	skill.Value += Rules.GetStandardBonus (character.CurrentStats.Inteligence);  	break;  case BaseAttribute.Strength:  	skill.Value += Rules.GetStandardBonus (character.CurrentStats.Strength);  	break;  case BaseAttribute.Wisdom:  	skill.Value += Rules.GetStandardBonus (character.CurrentStats.Wisdom);  	break;  }  
Missing Default,DnDHelper.Domain,Script,C:\repos\macper_dndhelper\DnDHelper.Domain\Script.cs,Script,The following switch statement is missing a default case: switch (ScriptContext) {  case Domain.ScriptContext.Atut:  	Type = typeof(Action<Character' RepositorySet' Atut>);  	break;  case Domain.ScriptContext.Race:  	Type = typeof(Action<Character' RepositorySet' Race>);  	break;  case Domain.ScriptContext.Custom:  	Type = typeof(Action<Character' object>);  	break;  case Domain.ScriptContext.Effect:  	Type = typeof(Action<Character' RepositorySet' Effect>);  	break;  case Domain.ScriptContext.Item:  	Type = typeof(Action<Character' RepositorySet' Item>);  	break;  case Domain.ScriptContext.Class:  	Type = typeof(Action<Character' RepositorySet>);  	break;  }  
Missing Default,DnDHelper.Domain,SpellDefinition,C:\repos\macper_dndhelper\DnDHelper.Domain\Spell.cs,ConvertToString,The following switch statement is missing a default case: switch (shool) {  case SpellShool.Abjuration:  	return "Odrzucanie";  case SpellShool.Conjuration:  	return "Wywoływanie";  case SpellShool.Divination:  	return "Poznanie";  case SpellShool.Enchantment:  	return "Uroki";  case SpellShool.Illusion:  	return "Iluzje";  case SpellShool.Necromancy:  	return "Nekromancja";  case SpellShool.Transmutation:  	return "Przemiany";  case SpellShool.Summoning:  	return "Przywoływanie";  case SpellShool.Other:  	return "Inna";  }  
Missing Default,DnDHelper.Domain,SpellDefinition,C:\repos\macper_dndhelper\DnDHelper.Domain\Spell.cs,ConvertToString,The following switch statement is missing a default case: switch (range) {  case SpellRange.Close:  	return "Bliski";  case SpellRange.Infinite:  	return "Nieskończony";  case SpellRange.Long:  	return "Daleki";  case SpellRange.Medium:  	return "Średni";  case SpellRange.Special:  	return "Specjalny";  case SpellRange.Touch:  	return "Dotyk";  case SpellRange.OnlyCaster:  	return "Tylko na siebie";  }  
Missing Default,DnDHelper.Domain,Throw,C:\repos\macper_dndhelper\DnDHelper.Domain\Throw.cs,Change,The following switch statement is missing a default case: switch (type) {  case ThrowType.Will:  	WillThrow = value;  	break;  case ThrowType.Reflex:  	ReflexThrow = value;  	break;  case ThrowType.Endurance:  	EnduranceThrow = value;  	break;  }  
Missing Default,DnDHelper.Domain.Bonuses,ThrowBonus,C:\repos\macper_dndhelper\DnDHelper.Domain\Bonuses\ThrowBonus.cs,IsThrowType,The following switch statement is missing a default case: switch (throwType) {  case ThrowType.Will:  	return BonusType.WillThrow != 0;  case ThrowType.Reflex:  	return BonusType.ReflexThrow != 0;  case ThrowType.Endurance:  	return BonusType.EnduranceThrow != 0;  }  
