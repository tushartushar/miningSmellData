Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateStaticSettingsClass,Cyclomatic complexity of the method is 8
Complex Method,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateAzureFile,Cyclomatic complexity of the method is 16
Complex Method,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetDocument,Cyclomatic complexity of the method is 19
Complex Method,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetSettingsClassSettingsFromXml,Cyclomatic complexity of the method is 9
Complex Method,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,Cyclomatic complexity of the method is 12
Complex Method,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateEnvironmentSettings,Cyclomatic complexity of the method is 8
Complex Method,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetEnvironmentValueFromSetting,Cyclomatic complexity of the method is 21
Long Parameter List,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,BuildStaticConstructor,The method has 6 parameters.
Long Parameter List,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateAzureFile,The method has 7 parameters.
Long Parameter List,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,SaveDefinitionSettings,The method has 5 parameters.
Long Parameter List,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,SaveActualSettings,The method has 7 parameters.
Long Parameter List,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetDocument,The method has 5 parameters.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GenerateSettings,The length of the statement  "		throw new ArgumentNullException ("No file path specified' either set the GlobalSettingsFileLocation setting in the config file or pass it in as an argument\r\ne.g. SetGen.exe GlobalSettingsFileLocation=Resources\\GlobalSettings.xml"); " is 234.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GenerateSettings,The length of the statement  "		throw new FileNotFoundException (string.Format ("Global settings File not found at path \"{0}\""' Path.GetFullPath (filePath))' filePath); " is 138.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetEnvironmentMappings,The length of the statement  "	return document.Descendants ("environmentMappings").Descendants ("map").Select (m => new EnvironmentMapping (GetAttribute (m' "name"' true)' GetAttribute (m' "target"' true))); " is 176.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateStaticSettingsClass,The length of the statement  "		throw new ArgumentException ("in order to use the static class' you must also include the <settingsClass> node in your xml"); " is 125.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateStaticSettingsClass,The length of the statement  "	stringBuilder.AppendLineFormat ("{0}public static ISettingsSource Settings {{ get; set; }}"' doubleIndentation).AppendLine (); " is 126.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateStaticSettingsClass,The length of the statement  "	BuildStaticConstructor (doubleIndentation' stringBuilder' className' trippleIndentation' quadrupleIndentation' staticClassSettings.ExcludeAzure); " is 145.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateStaticSettingsClass,The length of the statement  "	stringBuilder.AppendLineFormat ("{0}public static DeploymentEnvironment Environment {{ get {{ return Settings.Environment; }} }}"' doubleIndentation).AppendLine (); " is 164.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetAppSettingProperty,The length of the statement  "	stringBuilder.AppendLineFormat ("{0}public static {1} {2} {{ get {{ return GetSetting({3}.{2}); }} }}"' doubleIndentation' xmlAppSetting.Type' escapedSettingName' settingsClassSettings.Name.Replace (".cs"' "")); " is 211.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,BuildUntypedGetSetting,The length of the statement  "	stringBuilder.AppendLineFormat ("{0}//dont make this public' it should only be used internally' otherwise you will have magic strings all over your app"' doubleIndentation); " is 173.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,BuildStaticConstructor,The length of the statement  "		stringBuilder.AppendLineFormat ("{0}Settings = useAzureSettings ? (ISettingsSource) new AzureSettingsSource() : new AppSettingsSettingsSource();"' trippleIndentation); " is 167.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateAzureFile,The length of the statement  "	/*Remove existing settings for this project*/XName settingQualifiedName = XName.Get ("Setting"' xNamespace.NamespaceName); " is 122.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateAzureFile,The length of the statement  "		SaveActualSettings (document' appSettings' configSettingsNodes' filePath' settingQualifiedName' project' cloudMapping.Name); " is 124.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "	stringBuilder.AppendLineFormat ("{0}public static partial class {1}"' indentation' settingsClass.Name.Replace (".cs"' "").CapitaliseFirstLetter ()); " is 148.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "			stringBuilder.AppendLineFormat ("{0}public static string {1} = \"{2}\";"' doubleIndentation' escapedSettingName' xmlAppSetting.Name); " is 133.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "				stringBuilder.AppendLineFormat ("{0}public static Setting<{1}> {2} = new Setting<{1}>(x => new {1}(x.GetSetting(\"{3}\").Split(new[]{{'{4}'}}'StringSplitOptions.RemoveEmptyEntries)));"' doubleIndentation' xmlAppSetting.Type' escapedSettingName' xmlAppSetting.Name' xmlAppSetting.Delimiter); " is 290.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "					stringBuilder.AppendLineFormat ("{0}public static Setting<{1}> {2} = new Setting<{1}>(x => {{"' doubleIndentation' xmlAppSetting.Type' escapedSettingName); " is 155.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "					stringBuilder.AppendLineFormat ("{0}string[] values = x.GetSetting(\"{1}\").Split(new[]{{'{2}'}}'StringSplitOptions.RemoveEmptyEntries);"' trippleIndentation' xmlAppSetting.Name' xmlAppSetting.Delimiter); " is 204.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "					stringBuilder.AppendLineFormat ("{0}if (value.Equals(\"null\"'StringComparison.OrdinalIgnoreCase))"' quadrupleIndentation); " is 123.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "					stringBuilder.AppendLineFormat ("{0}throw new ArgumentException(string.Format(\"Value '{{0}}' could not be converted to type '{1}'\"'value));"' quadrupleIndentation' xmlAppSetting.Type); " is 186.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "					stringBuilder.AppendLineFormat ("{0}public static Setting<{1}> {2} = new Setting<{1}>(x => new {1}(x.GetSetting(\"{3}\").Split(new[]{{'{4}'}}'StringSplitOptions.RemoveEmptyEntries).Select({5}.Parse)));"' doubleIndentation' xmlAppSetting.Type' escapedSettingName' xmlAppSetting.Name' xmlAppSetting.Delimiter' innerType); " is 319.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "				stringBuilder.AppendLineFormat ("{0}public static Setting<{1}> {2} = new Setting<{1}>(x => {{"' doubleIndentation' xmlAppSetting.Type' escapedSettingName); " is 155.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "				stringBuilder.AppendLineFormat ("{0}if (value.Equals(\"null\"'StringComparison.OrdinalIgnoreCase))"' trippleIndentation); " is 121.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "				stringBuilder.AppendLineFormat ("{0}throw new ArgumentException(string.Format(\"Value '{{0}}' could not be converted to type '{1}'\"'value));"' trippleIndentation' xmlAppSetting.Type); " is 184.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateSettingsClass,The length of the statement  "				stringBuilder.AppendLineFormat ("{0}public static Setting<{1}> {2} = new Setting<{1}>(x => {1}.Parse(x.GetSetting(\"{3}\")));"' doubleIndentation' xmlAppSetting.Type' escapedSettingName' xmlAppSetting.Name); " is 207.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateEnvironmentSettings,The length of the statement  "				writers.Add (new NamedXmlTextWriter (string.Format ("{0}\\{1}\\Settings.{2}.Config"' path' project.ProjectName' environment)' System.Text.Encoding.UTF8' project.ProjectName' (Environment)environment)); " is 201.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateEnvironmentSettings,The length of the statement  "				writers.Add (new NamedXmlTextWriter (string.Format ("{0}\\{1}\\Settings.{2}.Config"' path' project.ProjectName' mapping.Name)' System.Text.Encoding.UTF8' project.ProjectName' (Environment)Enum.Parse (typeof(Environment)' "Live")) { " is 231.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetAutoGenValue,The length of the statement  "		throw new ArgumentException (string.Format ("Value \"{0}\" for attribute autogen in node <key> could not be converted to a bool"' autoGenString)); " is 146.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetAzureExcludeValue,The length of the statement  "		throw new ArgumentException (string.Format ("Value \"{0}\" for attribute azureExclude in node <key> could not be converted to a bool"' azureExcludeString)); " is 156.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetAzureDefinitionExcludeValue,The length of the statement  "		throw new ArgumentException (string.Format ("Value \"{0}\" for attribute azureDefinitionExclude in node <key> could not be converted to a bool"' azureExcludeString)); " is 166.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetAzureMappingsFromXml,The length of the statement  "	return document.Descendants ("mappings").Descendants ("map").Select (m => new AzureMapping (GetAttribute (m' "name"' true)' GetAttribute (m' "target"' true))); " is 159.
Long Statement,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,GetAttribute,The length of the statement  "	throw new XmlSchemaException (string.Format ("A <{0}> node is missing the required \"{1}\" attribute at line {2} position {3}"' element.Name' attributeName' lineNumber' linePosition)' null' lineNumber' linePosition); " is 216.
Long Statement,SetGen,Program,C:\repos\entelect_SetGen\src\Program.cs,SetWorkingDirectory,The length of the statement  "		workingDirectory = Path.GetDirectoryName (Assembly.GetAssembly (typeof(SettingsGenerator)).CodeBase).Replace ("file:\\"' ""); " is 125.
Magic Number,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateEnvironmentSettings,The following statement contains a magic number: try {  	#if !DEBUG  	                string currentDirectory = System.Reflection.Assembly.GetExecutingAssembly().Location; #else  	string currentDirectory = @"C:\Source\EntelectLibrary\SetGen\src\SetGen\";  	#endif  	currentDirectory = Path.GetDirectoryName (currentDirectory);  	//Create all the text writes  	foreach (Project project in projects) {  		string path = project.ProjectDirectory;  		if (!path.Contains (":\\"))  			path = Path.Combine (currentDirectory' path);  		//Write the default environments files  		foreach (var environment in Enum.GetValues (typeof(Environment))) {  			writers.Add (new NamedXmlTextWriter (string.Format ("{0}\\{1}\\Settings.{2}.Config"' path' project.ProjectName' environment)' System.Text.Encoding.UTF8' project.ProjectName' (Environment)environment));  		}  		foreach (var mapping in appSettings.First ().OtherEnvironments) {  			writers.Add (new NamedXmlTextWriter (string.Format ("{0}\\{1}\\Settings.{2}.Config"' path' project.ProjectName' mapping.Name)' System.Text.Encoding.UTF8' project.ProjectName' (Environment)Enum.Parse (typeof(Environment)' "Live")) {  				MappedFrom = mapping.Name  			});  		}  	}  	foreach (var writer in writers) {  		writer.Formatting = Formatting.Indented;  		writer.Indentation = 2;  		writer.WriteStartDocument ();  		writer.WriteStartElement ("appSettings");  		foreach (var xmlAppSetting in appSettings) {  			var environment = string.IsNullOrEmpty (writer.MappedFrom) ? writer.Environment.ToString () : writer.MappedFrom;  			string value = GetProjectEnvironmentSettingValue (xmlAppSetting' writer.ProjectName' environment);  			if (value != null) {  				writer.WriteStartElement ("add");  				writer.WriteAttributeString ("key"' xmlAppSetting.Name);  				writer.WriteAttributeString ("value"' value);  				writer.WriteEndElement ();  			}  		}  		writer.WriteEndElement ();  		writer.WriteEndDocument ();  	}  }  finally {  	foreach (var xmlTextWriter in writers) {  		xmlTextWriter.Close ();  	}  }  
Magic Number,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateEnvironmentSettings,The following statement contains a magic number: foreach (var writer in writers) {  	writer.Formatting = Formatting.Indented;  	writer.Indentation = 2;  	writer.WriteStartDocument ();  	writer.WriteStartElement ("appSettings");  	foreach (var xmlAppSetting in appSettings) {  		var environment = string.IsNullOrEmpty (writer.MappedFrom) ? writer.Environment.ToString () : writer.MappedFrom;  		string value = GetProjectEnvironmentSettingValue (xmlAppSetting' writer.ProjectName' environment);  		if (value != null) {  			writer.WriteStartElement ("add");  			writer.WriteAttributeString ("key"' xmlAppSetting.Name);  			writer.WriteAttributeString ("value"' value);  			writer.WriteEndElement ();  		}  	}  	writer.WriteEndElement ();  	writer.WriteEndDocument ();  }  
Magic Number,SetGen,SettingsGenerator,C:\repos\entelect_SetGen\src\SettingsGenerator.cs,CreateEnvironmentSettings,The following statement contains a magic number: writer.Indentation = 2;  
Magic Number,SetGen,Program,C:\repos\entelect_SetGen\src\Program.cs,ProcessArgs,The following statement contains a magic number: foreach (string argument in args) {  	string key' value;  	string[] splitString = argument.Split ('=');  	if (splitString.Length != 2)  		throw new ArgumentException (string.Format ("Argument does not have the correct format:{0}"' argument));  	key = splitString [0];  	value = splitString [1].Replace ("\""' "");  	ArgumentsEnum selectedArgumentEnum;  	if (!ArgumentsEnum.TryParse (key' true' out selectedArgumentEnum)) {  		throw new ArgumentException (string.Format ("Argument is not of a known type:{0}"' argument));  	}  	arguments.Add (selectedArgumentEnum' value);  }  
Magic Number,SetGen,Program,C:\repos\entelect_SetGen\src\Program.cs,ProcessArgs,The following statement contains a magic number: if (splitString.Length != 2)  	throw new ArgumentException (string.Format ("Argument does not have the correct format:{0}"' argument));  
