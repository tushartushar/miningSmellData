Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MatroskaTagger,CustomMovieTag,C:\repos\chefkoch_MkvTagger\Source\CustomMovieTag.xaml.cs,OpenWebsite,Cyclomatic complexity of the method is 12
Complex Method,MatroskaTagger,CustomMusicVideoTag,C:\repos\chefkoch_MkvTagger\Source\CustomMusicVideoTag.xaml.cs,UpdatePreview,Cyclomatic complexity of the method is 11
Complex Method,MatroskaTagger.DataSources,MPTVSeriesImporter,C:\repos\chefkoch_MkvTagger\Source\DataSources\MPTVSeriesImporter.cs,GetEpisodeInfo,Cyclomatic complexity of the method is 20
Long Parameter List,MatroskaTagger.DataSources,TheMovieDbImporter,C:\repos\chefkoch_MkvTagger\Source\DataSources\TheMovieDbImporter.cs,CopyMovieInfos,The method has 8 parameters.
Long Parameter List,MatroskaTagger.DataSources,TheTvDbImporter,C:\repos\chefkoch_MkvTagger\Source\DataSources\TheTvDbImporter.cs,CopySeriesInfos,The method has 5 parameters.
Long Statement,MatroskaTagger,CustomSeriesTag,C:\repos\chefkoch_MkvTagger\Source\CustomSeriesTag.xaml.cs,SaveButton_OnClick,The length of the statement  "	MessageBoxResult result = MessageBox.Show ("Do you really want to overwrite the old tags with the new ones?"' "Overwrite tags"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.No); " is 199.
Long Statement,MatroskaTagger,CustomMovieTag,C:\repos\chefkoch_MkvTagger\Source\CustomMovieTag.xaml.cs,SaveButton_OnClick,The length of the statement  "	MessageBoxResult result = MessageBox.Show ("Do you really want to overwrite the old tags with the new ones?"' "Overwrite tags"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.No); " is 199.
Long Statement,MatroskaTagger,CustomMusicVideoTag,C:\repos\chefkoch_MkvTagger\Source\CustomMusicVideoTag.xaml.cs,SaveButton_OnClick,The length of the statement  "	MessageBoxResult result = MessageBox.Show ("Do you really want to overwrite the old tags with the new ones?"' "Overwrite tags"' MessageBoxButton.YesNo' MessageBoxImage.Question' MessageBoxResult.No); " is 199.
Long Statement,MatroskaTagger,CustomMusicVideoTag,C:\repos\chefkoch_MkvTagger\Source\CustomMusicVideoTag.xaml.cs,RenameButton_OnClick,The length of the statement  "		newFile = String.Format ("{0} - {1} ({3}){2}"' originalTag.MusicVideo.TrackArtist' originalTag.MusicVideo.TrackTitle' ext' originalTag.MusicVideo.TrackReleaseDate); " is 164.
Long Statement,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The length of the statement  "				worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode))); " is 169.
Long Statement,MatroskaTagger.DataSources,TheTvDbImporter,C:\repos\chefkoch_MkvTagger\Source\DataSources\TheTvDbImporter.cs,UpdateTags,The length of the statement  "	if (!int.TryParse (seriesTag.SeasonIndex' out iSeason) || !int.TryParse (seriesTag.EpisodeIndexList.FirstOrDefault ()' out iEpisode)) { " is 135.
Long Statement,MatroskaTagger.DataSources,TheTvDbImporter,C:\repos\chefkoch_MkvTagger\Source\DataSources\TheTvDbImporter.cs,CopySeriesInfos,The length of the statement  "	TvdbEpisode ep = series.Episodes.FirstOrDefault (e => e.SeasonNumber == seasonIndex && e.EpisodeNumber == episodeIndex); " is 120.
Long Statement,MatroskaTagger.DataSources,MPTVSeriesImporter,C:\repos\chefkoch_MkvTagger\Source\DataSources\MPTVSeriesImporter.cs,GetEpisodeInfo,The length of the statement  "		command.CommandText = String.Format ("SELECT * FROM local_episodes WHERE EpisodeFilename='{0}'"' filename.Replace ("'"' "''")); " is 127.
Long Statement,Matroska,SeriesTag,C:\repos\chefkoch_MkvTagger\Source\Matroska\Helpers\SeriesTag.cs,ToString,The length of the statement  "	return String.Format ("{0}|{1}|{2}|{3}|{4}"' SeriesName' IMDB_ID' SeasonIndex' string.Join ("|"' EpisodeIndexList)' EpisodeFirstAired); " is 135.
Empty Catch Block,MatroskaTagger,Configuration,C:\repos\chefkoch_MkvTagger\Source\Models\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,MatroskaTagger,Configuration,C:\repos\chefkoch_MkvTagger\Source\Models\Configuration.cs,Load,The method has an empty catch block.
Empty Catch Block,MatroskaTagger,ConfigurationViewModel,C:\repos\chefkoch_MkvTagger\Source\ViewModels\ConfigurationViewModel.cs,Load,The method has an empty catch block.
Empty Catch Block,MatroskaTagger,ConfigurationViewModel,C:\repos\chefkoch_MkvTagger\Source\ViewModels\ConfigurationViewModel.cs,Load,The method has an empty catch block.
Empty Catch Block,MatroskaTagger,CustomMovieTag,C:\repos\chefkoch_MkvTagger\Source\CustomMovieTag.xaml.cs,OpenWebsite,The method has an empty catch block.
Empty Catch Block,Matroska,MatroskaTags,C:\repos\chefkoch_MkvTagger\Source\Matroska\MatroskaTags.cs,GetValueCollection,The method has an empty catch block.
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,backgroundWorker_RunWorkerCompleted,The following statement contains a magic number: progressBar.Value = 100;  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteXmlTags,The following statement contains a magic number: foreach (var file in filteredfileNames) {  	if (worker.CancellationPending) {  		e.Cancel = true;  		break;  	}  	current++;  	worker.ReportProgress (100 * current / total);  	// Check only video files  	if (!SupportedFiles.IsFileSupportedVideo (file))  		continue;  	// build xml file name  	string xmlFile = GetXmlFilename (file);  	// init document  	MatroskaTags tag = new MatroskaTags ();  	// Read MKV tags' if existing should be reused  	if (App.Config.BasedOnExistingTags)  		tag = MatroskaLoader.ReadTag (file);  	// update tags from MP-TVSeries  	tag.Series = importer.UpdateTags (tag.Series' file);  	string logText = File.Exists (xmlFile) ? "XML updated: " : "XML created: ";  	MatroskaLoader.WriteTagToXML (tag' xmlFile);  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (xmlFile' logText));  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteXmlTags,The following statement contains a magic number: foreach (var file in filteredfileNames) {  	if (worker.CancellationPending) {  		e.Cancel = true;  		break;  	}  	current++;  	worker.ReportProgress (100 * current / total);  	// Check only video files  	if (!SupportedFiles.IsFileSupportedVideo (file))  		continue;  	// build xml file name  	string xmlFile = GetXmlFilename (file);  	// init document  	MatroskaTags tag = new MatroskaTags ();  	// Read MKV tags' if existing should be reused  	if (App.Config.BasedOnExistingTags)  		tag = MatroskaLoader.ReadTag (file);  	// update tags from MP-TVSeries  	tag.Series = importer.UpdateTags (tag.Series' file);  	string logText = File.Exists (xmlFile) ? "XML updated: " : "XML created: ";  	MatroskaLoader.WriteTagToXML (tag' xmlFile);  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (xmlFile' logText));  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteXmlTags,The following statement contains a magic number: worker.ReportProgress (100 * current / total);  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteXmlTags,The following statement contains a magic number: worker.ReportProgress (100 * current / total' new FileBasedLogEntry (xmlFile' logText));  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: foreach (FileInfo mkvFile in mkvFiles) {  	string file = mkvFile.FullName;  	if (worker.CancellationPending) {  		e.Cancel = true;  		break;  	}  	current++;  	worker.ReportProgress (100 * current / total);  	// init document  	MatroskaTags tag = new MatroskaTags ();  	// Read MKV tags' if existing should be reused  	if (App.Config.BasedOnExistingTags)  		tag = MatroskaLoader.ReadTag (file);  	// update tags from MP-TVSeries  	tag.Series = importer.UpdateTags (tag.Series' file);  	try {  		int exitCode = MatroskaLoader.WriteTagToMatroska (mkvFile.FullName' tag);  		if (exitCode == 0) {  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  			if (args.DeleteXmlAfterMkvUpdate) {  				// build xml file name  				string xmlFile = GetXmlFilename (file);  				File.Delete (xmlFile);  			}  		}  		else  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  	}  	catch (Exception ex) {  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  	}  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: foreach (FileInfo mkvFile in mkvFiles) {  	string file = mkvFile.FullName;  	if (worker.CancellationPending) {  		e.Cancel = true;  		break;  	}  	current++;  	worker.ReportProgress (100 * current / total);  	// init document  	MatroskaTags tag = new MatroskaTags ();  	// Read MKV tags' if existing should be reused  	if (App.Config.BasedOnExistingTags)  		tag = MatroskaLoader.ReadTag (file);  	// update tags from MP-TVSeries  	tag.Series = importer.UpdateTags (tag.Series' file);  	try {  		int exitCode = MatroskaLoader.WriteTagToMatroska (mkvFile.FullName' tag);  		if (exitCode == 0) {  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  			if (args.DeleteXmlAfterMkvUpdate) {  				// build xml file name  				string xmlFile = GetXmlFilename (file);  				File.Delete (xmlFile);  			}  		}  		else  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  	}  	catch (Exception ex) {  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  	}  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: foreach (FileInfo mkvFile in mkvFiles) {  	string file = mkvFile.FullName;  	if (worker.CancellationPending) {  		e.Cancel = true;  		break;  	}  	current++;  	worker.ReportProgress (100 * current / total);  	// init document  	MatroskaTags tag = new MatroskaTags ();  	// Read MKV tags' if existing should be reused  	if (App.Config.BasedOnExistingTags)  		tag = MatroskaLoader.ReadTag (file);  	// update tags from MP-TVSeries  	tag.Series = importer.UpdateTags (tag.Series' file);  	try {  		int exitCode = MatroskaLoader.WriteTagToMatroska (mkvFile.FullName' tag);  		if (exitCode == 0) {  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  			if (args.DeleteXmlAfterMkvUpdate) {  				// build xml file name  				string xmlFile = GetXmlFilename (file);  				File.Delete (xmlFile);  			}  		}  		else  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  	}  	catch (Exception ex) {  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  	}  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: foreach (FileInfo mkvFile in mkvFiles) {  	string file = mkvFile.FullName;  	if (worker.CancellationPending) {  		e.Cancel = true;  		break;  	}  	current++;  	worker.ReportProgress (100 * current / total);  	// init document  	MatroskaTags tag = new MatroskaTags ();  	// Read MKV tags' if existing should be reused  	if (App.Config.BasedOnExistingTags)  		tag = MatroskaLoader.ReadTag (file);  	// update tags from MP-TVSeries  	tag.Series = importer.UpdateTags (tag.Series' file);  	try {  		int exitCode = MatroskaLoader.WriteTagToMatroska (mkvFile.FullName' tag);  		if (exitCode == 0) {  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  			if (args.DeleteXmlAfterMkvUpdate) {  				// build xml file name  				string xmlFile = GetXmlFilename (file);  				File.Delete (xmlFile);  			}  		}  		else  			worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  	}  	catch (Exception ex) {  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  	}  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: worker.ReportProgress (100 * current / total);  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: try {  	int exitCode = MatroskaLoader.WriteTagToMatroska (mkvFile.FullName' tag);  	if (exitCode == 0) {  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  		if (args.DeleteXmlAfterMkvUpdate) {  			// build xml file name  			string xmlFile = GetXmlFilename (file);  			File.Delete (xmlFile);  		}  	}  	else  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  }  catch (Exception ex) {  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: try {  	int exitCode = MatroskaLoader.WriteTagToMatroska (mkvFile.FullName' tag);  	if (exitCode == 0) {  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  		if (args.DeleteXmlAfterMkvUpdate) {  			// build xml file name  			string xmlFile = GetXmlFilename (file);  			File.Delete (xmlFile);  		}  	}  	else  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  }  catch (Exception ex) {  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: try {  	int exitCode = MatroskaLoader.WriteTagToMatroska (mkvFile.FullName' tag);  	if (exitCode == 0) {  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  		if (args.DeleteXmlAfterMkvUpdate) {  			// build xml file name  			string xmlFile = GetXmlFilename (file);  			File.Delete (xmlFile);  		}  	}  	else  		worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  }  catch (Exception ex) {  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  }  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: if (exitCode == 0) {  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  	if (args.DeleteXmlAfterMkvUpdate) {  		// build xml file name  		string xmlFile = GetXmlFilename (file);  		File.Delete (xmlFile);  	}  }  else  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: if (exitCode == 0) {  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  	if (args.DeleteXmlAfterMkvUpdate) {  		// build xml file name  		string xmlFile = GetXmlFilename (file);  		File.Delete (xmlFile);  	}  }  else  	worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' "MKV updated: "));  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' string.Format ("MKV updated with MKVPropEdit exit code = {0} file :"' exitCode)));  
Magic Number,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,WriteMkvTags,The following statement contains a magic number: worker.ReportProgress (100 * current / total' new FileBasedLogEntry (mkvFile.FullName' ex.Message));  
Missing Default,MatroskaTagger,MPTVSeries,C:\repos\chefkoch_MkvTagger\Source\MPTVSeries.xaml.cs,listBox_SelectionChanged,The following switch statement is missing a default case: switch (extension.ToLower ()) {  case ".xml":  case ".mkv":  	//todo: make it async  	MatroskaTags tags = MatroskaLoader.ReadTag (item.Filepath);  	textEditor.Text = MatroskaLoader.GetXML (tags);  	break;  }  
