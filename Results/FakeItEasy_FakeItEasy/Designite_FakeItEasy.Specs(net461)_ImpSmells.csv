Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,SpecifyReturnsAndAssignOutAndRefParameterForNonVoidDelegate,The method has 5 parameters. Parameters: subject' refValue' outValue' expectedResult' result
Long Parameter List,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingAStrictFakeToAMethod,The method has 5 parameters. Parameters: createFake' fakeDescription' fake' anotherFake' exception
Long Parameter List,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskFromSequence,The method has 5 parameters. Parameters: fake' task1' task2' task3' task4
Long Identifier,FakeItEasy.Specs,ClassWithLongSelfReferentialConstructor,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ClassWithLongSelfReferentialConstructor.cs,ClassWithLongSelfReferentialConstructor,The length of the parameter classWithLongSelfReferentialConstructor is 39.
Long Identifier,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfigureOverloadedIndexer,The length of the parameter wasFirstConfiguredBehaviorUsed is 30.
Long Identifier,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfigureOverloadedIndexer,The length of the parameter wasSecondConfiguredBehaviorUsed is 31.
Long Identifier,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,UseSuccessfulConstructor,The length of the parameter parameterListLengthsForAttemptedConstructors is 44.
Long Identifier,FakeItEasy.Specs,ClassWhosePreferredConstructorsThrow,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,,The length of the parameter numberOfTimesTwoParameterConstructorWasCalled is 45.
Long Identifier,FakeItEasy.Specs,ClassWhosePreferredConstructorsThrow,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,,The length of the parameter numberOfTimesParameterlessConstructorWasCalled is 46.
Long Identifier,FakeItEasy.Specs,ClassWhoseLongerConstructorThrows,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,,The length of the parameter numberOfTimesLongerConstructorWasCalled is 39.
Long Identifier,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedProperty,The length of the parameter firstGetResultForOriginalIndexes is 32.
Long Identifier,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedProperty,The length of the parameter firstGetResultForDifferentIndexes is 33.
Long Statement,FakeItEasy.Specs,AnyCallConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AnyCallConfigurationSpecs.cs,WithReturnType,The length of the statement  "                .x(() => A.CallTo(fake).Where(call => call.Method.Name == "Bar").WithReturnType<string>().Returns(returnValue = "hello world")); " is 128.
Long Statement,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgWrongSignature,The length of the statement  "                            .WithMessage("The faked method has the signature (System.Int32)' but when arguments match was used with (System.Int64).")); " is 123.
Long Statement,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsWrongSignature,The length of the statement  "                            .WithMessage("The faked method has the signature (System.Int32' System.String)' but when arguments match was used with (System.Int64' System.DateTime).")); " is 155.
Long Statement,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsWrongSignature,The length of the statement  "                            .WithMessage("The faked method has the signature (System.Int32' System.String' System.Boolean)' but when arguments match was used with (System.Int64' System.DateTime' System.Type).")); " is 184.
Long Statement,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsWrongSignature,The length of the statement  "                            .WithMessage("The faked method has the signature (System.Int32' System.String' System.Boolean' System.Object)' but when arguments match was used with (System.Int64' System.DateTime' System.Type' System.Char).")); " is 212.
Long Statement,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The length of the statement  "                new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")' " is 184.
Long Statement,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The length of the statement  "                new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")' " is 179.
Long Statement,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The length of the statement  "                new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")' " is 180.
Long Statement,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The length of the statement  "                new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times") " is 181.
Long Statement,FakeItEasy.Specs,CallDescriptionsInAssertionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallDescriptionsInAssertionSpecs.cs,AssertedCallDescriptionForPropertySetterWithConstrainedValue,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallToSet(() => fake.Baz).To(() => A<int>.That.Matches(i => i % 2 == 0' "an even number")).MustHaveHappened())); " is 158.
Long Statement,FakeItEasy.Specs,CallDescriptionsInAssertionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallDescriptionsInAssertionSpecs.cs,AssertedCallDescriptionWithCustomValueFormatter,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(new HasCustomValueFormatter())).MustHaveHappened())); " is 121.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,ParameterArrays,The length of the statement  "                .x(() => A.CallTo(() => fake.MethodWithParameterArray("foo"' A<string[]>.That.IsSameSequenceAs(new[] { "bar"' "baz" }))).MustHaveHappened()); " is 141.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfGenericCalls,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(A<string>.Ignored' A<string>.Ignored)).MustHaveHappened())); " is 128.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfGenericCalls,The length of the statement  "    FakeItEasy.Specs.CallMatchingSpecs+IHaveTwoGenericParameters.Bar`2[System.String'System.String](baz1: <Ignored>' baz2: <Ignored>) " is 129.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfGenericCalls,The length of the statement  "    2: FakeItEasy.Specs.CallMatchingSpecs+IHaveTwoGenericParameters.Bar`2[FakeItEasy.Specs.CallMatchingSpecs+Generic`2[System.Boolean'System.Int64]'System.Int32](baz1: FakeItEasy.Specs.CallMatchingSpecs+Generic`2[System.Boolean'System.Int64]' baz2: 3) " is 247.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfCollectionParameter,The length of the statement  "            "When I assert that a call with an argument that is the same sequence as [null' 42' \"hello\"] has happened on this fake" " is 121.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfCollectionParameter,The length of the statement  "            "And the exception message should tell us that the call was not matched' and include the values of the actual collection elements" " is 130.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfCollectionParameter,The length of the statement  "    1: FakeItEasy.Specs.CallMatchingSpecs+IIHaveACollectionParameter.Bar(args: [1' ""hello""' … (2 more elements) …' ""foo""' ""bar""]) " is 131.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,NoGenericCalls,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar<Generic<string>>(A<Generic<string>>.Ignored)).MustHaveHappened())); " is 135.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,NoGenericCalls,The length of the statement  "    FakeItEasy.Specs.CallMatchingSpecs+IHaveOneGenericParameter.Bar`1[FakeItEasy.Specs.CallMatchingSpecs+Generic`1[System.String]](baz: <Ignored>) " is 142.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfOutParameter,The length of the statement  "    System.Collections.Generic.IDictionary`2[System.String'System.String].TryGetValue(key: ""any key""' value: <out parameter>) " is 123.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,IgnoredArgumentConstraintForDifferentValueTypeWithNonNullArgument,The length of the statement  "                .x(() => exception.Message.Should().Be("Argument constraint is of type System.Byte' but parameter is of type System.Nullable`1[System.Int32]. No call can match this constraint.")); " is 180.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,IgnoredArgumentConstraintOutsideCallSpec,The length of the statement  "                .x(() => exception.Message.Should().Be("A<T>.Ignored' A<T>._' and A<T>.That can only be used in the context of a call specification with A.CallTo()")); " is 151.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,ThatArgumentConstraintOutsideCallSpec,The length of the statement  "                .x(() => exception.Message.Should().Be("A<T>.Ignored' A<T>._' and A<T>.That can only be used in the context of a call specification with A.CallTo()")); " is 151.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingAFakeToAMethod,The length of the statement  "                    "FakeItEasy.Specs.CallMatchingSpecs+IHaveOneGenericParameter.Bar`1[").And.Subject.Should().Contain($"](baz: {fakeDescription})")); " is 130.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingAFakeWithABadToStringToAMethod,The length of the statement  "                    "FakeItEasy.Specs.CallMatchingSpecs+IHaveOneGenericParameter.Bar`1[").And.Subject.Should().Contain($"](baz: {fakeDescription})")); " is 130.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingAnObjectWithABadToStringToAMethod,The length of the statement  "                    "FakeItEasy.Specs.CallMatchingSpecs+IHaveOneGenericParameter.Bar`1[").And.Subject.Should().Contain($"](baz: {obj.GetType().ToString()})")); " is 139.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingAStrictFakeToAMethod,The length of the statement  "                    "FakeItEasy.Specs.CallMatchingSpecs+IHaveOneGenericParameter.Bar`1[").And.Subject.Should().Contain($"](baz: {fakeDescription})")); " is 130.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingNestedIgnoredConstraintToAMethod,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(new Dummy { X = A<string>.Ignored })).DoesNothing())); " is 122.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingNestedThatMatchesConstraintToAMethod,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(new Dummy { X = A<string>.That.Matches(_ => true) })).DoesNothing())); " is 138.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingNestedThatNotMatchesConstraintToAMethod,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(new Dummy { X = A<string>.That.Not.Matches(_ => true) })).DoesNothing())); " is 142.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingNestedThatIsNotNullConstraintToAMethod,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(new Dummy { X = A<string>.That.IsNotNull() })).DoesNothing())); " is 131.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingIgnoredConstraintWithWrongTypeToAMethod,The length of the statement  "                .x(() => exception.Message.Should().Be("Argument constraint is of type System.Byte' but parameter is of type System.Int32. No call can match this constraint.")); " is 161.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingHiddenConstraintWithWrongTypeToAMethod,The length of the statement  "                .x(() => exception.Message.Should().Be("Argument constraint is of type System.Byte' but parameter is of type System.Int32. No call can match this constraint.")); " is 161.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingIgnoredConstraintOfNonNullableTypeForNullableParameterToAMethod,The length of the statement  "            "When I try to configure a method of the fake with an Ignored constraint of the non-nullable version of the parameter's type" " is 125.
Long Statement,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,StrictFakes,The length of the statement  "            yield return new object[] { new Func<object>(() => A.Fake<Action<int>>(o => o.Strict()))' "Faked " + typeof(Action<int>).ToString() }; " is 134.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToObjectOnNonFake,The length of the statement  "                   .And.Message.Should().Contain("Object 'FakeItEasy.Specs.ConfigurationSpecs+BaseClass' of type FakeItEasy.Specs.ConfigurationSpecs+BaseClass is not recognized as a fake object.")); " is 179.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToNonVirtualVoidOnNonFake,The length of the statement  "                   .And.Message.Should().Contain("Object 'FakeItEasy.Specs.ConfigurationSpecs+BaseClass' of type FakeItEasy.Specs.ConfigurationSpecs+BaseClass is not recognized as a fake object.")); " is 179.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToNonVirtualVoidOnFake,The length of the statement  "                    .And.Message.Should().Contain("Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted.")); " is 167.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSealedVoidOnNonFake,The length of the statement  "                   .And.Message.Should().Contain("Object 'FakeItEasy.Specs.ConfigurationSpecs+DerivedClass' of type FakeItEasy.Specs.ConfigurationSpecs+DerivedClass is not recognized as a fake object.")); " is 185.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSealedVoidOnFake,The length of the statement  "                   .And.Message.Should().Contain("Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted.")); " is 167.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToNonVirtualNonVoidOnNonFake,The length of the statement  "                    .And.Message.Should().Contain("Object 'FakeItEasy.Specs.ConfigurationSpecs+BaseClass' of type FakeItEasy.Specs.ConfigurationSpecs+BaseClass is not recognized as a fake object.")); " is 179.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToNonVirtualNonVoidOnFake,The length of the statement  "                    .And.Message.Should().Contain("Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted.")); " is 167.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSealedNonVoidOnNonFake,The length of the statement  "                    .And.Message.Should().Contain("Object 'FakeItEasy.Specs.ConfigurationSpecs+DerivedClass' of type FakeItEasy.Specs.ConfigurationSpecs+DerivedClass is not recognized as a fake object.")); " is 185.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSealedNonVoidOnFake,The length of the statement  "                    .And.Message.Should().Contain("Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted.")); " is 167.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSetNonVirtualOnNonFake,The length of the statement  "                   .And.Message.Should().Contain("Object 'FakeItEasy.Specs.ConfigurationSpecs+BaseClass' of type FakeItEasy.Specs.ConfigurationSpecs+BaseClass is not recognized as a fake object.")); " is 179.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSetNonVirtualOnFake,The length of the statement  "                    .And.Message.Should().Contain("Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted.")); " is 167.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSetSealedOnNonFake,The length of the statement  "                   .And.Message.Should().Contain("Object 'FakeItEasy.Specs.ConfigurationSpecs+DerivedClass' of type FakeItEasy.Specs.ConfigurationSpecs+DerivedClass is not recognized as a fake object.")); " is 185.
Long Statement,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallToSetSealedOnFake,The length of the statement  "                   .And.Message.Should().Contain("Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted.")); " is 167.
Long Statement,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfigureOverloadedIndexer,The length of the statement  "                .x(() => A.CallToSet(() => subject["Choeropsis"' "liberiensis"]).Invokes(call => wasFirstConfiguredBehaviorUsed = true)); " is 121.
Long Statement,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfiguringSetterFromAmbiguousBaseInterface,The length of the statement  "                .x(() => A.CallToSet(() => ((IHaveAReadWriteProperty)subject).ReadWriteProperty).Invokes(call => wasConfiguredBehaviorUsed = true)); " is 132.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CacheSuccessfulConstructor,The length of the statement  "                .x(() => Monitor.TryEnter(typeof(ClassWhosePreferredConstructorsThrow)' TimeSpan.FromSeconds(30)).Should().BeTrue("we must enter the monitor")) " is 143.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,PrivateClassCannotBeFaked,The length of the statement  "      Can not create proxy for type FakeItEasy.Specs.CreationSpecsBase+PrivateClass because it is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(*DynamicProxyGenAssembly2*)] attribute* " is 233.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,PrivateDelegateCannotBeFaked,The length of the statement  "    Can not create proxy for type FakeItEasy.Specs.CreationSpecsBase+PrivateDelegate because it is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(*DynamicProxyGenAssembly2*)] attribute* " is 236.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,PublicDelegateWithPrivateTypeArgumentCannotBeFaked,The length of the statement  "    Can not create proxy for type System.Func`1[[FakeItEasy.Specs.CreationSpecsBase+PrivateClass' FakeItEasy.Specs' Version=1.0.0.0' Culture=neutral' PublicKeyToken=eff28e2146d5fd2c]] because type FakeItEasy.Specs.CreationSpecsBase+PrivateClass is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(*DynamicProxyGenAssembly2*)] attribute* " is 385.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,ClassWithPrivateConstructorCannotBeFaked,The length of the statement  "      An exception of type Castle.DynamicProxy.InvalidProxyConstructorArgumentsException was caught during this call. Its message was: " is 128.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CannotFakeWithBadConstructorArguments,The length of the statement  "                .x(() => exception = Record.Exception(() => this.CreateFake<AClassThatCouldBeFakedWithTheRightConstructorArguments>(options => " is 126.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CannotFakeWithBadConstructorArguments,The length of the statement  "  Failed to create fake of type FakeItEasy.Specs.CreationSpecsBase+AClassThatCouldBeFakedWithTheRightConstructorArguments: " is 120.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CannotFakeWithBadConstructorArguments,The length of the statement  "    An exception of type Castle.DynamicProxy.InvalidProxyConstructorArgumentsException was caught during this call. Its message was: " is 128.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CannotFakeWithBadConstructorArguments,The length of the statement  "    Can not instantiate proxy of class: FakeItEasy.Specs.CreationSpecsBase+AClassThatCouldBeFakedWithTheRightConstructorArguments. " is 126.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,FakeDelegateCreationWithAttributes,The length of the statement  "                .x(() => exception = Record.Exception(() => this.CreateFake<Func<int>>(options => options.WithAttributes(() => new ObsoleteAttribute())))); " is 139.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,FakeDelegateCreationWithArgumentsForConstructor,The length of the statement  "                .x(() => exception = Record.Exception(() => this.CreateFake<Func<int>>(options => options.WithArgumentsForConstructor(new object[] { 7 })))); " is 141.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,FakeDelegateCreationWithAdditionalInterfaces,The length of the statement  "                .x(() => exception = Record.Exception(() => this.CreateFake<Func<int>>(options => options.Implements<IList<string>>()))); " is 121.
Long Statement,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,AvoidLongSelfReferentialConstructor,The length of the statement  "                .See(() => new ClassWithLongSelfReferentialConstructor(typeof(object)' A.Dummy<ClassWithLongSelfReferentialConstructor>())); " is 124.
Long Statement,FakeItEasy.Specs,NonGenericCreationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CreateCollectionOfFake,The length of the statement  "            return Sdk.Create.CollectionOfFake(typeof(T)' numberOfFakes' options => optionsBuilder((IFakeOptions<T>)options)).Cast<T>().ToList(); " is 133.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,ClassWhoseLongerConstructorThrowsCreation,The length of the statement  "                .x(() => Monitor.TryEnter(typeof(ClassWhoseLongerConstructorThrows)' TimeSpan.FromSeconds(30)).Should().BeTrue("we must enter the monitor")) " is 140.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,ClassWithLongConstructorWhoseArgumentsCannotBeResolvedCreation,The length of the statement  "                .See(() => new ClassWithLongConstructorWhoseArgumentsCannotBeResolved(A.Dummy<ClassWhoseDummyFactoryThrows>()' A.Dummy<int>())); " is 128.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,SealedClassWithLongConstructorWhoseArgumentsCannotBeResolvedCreation,The length of the statement  "                .See(() => new SealedClassWithLongConstructorWhoseArgumentsCannotBeResolved(A.Dummy<ClassWhoseDummyFactoryThrows>()' A.Dummy<int>())); " is 134.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,ClassWithNoPublicConstructorCreation,The length of the statement  "      No usable default constructor was found on the type FakeItEasy.Specs.DummyCreationSpecsBase+ClassWithNoPublicConstructors. " is 122.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,ClassWithNoPublicConstructorCreation,The length of the statement  "      An exception of type Castle.DynamicProxy.InvalidProxyConstructorArgumentsException was caught during this call. Its message was: " is 128.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,ClassWhoseOnlyConstructorThrowsCreation,The length of the statement  "      No usable default constructor was found on the type FakeItEasy.Specs.DummyCreationSpecsBase+ClassWithThrowingConstructor. " is 121.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,PrivateAbstractClassCreation,The length of the statement  "      Can not create proxy for type FakeItEasy.Specs.DummyCreationSpecsBase+PrivateAbstractClass because it is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(*DynamicProxyGenAssembly2*)] attribute*")); " is 250.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,CollectionOfClassWithNoPublicConstructor,The length of the statement  "      No usable default constructor was found on the type FakeItEasy.Specs.DummyCreationSpecsBase+ClassWithNoPublicConstructors. " is 122.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,CollectionOfClassWithNoPublicConstructor,The length of the statement  "      An exception of type Castle.DynamicProxy.InvalidProxyConstructorArgumentsException was caught during this call. Its message was: " is 128.
Long Statement,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,AvoidLongSelfReferentialConstructor,The length of the statement  "                .See(() => new ClassWithLongSelfReferentialConstructor(typeof(object)' A.Dummy<ClassWithLongSelfReferentialConstructor>())); " is 124.
Long Statement,FakeItEasy.Specs,EventRaisingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\EventRaisingSpecs.cs,DynamicRaiseWithWrongArguments,The length of the statement  "                    "The event has the signature (System.Object' FakeItEasy.Specs.CustomEventArgs)' but the provided arguments have types (System.String' System.Int32' System.Boolean).")); " is 168.
Long Statement,FakeItEasy.Specs,FakeOptionsBuilderSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakeOptionsBuilderSpecs.cs,DefinedFakeOptionsBuilderConstructorArgumentsByConstructorForWrongType,The length of the statement  "                    .WithInnerMessage("Supplied constructor is for type FakeItEasy.Specs.ConstructorArgumentsSetByConstructorForWrongType' but must be for FakeItEasy.Specs.ConstructorArgumentsSetByConstructor.")); " is 193.
Long Statement,FakeItEasy.Specs,FakingInternalsSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingInternalsSpecs.cs,ClassWithInvisibleInternalConstructor,The length of the statement  "                    .ContainModuloLineEndings("Can not instantiate proxy of class: FakeItEasy.Specs.ClassWithInternalConstructor.\r\n      Could not find a parameterless constructor.")); " is 166.
Long Statement,FakeItEasy.Specs,FakingInternalsSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingInternalsSpecs.cs,GenericTypeWithInternalTypeParameters,The length of the statement  "                                 "*because type FakeItEasy.Specs.IInternal is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(*DynamicProxyGenAssembly2*)]*")); " is 180.
Long Statement,FakeItEasy.Specs,FakingInternalsSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingInternalsSpecs.cs,OverrideInternalMethod,The length of the statement  "            const string expectedMessage = @"*The current proxy generator can not intercept the method FakeItEasy.Specs.TypeWithInternalMethod.InternalMethod() for the following reason: " is 173.
Long Statement,FakeItEasy.Specs,FakingInternalsSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingInternalsSpecs.cs,OverrideInternalMethod,The length of the statement  "    - Can not create proxy for method Int32 InternalMethod() because it or its declaring type is not accessible. Make it public' or internal and mark your assembly with [assembly: InternalsVisibleTo(*DynamicProxyGenAssembly2*)] attribute*"; " is 236.
Long Statement,FakeItEasy.Specs,InParameterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\InParametersSpecs.cs,SettingInParamInterface,The length of the statement  "                    .Be("The number of values for out and ref parameters specified does not match the number of out and ref parameters in the call.")); " is 131.
Long Statement,FakeItEasy.Specs,InParameterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\InParametersSpecs.cs,SettingInParamDelegate,The length of the statement  "                    .Be("The number of values for out and ref parameters specified does not match the number of out and ref parameters in the call.")); " is 131.
Long Statement,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsInOrder,The length of the statement  "            "When I assert that a call with argument 1 was made twice exactly' then a call with argument 2' and then a call with argument 3" " is 128.
Long Statement,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOutOfOrder,The length of the statement  "            "When I assert that a call with argument 1 was made twice exactly' then a call with argument 2' and then a call with argument 3" " is 128.
Long Statement,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOnDifferentObjectsInOrder,The length of the statement  "            "When I assert that a call with argument 1 was made on the first Fake' then on the second' and then that a call with argument 2 was made on the first Fake" " is 155.
Long Statement,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOnDifferentObjectsOutOfOrder,The length of the statement  "            "When I assert that a call with argument 1 was made on the first Fake' then on the second' and then that a call with argument 2 was made on the first Fake" " is 155.
Long Statement,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsInOrder,The length of the statement  "                .x(() => exception = Record.Exception(() => lastAssertion.Then(A.CallTo(() => fake.Bar(3)).MustHaveHappenedOnceExactly()))); " is 124.
Long Statement,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsOutOfOrder,The length of the statement  "                .x(() => exception = Record.Exception(() => lastAssertion.Then(A.CallTo(() => fake.Bar(3)).MustHaveHappenedOnceExactly()))); " is 124.
Long Statement,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionWithCallCountConstraintFailure,The length of the statement  "                .x(() => exception = Record.Exception(() => lastAssertion.Then(A.CallTo(() => fake.Bar(1)).MustHaveHappenedOnceExactly()))); " is 124.
Long Statement,FakeItEasy.Specs,StrictFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\StrictFakeSpecs.cs,ArgumentMismatchVoid,The length of the statement  "                    "Call to unconfigured method of strict fake: FakeItEasy.Specs.StrictFakeSpecs+IMyInterface.DoIt(id: a762f030-d39e-4316-92b1-a51eff3dc51f).")); " is 142.
Long Statement,FakeItEasy.Specs,StrictFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\StrictFakeSpecs.cs,ArgumentMismatchNonVoid,The length of the statement  "                    @"Call to unconfigured method of strict fake: FakeItEasy.Specs.StrictFakeSpecs+IMyInterface.MakeIt(name: ""something"").")); " is 124.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentConstraintExpression,The length of the statement  "                .x(() => exception.Message.Should().Be("Argument constraint expression <ThrowingConstraintFactory()> threw an exception. See inner exception for details.")); " is 157.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcher,The length of the statement  "                .x(() => exception.Message.Should().Be("Argument matcher <i => ThrowException()> threw an exception. See inner exception for details.")); " is 137.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcherDescription,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(A<int>.That.Matches(i => i % 2 == 0' o => o.Write(ThrowException())))).MustHaveHappened())); " is 160.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcherDescription,The length of the statement  "                .x(() => exception.Message.Should().Be("Argument matcher description threw an exception. See inner exception for details.")); " is 125.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcherAndInDescription,The length of the statement  "            "And a call to the fake is configured with a custom argument matcher that throws an exception and whose description also throws an exception" " is 141.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcherAndInDescription,The length of the statement  "                .x(() => A.CallTo(() => fake.Bar(A<int>.That.Matches(i => ThrowException()' o => o.Write(ThrowException())))).Returns(42)); " is 123.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcherAndInDescription,The length of the statement  "                .x(() => exception.Message.Should().Be("Argument matcher description threw an exception. See inner exception for details.")); " is 125.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInCallCountSpecification,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(0)).MustHaveHappenedANumberOfTimesMatching(n => ThrowException()))); " is 136.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInCallCountSpecification,The length of the statement  "                .x(() => exception.Message.Should().Be("Call count constraint <a number of times matching the predicate 'n => ThrowException()'> threw an exception. See inner exception for details.")); " is 185.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInCustomArgumentValueFormatter,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Baz(new HasCustomValueFormatter())).MustHaveHappened())); " is 121.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInCustomArgumentValueFormatter,The length of the statement  "                .x(() => exception.Message.Should().Be("Custom argument value formatter 'FakeItEasy.Specs.UserCallbackExceptionSpecs+HasCustomValueFormatterValueFormatter' threw an exception. See inner exception for details.")); " is 212.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInDummyFactory,The length of the statement  "                .x(() => exception.Message.Should().Be("Dummy factory 'FakeItEasy.Specs.UserCallbackExceptionSpecs+MyDummyFactory' threw an exception. See inner exception for details.")); " is 171.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInFakeOptionsBuilder,The length of the statement  "                .x(() => exception.Message.Should().Be("Fake options builder 'FakeItEasy.Specs.UserCallbackExceptionSpecs+BadOptionsBuilder' threw an exception. See inner exception for details.")); " is 181.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInWherePredicate,The length of the statement  "                .x(() => exception.Message.Should().Be("Call filter <call => ThrowException()> threw an exception. See inner exception for details.")); " is 135.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInWhereDescription,The length of the statement  "                .x(() => exception = Record.Exception(() => A.CallTo(fake).Where(call => true' o => o.Write(ThrowException())).MustHaveHappened())); " is 132.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInWhereDescription,The length of the statement  "                .x(() => exception.Message.Should().Be("Call filter description threw an exception. See inner exception for details.")); " is 120.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInWherePredicateAndInDescription,The length of the statement  "            "And calls configured on this fake with a call filter predicate that throws an exception and whose description also throws an exception" " is 136.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInWherePredicateAndInDescription,The length of the statement  "                .x(() => exception.Message.Should().Be("Call filter description threw an exception. See inner exception for details.")); " is 120.
Long Statement,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInOutAndRefValueProducerIsNotWrapped,The length of the statement  "                .x(() => A.CallTo(() => fake.OutAndRef(ref x' out s)).AssignsOutAndRefParametersLazily(call => new object[] { ThrowException() })); " is 131.
Virtual Method Call from Constructor,FakeItEasy.Specs,DomainEvent,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DomainEvents.cs,DomainEvent,The constructor "DomainEvent" calls a virtual method "CalculateTimestamp".
Virtual Method Call from Constructor,FakeItEasy.Specs,MakesVirtualCallInConstructor,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\MakesVirtualCallInConstructor.cs,MakesVirtualCallInConstructor,The constructor "MakesVirtualCallInConstructor" calls a virtual method "VirtualMethod".
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WithAnyArguments,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when called with any arguments"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WithAnyArguments()                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WithAnyArguments,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "When the method is called with an argument that satisfies the predicate"                  .x(() => result = fake.Bar(4));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith1ArgFailure,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith1ArgFailure,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith1ArgFailure,The following statement contains a magic number: "When the method is called with an argument that doesn't satisfy the predicate"                  .x(() => result = fake.Bar(3));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0 && args.Get<string>(1)?.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0 && args.Get<string>(1)?.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0 && args.Get<string>(1)?.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "When the method is called with arguments that satisfy the predicate"                  .x(() => result = fake.Bar(4' "x"));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0 && args.Get<string>(1)?.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0 && args.Get<string>(1)?.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch(args => args.Get<int>(0) % 2 == 0 && args.Get<string>(1)?.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,WhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "When the method is called with arguments that don't satisfy the predicate"                  .x(() => result = fake.Bar(3' "hello"));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch((int a) => a % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch((int a) => a % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "When the method is called with an argument that satisfies the predicate"                  .x(() => result = fake.Bar(4));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgSuccess,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgFailure,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch((int a) => a % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgFailure,The following statement contains a magic number: "And a fake method with 1 parameter is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch((int a) => a % 2 == 0)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgFailure,The following statement contains a magic number: "When the method is called with an argument that doesn't satisfy the predicate"                  .x(() => result = fake.Bar(3));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgWrongSignature,The following statement contains a magic number: "And a fake method with 1 parameter is configured with an arguments predicate with an incompatible signature"                  .x(() => exception = Record.Exception(                          () => A.CallTo(() => fake.Bar(0))                              .WhenArgumentsMatch((long a) => true)                              .Returns(42)));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith1ArgWrongSignature,The following statement contains a magic number: "When the method is called"                  .x(() => exception = Record.Exception(() => fake.Bar(3)));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch((int a' string b) => a % 2 == 0 && b.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch((int a' string b) => a % 2 == 0 && b.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch((int a' string b) => a % 2 == 0 && b.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "When the method is called with arguments that satisfy the predicate"                  .x(() => result = fake.Bar(4' "x"));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsSuccess,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch((int a' string b) => a % 2 == 0 && b.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch((int a' string b) => a % 2 == 0 && b.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "And a fake method with 2 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch((int a' string b) => a % 2 == 0 && b.Length < 3)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsFailure,The following statement contains a magic number: "When the method is called with arguments that don't satisfy the predicate"                  .x(() => result = fake.Bar(3' "hello"));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsWrongSignature,The following statement contains a magic number: "And a fake method with 2 parameters is configured with an arguments predicate with an incompatible signature"                  .x(() => exception = Record.Exception(                          () => A.CallTo(() => fake.Bar(0' string.Empty))                              .WhenArgumentsMatch((long a' DateTime b) => true)                              .Returns(42)));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith2ArgsWrongSignature,The following statement contains a magic number: "When the method is called"                  .x(() => exception = Record.Exception(() => fake.Bar(3' "hello")));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsSuccess,The following statement contains a magic number: "And a fake method with 3 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false))                              .WhenArgumentsMatch((int a' string b' bool c) => a % 2 == 0 && b.Length < 3 && c)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsSuccess,The following statement contains a magic number: "And a fake method with 3 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false))                              .WhenArgumentsMatch((int a' string b' bool c) => a % 2 == 0 && b.Length < 3 && c)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsSuccess,The following statement contains a magic number: "And a fake method with 3 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false))                              .WhenArgumentsMatch((int a' string b' bool c) => a % 2 == 0 && b.Length < 3 && c)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsSuccess,The following statement contains a magic number: "When the method is called with arguments that satisfy the predicate"                  .x(() => result = fake.Bar(4' "x"' true));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsSuccess,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsFailure,The following statement contains a magic number: "And a fake method with 3 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false))                              .WhenArgumentsMatch((int a' string b' bool c) => a % 2 == 0 && b.Length < 3 && c)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsFailure,The following statement contains a magic number: "And a fake method with 3 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false))                              .WhenArgumentsMatch((int a' string b' bool c) => a % 2 == 0 && b.Length < 3 && c)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsFailure,The following statement contains a magic number: "And a fake method with 3 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false))                              .WhenArgumentsMatch((int a' string b' bool c) => a % 2 == 0 && b.Length < 3 && c)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsFailure,The following statement contains a magic number: "When the method is called with arguments that don't satisfy the predicate"                  .x(() => result = fake.Bar(3' "hello"' false));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsWrongSignature,The following statement contains a magic number: "And a fake method with 3 parameters is configured with an arguments predicate with an incompatible signature"                  .x(() => exception = Record.Exception(                          () => A.CallTo(() => fake.Bar(0' string.Empty' false))                              .WhenArgumentsMatch((long a' DateTime b' Type c) => true)                              .Returns(42)));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith3ArgsWrongSignature,The following statement contains a magic number: "When the method is called"                  .x(() => exception = Record.Exception(() => fake.Bar(3' "hello"' true)));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsSuccess,The following statement contains a magic number: "And a fake method with 4 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false' new object()))                              .WhenArgumentsMatch((int a' string b' bool c' object d) => a % 2 == 0 && b.Length < 3 && c && d is object)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsSuccess,The following statement contains a magic number: "And a fake method with 4 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false' new object()))                              .WhenArgumentsMatch((int a' string b' bool c' object d) => a % 2 == 0 && b.Length < 3 && c && d is object)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsSuccess,The following statement contains a magic number: "And a fake method with 4 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false' new object()))                              .WhenArgumentsMatch((int a' string b' bool c' object d) => a % 2 == 0 && b.Length < 3 && c && d is object)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsSuccess,The following statement contains a magic number: "When the method is called with arguments that satisfy the predicate"                  .x(() => result = fake.Bar(4' "x"' true' new object()));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsSuccess,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsFailure,The following statement contains a magic number: "And a fake method with 4 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false' new object()))                              .WhenArgumentsMatch((int a' string b' bool c' object d) => a % 2 == 0 && b.Length < 3 && c && d is object)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsFailure,The following statement contains a magic number: "And a fake method with 4 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false' new object()))                              .WhenArgumentsMatch((int a' string b' bool c' object d) => a % 2 == 0 && b.Length < 3 && c && d is object)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsFailure,The following statement contains a magic number: "And a fake method with 4 parameters is configured to return a value when the arguments match a predicate"                  .x(() => A.CallTo(() => fake.Bar(0' string.Empty' false' new object()))                              .WhenArgumentsMatch((int a' string b' bool c' object d) => a % 2 == 0 && b.Length < 3 && c && d is object)                              .Returns(42));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsFailure,The following statement contains a magic number: "When the method is called with arguments that don't satisfy the predicate"                  .x(() => result = fake.Bar(3' "hello"' false' new object()));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsWrongSignature,The following statement contains a magic number: "And a fake method with 4 parameters is configured with an arguments predicate with an incompatible signature"                  .x(() => exception = Record.Exception(                          () => A.CallTo(() => fake.Bar(0' string.Empty' false' new object()))                              .WhenArgumentsMatch((long a' DateTime b' Type c' char d) => true)                              .Returns(42)));
Magic Number,FakeItEasy.Specs,ArgumentMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ArgumentMatchingSpecs.cs,StronglyTypedWhenArgumentsMatchWith4ArgsWrongSignature,The following statement contains a magic number: "When the method is called"                  .x(() => exception = Record.Exception(() => fake.Bar(3' "hello"' true' new object())));
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,AllCountableCalls,The following statement contains a magic number: return new[]              {                  new CountableCall(fake => A.CallTo(() => fake.Method())' fake => fake.Method())'                  new CountableCall(fake => A.CallTo(fake)' fake => fake.Method())'                  new CountableCall(fake => A.CallTo(fake).WithNonVoidReturnType()' fake => fake.Property)'                  new CountableCall(fake => A.CallToSet(() => fake.Property)' fake => fake.Property = 3)'                  new CountableCall(fake => A.CallToSet(() => fake.Property).To(7)' fake => fake.Property = 7)              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,AllCountableCalls,The following statement contains a magic number: return new[]              {                  new CountableCall(fake => A.CallTo(() => fake.Method())' fake => fake.Method())'                  new CountableCall(fake => A.CallTo(fake)' fake => fake.Method())'                  new CountableCall(fake => A.CallTo(fake).WithNonVoidReturnType()' fake => fake.Property)'                  new CountableCall(fake => A.CallToSet(() => fake.Property)' fake => fake.Property = 3)'                  new CountableCall(fake => A.CallToSet(() => fake.Property).To(7)' fake => fake.Property = 7)              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,AllCountableCalls,The following statement contains a magic number: return new[]              {                  new CountableCall(fake => A.CallTo(() => fake.Method())' fake => fake.Method())'                  new CountableCall(fake => A.CallTo(fake)' fake => fake.Method())'                  new CountableCall(fake => A.CallTo(fake).WithNonVoidReturnType()' fake => fake.Property)'                  new CountableCall(fake => A.CallToSet(() => fake.Property)' fake => fake.Property = 3)'                  new CountableCall(fake => A.CallToSet(() => fake.Property).To(7)' fake => fake.Property = 7)              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,MatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(1' call => call.MustHaveHappened())'                  new CallCountAsserter(2' call => call.MustHaveHappened())'                  new CallCountAsserter(0' call => call.MustNotHaveHappened())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceExactly())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedOnceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceExactly())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrMore())'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(2' call => call.MustHaveHappenedTwiceOrLess())'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.Exactly))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(0' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.Exactly))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(1' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.Exactly))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(2' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.Exactly))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrMore))'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(3' call => call.MustHaveHappened(3' Times.OrLess))'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0))'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 3 == 0))              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssertingCallCountSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssertingCallCountSpecs.cs,NonMatchingAssertions,The following statement contains a magic number: return new[]              {                  new CallCountAsserter(0' call => call.MustHaveHappened()' "once or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustNotHaveHappened()' "never but found it once")'                  new CallCountAsserter(2' call => call.MustNotHaveHappened()' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustNotHaveHappened()' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceExactly()' "once exactly but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceExactly()' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedOnceOrMore()' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedOnceOrLess()' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceExactly()' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedTwiceOrMore()' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappenedTwiceOrLess()' "twice or less but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.Exactly)' "never but found it 3 times")'                  new CallCountAsserter(1' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(0' Times.OrLess)' "never but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but no calls")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.Exactly)' "once exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(1' Times.OrMore)' "once or more but no calls were made")'                  new CallCountAsserter(2' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappened(1' Times.OrLess)' "once or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but no calls")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.Exactly)' "twice exactly but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(2' Times.OrMore)' "twice or more but found it once")'                  new CallCountAsserter(3' call => call.MustHaveHappened(2' Times.OrLess)' "twice or less but found it 3 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.Exactly)' "3 times exactly but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappened(3' Times.OrMore)' "3 times or more but found it twice")'                  new CallCountAsserter(4' call => call.MustHaveHappened(3' Times.OrLess)' "3 times or less but found it 4 times")'                  new CallCountAsserter(0' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but no calls were made")'                  new CallCountAsserter(1' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it once")'                  new CallCountAsserter(2' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 1)' "a number of times matching the predicate 'n => ((n % 2) == 1)' but found it twice")'                  new CallCountAsserter(3' call => call.MustHaveHappenedANumberOfTimesMatching(n => n % 2 == 0)' "a number of times matching the predicate 'n => ((n % 2) == 0)' but found it 3 times")              };
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForVoidDelegate,The following statement contains a magic number: "When the faked delegate is configured to assign the out and ref parameters"                  .x(() => A.CallTo(() => subject(1' ref refValue' out outValue)).AssignsOutAndRefParameters(42' 99));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForVoidDelegate,The following statement contains a magic number: "When the faked delegate is configured to assign the out and ref parameters"                  .x(() => A.CallTo(() => subject(1' ref refValue' out outValue)).AssignsOutAndRefParameters(42' 99));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForVoidDelegate,The following statement contains a magic number: "Then the ref parameter is set to the specified value"                  .x(() => refValue.Should().Be(42));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForVoidDelegate,The following statement contains a magic number: "And the out parameter is set to the specified value"                  .x(() => outValue.Should().Be(99));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,SpecifyReturnsAndAssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "When the faked delegate is configured to return a value and assign the out and ref parameters"                  .x(() =>                  {                      expectedResult = new Foo();                      A.CallTo(() => subject(1' ref refValue' out outValue)).Returns(expectedResult).AssignsOutAndRefParameters(42' 99);                  });
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,SpecifyReturnsAndAssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "When the faked delegate is configured to return a value and assign the out and ref parameters"                  .x(() =>                  {                      expectedResult = new Foo();                      A.CallTo(() => subject(1' ref refValue' out outValue)).Returns(expectedResult).AssignsOutAndRefParameters(42' 99);                  });
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,SpecifyReturnsAndAssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "And the ref parameter is set to the specified value"                  .x(() => refValue.Should().Be(42));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,SpecifyReturnsAndAssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "And the out parameter is set to the specified value"                  .x(() => outValue.Should().Be(99));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "When the faked delegate is configured to assign the out and ref parameters without setting the return value"                  .x(() => A.CallTo(() => subject(1' ref refValue' out outValue))                      .AssignsOutAndRefParameters(43' 100));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "When the faked delegate is configured to assign the out and ref parameters without setting the return value"                  .x(() => A.CallTo(() => subject(1' ref refValue' out outValue))                      .AssignsOutAndRefParameters(43' 100));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "And the ref parameter is set to the specified value"                  .x(() => refValue.Should().Be(43));
Magic Number,FakeItEasy.Specs,AssignsOutAndRefParametersSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,AssignOutAndRefParameterForNonVoidDelegate,The following statement contains a magic number: "And the out parameter is set to the specified value"                  .x(() => outValue.Should().Be(100));
Magic Number,FakeItEasy.Specs,Foo,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\AssignsOutAndRefParametersSpecs.cs,OutAndRefMethod,The following statement contains a magic number: @out = 42;
Magic Number,FakeItEasy.Specs,CallDescriptionsInAssertionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallDescriptionsInAssertionSpecs.cs,AssertedCallDescriptionForMethod,The following statement contains a magic number: "When I assert that a method was called"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(42)).MustHaveHappened()));
Magic Number,FakeItEasy.Specs,CallDescriptionsInAssertionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallDescriptionsInAssertionSpecs.cs,ActualCallDescriptionForMethod,The following statement contains a magic number: "And I make a call to Bar with argument 0"                  .x(() => fake.Bar(42));
Magic Number,FakeItEasy.Specs,CallDescriptionsInAssertionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallDescriptionsInAssertionSpecs.cs,AssertedCallDescriptionForPropertySetterWithConstantValue,The following statement contains a magic number: "When I assert that a property setter was called"                  .x(() => exception = Record.Exception(() => A.CallToSet(() => fake.Baz).To(42).MustHaveHappened()));
Magic Number,FakeItEasy.Specs,CallDescriptionsInAssertionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallDescriptionsInAssertionSpecs.cs,AssertedCallDescriptionForPropertySetterWithConstrainedValue,The following statement contains a magic number: "When I assert that a property setter was called"                  .x(() => exception = Record.Exception(() => A.CallToSet(() => fake.Baz).To(() => A<int>.That.Matches(i => i % 2 == 0' "an even number")).MustHaveHappened()));
Magic Number,FakeItEasy.Specs,CallDescriptionsInAssertionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallDescriptionsInAssertionSpecs.cs,ActualCallDescriptionForPropertySetterWithConstantValue,The following statement contains a magic number: "And I make a call to a property setter"                  .x(() => { fake.Baz = 42; });
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfNonGenericCalls,The following statement contains a magic number: "And a call with argument 2 made on this fake"                  .x(() => fake.Bar(2));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfNonGenericCalls,The following statement contains a magic number: "When I assert that a call with argument 3 has happened on this fake"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(3)).MustHaveHappened()));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfGenericCalls,The following statement contains a magic number: "And a call with arguments of type int and double made on this fake"                  .x(() => fake.Bar(1' 2D));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfGenericCalls,The following statement contains a magic number: "And a call with arguments of type Generic<bool' long> and int made on this call"                  .x(() => fake.Bar(new Generic<bool' long>()' 3));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfCollectionParameter,The following statement contains a magic number: "And a call with argument [null' 42] made on this fake"                  .x(() => fake.Bar(new object?[] { null' 42 }));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,FailingMatchOfCollectionParameter,The following statement contains a magic number: "When I assert that a call with an argument that is the same sequence as [null' 42' \"hello\"] has happened on this fake"                  .x(() => exception = Record.Exception(                      () => A.CallTo(                              () => fake.Bar(A<object[]>.That.IsSameSequenceAs(new object?[] { null' 42' "hello" })))                          .MustHaveHappened()));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,ThatArgumentConstraintForValueTypeWithNullArgument,The following statement contains a magic number: "And a call configured for a non-nullable argument of that type"                  .x(() => A.CallTo(() => subject.Bar(A<int>._)).Returns(42));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,IgnoredArgumentConstraintForDifferentValueTypeWithNonNullArgument,The following statement contains a magic number: "When I try to configure a method of the fake for an Ignored argument of a different non-nullable type"                  .x(() => exception = Record.Exception(() => A.CallTo(() => subject.Bar(A<byte>.Ignored)).Returns(42)));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,UnusedArgumentMatcherDescriptionNotUsed,The following statement contains a magic number: "And I make a call to the fake"                  .x(() => fake.Bar(7));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,TwoArgumentConstraints,The following statement contains a magic number: "When I try to configure a method of the fake using two constraints on an argument"                  .x(() => exception = Record.Exception(() => A.CallTo(() =>                      fake.Bar(A<int>.That.Matches(i => i % 2 == 0) + A<int>.That.Matches(i => i % 2 == 1))).Returns(1)));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,TwoArgumentConstraints,The following statement contains a magic number: "When I try to configure a method of the fake using two constraints on an argument"                  .x(() => exception = Record.Exception(() => A.CallTo(() =>                      fake.Bar(A<int>.That.Matches(i => i % 2 == 0) + A<int>.That.Matches(i => i % 2 == 1))).Returns(1)));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingIgnoredConstraintOfNonNullableTypeForNullableParameterToAMethod,The following statement contains a magic number: "When I try to configure a method of the fake with an Ignored constraint of the non-nullable version of the parameter's type"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(A<int>.Ignored)).Returns(42)));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingIgnoredConstraintOfNonNullableTypeForNullableParameterToAMethod,The following statement contains a magic number: "And the call is matched"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingIgnoredConstraintOfDerivedTypeToAMethod,The following statement contains a magic number: "When I try to configure a method of the fake with an Ignored constraint of a subclass of the parameter's type"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(A<Dummy>.Ignored)).Returns(42)));
Magic Number,FakeItEasy.Specs,CallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CallMatchingSpecs.cs,PassingIgnoredConstraintOfDerivedTypeToAMethod,The following statement contains a magic number: "And the call is matched"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,NonCanceledTokenWithConfiguredCall,The following statement contains a magic number: "And a call configured on that fake"                  .x(() => A.CallTo(() => fake.Bar(A<CancellationToken>._)).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,NonCanceledTokenWithConfiguredCall,The following statement contains a magic number: "Then it doesn't throw and returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,CanceledTokenWithConfiguredCallForAnyToken,The following statement contains a magic number: "And a call configured on that fake"                  .x(() => A.CallTo(() => fake.Bar(A<CancellationToken>._)).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,CanceledTokenWithConfiguredCallForAnyToken,The following statement contains a magic number: "Then it doesn't throw and returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,CanceledTokenWithConfiguredCallForNonCanceledToken,The following statement contains a magic number: "And a call configured on that fake for a non-canceled token"                  .x(() => A.CallTo(() => fake.Bar(A<CancellationToken>.That.IsNotCanceled())).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,AsyncWithResultNonCanceledTokenWithConfiguredCall,The following statement contains a magic number: "And a call configured on that fake"                  .x(() => A.CallTo(() => fake.BarAsync(A<CancellationToken>._)).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,AsyncWithResultNonCanceledTokenWithConfiguredCall,The following statement contains a magic number: "And the task's result is the configured value"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,AsyncWithResultCanceledTokenWithConfiguredCallForAnyToken,The following statement contains a magic number: "And a call configured on that fake"                  .x(() => A.CallTo(() => fake.BarAsync(A<CancellationToken>._)).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,AsyncWithResultCanceledTokenWithConfiguredCallForAnyToken,The following statement contains a magic number: "And the task's result is the configured value"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,AsyncWithResultCanceledTokenWithConfiguredCallForNonCanceledToken,The following statement contains a magic number: "And a call configured on that fake for a non-canceled token"                  .x(() => A.CallTo(() => fake.BarAsync(A<CancellationToken>.That.IsNotCanceled())).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,ValueTaskWithResultNonCanceledTokenWithConfiguredCall,The following statement contains a magic number: "And a call to an async method returning ValueTask configured on that fake"                  .x(() => A.CallTo(() => fake.ValueBarAsync(A<CancellationToken>._)).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,ValueTaskWithResultNonCanceledTokenWithConfiguredCall,The following statement contains a magic number: "And the task's result is the configured value"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,ValueTaskWithResultCanceledTokenWithConfiguredCallForAnyToken,The following statement contains a magic number: "And a call to an async method returning ValueTask configured on that fake"                  .x(() => A.CallTo(() => fake.ValueBarAsync(A<CancellationToken>._)).Returns(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,ValueTaskWithResultCanceledTokenWithConfiguredCallForAnyToken,The following statement contains a magic number: "And the task's result is the configured value"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,CancellationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CancellationSpecs.cs,ValueTaskWithResultCanceledTokenWithConfiguredCallForNonCanceledToken,The following statement contains a magic number: "And a call to an async method returning ValueTask configured on that fake for a non-canceled token"                  .x(() => A.CallTo(() => fake.ValueBarAsync(A<CancellationToken>.That.IsNotCanceled())).Returns(42));
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,MultipleCallbacks,The following statement contains a magic number: "And I configure a method to invoke two actions and return a value"                  .x(() =>                      A.CallTo(() => fake.Baz())                          .Invokes(x => firstWasCalled = true)                          .Invokes(x => secondWasCalled = true)                          .Returns(10));
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,MultipleCallbacks,The following statement contains a magic number: "And it returns the configured value"                  .x(() => returnValue.Should().Be(10));
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,CallBaseMethod,The following statement contains a magic number: "And it returns the value from base method"                  .x(() => returnValue.Should().Be(10));
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,MultipleReturns,The following statement contains a magic number: "And I configure the return value for the method"                  .x(() =>                  {                      configuration = A.CallTo(() => fake.Baz());                      configuration.Returns(42);                  });
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,ReturnThenThrow,The following statement contains a magic number: "And I configure the return value for the method"                  .x(() =>                  {                      configuration = A.CallTo(() => fake.Baz());                      configuration.Returns(42);                  });
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,ReturnThenCallsBaseMethod,The following statement contains a magic number: "And I configure the return value for the method"                  .x(() =>                  {                      configuration = A.CallTo(() => fake.Baz());                      configuration.Returns(42);                  });
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,NestedCallThatIncludesArrayConstruction,The following statement contains a magic number: "When I specify a call and create a non-object array in the call configuration"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Wrap(Foo.BuildFromArray(new[] { 1' 2' 3 })))));
Magic Number,FakeItEasy.Specs,ConfigurationSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,NestedCallThatIncludesArrayConstruction,The following statement contains a magic number: "When I specify a call and create a non-object array in the call configuration"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Wrap(Foo.BuildFromArray(new[] { 1' 2' 3 })))));
Magic Number,FakeItEasy.Specs,BaseClass,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,ReturnSomething,The following statement contains a magic number: return 10;
Magic Number,FakeItEasy.Specs,BaseClass,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,ReturnSomethingNonVirtual,The following statement contains a magic number: return 11;
Magic Number,FakeItEasy.Specs,DerivedClass,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfigurationSpecs.cs,ReturnSomething,The following statement contains a magic number: return 10;
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfigureOverloadedIndexer,The following statement contains a magic number: "And I assign the property using the other signature"                  .x(() => subject["Pygmy hippopotamus"] = 4);
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfigureReadOnlyIndexer,The following statement contains a magic number: "When assignment of the indexer is configured"                  .x(() => exception = Record.Exception(() => A.CallToSet(() => subject[7]).DoesNothing()));
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,OverridePropertyValueConfigurationWithWhenArgumentsMatchAndCallWithGoodValue,The following statement contains a magic number: "And assignment of the property is configured for value 3 using WhenArgumentsMatch"                  .x(() => A.CallToSet(() => subject.ReadWriteProperty)                      .WhenArgumentsMatch(arguments => arguments.Get<int>(0) == 3)                      .Invokes(call => wasConfiguredBehaviorUsed = true));
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,OverridePropertyValueConfigurationWithWhenArgumentsMatchAndCallWithGoodValue,The following statement contains a magic number: "When I assign the property value to 3"                  .x(() => subject.ReadWriteProperty = 3);
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,OverridePropertyValueConfigurationWithWhenArgumentsMatchAndCallWithBadValue,The following statement contains a magic number: "And assignment of the property is configured for value 3 using WhenArgumentsMatch"                  .x(() => A.CallToSet(() => subject.ReadWriteProperty)                      .WhenArgumentsMatch(arguments => arguments.Get<int>(0) == 3)                      .Invokes(call => wasConfiguredBehaviorUsed = true));
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,OverridePropertyValueConfigurationWithWhenArgumentsMatchAndCallWithBadValue,The following statement contains a magic number: "When I assign the property value to 4"                  .x(() => subject.ReadWriteProperty = 4);
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfiguringSetterWithExactValueAndAssigningThatValue,The following statement contains a magic number: "And assignment of the property is configured for a specific value"                  .x(() => A.CallToSet(() => subject.ReadWriteProperty).To(5)                  .Invokes(call => wasConfiguredBehaviorUsed = true));
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfiguringSetterWithExactValueAndAssigningThatValue,The following statement contains a magic number: "When I assign the property to the matching value"                  .x(() => subject.ReadWriteProperty = 5);
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfiguringSetterWithExactValueAndAssigningDifferentValue,The following statement contains a magic number: "And assignment of the property is configured for a specific value"                  .x(() => A.CallToSet(() => subject.ReadWriteProperty).To(5)                  .Invokes(call => wasConfiguredBehaviorUsed = true));
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfiguringSetterWithExactValueAndAssigningDifferentValue,The following statement contains a magic number: "When I assign the property to a different value"                  .x(() => subject.ReadWriteProperty = -13);
Magic Number,FakeItEasy.Specs,ConfiguringPropertySetterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ConfiguringPropertySetterSpecs.cs,ConfiguringSetterWithValueSpecificationAndAssigningMatching,The following statement contains a magic number: "And assignment of the property is configured for values greater than 4"                  .x(() => A.CallToSet(() => subject.ReadWriteProperty).To(() => A<int>.That.IsGreaterThan(4))                      .Invokes(call => wasConfiguredBehaviorUsed = true));
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,ConfigureFakeOverridesFakeOptionsBuilder,The following statement contains a magic number: "And an explicit options builder that overrides the method"                  .x(() => optionsBuilder = options => options.ConfigureFake(                      f => A.CallTo(() => f.CalculateTimestamp()).Returns(new DateTime(2000' 1' 1' 0' 0' 0))));
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,ConfigureFakeOverridesFakeOptionsBuilder,The following statement contains a magic number: "Then it uses the explicitly configured behavior"                  .x(() => fake.Timestamp.Should().Be(new DateTime(2000' 1' 1' 0' 0' 0)));
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,WithArgumentsForConstructor,The following statement contains a magic number: "And an explicit options builder that specifies the constructor arguments by array"                  .x(() => optionsBuilder = options => options                      .WithArgumentsForConstructor(new object[]                      {                          "prime argument"' 2                      }));
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,WithArgumentsForConstructor,The following statement contains a magic number: "Then it is constructed with the supplied arguments"                  .x(() =>                      {                          fake.ConstructorArgument1.Should().Be("prime argument");                          fake.ConstructorArgument2.Should().Be(2);                      });
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,MultipleWithArgumentsForConstructorConfigurations,The following statement contains a magic number: "And an explicit options builder that specifies the constructor arguments twice"                  .x(() => optionsBuilder = options => options                      .WithArgumentsForConstructor(new object[]                      {                          "prime argument"' 1                      })                      .WithArgumentsForConstructor(() => new MakesVirtualCallInConstructor("secondary argument"' 2)));
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,MultipleWithArgumentsForConstructorConfigurations,The following statement contains a magic number: "Then it is constructed with the last set of supplied arguments"                  .x(() =>                      {                          fake.ConstructorArgument1.Should().Be("secondary argument");                          fake.ConstructorArgument2.Should().Be(2);                      });
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,WithArgumentsForConstructorWithExampleConstructor,The following statement contains a magic number: "And an explicit options builder that specifies the constructor arguments by example"                  .x(() => optionsBuilder = options => options                      .WithArgumentsForConstructor(() => new MakesVirtualCallInConstructor("first argument"' 9)));
Magic Number,FakeItEasy.Specs,CreationOptionsSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationOptionsSpecs.cs,WithArgumentsForConstructorWithExampleConstructor,The following statement contains a magic number: "Then it is constructed with the supplied arguments"                  .x(() =>                      {                          fake.ConstructorArgument1.Should().Be("first argument");                          fake.ConstructorArgument2.Should().Be(9);                      });
Magic Number,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CacheSuccessfulConstructor,The following statement contains a magic number: "And nobody else is trying to fake the class right now"                  .x(() => Monitor.TryEnter(typeof(ClassWhosePreferredConstructorsThrow)' TimeSpan.FromSeconds(30)).Should().BeTrue("we must enter the monitor"))                  .Teardown(() => Monitor.Exit(typeof(ClassWhosePreferredConstructorsThrow)));
Magic Number,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CannotFakeInterfaceWithConstructorArguments,The following statement contains a magic number: "When I create a fake of the interface supplying constructor arguments"                  .x(() => exception = Record.Exception(() => this.CreateFake<IInterface>(options =>                      options.WithArgumentsForConstructor(new object[] { 7 }))));
Magic Number,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,SuppliedConstructorArgumentsArePassedToClassConstructor,The following statement contains a magic number: "When I create a fake of the class supplying valid constructor arguments"                  .x(() => fake = this.CreateFake<AClassThatCouldBeFakedWithTheRightConstructorArguments>(options =>                      options.WithArgumentsForConstructor(() => new AClassThatCouldBeFakedWithTheRightConstructorArguments(17))));
Magic Number,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,SuppliedConstructorArgumentsArePassedToClassConstructor,The following statement contains a magic number: "Then it passes the supplied arguments to the constructor"                  .x(() => fake.ID.Should().Be(17));
Magic Number,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,CannotFakeWithBadConstructorArguments,The following statement contains a magic number: "When I create a fake of the class supplying invalid constructor arguments"                  .x(() => exception = Record.Exception(() => this.CreateFake<AClassThatCouldBeFakedWithTheRightConstructorArguments>(options =>                      options.WithArgumentsForConstructor(new object[] { 7' "magenta" }))));
Magic Number,FakeItEasy.Specs,CreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,FakeDelegateCreationWithArgumentsForConstructor,The following statement contains a magic number: "When I create a fake of the delegate using explicit constructor arguments"                  .x(() => exception = Record.Exception(() => this.CreateFake<Func<int>>(options => options.WithArgumentsForConstructor(new object[] { 7 }))));
Magic Number,FakeItEasy.Specs,FakedClass,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,FakedClass,The following statement contains a magic number: ParameterListLengthsForAttemptedConstructors.Add(2);
Magic Number,FakeItEasy.Specs,FakedClass,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\CreationSpecs.cs,FakedClass,The following statement contains a magic number: this.ValueTypeProperty = 123456;
Magic Number,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,TypeWithDummyFactoryCreation,The following statement contains a magic number: "Then it returns a dummy created by the dummy factory"                  .x(() => dummy.Bar.Should().Be(42));
Magic Number,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,CollectionOfDummyCreation,The following statement contains a magic number: "When a collection of that type is requested"                  .x(() => dummies = this.CreateCollectionOfDummy<DateTime>(10));
Magic Number,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,CollectionOfDummyCreation,The following statement contains a magic number: "Then it returns a collection with the specified number of dummies"                  .x(() => dummies.Should().HaveCount(10));
Magic Number,FakeItEasy.Specs,DummyCreationSpecsBase,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,ClassWhoseLongerConstructorThrowsCreation,The following statement contains a magic number: "And nobody else is trying to create a dummy of the class right now"                  .x(() => Monitor.TryEnter(typeof(ClassWhoseLongerConstructorThrows)' TimeSpan.FromSeconds(30)).Should().BeTrue("we must enter the monitor"))                  .Teardown(() => Monitor.Exit(typeof(ClassWhoseLongerConstructorThrows)));
Magic Number,FakeItEasy.Specs,FooDummyFactory,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyCreationSpecs.cs,Create,The following statement contains a magic number: return new Foo { Bar = 42 };
Magic Number,FakeItEasy.Specs,DummyFactorySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyFactorySpecs.cs,DummyFactoryPriority,The following statement contains a magic number: "Then it should be created by the factory with the higher priority"                  .x(() => dummy.ID.Should().Be(-17));
Magic Number,FakeItEasy.Specs,RobotRunsAmokEventDummyFactory,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\DummyFactorySpecs.cs,Create,The following statement contains a magic number: return new RobotRunsAmokEvent { ID = -17 };
Magic Number,FakeItEasy.Specs,EventRaisingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\EventRaisingSpecs.cs,FreeformActionEvent,The following statement contains a magic number: "When I raise the event as freeform specifying the arguments"                  .x(() => Fake.ActionEvent += Raise.FreeForm<Action<int' bool>>.With(19' true));
Magic Number,FakeItEasy.Specs,EventRaisingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\EventRaisingSpecs.cs,FreeformActionEvent,The following statement contains a magic number: "Then the first value is passed as the first event argument"                  .x(() => CapturedArgs1.Should().Be(19));
Magic Number,FakeItEasy.Specs,EventRaisingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\EventRaisingSpecs.cs,DynamicActionEvent,The following statement contains a magic number: "When I raise the event specifying the arguments"                  .x(() => Fake.ActionEvent += Raise.FreeForm.With(19' true));
Magic Number,FakeItEasy.Specs,EventRaisingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\EventRaisingSpecs.cs,DynamicActionEvent,The following statement contains a magic number: "Then the first value is passed as the first event argument"                  .x(() => CapturedArgs1.Should().Be(19));
Magic Number,FakeItEasy.Specs,EventRaisingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\EventRaisingSpecs.cs,DynamicRaiseAssignmentToNonDelegate,The following statement contains a magic number: "When I assign Raise.FreeForm.With to something that isn't a delegate"                  .x(() => exception = Record.Exception(() => s = Raise.FreeForm.With("foo"' 42)));
Magic Number,FakeItEasy.Specs,EventRaisingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\EventRaisingSpecs.cs,DynamicRaiseWithWrongArguments,The following statement contains a magic number: "When I raise the event specifying incorrect arguments"                  .x(() => exception = Record.Exception(() => Fake.CustomEvent += Raise.FreeForm.With("foo"' 42' true)));
Magic Number,FakeItEasy.Specs,FakeOptionsBuilderSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakeOptionsBuilderSpecs.cs,FakeOptionsBuilderPriority,The following statement contains a magic number: "Then the configuration from the options builder with the higher priority is used"                  .x(() => fake.ID.Should().Be(-99));
Magic Number,FakeItEasy.Specs,RobotRunsAmokEventFakeOptionsBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakeOptionsBuilderSpecs.cs,BuildOptions,The following statement contains a magic number: options.ConfigureFake(fake =>              {                  var robotRunsAmokEvent = fake;                  A.CallTo(() => robotRunsAmokEvent.CalculateTimestamp())                      .Returns(ConfiguredTimestamp);                  robotRunsAmokEvent.ID = -99;              });
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,ConfiguredToReturn,The following statement contains a magic number: "And I configure it to return 10"                  .x(() => A.CallTo(() => fakedDelegate.Invoke(A<string>._)).Returns(10));
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,ConfiguredToReturn,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(10));
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,ConfiguredToReturnLazily,The following statement contains a magic number: "Then it returns a value constructed from the input"                  .x(() => result.Should().Be(-27));
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,MissingInvoke,The following statement contains a magic number: "And I configure it to return 10 without specifying the Invoke method explicitly"                  .x(() => A.CallTo(() => fakedDelegate(A<string>._)).Returns(10));
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,MissingInvoke,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(10));
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,SetOutAndRefVoid,The following statement contains a magic number: "And I configure it to set ref and out parameters"                  .x(() =>                  {                      string outString;                      int refInt = 0;                      A.CallTo(() => fake.Invoke(out outString' ref refInt)).AssignsOutAndRefParameters("fancy out string"' 3);                  });
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,SetOutAndRefVoid,The following statement contains a magic number: "And it sets the proper ref value"                  .x(() => theRefParameter.Should().Be(3));
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,SetOutAndRefNonVoid,The following statement contains a magic number: "And I configure it to set ref and out parameters"                  .x(() =>                  {                      string? refString = null;                      int outInt;                      A.CallTo(() => fake.Invoke(ref refString' out outInt)).AssignsOutAndRefParameters("fancy ref string"' 5);                  });
Magic Number,FakeItEasy.Specs,FakingDelegates,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingDelegates.cs,SetOutAndRefNonVoid,The following statement contains a magic number: "And it sets the proper out value"                  .x(() => theOutParameter.Should().Be(5));
Magic Number,FakeItEasy.Specs,FakingInternalsSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingInternalsSpecs.cs,OverrideInternalMethod,The following statement contains a magic number: "When I override the internal method"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.InternalMethod()).Returns(17)));
Magic Number,FakeItEasy.Specs,TypeWithInternalMethod,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\FakingInternalsSpecs.cs,InternalMethod,The following statement contains a magic number: return 8;
Magic Number,FakeItEasy.Specs,InParameterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\InParametersSpecs.cs,FakingInParam,The following statement contains a magic number: "And a call to this method is configured configured to return a value"                  .x(() => A.CallTo(() => fake.Foo(in argument)).Returns(42));
Magic Number,FakeItEasy.Specs,InParameterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\InParametersSpecs.cs,FakingInParam,The following statement contains a magic number: "Then it returns the configured value"                  .x(() => result.Should().Be(42));
Magic Number,FakeItEasy.Specs,InParameterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\InParametersSpecs.cs,SettingInParamInterface,The following statement contains a magic number: "And a call to this method is configured to set a new value for the parameter"                  .x(() => A.CallTo(() => fake.Foo(A<int>._)).AssignsOutAndRefParameters(19));
Magic Number,FakeItEasy.Specs,InParameterSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\InParametersSpecs.cs,SettingInParamDelegate,The following statement contains a magic number: "And a call to this method is configured to set a new value for the parameter"                  .x(() => A.CallTo(() => fake.Invoke(A<int>._)).AssignsOutAndRefParameters(19));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsInOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 2"                  .x(() => fake.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsInOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 3"                  .x(() => fake.Bar(3));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsInOrder,The following statement contains a magic number: "When I assert that a call with argument 1 was made twice exactly' then a call with argument 2' and then a call with argument 3"                  .x(() => exception = Record.Exception(() =>                      A.CallTo(() => fake.Bar(1)).MustHaveHappenedTwiceExactly()                          .Then(A.CallTo(() => fake.Bar(2)).MustHaveHappened())                          .Then(A.CallTo(() => fake.Bar(3)).MustHaveHappened())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsInOrder,The following statement contains a magic number: "When I assert that a call with argument 1 was made twice exactly' then a call with argument 2' and then a call with argument 3"                  .x(() => exception = Record.Exception(() =>                      A.CallTo(() => fake.Bar(1)).MustHaveHappenedTwiceExactly()                          .Then(A.CallTo(() => fake.Bar(2)).MustHaveHappened())                          .Then(A.CallTo(() => fake.Bar(3)).MustHaveHappened())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOutOfOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 3"                  .x(() => fake.Bar(3));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOutOfOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 2"                  .x(() => fake.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOutOfOrder,The following statement contains a magic number: "When I assert that a call with argument 1 was made twice exactly' then a call with argument 2' and then a call with argument 3"                  .x(() => exception = Record.Exception(() =>                      A.CallTo(() => fake.Bar(1)).MustHaveHappenedTwiceExactly()                          .Then(A.CallTo(() => fake.Bar(2)).MustHaveHappened())                          .Then(A.CallTo(() => fake.Bar(3)).MustHaveHappened())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOutOfOrder,The following statement contains a magic number: "When I assert that a call with argument 1 was made twice exactly' then a call with argument 2' and then a call with argument 3"                  .x(() => exception = Record.Exception(() =>                      A.CallTo(() => fake.Bar(1)).MustHaveHappenedTwiceExactly()                          .Then(A.CallTo(() => fake.Bar(2)).MustHaveHappened())                          .Then(A.CallTo(() => fake.Bar(3)).MustHaveHappened())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOnDifferentObjectsInOrder,The following statement contains a magic number: "And a call on the first Fake' passing argument 2"                  .x(() => fake1.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOnDifferentObjectsInOrder,The following statement contains a magic number: "When I assert that a call with argument 1 was made on the first Fake' then on the second' and then that a call with argument 2 was made on the first Fake"                  .x(() => exception = Record.Exception(() =>                      A.CallTo(() => fake1.Bar(1)).MustHaveHappened()                          .Then(A.CallTo(() => fake2.Bar(1)).MustHaveHappened())                          .Then(A.CallTo(() => fake1.Bar(2)).MustHaveHappened())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOnDifferentObjectsOutOfOrder,The following statement contains a magic number: "And a call on the first Fake' passing argument 2"                  .x(() => fake1.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionsOnDifferentObjectsOutOfOrder,The following statement contains a magic number: "When I assert that a call with argument 1 was made on the first Fake' then on the second' and then that a call with argument 2 was made on the first Fake"                  .x(() => exception = Record.Exception(() =>                      A.CallTo(() => fake1.Bar(1)).MustHaveHappened()                          .Then(A.CallTo(() => fake2.Bar(1)).MustHaveHappened())                          .Then(A.CallTo(() => fake1.Bar(2)).MustHaveHappened())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsInOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 2"                  .x(() => fake.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsInOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 2"                  .x(() => fake.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsInOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 3"                  .x(() => fake.Bar(3));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsInOrder,The following statement contains a magic number: "And then a call with argument 2"                  .x(() => lastAssertion = lastAssertion.Then(A.CallTo(() => fake.Bar(2)).MustHaveHappened()));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsInOrder,The following statement contains a magic number: "And then a call with argument 3 once exactly"                  .x(() => exception = Record.Exception(() => lastAssertion.Then(A.CallTo(() => fake.Bar(3)).MustHaveHappenedOnceExactly())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsOutOfOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 3"                  .x(() => fake.Bar(3));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsOutOfOrder,The following statement contains a magic number: "And a call on the Fake' passing argument 2"                  .x(() => fake.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsOutOfOrder,The following statement contains a magic number: "And then a call with argument 2"                  .x(() => lastAssertion = lastAssertion.Then(A.CallTo(() => fake.Bar(2)).MustHaveHappened()));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,MultistepOrderedAssertionsOutOfOrder,The following statement contains a magic number: "And then that a call with argument 3 was made once exactly"                  .x(() => exception = Record.Exception(() => lastAssertion.Then(A.CallTo(() => fake.Bar(3)).MustHaveHappenedOnceExactly())));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionWithCallCountConstraintFailure,The following statement contains a magic number: "And a call on the Fake' passing argument 2"                  .x(() => fake.Bar(2));
Magic Number,FakeItEasy.Specs,OrderedCallMatchingSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\OrderedCallMatchingSpecs.cs,OrderedAssertionWithCallCountConstraintFailure,The following statement contains a magic number: "When I assert that a call with argument 2 was made"                  .x(() => lastAssertion = A.CallTo(() => fake.Bar(2)).MustHaveHappened());
Magic Number,FakeItEasy.Specs,ReadWritePropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ReadWritePropertySpecs.cs,AssignNonConfiguredProperty,The following statement contains a magic number: "When I assign a value to a read-write property"                  .x(() => foo.Bar = 123);
Magic Number,FakeItEasy.Specs,ReadWritePropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ReadWritePropertySpecs.cs,AssignNonConfiguredProperty,The following statement contains a magic number: "Then the property returns the assigned value"                  .x(() => foo.Bar.Should().Be(123));
Magic Number,FakeItEasy.Specs,ReadWritePropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ReadWritePropertySpecs.cs,AssignPropertyWithConfiguredGetter,The following statement contains a magic number: "And the getter of a read-write property of the fake is explicitly configured to return a value"                  .x(() => A.CallTo(() => foo.Bar).Returns(42));
Magic Number,FakeItEasy.Specs,ReadWritePropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ReadWritePropertySpecs.cs,AssignPropertyWithConfiguredGetter,The following statement contains a magic number: "When I assign another value to that property"                  .x(() => foo.Bar = 123);
Magic Number,FakeItEasy.Specs,ReadWritePropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ReadWritePropertySpecs.cs,AssignPropertyWithConfiguredGetter,The following statement contains a magic number: "Then the assignment has no effect and the property returns the explicitly configured value"                  .x(() => foo.Bar.Should().Be(42));
Magic Number,FakeItEasy.Specs,ReadWritePropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ReadWritePropertySpecs.cs,GetPropertyWithConfiguredSetter,The following statement contains a magic number: "And I assign another value to that property"                  .x(() => foo.Bar = 123);
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodWithReturns,The following statement contains a magic number: "When a non-void method is configured to return 1 once then return 2"                  .x(() =>                      A.CallTo(() => foo.Baz()).Returns(1).Once()                          .Then.Returns(2));
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodWithReturns,The following statement contains a magic number: "And the second call returns 2"                  .x(() => result2.Should().Be(2));
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodWithReturns,The following statement contains a magic number: "And the third call returns 2"                  .x(() => result3.Should().Be(2));
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,AnyCallWithInvokesAndThrows,The following statement contains a magic number: "And 4 calls are made on the fake"                  .x(() =>                  {                      foo.Bar();                      foo.Bar(1);                      foo.Bar(2);                      exception = Record.Exception(() => foo.Bar(3));                  });
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,AnyCallWithInvokesAndThrows,The following statement contains a magic number: "And 4 calls are made on the fake"                  .x(() =>                  {                      foo.Bar();                      foo.Bar(1);                      foo.Bar(2);                      exception = Record.Exception(() => foo.Bar(3));                  });
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodOverrideWithThen,The following statement contains a magic number: "And the configuration is overridden to return 2 once then 3 once"                  .x(() => A.CallTo(() => foo.Baz()).Returns(2).Once()                      .Then.Returns(3).Once());
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodOverrideWithThen,The following statement contains a magic number: "And the configuration is overridden to return 2 once then 3 once"                  .x(() => A.CallTo(() => foo.Baz()).Returns(2).Once()                      .Then.Returns(3).Once());
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodOverrideWithThen,The following statement contains a magic number: "Then the first call returns 2"                  .x(() => result1.Should().Be(2));
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodOverrideWithThen,The following statement contains a magic number: "And the second call returns 3"                  .x(() => result2.Should().Be(3));
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodThenAndOverride,The following statement contains a magic number: "When a non-void is configured to return 2 once then 3 once"                  .x(() => A.CallTo(() => foo.Baz()).Returns(2).Once()                      .Then.Returns(3).Once());
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodThenAndOverride,The following statement contains a magic number: "When a non-void is configured to return 2 once then 3 once"                  .x(() => A.CallTo(() => foo.Baz()).Returns(2).Once()                      .Then.Returns(3).Once());
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodThenAndOverride,The following statement contains a magic number: "And the second call returns 2"                  .x(() => result2.Should().Be(2));
Magic Number,FakeItEasy.Specs,ThenSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ThenSpecs.cs,NonVoidMethodThenAndOverride,The following statement contains a magic number: "And the third call returns 3"                  .x(() => result3.Should().Be(3));
Magic Number,FakeItEasy.Specs,UnconfiguredFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredFakeSpecs.cs,VirtualValueTypeProperty,The following statement contains a magic number: "Then it will be the value assigned during construction"                  .x(() => result.Should().Be(123456));
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedProperty,The following statement contains a magic number: "When I set the value of the property"                  .x(() => subject[17' true] = new List<string> { "hippo"' "lemur" });
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedProperty,The following statement contains a magic number: "And I call the getter with the original indexes"                  .x(() => firstGetResultForOriginalIndexes = subject[17' true]);
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedProperty,The following statement contains a magic number: "And I call the getter with different indexes"                  .x(() => firstGetResultForDifferentIndexes = subject[-183' true]);
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedProperty,The following statement contains a magic number: "And the property returns the same instance when called again with those indexes"                  .x(() => subject[17' true].Should()                      .BeSameAs(firstGetResultForOriginalIndexes' "property getters should return the same object every time"));
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedProperty,The following statement contains a magic number: "And the property returns the same instance when called again with those indexes"                  .x(() => subject[-183' true].Should().BeSameAs(firstGetResultForDifferentIndexes));
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedPropertyForDifferentIndexes,The following statement contains a magic number: "When I set the value of the property"                  .x(() => subject[17' true] = new List<string> { "hippo"' "lemur" });
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedPropertyForDifferentIndexes,The following statement contains a magic number: "And I set the value of the property using different indexes"                  .x(() => subject[17' false] = new List<string> { "corgi"' "chicken" });
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedPropertyForDifferentIndexes,The following statement contains a magic number: "And I call the getter with the original indexes"                  .x(() => getResultForFirstIndexes = subject[17' true]);
Magic Number,FakeItEasy.Specs,UnconfiguredPropertySpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnconfiguredPropertySpecs.cs,SettingIndexedPropertyForDifferentIndexes,The following statement contains a magic number: "And I call the getter with the second indexes"                  .x(() => getResultForSecondIndexes = subject[17' false]);
Magic Number,FakeItEasy.Specs,UnnaturalFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnnaturalFakeSpecs.cs,CallsToNonVoidWithCallToWrongFake,The following statement contains a magic number: "When I configure a fake with an expression that calls the wrong fake"                  .x(() => exception = Record.Exception(() => fake.CallsTo(f => wrong.MethodWithResult()).Returns(42)));
Magic Number,FakeItEasy.Specs,UnnaturalFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnnaturalFakeSpecs.cs,CallsToSetSpecificValueAndAssigningThatValue,The following statement contains a magic number: "And assignment of a property is configured for a specific value"                  .x(() => fake.CallsToSet(f => f.Bar).To(42).Invokes(call => wasCalled = true));
Magic Number,FakeItEasy.Specs,UnnaturalFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnnaturalFakeSpecs.cs,CallsToSetSpecificValueAndAssigningThatValue,The following statement contains a magic number: "When I assign that value to the property"                  .x(() => fake.FakedObject.Bar = 42);
Magic Number,FakeItEasy.Specs,UnnaturalFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnnaturalFakeSpecs.cs,CallsToSetSpecificValueAndAssigningDifferentValue,The following statement contains a magic number: "And assignment of a property is configured for a specific value"                  .x(() => fake.CallsToSet(f => f.Bar).To(42).Invokes(call => wasCalled = true));
Magic Number,FakeItEasy.Specs,UnnaturalFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UnnaturalFakeSpecs.cs,CallsToSetSpecificValueAndAssigningDifferentValue,The following statement contains a magic number: "When I assign a different value to the property"                  .x(() => fake.FakedObject.Bar = 3);
Magic Number,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentConstraintExpression,The following statement contains a magic number: "When a call to the fake is configured using that constraint factory"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(ThrowingConstraintFactory())).Returns(42)));
Magic Number,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcher,The following statement contains a magic number: "And a call to the fake is configured with a custom argument matcher that throws an exception"                  .x(() => A.CallTo(() => fake.Bar(A<int>.That.Matches(i => ThrowException()))).Returns(42));
Magic Number,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcherDescription,The following statement contains a magic number: "When an assertion is made with a custom argument matcher whose description throws an exception"                  .x(() => exception = Record.Exception(() => A.CallTo(() => fake.Bar(A<int>.That.Matches(i => i % 2 == 0' o => o.Write(ThrowException())))).MustHaveHappened()));
Magic Number,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ExceptionInArgumentMatcherAndInDescription,The following statement contains a magic number: "And a call to the fake is configured with a custom argument matcher that throws an exception and whose description also throws an exception"                  .x(() => A.CallTo(() => fake.Bar(A<int>.That.Matches(i => ThrowException()' o => o.Write(ThrowException())))).Returns(42));
Magic Number,FakeItEasy.Specs,UserCallbackExceptionSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\UserCallbackExceptionSpecs.cs,ThrowingConstraintFactory,The following statement contains a magic number: return 42;
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskSpecificValue,The following statement contains a magic number: "And a ValueTask-returning method of the fake configured to return a specific value"                  .x(() => A.CallTo(() => fake.GetValueAsync()).Returns(42));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskSpecificValue,The following statement contains a magic number: "And the ValueTask's result is the configured value"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskLazilyComputed,The following statement contains a magic number: "And a value producer configured to return a specific value"                  .x(() => valueProducer = A.Fake<Func<int>>(o => o.ConfigureFake(f => A.CallTo(() => f()).Returns(42))));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskLazilyComputed,The following statement contains a magic number: "And the ValueTask's result is the configured value"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskFromSequence,The following statement contains a magic number: "And a ValueTask-returning method of the fake configured to return values from a sequence of 3"                  .x(() => A.CallTo(() => fake.GetValueAsync()).ReturnsNextFromSequence(1' 2' 3));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskFromSequence,The following statement contains a magic number: "And a ValueTask-returning method of the fake configured to return values from a sequence of 3"                  .x(() => A.CallTo(() => fake.GetValueAsync()).ReturnsNextFromSequence(1' 2' 3));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskFromSequence,The following statement contains a magic number: "Then it returns 3 ValueTasks whose results are the values from the sequence"                  .x(() =>                  {                      task1.Result.Should().Be(1);                      task2.Result.Should().Be(2);                      task3.Result.Should().Be(3);                  });
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskFromSequence,The following statement contains a magic number: "Then it returns 3 ValueTasks whose results are the values from the sequence"                  .x(() =>                  {                      task1.Result.Should().Be(1);                      task2.Result.Should().Be(2);                      task3.Result.Should().Be(3);                  });
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskStronglyTypedLazilyComputed1Parameter,The following statement contains a magic number: "When the configured method is called"                  .x(() => task = fake.GetValueAsync(41));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskStronglyTypedLazilyComputed1Parameter,The following statement contains a magic number: "And the ValueTask's result is the result of the value producer"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskStronglyTypedLazilyComputed2Parameters,The following statement contains a magic number: "When the configured method is called"                  .x(() => task = fake.GetValueAsync(37' "hello"));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskStronglyTypedLazilyComputed2Parameters,The following statement contains a magic number: "And the ValueTask's result is the result of the value producer"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskStronglyTypedLazilyComputed3Parameters,The following statement contains a magic number: "When the configured method is called"                  .x(() => task = fake.GetValueAsync(36' "hello"' true));
Magic Number,FakeItEasy.Specs,ValueTaskReturnValueSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\ValueTaskReturnValueSpecs.cs,ValueTaskStronglyTypedLazilyComputed3Parameters,The following statement contains a magic number: "And the ValueTask's result is the result of the value producer"                  .x(() => task.Result.Should().Be(42));
Magic Number,FakeItEasy.Specs,WrappingFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\WrappingFakeSpecs.cs,NonVoidSuccess,The following statement contains a magic number: "And the wrapper returns the value returned by the real object's method"                  .x(() => result.Should().Be(5));
Magic Number,FakeItEasy.Specs,WrappingFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\WrappingFakeSpecs.cs,OutAndRef,The following statement contains a magic number: "And the value of @ref is incremented"                  .x(() => @ref.Should().Be(2));
Magic Number,FakeItEasy.Specs,WrappingFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\WrappingFakeSpecs.cs,OutAndRef,The following statement contains a magic number: "And the value of @out is set"                  .x(() => @out.Should().Be(42));
Magic Number,FakeItEasy.Specs,WrappingFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\WrappingFakeSpecs.cs,FakeEqualsFakeWithValueSemantics,The following statement contains a magic number: "Given a real object that overrides Equals with value semantics"                  .x(() => realObject = new Bar(42));
Magic Number,FakeItEasy.Specs,WrappingFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\WrappingFakeSpecs.cs,FakeEqualsWrappedObjectWithValueSemantics,The following statement contains a magic number: "Given a real object that overrides Equals with value semantics"                  .x(() => realObject = new Bar(42));
Magic Number,FakeItEasy.Specs,WrappingFakeSpecs,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\tests\FakeItEasy.Specs\WrappingFakeSpecs.cs,NonVoidCallsWrappedMethod,The following statement contains a magic number: "And the wrapper returns the value returned by the real object's method"                  .x(() => returnValue.Should().Be(5));
