Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FakeItEasy.Analyzer,ArgumentConstraintTypeMismatchAnalyzer,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintTypeMismatchAnalyzer.cs,AnalyzeArgumentConstraintCore,Cyclomatic complexity of the method is 9
Long Parameter List,FakeItEasy.Analyzer,DiagnosticDefinitions,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\DiagnosticDefinitions.cs,CreateDiagnosticDescriptor,The method has 5 parameters. Parameters: name' id' category' defaultSeverity' isEnabledByDefault
Long Identifier,FakeItEasy.Analyzer,ArgumentConstraintOutsideCallSpecAnalyzer,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintOutsideCallSpecAnalyzer.cs,,The length of the parameter MethodsSupportingArgumentConstraints is 36.
Long Identifier,FakeItEasy.Analyzer,ArgumentConstraintOutsideCallSpecAnalyzer,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintOutsideCallSpecAnalyzer.cs,,The length of the parameter SupportedArgumentConstraintProperties is 37.
Long Identifier,FakeItEasy.Analyzer,ArgumentConstraintTypeMismatchAnalyzer,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintTypeMismatchAnalyzer.cs,,The length of the parameter SupportedArgumentConstraintProperties is 37.
Long Identifier,FakeItEasy.Analyzer,SymbolHelpers,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\SymbolHelpers.cs,GetCalledMethodSymbol,The length of the parameter useFirstCandidateIfNotResolved is 30.
Long Statement,FakeItEasy.Analyzer,ArgumentConstraintAnalyzerBase,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintAnalyzerBase.cs,GetCompleteConstraint,The length of the statement  "            while (node.Parent.Kind() == SyntaxKind.SimpleMemberAccessExpression || node.Parent.Kind() == SyntaxKind.InvocationExpression) " is 126.
Long Statement,FakeItEasy.Analyzer,NonVirtualSetupAnalyzer,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\NonVirtualSetupAnalyzer.cs,AnalyzeCall,The length of the statement  "                Diagnostic diagnostic = Diagnostic.Create(DiagnosticDefinitions.NonVirtualSetupSpecification' location' symbolInfo.Symbol.Name); " is 128.
Complex Conditional,FakeItEasy.Analyzer,ArgumentConstraintTypeMismatchAnalyzer,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintTypeMismatchAnalyzer.cs,AnalyzeArgumentConstraintCore,The conditional expression  "nonNullableParameterType != null &&                      constraintType.IsValueType &&                      !constraintType.IsNullable() &&                      constraintType.Equals(nonNullableParameterType)"  is complex.
Missing Default,FakeItEasy.Analyzer,ArgumentConstraintOutsideCallSpecAnalyzer,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintOutsideCallSpecAnalyzer.cs,IsInArgumentToMethodThatSupportsArgumentConstraints,The following switch statement is missing a default case: switch (node.Kind())                  {  #if CSHARP                      case SyntaxKind.PropertyDeclaration:                      case SyntaxKind.MethodDeclaration:                      case SyntaxKind.ConstructorDeclaration:  #elif VISUAL_BASIC                      case SyntaxKind.GetAccessorBlock:                      case SyntaxKind.SetAccessorBlock:                      case SyntaxKind.SubBlock:                      case SyntaxKind.ConstructorBlock:  #endif                          break;                  }
Missing Default,FakeItEasy.Analyzer,ArgumentConstraintTypeMismatchCodeFixProvider,C:\repos\FakeItEasy_FakeItEasy\src\FakeItEasy.Analyzer\ArgumentConstraintTypeMismatchCodeFixProvider.cs,GetConstraintType,The following switch statement is missing a default case: switch (constraintNode)              {                  case MemberAccessExpressionSyntax memberAccessNode:                      var expressionNode = memberAccessNode.Expression as GenericNameSyntax;                      return expressionNode?.TypeArgumentList.Arguments.FirstOrDefault();                  case InvocationExpressionSyntax invocationNode:                      var aTThatMatches = invocationNode.Expression as MemberAccessExpressionSyntax;                      var aTthat = aTThatMatches?.Expression as MemberAccessExpressionSyntax;                      var aT = aTthat?.Expression as GenericNameSyntax;                      return aT?.TypeArgumentList.Arguments.FirstOrDefault();              }
