Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FakeItEasy,ExpressionExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ExpressionExtensions.cs,TryFastEvaluate,Cyclomatic complexity of the method is 17
Complex Method,FakeItEasy.Core,FakeManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeManager.AutoFakePropertyRule.cs,ApplyBestRule,Cyclomatic complexity of the method is 8
Complex Method,FakeItEasy.Creation.CastleDynamicProxy,CastleDynamicProxyInterceptionValidator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CastleDynamicProxy\CastleDynamicProxyInterceptionValidator.cs,GetReasonForWhyMethodCanNotBeIntercepted,Cyclomatic complexity of the method is 8
Complex Method,FakeItEasy.Creation,ResolveByInstantiatingClassUsingDummyValuesAsConstructorArgumentsStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\DummyValueResolver.cs,TryCreateDummyValue,Cyclomatic complexity of the method is 9
Long Parameter List,FakeItEasy.Configuration,StartConfiguration<TFake>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\StartConfiguration.cs,StartConfiguration,The method has 5 parameters. Parameters: manager' callRuleFactory' configurationFactory' expressionParser' interceptionAsserter
Long Parameter List,FakeItEasy.Creation.CastleDynamicProxy,CastleDynamicProxyGenerator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CastleDynamicProxy\CastleDynamicProxyGenerator.cs,GenerateClassProxy,The method has 5 parameters. Parameters: typeOfProxy' additionalInterfacesToImplement' argumentsForConstructor' attributes' fakeCallProcessorProvider
Long Identifier,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,,The length of the parameter NameOfWhenArgumentsMatchFeature is 31.
Long Identifier,FakeItEasy,RootModule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,RegisterDependencies,The length of the parameter implicitOptionsBuilderCatalogue is 31.
Long Identifier,FakeItEasy,RootModule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,RegisterDependencies,The length of the parameter expressionArgumentConstraintFactory is 35.
Long Identifier,FakeItEasy,ExpressionCallMatcherFactory,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,ExpressionCallMatcherFactory,The length of the parameter expressionArgumentConstraintFactory is 35.
Long Identifier,FakeItEasy,ExpressionCallMatcherFactory,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,,The length of the parameter expressionArgumentConstraintFactory is 35.
Long Identifier,FakeItEasy,TaskHelper,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\TaskHelper.cs,,The length of the parameter CreateGenericCanceledTaskGenericDefinition is 42.
Long Identifier,FakeItEasy,ValueProducerSignatureHelper,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ValueProducerSignatureHelper.cs,IsCallSignatureSatisfiedByValueProducerSignature,The length of the parameter valueProducerMethodParameterTypes is 33.
Long Identifier,FakeItEasy.Configuration,AnyCallCallRule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallCallRule.cs,,The length of the parameter applicableToMembersWithReturnType is 33.
Long Identifier,FakeItEasy.Configuration,BuildableCallRule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\BuildableCallRule.cs,,The length of the parameter DefaultOutAndRefParametersValueProducer is 39.
Long Identifier,FakeItEasy.Configuration,BuildableCallRule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\BuildableCallRule.cs,,The length of the parameter canSetOutAndRefParametersValueProducer is 38.
Long Identifier,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,PropertySetterConfiguration,The length of the parameter voidArgumentValidationConfigurationFactory is 42.
Long Identifier,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,To,The length of the parameter voidArgumentValidationConfiguration is 35.
Long Identifier,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AsPropertySetterConfiguration,The length of the parameter voidArgumentValidationConfiguration is 35.
Long Identifier,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,,The length of the parameter voidArgumentValidationConfigurationFactory is 42.
Long Identifier,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,PropertySetterAdapter,The length of the parameter voidArgumentValidationConfiguration is 35.
Long Identifier,FakeItEasy.Configuration,PropertyExpressionHelper,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\PropertyExpressionHelper.cs,BuildSetterFromGetter,The length of the parameter newParsedSetterValueExpression is 30.
Long Identifier,FakeItEasy.Core,ArgumentConstraintTrap,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\ArgumentConstraintTrap.cs,,The length of the parameter ThrowWhenUnpreparedToTrapConstraint is 35.
Long Identifier,FakeItEasy.Core,BootstrapperLocator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\BootstrapperLocator.cs,FindBootstrapper,The length of the parameter loadedAssembliesReferencingFakeItEasy is 37.
Long Identifier,FakeItEasy.Core,CallWriter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\CallWriter.cs,WriteCalls,The length of the parameter numberOfDigitsInLastCallNumber is 30.
Long Identifier,FakeItEasy.Core,EventRule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeManager.EventRule.cs,,The length of the parameter EventHandlerArgumentProviderMap is 31.
Long Identifier,FakeItEasy.Core,TypeCatalogue,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\TypeCatalogue.cs,GetAllAssemblies,The length of the parameter loadedAssembliesReferencingFakeItEasy is 37.
Long Identifier,FakeItEasy.Creation.CastleDynamicProxy,CastleDynamicProxyGenerator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CastleDynamicProxy\CastleDynamicProxyGenerator.cs,GenerateInterfaceProxy,The length of the parameter additionalInterfacesToImplement is 31.
Long Identifier,FakeItEasy.Creation.CastleDynamicProxy,CastleDynamicProxyGenerator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CastleDynamicProxy\CastleDynamicProxyGenerator.cs,GenerateClassProxy,The length of the parameter additionalInterfacesToImplement is 31.
Long Identifier,FakeItEasy.Creation,ResolveByCreatingTaskStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\DummyValueResolver.cs,,The length of the parameter GenericFromResultMethodDefinition is 33.
Long Identifier,FakeItEasy.Creation,ResolveByCreatingLazyStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\DummyValueResolver.cs,,The length of the parameter CreateLazyDummyGenericDefinition is 32.
Long Identifier,FakeItEasy.Creation,FakeAndDummyManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeAndDummyManager.cs,FakeAndDummyManager,The length of the parameter implicitOptionsBuilderCatalogue is 31.
Long Identifier,FakeItEasy.Creation,FakeAndDummyManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeAndDummyManager.cs,,The length of the parameter implicitOptionsBuilderCatalogue is 31.
Long Identifier,FakeItEasy.Creation,FakeObjectCreator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,FakeObjectCreator,The length of the parameter fakeCallProcessorProviderFactory is 32.
Long Identifier,FakeItEasy.Creation,FakeObjectCreator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,FakeObjectCreator,The length of the parameter castleMethodInterceptionValidator is 33.
Long Identifier,FakeItEasy.Creation,FakeObjectCreator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,FakeObjectCreator,The length of the parameter delegateMethodInterceptionValidator is 35.
Long Identifier,FakeItEasy.Creation,DelegateCreationStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,DelegateCreationStrategy,The length of the parameter fakeCallProcessorProviderFactory is 32.
Long Identifier,FakeItEasy.Creation,DelegateCreationStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,,The length of the parameter fakeCallProcessorProviderFactory is 32.
Long Identifier,FakeItEasy.Creation,DefaultCreationStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,DefaultCreationStrategy,The length of the parameter fakeCallProcessorProviderFactory is 32.
Long Identifier,FakeItEasy.Creation,DefaultCreationStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,,The length of the parameter fakeCallProcessorProviderFactory is 32.
Long Identifier,FakeItEasy.Creation,ProxyOptions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\ProxyOptions.cs,,The length of the parameter additionalInterfacesToImplement is 31.
Long Statement,FakeItEasy,ArgumentConstraintManagerExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentConstraintManagerExtensions.cs,Contains,The length of the statement  "            return manager.NullCheckedMatches(x => x.Contains(value' StringComparison.CurrentCulture)' x => x.Write("string that contains ").WriteArgumentValue(value)); " is 156.
Long Statement,FakeItEasy,ArgumentConstraintManagerExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentConstraintManagerExtensions.cs,Contains,The length of the statement  "            return manager.NullCheckedMatches(x => x.Contains(value)' x => x.Write("string that contains ").WriteArgumentValue(value)); " is 123.
Long Statement,FakeItEasy,ArgumentConstraintManagerExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentConstraintManagerExtensions.cs,StartsWith,The length of the statement  "            return manager.NullCheckedMatches(x => x.StartsWith(value' StringComparison.Ordinal)' x => x.Write("string that starts with ").WriteArgumentValue(value)); " is 154.
Long Statement,FakeItEasy,ArgumentConstraintManagerExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentConstraintManagerExtensions.cs,EndsWith,The length of the statement  "            return manager.NullCheckedMatches(x => x.EndsWith(value' StringComparison.Ordinal)' x => x.Write("string that ends with ").WriteArgumentValue(value)); " is 150.
Long Statement,FakeItEasy,ArgumentConstraintManagerExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentConstraintManagerExtensions.cs,IsInstanceOf,The length of the statement  "            return manager.Matches(x => x is object && type.IsAssignableFrom(x.GetType())' description => description.Write("Instance of ").Write(type.ToString())); " is 152.
Long Statement,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The length of the statement  "                return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)); " is 128.
Long Statement,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The length of the statement  "                return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)); " is 145.
Long Statement,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The length of the statement  "                return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)' args.Get<T8>(7)); " is 162.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "            return configuration.ReturnsLazily((T1 arg1' T2 arg2' T3 arg3) => TaskHelper.FromException<T>(exceptionFactory(arg1' arg2' arg3))); " is 131.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "            return configuration.ReturnsLazily((T1 arg1' T2 arg2' T3 arg3' T4 arg4) => TaskHelper.FromException<T>(exceptionFactory(arg1' arg2' arg3' arg4))); " is 146.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "                    (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5) => TaskHelper.FromException(exceptionFactory(arg1' arg2' arg3' arg4' arg5))); " is 123.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "            return configuration.ReturnsLazily((T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5) => TaskHelper.FromException<T>(exceptionFactory(arg1' arg2' arg3' arg4' arg5))); " is 161.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "                    (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6) => TaskHelper.FromException(exceptionFactory(arg1' arg2' arg3' arg4' arg5' arg6))); " is 138.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "            return configuration.ReturnsLazily((T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6) => TaskHelper.FromException<T>(exceptionFactory(arg1' arg2' arg3' arg4' arg5' arg6))); " is 176.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "                    (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7) => TaskHelper.FromException(exceptionFactory(arg1' arg2' arg3' arg4' arg5' arg6' arg7))); " is 153.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "            return configuration.ReturnsLazily((T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7) => TaskHelper.FromException<T>(exceptionFactory(arg1' arg2' arg3' arg4' arg5' arg6' arg7))); " is 191.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "                    (T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8) => TaskHelper.FromException(exceptionFactory(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8))); " is 168.
Long Statement,FakeItEasy,AsyncReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AsyncReturnValueConfigurationExtensions.cs,ThrowsAsync,The length of the statement  "            return configuration.ReturnsLazily((T1 arg1' T2 arg2' T3 arg3' T4 arg4' T5 arg5' T6 arg6' T7 arg7' T8 arg8) => TaskHelper.FromException<T>(exceptionFactory(arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8))); " is 206.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 140.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 165.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 190.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature); " is 151.
Long Statement,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The length of the statement  "                    actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 215.
Long Statement,FakeItEasy,ExpressionExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ExpressionExtensions.cs,TryFastEvaluate,The length of the statement  "                    // for now' handling only 'boxing/casting to object' expressions like '3' used as an argument to a function which takes an object[] array parameter. " is 148.
Long Statement,FakeItEasy,ParameterInfoExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ParameterInfoExtensions.cs,IsOutOrRef,The length of the statement  "                   parameterAttributes.All(customAttributeData => customAttributeData.AttributeType.FullName != IsReadOnlyAttributeFullName); " is 122.
Long Statement,FakeItEasy,ParameterInfoExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ParameterInfoExtensions.cs,IsOutOrRef,The length of the statement  "                   parameterAttributes.All(customAttributeData => customAttributeData.Constructor.DeclaringType?.FullName != IsReadOnlyAttributeFullName); " is 135.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 121.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3))); " is 144.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 146.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4))); " is 169.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 171.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5))); " is 194.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 196.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6))); " is 219.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 221.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature); " is 156.
Long Statement,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The length of the statement  "                return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7))); " is 244.
Long Statement,FakeItEasy,RootModule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,RegisterDependencies,The length of the statement  "            registrar.Register<IExpressionCallMatcherFactory>(new ExpressionCallMatcherFactory(expressionArgumentConstraintFactory' methodInfoManager)); " is 140.
Long Statement,FakeItEasy,RootModule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,RegisterDependencies,The length of the statement  "                new StartConfigurationFactory(ExpressionCallRuleFactory' configurationFactory' callExpressionParser' interceptionAsserter)); " is 124.
Long Statement,FakeItEasy,RootModule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,RegisterDependencies,The length of the statement  "                new FakeConfigurationManager(configurationFactory' ExpressionCallRuleFactory' callExpressionParser' interceptionAsserter)); " is 123.
Long Statement,FakeItEasy,RootModule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\RootModule.cs,RegisterDependencies,The length of the statement  "                new ExpressionCallRule(new ExpressionCallMatcher(callSpecification' expressionArgumentConstraintFactory' methodInfoManager)); " is 125.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 124.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 149.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 174.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 199.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 224.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 121.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 146.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 171.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 196.
Long Statement,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 221.
Long Statement,FakeItEasy.Configuration,WherePredicate,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\BuildableCallRule.cs,Matches,The length of the statement  "                    throw new UserCallbackException(ExceptionMessages.UserCallbackThrewAnException($"Call filter <{this.GetDescription()}>")' ex); " is 126.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 124.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 149.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 174.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 199.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 224.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 121.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 146.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 171.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 196.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 221.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,MustHaveHappenedANumberOfTimesMatching,The length of the statement  "            return this.MustHaveHappened(new CallCountConstraint(predicate.Compile()' $"a number of times matching the predicate '{predicate}'")); " is 134.
Long Statement,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,MustHaveHappened,The length of the statement  "            return new UnorderedCallAssertion(this.manager' this.Matcher' this.RuleBeingBuilt.WriteDescriptionOfValidCall' callCountConstraint); " is 132.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 124.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 149.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 174.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 199.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 224.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 121.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 146.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 171.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 196.
Long Statement,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The length of the statement  "                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 221.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 124.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 149.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 174.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 199.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 224.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,MustHaveHappened,The length of the statement  "            return this.CreateArgumentValidationConfiguration(this.parsedSetterExpression).MustHaveHappened(numberOfTimes' timesOption); " is 124.
Long Statement,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,MustHaveHappenedANumberOfTimesMatching,The length of the statement  "            return this.CreateArgumentValidationConfiguration(this.parsedSetterExpression).MustHaveHappenedANumberOfTimesMatching(predicate); " is 129.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)); " is 124.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)); " is 149.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)); " is 174.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)); " is 199.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature); " is 152.
Long Statement,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The length of the statement  "                return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)); " is 224.
Long Statement,FakeItEasy.Configuration,PropertyExpressionHelper,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\PropertyExpressionHelper.cs,GetExpressionDescription,The length of the statement  "            CallConstraintDescriber.DescribeCallOn(writer' parsedCallExpression.CalledMethod' parsedCallExpression.ArgumentsExpressions.Select(constraintFactory.GetArgumentConstraint)); " is 173.
Long Statement,FakeItEasy.Core,ArgumentValueFormatter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\ArgumentValueFormatter.cs,GetArgumentValueAsString,The length of the statement  "            catch (Exception ex) when (formatter.GetType().GetTypeInfo().Assembly != typeof(ArgumentValueFormatter).GetTypeInfo().Assembly) " is 127.
Long Statement,FakeItEasy.Core,ArgumentValueFormatter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\ArgumentValueFormatter.cs,GetArgumentValueAsString,The length of the statement  "                throw new UserCallbackException(ExceptionMessages.UserCallbackThrewAnException($"Custom argument value formatter '{formatter}'")' ex); " is 134.
Long Statement,FakeItEasy.Core,CallCountConstraint,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\CallCountConstraint.cs,Matches,The length of the statement  "                throw new UserCallbackException(ExceptionMessages.UserCallbackThrewAnException($"Call count constraint <{this.description}>")' ex); " is 131.
Long Statement,FakeItEasy.Core,MatchesConstraint,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\DefaultArgumentConstraintManager.cs,IsValid,The length of the statement  "                    throw new UserCallbackException(ExceptionMessages.UserCallbackThrewAnException($"Argument matcher {this.GetDescription()}")' ex); " is 129.
Long Statement,FakeItEasy.Core,DefaultFakeObjectCallFormatter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\DefaultFakeObjectCallFormatter.cs,AppendArgumentsList,The length of the statement  "                builder.Append(this.argumentValueFormatter.GetArgumentValueAsString(allArguments[allArguments.Length - 1].ArgumentValue)); " is 122.
Long Statement,FakeItEasy.Core,DynamicDummyFactory,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\DynamicDummyFactory.cs,TryCreateDummyObject,The length of the statement  "                throw new UserCallbackException(ExceptionMessages.UserCallbackThrewAnException($"Dummy factory '{dummyFactory.GetType()}'")' ex); " is 129.
Long Statement,FakeItEasy.Core,FakeAsserter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeAsserter.cs,AssertWasCalled,The length of the statement  "                var message = this.CreateExceptionMessage(this.calls.Where(IsBeforeAssertionStart)' description.Builder.ToString()' callCountConstraint.ToString()' matchedCallCount); " is 166.
Long Statement,FakeItEasy.Core,FakeManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeManager.AutoFakePropertyRule.cs,UpdateLastSequenceNumber,The length of the statement  "            //// Set the specified sequence number as the last sequence number if it's greater than the current last sequence number. " is 121.
Long Statement,FakeItEasy.Core,PropertyBehaviorRule,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeManager.PropertyBehaviorRule.cs,GetProperty,The length of the statement  "                    (from property in propertyGetterOrSetter.DeclaringType.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic) " is 138.
Long Statement,FakeItEasy.Core,MethodInfoManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\MethodInfoManager.cs,WillInvokeSameMethodOnTarget,The length of the statement  "            return methodInvokedByFirst is object && methodInvokedBySecond is object && methodInvokedByFirst.Equals(methodInvokedBySecond); " is 127.
Long Statement,FakeItEasy.Core,MethodInfoManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\MethodInfoManager.cs,GetMethodOnTypeThatWillBeInvokedByMethodInfo,The length of the statement  "            return MethodCache.GetOrAdd(key' k => FindMethodOnTypeThatWillBeInvokedByMethodInfo(k.Type' new FakeItEasy.Compatibility.MethodInfoWrapper(k.MethodInfo' k.Type))); " is 163.
Long Statement,FakeItEasy.Core,MethodInfoManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\MethodInfoManager.cs,GetMethodOnInterfaceTypeImplementedByMethod,The length of the statement  "                         .Zip(interfaceMap.TargetMethods' (interfaceMethod' targetMethod) => new { InterfaceMethod = interfaceMethod' TargetMethod = targetMethod }) " is 139.
Long Statement,FakeItEasy.Core,MethodInfoManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\MethodInfoManager.cs,GetMethodOnTypeThatImplementsInterfaceMethod,The length of the statement  "            if (!baseDefinition.DeclaringType.GetTypeInfo().IsInterface || !TypeImplementsInterface(type' baseDefinition.DeclaringType)) " is 124.
Long Statement,FakeItEasy.Core,MethodInfoManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\MethodInfoManager.cs,GetMethodOnTypeThatImplementsInterfaceMethod,The length of the statement  "                     .Zip(interfaceMap.TargetMethods' (interfaceMethod' targetMethod) => new { InterfaceMethod = interfaceMethod' TargetMethod = targetMethod }) " is 139.
Long Statement,FakeItEasy.Core,TypeCatalogue,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\TypeCatalogue.cs,WarnFailedToLoadAssembly,The length of the statement  "                $"Warning: FakeItEasy failed to load assembly '{path}' while scanning for extension points. Any IArgumentValueFormatters' IDummyFactories' and IFakeOptionsBuilders in that assembly will not be available."); " is 206.
Long Statement,FakeItEasy.Core,TypeCatalogue,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\TypeCatalogue.cs,WarnFailedToGetTypes,The length of the statement  "                $"Warning: FakeItEasy failed to get types from assembly '{assembly}' while scanning for extension points. Any IArgumentValueFormatters' IDummyFactories' and IFakeOptionsBuilders in that assembly will not be available."); " is 220.
Long Statement,FakeItEasy.Core,TypeCatalogue,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\TypeCatalogue.cs,WarnFailedToGetSomeTypes,The length of the statement  "                $"Warning: FakeItEasy failed to get some types from assembly '{assembly}' while scanning for extension points. Some IArgumentValueFormatters' IDummyFactories' and IFakeOptionsBuilders in that assembly might not be available."); " is 227.
Long Statement,FakeItEasy.Creation.CastleDynamicProxy,CastleDynamicProxyInterceptionValidator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CastleDynamicProxy\CastleDynamicProxyInterceptionValidator.cs,GetReasonForWhyMethodCanNotBeIntercepted,The length of the statement  "                    return "Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted."; " is 142.
Long Statement,FakeItEasy.Creation.CastleDynamicProxy,CastleDynamicProxyInterceptionValidator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CastleDynamicProxy\CastleDynamicProxyInterceptionValidator.cs,GetReasonForWhyMethodCanNotBeIntercepted,The length of the statement  "                return "Non-virtual members can not be intercepted. Only interface members and virtual' overriding' and abstract members can be intercepted."; " is 142.
Long Statement,FakeItEasy.Creation,FailedCreationResult,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CreationResult.cs,AppendNonTriedConstructors,The length of the statement  "                        .Append(resolvedConstructor.Arguments.ToCollectionString(x => x.WasResolved ? x.ArgumentType.ToString() : String.Concat("*"' x.ArgumentType.ToString())' "' ")) " is 159.
Long Statement,FakeItEasy.Creation,FailedCreationResult,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CreationResult.cs,AppendNonTriedConstructors,The length of the statement  "                    .AppendIndented("    "' "Types marked with * could not be resolved. Please provide a Dummy Factory to enable these constructors.") " is 130.
Long Statement,FakeItEasy.Creation,ResolvedConstructorComparer,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CreationResult.cs,Equals,The length of the statement  "                return ReferenceEquals(x' y) || (x is object && y is object && ConstructorArgumentTypes(x).SequenceEqual(ConstructorArgumentTypes(y))); " is 135.
Long Statement,FakeItEasy.Creation,DummyValueResolver,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\DummyValueResolver.cs,TryResolveDummyValue,The length of the statement  "                return CreationResult.FailedToCreateDummy(typeOfDummy' "Recursive dependency detected. Already resolving " + typeOfDummy + '.'); " is 128.
Long Statement,FakeItEasy.Creation,FakeAndDummyManager,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeAndDummyManager.cs,GetFakeOptionsFactory,The length of the statement  "            var method = typeof(FakeAndDummyManager).GetMethod(nameof(CreateFakeOptions)' BindingFlags.NonPublic | BindingFlags.Static).MakeGenericMethod(typeOfFake); " is 154.
Long Statement,FakeItEasy.Creation,FakeObjectCreator,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,CreateFake,The length of the statement  "                return CreationResult.FailedToCreateFake(typeOfFake' "Recursive dependency detected. Already resolving " + typeOfFake + '.'); " is 125.
Long Statement,FakeItEasy.Creation,DelegateCreationStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,CreateFake,The length of the statement  "                    return CreationResult.FailedToCreateFake(typeOfFake' "Faked delegates cannot be made using explicit constructor arguments."); " is 125.
Long Statement,FakeItEasy.Creation,DelegateCreationStrategy,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\FakeObjectCreator.cs,CreateFake,The length of the statement  "                    return CreationResult.FailedToCreateFake(typeOfFake' "Faked delegates cannot be made to implement additional interfaces."); " is 123.
Virtual Method Call from Constructor,FakeItEasy.Expressions,ExpressionCallMatcher,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Expressions\ExpressionCallMatcher.cs,ExpressionCallMatcher,The constructor "ExpressionCallMatcher" calls a virtual method "GetArgumentConstraint".
Empty Catch Block,FakeItEasy,ExceptionExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ExceptionExtensions.cs,Rethrow,The method has an empty catch block.
Empty Catch Block,FakeItEasy.Core,TypeCatalogueInstanceProvider,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\TypeCatalogueInstanceProvider.cs,InstantiateAllOfType,The method has an empty catch block.
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)' args.Get<T8>(7));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)' args.Get<T8>(7));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)' args.Get<T8>(7));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)' args.Get<T8>(7));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)' args.Get<T8>(7));              });
Magic Number,FakeItEasy,ArgumentValidationConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ArgumentValidationConfigurationExtensions.cs,WhenArgumentsMatch,The following statement contains a magic number: return configuration.WhenArgumentsMatch(args =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      args.Method'                      argumentsPredicate.GetMethodInfo()'                      NameOfWhenArgumentsMatchFeature);                    return argumentsPredicate(args.Get<T1>(0)' args.Get<T2>(1)' args.Get<T3>(2)' args.Get<T4>(3)' args.Get<T5>(4)' args.Get<T6>(5)' args.Get<T7>(6)' args.Get<T8>(7));              });
Magic Number,FakeItEasy,AssertConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AssertConfigurationExtensions.cs,MustHaveHappenedTwiceExactly,The following statement contains a magic number: return configuration.MustHaveHappened(2' Times.Exactly);
Magic Number,FakeItEasy,AssertConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AssertConfigurationExtensions.cs,MustHaveHappenedTwiceOrMore,The following statement contains a magic number: return configuration.MustHaveHappened(2' Times.OrMore);
Magic Number,FakeItEasy,AssertConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\AssertConfigurationExtensions.cs,MustHaveHappenedTwiceOrLess,The following statement contains a magic number: return configuration.MustHaveHappened(2' Times.OrLess);
Magic Number,FakeItEasy,BehaviorLifetimeConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\BehaviorLifetimeConfigurationExtensions.cs,Twice,The following statement contains a magic number: return configuration.NumberOfTimes(2);
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,CallbackConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\CallbackConfigurationExtensions.cs,Invokes,The following statement contains a magic number: return configuration.Invokes(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' actionToInvoke.GetMethodInfo()' NameOfInvokesFeature);                        actionToInvoke(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,MethodBaseExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\MethodBaseExtensions.cs,AppendMethodName,The following statement contains a magic number: builder.Append(method.Name.Substring(4));
Magic Number,FakeItEasy,OutputWriterExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\OutputWriterExtensions.cs,WriteArgumentValues,The following statement contains a magic number: list.Count <= 5
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                        return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)));              });
Magic Number,FakeItEasy,ReturnValueConfigurationExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ReturnValueConfigurationExtensions.cs,ReturnsLazily,The following statement contains a magic number: return configuration.ReturnsLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' valueProducer.GetMethodInfo()' NameOfReturnsLazilyFeature);                    return TaskHelper.FromResult(valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7)));              });
Magic Number,FakeItEasy,TimesExactly,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Times.cs,ToCallCountConstraint,The following statement contains a magic number: switch (numberOfTimes)                  {                      case 0:                          return new CallCountConstraint(n => n == 0' "never");                      case 1:                          return new CallCountConstraint(n => n == 1' "once exactly");                      case 2:                          return new CallCountConstraint(n => n == 2' "twice exactly");                      default:                          return new CallCountConstraint(n => n == numberOfTimes' $"{numberOfTimes} times exactly");                  }
Magic Number,FakeItEasy,TimesExactly,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Times.cs,ToCallCountConstraint,The following statement contains a magic number: switch (numberOfTimes)                  {                      case 0:                          return new CallCountConstraint(n => n == 0' "never");                      case 1:                          return new CallCountConstraint(n => n == 1' "once exactly");                      case 2:                          return new CallCountConstraint(n => n == 2' "twice exactly");                      default:                          return new CallCountConstraint(n => n == numberOfTimes' $"{numberOfTimes} times exactly");                  }
Magic Number,FakeItEasy,TimesOrMore,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Times.cs,ToCallCountConstraint,The following statement contains a magic number: switch (numberOfTimes)                  {                      case 1:                          return new CallCountConstraint(n => n >= 1' "once or more");                      case 2:                          return new CallCountConstraint(n => n >= 2' "twice or more");                      default:                          return new CallCountConstraint(n => n >= numberOfTimes' $"{numberOfTimes} times or more");                  }
Magic Number,FakeItEasy,TimesOrMore,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Times.cs,ToCallCountConstraint,The following statement contains a magic number: switch (numberOfTimes)                  {                      case 1:                          return new CallCountConstraint(n => n >= 1' "once or more");                      case 2:                          return new CallCountConstraint(n => n >= 2' "twice or more");                      default:                          return new CallCountConstraint(n => n >= numberOfTimes' $"{numberOfTimes} times or more");                  }
Magic Number,FakeItEasy,TimesOrLess,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Times.cs,ToCallCountConstraint,The following statement contains a magic number: switch (numberOfTimes)                  {                      case 0:                          return new CallCountConstraint(n => n <= 0' "never");                      case 1:                          return new CallCountConstraint(n => n <= 1' "once or less");                      case 2:                          return new CallCountConstraint(n => n <= 2' "twice or less");                      default:                          return new CallCountConstraint(n => n <= numberOfTimes' $"{numberOfTimes} times or less");                  }
Magic Number,FakeItEasy,TimesOrLess,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Times.cs,ToCallCountConstraint,The following statement contains a magic number: switch (numberOfTimes)                  {                      case 0:                          return new CallCountConstraint(n => n <= 0' "never");                      case 1:                          return new CallCountConstraint(n => n <= 1' "once or less");                      case 2:                          return new CallCountConstraint(n => n <= 2' "twice or less");                      default:                          return new CallCountConstraint(n => n <= numberOfTimes' $"{numberOfTimes} times or less");                  }
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,AnyCallConfiguration,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\AnyCallConfiguration.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,RuleBuilder,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                      call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                    return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                            return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,ReturnValueConfiguration<TMember>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,AssignsOutAndRefParametersLazily,The following statement contains a magic number: return this.AssignsOutAndRefParametersLazily(call =>                  {                      ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(                          call.Method' valueProducer.GetMethodInfo()' NameOfOutRefLazilyFeature);                            return valueProducer(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));                  });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterConfiguration<TValue>,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertySetterAdapter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\ExceptionThrower.StronglyTyped.cs,Throws,The following statement contains a magic number: return this.Throws((IFakeObjectCall call) =>              {                  ValueProducerSignatureHelper.AssertThatValueProducerSignatureSatisfiesCallSignature(call.Method' exceptionFactory.GetMethodInfo()' NameOfThrowsFeature);                    return exceptionFactory(call.GetArgument<T1>(0)' call.GetArgument<T2>(1)' call.GetArgument<T3>(2)' call.GetArgument<T4>(3)' call.GetArgument<T5>(4)' call.GetArgument<T6>(5)' call.GetArgument<T7>(6)' call.GetArgument<T8>(7));              });
Magic Number,FakeItEasy.Configuration,PropertyExpressionHelper,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Configuration\PropertyExpressionHelper.cs,GetPropertyName,The following statement contains a magic number: return methodName.Substring(4);
Magic Number,FakeItEasy.Core,ArgumentValueFormatter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\ArgumentValueFormatter.cs,GetDistanceFromKnownType,The following statement contains a magic number: var distance = 2;
Magic Number,FakeItEasy.Core,DefaultFakeObjectCallFormatter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\DefaultFakeObjectCallFormatter.cs,AppendMethodName,The following statement contains a magic number: builder.Append(method.Name.Substring(4));
Magic Number,FakeItEasy.Core,DefaultFakeObjectCallFormatter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\DefaultFakeObjectCallFormatter.cs,AppendArgumentSeparator,The following statement contains a magic number: totalNumberOfArguments > 2
Magic Number,FakeItEasy.Core,EventRaiserDelegateComparer,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\EventHandlerArgumentProviderMap.cs,GetHashCode,The following statement contains a magic number: return theDelegate is null || theDelegate.Target is null                      ? 17                      : theDelegate.Target.GetHashCode();
Magic Number,FakeItEasy.Core,FakeAsserter,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeAsserter.cs,AppendExpectation,The following statement contains a magic number: switch (matchedCallCount)                  {                      case 0:                          writer.Write("but didn't find it among the calls:");                          break;                      case 1:                          writer.Write("but found it once among the calls:");                          break;                      case 2:                          writer.Write("but found it twice among the calls:");                          break;                      default:                          writer.Write("but found it {0} times among the calls:"' matchedCallCount);                          break;                  }
Magic Number,FakeItEasy.Core,FakeCallEqualityComparer,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeCallEqualityComparer.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,FakeItEasy.Core,FakeCallEqualityComparer,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeCallEqualityComparer.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 23) + (obj.Method is null ? 0 : obj.Method.GetHashCode());
Magic Number,FakeItEasy.Core,FakeCallEqualityComparer,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\FakeCallEqualityComparer.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 23) + (argument is null ? 0 : argument.GetHashCode());
Magic Number,FakeItEasy.Core,TypeMethodInfoPair,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Core\MethodInfoManager.cs,GetHashCode,The following statement contains a magic number: return (this.Type.GetHashCode() * 23) + this.MethodInfo.GetHashCode();
Magic Number,FakeItEasy.Creation,ResolvedConstructorComparer,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CreationResult.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,FakeItEasy.Creation,ResolvedConstructorComparer,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Creation\CreationResult.cs,GetHashCode,The following statement contains a magic number: hash = (hash * 23) + EqualityComparer<object>.Default.GetHashCode(resolvedArgument.ArgumentType);
Magic Number,FakeItEasy.Expressions,CallConstraintDescriber,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\Expressions\CallConstraintDescriber.cs,WriteMethodName,The following statement contains a magic number: writer.Write(method.IsPropertyGetterOrSetter() ? method.Name.Substring(4) : method.Name);
Missing Default,FakeItEasy,ExpressionExtensions,D:\research\architectureSmells\repos\FakeItEasy_FakeItEasy\src\FakeItEasy\ExpressionExtensions.cs,TryFastEvaluate,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Constant:                      result = ((ConstantExpression)expression).Value;                      return true;                    case ExpressionType.MemberAccess:                      var memberExpression = (MemberExpression)expression;                        var fieldInfo = memberExpression.Member as FieldInfo;                      if (fieldInfo is object)                      {                          if (TryFastEvaluate(memberExpression.Expression' out object? memberResult))                          {                              result = fieldInfo.GetValue(memberResult);                              return true;                          }                            return false;                      }                        var propertyInfo = memberExpression.Member as PropertyInfo;                      if (propertyInfo is object)                      {                          // index = null: this is always fine since it's a MemberAccess expression' not an IndexExpression                          if (TryFastEvaluate(memberExpression.Expression' out object? memberResult))                          {                              result = propertyInfo.GetValue(memberResult' null);                              return true;                          }                            return false;                      }                        break;                    case ExpressionType.Call:                      var callExpression = (MethodCallExpression)expression;                        if (!TryFastEvaluate(callExpression.Object' out object? target))                      {                          return false;                      }                        var argumentValues = new object?[callExpression.Arguments.Count];                      for (int i = 0; i < callExpression.Arguments.Count; i++)                      {                          if (!TryFastEvaluate(callExpression.Arguments[i]' out argumentValues[i]))                          {                              return false;                          }                      }                        result = callExpression.Method.Invoke(target' argumentValues);                      return true;                    case ExpressionType.Convert:                      var convertExpression = (UnaryExpression)expression;                        // for now' handling only 'boxing/casting to object' expressions like '3' used as an argument to a function which takes an object[] array parameter.                      if (convertExpression.Type == typeof(object))                      {                          // in principle' we would first evaluate it without the boxing' and then box/cast to object...                          // ...but TryFastEvaluate already boxes before returning' so no explicit cast needed.                          return TryFastEvaluate(convertExpression.Operand' out result);                      }                        break;                    case ExpressionType.NewArrayInit:                      var newArrayExpression = (NewArrayExpression)expression;                      var arrayItems = Array.CreateInstance(newArrayExpression.Type.GetElementType()' newArrayExpression.Expressions.Count);                        for (int i = 0; i < newArrayExpression.Expressions.Count; i++)                      {                          if (!TryFastEvaluate(newArrayExpression.Expressions[i]' out object? item))                          {                              return false;                          }                            arrayItems.SetValue(item' i);                      }                        result = arrayItems;                      return true;                    case ExpressionType.Quote:                      // We've wrapped an expression inside another expression. This should mean that the inner                      // expression is the desired result.                      var quoteExpression = (UnaryExpression)expression;                        result = quoteExpression.Operand;                      return true;              }
