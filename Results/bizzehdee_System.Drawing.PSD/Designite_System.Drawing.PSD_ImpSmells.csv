Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The method has 126 lines of code.
Complex Method,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,Cyclomatic complexity of the method is 19
Complex Method,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,Cyclomatic complexity of the method is 20
Complex Method,System.Drawing.PSD,Layer,C:\repos\bizzehdee_System.Drawing.PSD\Layer.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,Cyclomatic complexity of the method is 30
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "		c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]); " is 131.
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "			c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]); " is 129.
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "		c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]); " is 146.
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "		c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]); " is 183.
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "		c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0); " is 144.
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "		c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]); " is 146.
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "			c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]); " is 147.
Long Statement,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "			c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]); " is 140.
Long Statement,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The length of the statement  "	Debug.WriteLine ("LoadingImageResources started at " + reader.BaseStream.Position.ToString (CultureInfo.InvariantCulture)); " is 123.
Long Statement,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The length of the statement  "	Debug.WriteLine ("LoadLayerAndMaskInfo - Part1 started at " + reader.BaseStream.Position.ToString (CultureInfo.InvariantCulture)); " is 130.
Long Statement,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,LoadGlobalLayerMask,The length of the statement  "	Debug.WriteLine ("LoadGlobalLayerMask started at " + reader.BaseStream.Position.ToString (CultureInfo.InvariantCulture)); " is 121.
Long Statement,System.Drawing.PSD,ResolutionInfo,C:\repos\bizzehdee_System.Drawing.PSD\ResolutionInfo.cs,ToString,The length of the statement  "	return String.Format ("{0}{2}x{1}{3}"' HRes' VRes' Enum.GetName (typeof(Unit)' WidthUnit)' Enum.GetName (typeof(Unit)' HeightUnit)); " is 132.
Complex Conditional,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The conditional expression  "y >= 0 && y < mask.Rect.Height && x >= 0 && x < mask.Rect.Width"  is complex.
Magic Number,System.Drawing.PSD,BinaryReverseReader,C:\repos\bizzehdee_System.Drawing.PSD\BinaryReverseReader.cs,ReadPascalString,The following statement contains a magic number: if ((stringLength % 2) == 0)  	base.ReadByte ();  
Magic Number,System.Drawing.PSD,BinaryReverseWriter,C:\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: if ((realLength % 2) == 0)  	return;  
Magic Number,System.Drawing.PSD,BinaryReverseWriter,C:\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: for (Int32 i = 0; i < (2 - (realLength % 2)); i++)  	base.Write ((Byte)0);  
Magic Number,System.Drawing.PSD,BinaryReverseWriter,C:\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: for (Int32 i = 0; i < (2 - (realLength % 2)); i++)  	base.Write ((Byte)0);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: Parallel.For (0' layer.Rect.Height' y =>  {  	Int32 rowIndex = y * layer.Rect.Width;  	for (Int32 x = 0; x < layer.Rect.Width; x++) {  		Int32 pos = rowIndex + x;  		Color pixelColor = GetColor (layer' pos);  		if (layer.SortedChannels.ContainsKey (-2)) {  			Int32 maskAlpha = GetColor (layer.MaskData' x' y);  			Int32 oldAlpha = pixelColor.A;  			Int32 newAlpha = (oldAlpha * maskAlpha) / 255;  			pixelColor = Color.FromArgb (newAlpha' pixelColor);  		}  		lock (bitmap) {  			bitmap.SetPixel (x' y' pixelColor);  		}  	}  });  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: Parallel.For (0' layer.Rect.Height' y =>  {  	Int32 rowIndex = y * layer.Rect.Width;  	for (Int32 x = 0; x < layer.Rect.Width; x++) {  		Int32 pos = rowIndex + x;  		Color pixelColor = GetColor (layer' pos);  		if (layer.SortedChannels.ContainsKey (-2)) {  			Int32 maskAlpha = GetColor (layer.MaskData' x' y);  			Int32 oldAlpha = pixelColor.A;  			Int32 newAlpha = (oldAlpha * maskAlpha) / 255;  			pixelColor = Color.FromArgb (newAlpha' pixelColor);  		}  		lock (bitmap) {  			bitmap.SetPixel (x' y' pixelColor);  		}  	}  });  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: for (Int32 x = 0; x < layer.Rect.Width; x++) {  	Int32 pos = rowIndex + x;  	Color pixelColor = GetColor (layer' pos);  	if (layer.SortedChannels.ContainsKey (-2)) {  		Int32 maskAlpha = GetColor (layer.MaskData' x' y);  		Int32 oldAlpha = pixelColor.A;  		Int32 newAlpha = (oldAlpha * maskAlpha) / 255;  		pixelColor = Color.FromArgb (newAlpha' pixelColor);  	}  	lock (bitmap) {  		bitmap.SetPixel (x' y' pixelColor);  	}  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: for (Int32 x = 0; x < layer.Rect.Width; x++) {  	Int32 pos = rowIndex + x;  	Color pixelColor = GetColor (layer' pos);  	if (layer.SortedChannels.ContainsKey (-2)) {  		Int32 maskAlpha = GetColor (layer.MaskData' x' y);  		Int32 oldAlpha = pixelColor.A;  		Int32 newAlpha = (oldAlpha * maskAlpha) / 255;  		pixelColor = Color.FromArgb (newAlpha' pixelColor);  	}  	lock (bitmap) {  		bitmap.SetPixel (x' y' pixelColor);  	}  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: if (layer.SortedChannels.ContainsKey (-2)) {  	Int32 maskAlpha = GetColor (layer.MaskData' x' y);  	Int32 oldAlpha = pixelColor.A;  	Int32 newAlpha = (oldAlpha * maskAlpha) / 255;  	pixelColor = Color.FromArgb (newAlpha' pixelColor);  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: if (layer.SortedChannels.ContainsKey (-2)) {  	Int32 maskAlpha = GetColor (layer.MaskData' x' y);  	Int32 oldAlpha = pixelColor.A;  	Int32 newAlpha = (oldAlpha * maskAlpha) / 255;  	pixelColor = Color.FromArgb (newAlpha' pixelColor);  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: if (y >= 0 && y < mask.Rect.Height && x >= 0 && x < mask.Rect.Width) {  	Int32 pos = y * mask.Rect.Width + x;  	c = pos < mask.ImageData.Length ? mask.ImageData [pos] : 255;  }  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = pos < mask.ImageData.Length ? mask.ImageData [pos] : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow (varY' 3) > 0.008856 ? Math.Pow (varY' 3) : (varY - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow (varY' 3) > 0.008856 ? Math.Pow (varY' 3) : (varY - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow (varY' 3) > 0.008856 ? Math.Pow (varY' 3) : (varY - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow (varY' 3) > 0.008856 ? Math.Pow (varY' 3) : (varY - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow (varY' 3) > 0.008856 ? Math.Pow (varY' 3) : (varY - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow (varY' 3) > 0.008856 ? Math.Pow (varY' 3) : (varY - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow (varX' 3) > 0.008856 ? Math.Pow (varX' 3) : (varX - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow (varX' 3) > 0.008856 ? Math.Pow (varX' 3) : (varX - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow (varX' 3) > 0.008856 ? Math.Pow (varX' 3) : (varX - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow (varX' 3) > 0.008856 ? Math.Pow (varX' 3) : (varX - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow (varX' 3) > 0.008856 ? Math.Pow (varX' 3) : (varX - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow (varX' 3) > 0.008856 ? Math.Pow (varX' 3) : (varX - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow (varZ' 3) > 0.008856 ? Math.Pow (varZ' 3) : (varZ - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow (varZ' 3) > 0.008856 ? Math.Pow (varZ' 3) : (varZ - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow (varZ' 3) > 0.008856 ? Math.Pow (varZ' 3) : (varZ - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow (varZ' 3) > 0.008856 ? Math.Pow (varZ' 3) : (varZ - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow (varZ' 3) > 0.008856 ? Math.Pow (varZ' 3) : (varZ - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow (varZ' 3) > 0.008856 ? Math.Pow (varZ' 3) : (varZ - 16 / 116) / 7.787;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow (varR' 1 / 2.4)) - 0.055 : 12.92 * varR;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow (varR' 1 / 2.4)) - 0.055 : 12.92 * varR;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow (varR' 1 / 2.4)) - 0.055 : 12.92 * varR;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow (varR' 1 / 2.4)) - 0.055 : 12.92 * varR;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow (varR' 1 / 2.4)) - 0.055 : 12.92 * varR;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow (varG' 1 / 2.4)) - 0.055 : 12.92 * varG;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow (varG' 1 / 2.4)) - 0.055 : 12.92 * varG;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow (varG' 1 / 2.4)) - 0.055 : 12.92 * varG;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow (varG' 1 / 2.4)) - 0.055 : 12.92 * varG;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow (varG' 1 / 2.4)) - 0.055 : 12.92 * varG;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow (varB' 1 / 2.4)) - 0.055 : 12.92 * varB;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow (varB' 1 / 2.4)) - 0.055 : 12.92 * varB;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow (varB' 1 / 2.4)) - 0.055 : 12.92 * varB;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow (varB' 1 / 2.4)) - 0.055 : 12.92 * varB;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow (varB' 1 / 2.4)) - 0.055 : 12.92 * varB;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;  
Magic Number,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;  
Magic Number,System.Drawing.PSD,ImageResource,C:\repos\bizzehdee_System.Drawing.PSD\ImageResource.cs,ImageResource,The following statement contains a magic number: OSType = new String (reverseReader.ReadChars (4));  
Magic Number,System.Drawing.PSD,ImageResource,C:\repos\bizzehdee_System.Drawing.PSD\ImageResource.cs,ImageResource,The following statement contains a magic number: if (reverseReader.BaseStream.Position % 2 == 1)  	reverseReader.ReadByte ();  
Magic Number,System.Drawing.PSD,ImageResource,C:\repos\bizzehdee_System.Drawing.PSD\ImageResource.cs,Save,The following statement contains a magic number: if (reverseWriter.BaseStream.Position % 2 == 1)  	reverseWriter.Write ((Byte)0);  
Magic Number,System.Drawing.PSD,Layer,C:\repos\bizzehdee_System.Drawing.PSD\Layer.cs,Layer,The following statement contains a magic number: _blendModeKeyStr = new String (reverseReader.ReadChars (4));  
Magic Number,System.Drawing.PSD,Layer,C:\repos\bizzehdee_System.Drawing.PSD\Layer.cs,Save,The following statement contains a magic number: using (new LengthWriter (reverseWriter)) {  	MaskData.Save (reverseWriter);  	BlendingRangesData.Save (reverseWriter);  	Int64 namePosition = reverseWriter.BaseStream.Position;  	reverseWriter.WritePascalString (Name);  	Int32 paddingBytes = (int)((reverseWriter.BaseStream.Position - namePosition) % 4);  	Debug.Print ("Layer {0} write padding bytes after name"' paddingBytes);  	for (Int32 i = 0; i < paddingBytes; i++)  		reverseWriter.Write ((Byte)0);  	foreach (AdjusmentLayerInfo info in AdjustmentInfo)  		info.Save (reverseWriter);  }  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: reader.BaseStream.Position += 6;  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: if (ImageCompression == ImageCompression.Rle) {  	// The RLE-compressed data is proceeded by a 2-byte data count for each row in the data'  	// which we're going to just skip.  	reader.BaseStream.Position += _rows * _channels * 2;  }  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: reader.BaseStream.Position += _rows * _channels * 2;  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: switch (_depth) {  case 1:  	bytesPerRow = _columns;  	//NOT Shure  	break;  case 8:  	bytesPerRow = _columns;  	break;  case 16:  	bytesPerRow = _columns * 2;  	break;  }  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: switch (_depth) {  case 1:  	bytesPerRow = _columns;  	//NOT Shure  	break;  case 8:  	bytesPerRow = _columns;  	break;  case 16:  	bytesPerRow = _columns * 2;  	break;  }  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: switch (_depth) {  case 1:  	bytesPerRow = _columns;  	//NOT Shure  	break;  case 8:  	bytesPerRow = _columns;  	break;  case 16:  	bytesPerRow = _columns * 2;  	break;  }  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: bytesPerRow = _columns * 2;  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,LoadLayers,The following statement contains a magic number: foreach (Layer layer in Layers) {  	foreach (Layer.Channel channel in layer.Channels.Where (c => c.ID != -2)) {  		channel.LoadPixelData (reader);  	}  	layer.MaskData.LoadPixelData (reader);  }  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,LoadLayers,The following statement contains a magic number: foreach (Layer.Channel channel in layer.Channels.Where (c => c.ID != -2)) {  	channel.LoadPixelData (reader);  }  
Magic Number,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,LoadLayers,The following statement contains a magic number: if (reader.BaseStream.Position % 2 == 1)  	reader.ReadByte ();  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: while (count < columns) {  	byte byteValue = (byte)stream.ReadByte ();  	int len = byteValue;  	if (len < 128) {  		len++;  		while (len != 0 && (startIdx + count) < imgData.Length) {  			byteValue = (byte)stream.ReadByte ();  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (len > 128) {  		// Next -len+1 bytes in the dest are replicated from next source byte.  		// (Interpret len as a negative 8-bit int.)  		len ^= 0x0FF;  		len += 2;  		byteValue = (byte)stream.ReadByte ();  		while (len != 0 && (startIdx + count) < imgData.Length) {  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (128 == len) {  		// Do nothing  	}  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: while (count < columns) {  	byte byteValue = (byte)stream.ReadByte ();  	int len = byteValue;  	if (len < 128) {  		len++;  		while (len != 0 && (startIdx + count) < imgData.Length) {  			byteValue = (byte)stream.ReadByte ();  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (len > 128) {  		// Next -len+1 bytes in the dest are replicated from next source byte.  		// (Interpret len as a negative 8-bit int.)  		len ^= 0x0FF;  		len += 2;  		byteValue = (byte)stream.ReadByte ();  		while (len != 0 && (startIdx + count) < imgData.Length) {  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (128 == len) {  		// Do nothing  	}  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: while (count < columns) {  	byte byteValue = (byte)stream.ReadByte ();  	int len = byteValue;  	if (len < 128) {  		len++;  		while (len != 0 && (startIdx + count) < imgData.Length) {  			byteValue = (byte)stream.ReadByte ();  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (len > 128) {  		// Next -len+1 bytes in the dest are replicated from next source byte.  		// (Interpret len as a negative 8-bit int.)  		len ^= 0x0FF;  		len += 2;  		byteValue = (byte)stream.ReadByte ();  		while (len != 0 && (startIdx + count) < imgData.Length) {  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (128 == len) {  		// Do nothing  	}  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: while (count < columns) {  	byte byteValue = (byte)stream.ReadByte ();  	int len = byteValue;  	if (len < 128) {  		len++;  		while (len != 0 && (startIdx + count) < imgData.Length) {  			byteValue = (byte)stream.ReadByte ();  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (len > 128) {  		// Next -len+1 bytes in the dest are replicated from next source byte.  		// (Interpret len as a negative 8-bit int.)  		len ^= 0x0FF;  		len += 2;  		byteValue = (byte)stream.ReadByte ();  		while (len != 0 && (startIdx + count) < imgData.Length) {  			imgData [startIdx + count] = byteValue;  			count++;  			len--;  		}  	}  	else if (128 == len) {  		// Do nothing  	}  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (len < 128) {  	len++;  	while (len != 0 && (startIdx + count) < imgData.Length) {  		byteValue = (byte)stream.ReadByte ();  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (len > 128) {  	// Next -len+1 bytes in the dest are replicated from next source byte.  	// (Interpret len as a negative 8-bit int.)  	len ^= 0x0FF;  	len += 2;  	byteValue = (byte)stream.ReadByte ();  	while (len != 0 && (startIdx + count) < imgData.Length) {  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (len < 128) {  	len++;  	while (len != 0 && (startIdx + count) < imgData.Length) {  		byteValue = (byte)stream.ReadByte ();  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (len > 128) {  	// Next -len+1 bytes in the dest are replicated from next source byte.  	// (Interpret len as a negative 8-bit int.)  	len ^= 0x0FF;  	len += 2;  	byteValue = (byte)stream.ReadByte ();  	while (len != 0 && (startIdx + count) < imgData.Length) {  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (len < 128) {  	len++;  	while (len != 0 && (startIdx + count) < imgData.Length) {  		byteValue = (byte)stream.ReadByte ();  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (len > 128) {  	// Next -len+1 bytes in the dest are replicated from next source byte.  	// (Interpret len as a negative 8-bit int.)  	len ^= 0x0FF;  	len += 2;  	byteValue = (byte)stream.ReadByte ();  	while (len != 0 && (startIdx + count) < imgData.Length) {  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (len < 128) {  	len++;  	while (len != 0 && (startIdx + count) < imgData.Length) {  		byteValue = (byte)stream.ReadByte ();  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (len > 128) {  	// Next -len+1 bytes in the dest are replicated from next source byte.  	// (Interpret len as a negative 8-bit int.)  	len ^= 0x0FF;  	len += 2;  	byteValue = (byte)stream.ReadByte ();  	while (len != 0 && (startIdx + count) < imgData.Length) {  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (len > 128) {  	// Next -len+1 bytes in the dest are replicated from next source byte.  	// (Interpret len as a negative 8-bit int.)  	len ^= 0x0FF;  	len += 2;  	byteValue = (byte)stream.ReadByte ();  	while (len != 0 && (startIdx + count) < imgData.Length) {  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (len > 128) {  	// Next -len+1 bytes in the dest are replicated from next source byte.  	// (Interpret len as a negative 8-bit int.)  	len ^= 0x0FF;  	len += 2;  	byteValue = (byte)stream.ReadByte ();  	while (len != 0 && (startIdx + count) < imgData.Length) {  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (len > 128) {  	// Next -len+1 bytes in the dest are replicated from next source byte.  	// (Interpret len as a negative 8-bit int.)  	len ^= 0x0FF;  	len += 2;  	byteValue = (byte)stream.ReadByte ();  	while (len != 0 && (startIdx + count) < imgData.Length) {  		imgData [startIdx + count] = byteValue;  		count++;  		len--;  	}  }  else if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: len += 2;  
Magic Number,System.Drawing.PSD,RleHelper,C:\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: if (128 == len) {  	// Do nothing  }  
Magic Number,System.Drawing.PSD,Thumbnail,C:\repos\bizzehdee_System.Drawing.PSD\Thumbnail.cs,Thumbnail,The following statement contains a magic number: using (BinaryReverseReader reverseReader = DataReader) {  	Int32 format = reverseReader.ReadInt32 ();  	Int32 width = reverseReader.ReadInt32 ();  	Int32 height = reverseReader.ReadInt32 ();  	/*Int32 widthBytes = */reverseReader.ReadInt32 ();  	/*Int32 size = */reverseReader.ReadInt32 ();  	/*Int32 compressedSize = */reverseReader.ReadInt32 ();  	/*Int16 bitPerPixel = */reverseReader.ReadInt16 ();  	/*Int16 planes = */reverseReader.ReadInt16 ();  	if (format == 1) {  		Byte[] imgData = reverseReader.ReadBytes ((Int32)(reverseReader.BaseStream.Length - reverseReader.BaseStream.Position));  		using (MemoryStream strm = new MemoryStream (imgData)) {  			Image = (Bitmap)(Drawing.Image.FromStream (strm).Clone ());  		}  		if (ID == 1033) {  			//// BGR  			//for(int y=0;y<m_thumbnailImage.Height;y++)  			//  for (int x = 0; x < m_thumbnailImage.Width; x++)  			//  {  			//    Color c=m_thumbnailImage.GetPixel(x'y);  			//    Color c2=Color.FromArgb(c.B' c.G' c.R);  			//    m_thumbnailImage.SetPixel(x' y' c);  			//  }  		}  	}  	else {  		Image = new Bitmap (width' height' Imaging.PixelFormat.Format24bppRgb);  	}  }  
Magic Number,System.Drawing.PSD,Thumbnail,C:\repos\bizzehdee_System.Drawing.PSD\Thumbnail.cs,Thumbnail,The following statement contains a magic number: if (format == 1) {  	Byte[] imgData = reverseReader.ReadBytes ((Int32)(reverseReader.BaseStream.Length - reverseReader.BaseStream.Position));  	using (MemoryStream strm = new MemoryStream (imgData)) {  		Image = (Bitmap)(Drawing.Image.FromStream (strm).Clone ());  	}  	if (ID == 1033) {  		//// BGR  		//for(int y=0;y<m_thumbnailImage.Height;y++)  		//  for (int x = 0; x < m_thumbnailImage.Width; x++)  		//  {  		//    Color c=m_thumbnailImage.GetPixel(x'y);  		//    Color c2=Color.FromArgb(c.B' c.G' c.R);  		//    m_thumbnailImage.SetPixel(x' y' c);  		//  }  	}  }  else {  	Image = new Bitmap (width' height' Imaging.PixelFormat.Format24bppRgb);  }  
Magic Number,System.Drawing.PSD,Thumbnail,C:\repos\bizzehdee_System.Drawing.PSD\Thumbnail.cs,Thumbnail,The following statement contains a magic number: if (ID == 1033) {  	//// BGR  	//for(int y=0;y<m_thumbnailImage.Height;y++)  	//  for (int x = 0; x < m_thumbnailImage.Width; x++)  	//  {  	//    Color c=m_thumbnailImage.GetPixel(x'y);  	//    Color c2=Color.FromArgb(c.B' c.G' c.R);  	//    m_thumbnailImage.SetPixel(x' y' c);  	//  }  }  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return (ushort)((ushort)((x & 0xff) << 8) | ((x >> 8) & 0xff));  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return (ushort)((ushort)((x & 0xff) << 8) | ((x >> 8) & 0xff));  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 16) | (x << 16);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 16) | (x << 16);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00) >> 8) | ((x & 0x00FF00FF) << 8);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00) >> 8) | ((x & 0x00FF00FF) << 8);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 32) | (x << 32);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 32) | (x << 32);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = ((x & 0xFFFF0000FFFF0000) >> 16) | ((x & 0x0000FFFF0000FFFF) << 16);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = ((x & 0xFFFF0000FFFF0000) >> 16) | ((x & 0x0000FFFF0000FFFF) << 16);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00FF00FF00) >> 8) | ((x & 0x00FF00FF00FF00FF) << 8);  
Magic Number,System.Drawing.PSD,Utilities,C:\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00FF00FF00) >> 8) | ((x & 0x00FF00FF00FF00FF) << 8);  
Missing Default,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following switch statement is missing a default case: switch (psdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' psdFile.ImageData [3] [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]' psdFile.ImageData [0] [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = psdFile.ImageData [0] [pos];  		c = Color.FromArgb (psdFile.ColorModeData [index]' psdFile.ColorModeData [index + 256]' psdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	c = LabToRGB (psdFile.ImageData [0] [pos]' psdFile.ImageData [1] [pos]' psdFile.ImageData [2] [pos]);  	break;  }  
Missing Default,System.Drawing.PSD,ImageDecoder,C:\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following switch statement is missing a default case: switch (layer.PsdFile.ColorMode) {  case PsdFile.ColorModes.RGB:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	break;  case PsdFile.ColorModes.CMYK:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' layer.SortedChannels [3].ImageData [pos]);  	break;  case PsdFile.ColorModes.Multichannel:  	c = CMYKToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]' 0);  	break;  case PsdFile.ColorModes.Grayscale:  case PsdFile.ColorModes.Duotone:  	c = Color.FromArgb (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [0].ImageData [pos]);  	break;  case PsdFile.ColorModes.Indexed:  	{  		Int32 index = layer.SortedChannels [0].ImageData [pos];  		c = Color.FromArgb (layer.PsdFile.ColorModeData [index]' layer.PsdFile.ColorModeData [index + 256]' layer.PsdFile.ColorModeData [index + 2 * 256]);  	}  	break;  case PsdFile.ColorModes.Lab:  	{  		c = LabToRGB (layer.SortedChannels [0].ImageData [pos]' layer.SortedChannels [1].ImageData [pos]' layer.SortedChannels [2].ImageData [pos]);  	}  	break;  }  
Missing Default,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following switch statement is missing a default case: switch (resID) {  case ResourceIDs.ResolutionInfo:  	imgRes = new ResolutionInfo (imgRes);  	break;  case ResourceIDs.Thumbnail1:  case ResourceIDs.Thumbnail2:  	imgRes = new Thumbnail (imgRes);  	break;  case ResourceIDs.AlphaChannelNames:  	imgRes = new AlphaChannels (imgRes);  	break;  }  
Missing Default,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following switch statement is missing a default case: switch (_depth) {  case 1:  	bytesPerRow = _columns;  	//NOT Shure  	break;  case 8:  	bytesPerRow = _columns;  	break;  case 16:  	bytesPerRow = _columns * 2;  	break;  }  
Missing Default,System.Drawing.PSD,PsdFile,C:\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following switch statement is missing a default case: switch (ImageCompression) {  case ImageCompression.Raw:  	reader.Read (ImageData [ch]' 0' ImageData [ch].Length);  	break;  case ImageCompression.Rle:  	{  		for (Int32 i = 0; i < _rows; i++) {  			Int32 rowIndex = i * _columns;  			RleHelper.DecodedRow (reader.BaseStream' ImageData [ch]' rowIndex' bytesPerRow);  		}  	}  	break;  }  
