Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The method has 128 lines of code.
Complex Method,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,CompressImageData,Cyclomatic complexity of the method is 8
Complex Method,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,Cyclomatic complexity of the method is 8
Complex Method,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,LoadLayers,Cyclomatic complexity of the method is 8
Complex Method,System.Drawing.PSD,RlePacketStateMachine,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,Push,Cyclomatic complexity of the method is 8
Long Statement,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "                    c = Color.FromArgb(psdFile.ColorModeData[index]' psdFile.ColorModeData[index + 256]' psdFile.ColorModeData[index + 2 * 256]); " is 125.
Long Statement,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "                    c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]); " is 139.
Long Statement,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "                    c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]); " is 174.
Long Statement,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "                    c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0); " is 137.
Long Statement,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "                    c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]); " is 139.
Long Statement,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "                        c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]); " is 143.
Long Statement,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The length of the statement  "                        c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]); " is 133.
Long Statement,System.Drawing.PSD,AdjusmentLayerInfo,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerAdjusmentLayerInfo.cs,Save,The length of the statement  "                Debug.WriteLine("AdjusmentLayerInfo Save started at " + writer.BaseStream.Position.ToString(CultureInfo.InvariantCulture)); " is 123.
Long Statement,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,LoadPixelData,The length of the statement  "                Debug.WriteLine("Channel.LoadPixelData started at " + reverseReader.BaseStream.Position.ToString(CultureInfo.InvariantCulture)); " is 128.
Long Statement,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,SavePixelData,The length of the statement  "                Debug.WriteLine("Channel SavePixelData started at " + writer.BaseStream.Position.ToString(CultureInfo.InvariantCulture)); " is 121.
Long Statement,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The length of the statement  "            Debug.WriteLine("LoadingImageResources started at " + reader.BaseStream.Position.ToString(CultureInfo.InvariantCulture)); " is 121.
Long Statement,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The length of the statement  "            Debug.WriteLine("LoadLayerAndMaskInfo - Part1 started at " + reader.BaseStream.Position.ToString(CultureInfo.InvariantCulture)); " is 128.
Long Statement,System.Drawing.PSD,ResolutionInfo,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ResolutionInfo.cs,ToString,The length of the statement  "            return string.Format("{0}{2}x{1}{3}"' HRes' VRes' Enum.GetName(typeof(Unit)' WidthUnit)' Enum.GetName(typeof(Unit)' HeightUnit)); " is 129.
Complex Conditional,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The conditional expression  "y >= 0 && y < mask.Rect.Height &&                  x >= 0 && x < mask.Rect.Width"  is complex.
Magic Number,System.Drawing.PSD,BinaryReverseReader,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\BinaryReverseReader.cs,ReadPascalString,The following statement contains a magic number: (stringLength % 2) == 0
Magic Number,System.Drawing.PSD,BinaryReverseWriter,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: char[] c = s.Length > 255 ? s.Substring(0' 255).ToCharArray() : s.ToCharArray();
Magic Number,System.Drawing.PSD,BinaryReverseWriter,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: char[] c = s.Length > 255 ? s.Substring(0' 255).ToCharArray() : s.ToCharArray();
Magic Number,System.Drawing.PSD,BinaryReverseWriter,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: (realLength % 2) == 0
Magic Number,System.Drawing.PSD,BinaryReverseWriter,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: i < (2 - (realLength % 2))
Magic Number,System.Drawing.PSD,BinaryReverseWriter,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\BinaryReverseWriter.cs,WritePascalString,The following statement contains a magic number: i < (2 - (realLength % 2))
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: Parallel.For(0' layer.Rect.Height' y =>              {                  int rowIndex = y * layer.Rect.Width;                    for (int x = 0; x < layer.Rect.Width; x++)                  {                      int pos = rowIndex + x;                        Color pixelColor = GetColor(layer' pos);                        if (layer.SortedChannels.ContainsKey(-2))                      {                          int maskAlpha = GetColor(layer.MaskData' x' y);                          int oldAlpha = pixelColor.A;                            int newAlpha = (oldAlpha * maskAlpha) / 255;                          pixelColor = Color.FromArgb(newAlpha' pixelColor);                      }                        lock (bitmap)                      {                          bitmap.SetPixel(x' y' pixelColor);                      }                  }              });
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,DecodeImage,The following statement contains a magic number: Parallel.For(0' layer.Rect.Height' y =>              {                  int rowIndex = y * layer.Rect.Width;                    for (int x = 0; x < layer.Rect.Width; x++)                  {                      int pos = rowIndex + x;                        Color pixelColor = GetColor(layer' pos);                        if (layer.SortedChannels.ContainsKey(-2))                      {                          int maskAlpha = GetColor(layer.MaskData' x' y);                          int oldAlpha = pixelColor.A;                            int newAlpha = (oldAlpha * maskAlpha) / 255;                          pixelColor = Color.FromArgb(newAlpha' pixelColor);                      }                        lock (bitmap)                      {                          bitmap.SetPixel(x' y' pixelColor);                      }                  }              });
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: byte blue = psdFile.ImageData[2][pos];
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: byte alpha = 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: alpha = psdFile.ImageData[3][pos];
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: psdFile.ImageData.Length > 3
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(alpha' red' green' blue);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(red' green' blue' alpha);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(red' green' blue' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(red' red' red);                      break;                  case ColorMode.Indexed:                      int index = red;                      c = Color.FromArgb(psdFile.ColorModeData[index]' psdFile.ColorModeData[index + 256]' psdFile.ColorModeData[index + 2 * 256]);                      break;                  case ColorMode.Lab:                      c = LabToRGB(red' green' blue);                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(alpha' red' green' blue);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(red' green' blue' alpha);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(red' green' blue' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(red' red' red);                      break;                  case ColorMode.Indexed:                      int index = red;                      c = Color.FromArgb(psdFile.ColorModeData[index]' psdFile.ColorModeData[index + 256]' psdFile.ColorModeData[index + 2 * 256]);                      break;                  case ColorMode.Lab:                      c = LabToRGB(red' green' blue);                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (psdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(alpha' red' green' blue);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(red' green' blue' alpha);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(red' green' blue' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(red' red' red);                      break;                  case ColorMode.Indexed:                      int index = red;                      c = Color.FromArgb(psdFile.ColorModeData[index]' psdFile.ColorModeData[index + 256]' psdFile.ColorModeData[index + 2 * 256]);                      break;                  case ColorMode.Lab:                      c = LabToRGB(red' green' blue);                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: int c = 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following statement contains a magic number: c = pos < mask.ImageData.Length ? mask.ImageData[pos] : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double lCoef = 256.0 / 100.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double lCoef = 256.0 / 100.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double aCoef = 256.0 / 256.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double aCoef = 256.0 / 256.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double bCoef = 256.0 / 256.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double bCoef = 256.0 / 256.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: int a = (int)(exA / aCoef - 128.0);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: int b = (int)(exB / bCoef - 128.0);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double refX = 95.047;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double refY = 100.000;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: const double refZ = 108.883;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: double varY = (l + 16.0) / 116.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: double varY = (l + 16.0) / 116.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: double varX = a / 500.0 + varY;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: double varZ = varY - b / 200.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow(varY' 3) > 0.008856 ? Math.Pow(varY' 3) : (varY - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow(varY' 3) > 0.008856 ? Math.Pow(varY' 3) : (varY - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow(varY' 3) > 0.008856 ? Math.Pow(varY' 3) : (varY - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow(varY' 3) > 0.008856 ? Math.Pow(varY' 3) : (varY - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow(varY' 3) > 0.008856 ? Math.Pow(varY' 3) : (varY - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varY = Math.Pow(varY' 3) > 0.008856 ? Math.Pow(varY' 3) : (varY - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow(varX' 3) > 0.008856 ? Math.Pow(varX' 3) : (varX - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow(varX' 3) > 0.008856 ? Math.Pow(varX' 3) : (varX - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow(varX' 3) > 0.008856 ? Math.Pow(varX' 3) : (varX - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow(varX' 3) > 0.008856 ? Math.Pow(varX' 3) : (varX - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow(varX' 3) > 0.008856 ? Math.Pow(varX' 3) : (varX - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varX = Math.Pow(varX' 3) > 0.008856 ? Math.Pow(varX' 3) : (varX - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow(varZ' 3) > 0.008856 ? Math.Pow(varZ' 3) : (varZ - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow(varZ' 3) > 0.008856 ? Math.Pow(varZ' 3) : (varZ - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow(varZ' 3) > 0.008856 ? Math.Pow(varZ' 3) : (varZ - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow(varZ' 3) > 0.008856 ? Math.Pow(varZ' 3) : (varZ - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow(varZ' 3) > 0.008856 ? Math.Pow(varZ' 3) : (varZ - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,LabToRGB,The following statement contains a magic number: varZ = Math.Pow(varZ' 3) > 0.008856 ? Math.Pow(varZ' 3) : (varZ - 16 / 116) / 7.787;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varX = x / 100.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varY = y / 100.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varZ = z / 100.0;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varR = varX * 3.2406 + varY * (-1.5372) + varZ * (-0.4986);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varR = varX * 3.2406 + varY * (-1.5372) + varZ * (-0.4986);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varR = varX * 3.2406 + varY * (-1.5372) + varZ * (-0.4986);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varG = varX * (-0.9689) + varY * 1.8758 + varZ * 0.0415;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varG = varX * (-0.9689) + varY * 1.8758 + varZ * 0.0415;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varG = varX * (-0.9689) + varY * 1.8758 + varZ * 0.0415;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varB = varX * 0.0557 + varY * (-0.2040) + varZ * 1.0570;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varB = varX * 0.0557 + varY * (-0.2040) + varZ * 1.0570;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: double varB = varX * 0.0557 + varY * (-0.2040) + varZ * 1.0570;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow(varR' 1 / 2.4)) - 0.055 : 12.92 * varR;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow(varR' 1 / 2.4)) - 0.055 : 12.92 * varR;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow(varR' 1 / 2.4)) - 0.055 : 12.92 * varR;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow(varR' 1 / 2.4)) - 0.055 : 12.92 * varR;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varR = varR > 0.0031308 ? 1.055 * (Math.Pow(varR' 1 / 2.4)) - 0.055 : 12.92 * varR;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow(varG' 1 / 2.4)) - 0.055 : 12.92 * varG;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow(varG' 1 / 2.4)) - 0.055 : 12.92 * varG;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow(varG' 1 / 2.4)) - 0.055 : 12.92 * varG;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow(varG' 1 / 2.4)) - 0.055 : 12.92 * varG;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varG = varG > 0.0031308 ? 1.055 * (Math.Pow(varG' 1 / 2.4)) - 0.055 : 12.92 * varG;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow(varB' 1 / 2.4)) - 0.055 : 12.92 * varB;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow(varB' 1 / 2.4)) - 0.055 : 12.92 * varB;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow(varB' 1 / 2.4)) - 0.055 : 12.92 * varB;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow(varB' 1 / 2.4)) - 0.055 : 12.92 * varB;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: varB = varB > 0.0031308 ? 1.055 * (Math.Pow(varB' 1 / 2.4)) - 0.055 : 12.92 * varB;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: int nRed = (int)(varR * 256.0);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: int nGreen = (int)(varG * 256.0);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: int nBlue = (int)(varB * 256.0);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,XYZToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: double dMaxColours = Math.Pow(2' 8);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: double dMaxColours = Math.Pow(2' 8);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: int nRed = (int)((1.0 - (C * (1 - K) + K)) * 255);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: int nGreen = (int)((1.0 - (M * (1 - K) + K)) * 255);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: int nBlue = (int)((1.0 - (Y * (1 - K) + K)) * 255);
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nRed = nRed < 255 ? nRed : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nGreen = nGreen < 255 ? nGreen : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;
Magic Number,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,CMYKToRGB,The following statement contains a magic number: nBlue = nBlue < 255 ? nBlue : 255;
Magic Number,System.Drawing.PSD,ImageResource,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageResource.cs,ImageResource,The following statement contains a magic number: OSType = new string(reverseReader.ReadChars(4));
Magic Number,System.Drawing.PSD,ImageResource,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageResource.cs,ImageResource,The following statement contains a magic number: reverseReader.BaseStream.Position % 2 == 1
Magic Number,System.Drawing.PSD,ImageResource,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageResource.cs,Save,The following statement contains a magic number: reverseWriter.BaseStream.Position % 2 == 1
Magic Number,System.Drawing.PSD,Layer,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Layer.cs,Layer,The following statement contains a magic number: ReadOnlySpan<char> signature = reverseReader.ReadChars(4);
Magic Number,System.Drawing.PSD,Layer,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Layer.cs,Layer,The following statement contains a magic number: _blendModeKeyStr = new string(reverseReader.ReadChars(4));
Magic Number,System.Drawing.PSD,Layer,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Layer.cs,Layer,The following statement contains a magic number: int paddingBytes = (int)((reverseReader.BaseStream.Position - namePosition) % 4);
Magic Number,System.Drawing.PSD,Layer,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Layer.cs,Save,The following statement contains a magic number: int paddingBytes = (int)((reverseWriter.BaseStream.Position - namePosition) % 4);
Magic Number,System.Drawing.PSD,AdjusmentLayerInfo,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerAdjusmentLayerInfo.cs,AdjusmentLayerInfo,The following statement contains a magic number: ReadOnlySpan<char> signature = reader.ReadChars(4);
Magic Number,System.Drawing.PSD,AdjusmentLayerInfo,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerAdjusmentLayerInfo.cs,AdjusmentLayerInfo,The following statement contains a magic number: Key = new string(reader.ReadChars(4));
Magic Number,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,Save,The following statement contains a magic number: reverseWriter.Write(Data.Length + 2);
Magic Number,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,LoadPixelData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT sure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,LoadPixelData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT sure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,LoadPixelData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT sure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,CompressImageData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,CompressImageData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,CompressImageData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,Mask,The following statement contains a magic number: maskLength == 36
Magic Number,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,The following statement contains a magic number: Rect.IsEmpty || Layer.SortedChannels.ContainsKey(-2) == false
Magic Number,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,The following statement contains a magic number: Channel maskChannel = Layer.SortedChannels[-2];
Magic Number,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Rect.Width;                              break;                          case 16:                              bytesPerRow = Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Rect.Width;                              break;                          case 16:                              bytesPerRow = Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,The following statement contains a magic number: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Rect.Width;                              break;                          case 16:                              bytesPerRow = Rect.Width * 2;                              break;                      }
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: string signature = new string(reader.ReadChars(4));
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: reader.BaseStream.Position += 6;
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: reader.BaseStream.Position += _rows * _channels * 2;
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: switch (_depth)              {                  case 1:                      bytesPerRow = _columns;//NOT Shure                      break;                  case 8:                      bytesPerRow = _columns;                      break;                  case 16:                      bytesPerRow = _columns * 2;                      break;              }
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: switch (_depth)              {                  case 1:                      bytesPerRow = _columns;//NOT Shure                      break;                  case 8:                      bytesPerRow = _columns;                      break;                  case 16:                      bytesPerRow = _columns * 2;                      break;              }
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following statement contains a magic number: switch (_depth)              {                  case 1:                      bytesPerRow = _columns;//NOT Shure                      break;                  case 8:                      bytesPerRow = _columns;                      break;                  case 16:                      bytesPerRow = _columns * 2;                      break;              }
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,LoadLayers,The following statement contains a magic number: layer.Channels.Where(c => c.ID != -2)
Magic Number,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,LoadLayers,The following statement contains a magic number: reader.BaseStream.Position % 2 == 1
Magic Number,System.Drawing.PSD,RleHelper,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,DecodedRow,The following statement contains a magic number: len < 128
Magic Number,System.Drawing.PSD,RlePacketStateMachine,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,Push,The following statement contains a magic number: switch (_packetLength)                  {                      case 0:                          _rlePacket = false;                          _packetValues[0] = color;                          _packetLength = 1;                          break;                      case 1:                          _rlePacket = (color == _packetValues[0]);                          _packetValues[1] = color;                          _packetLength = 2;                          break;                      default:                          if (_packetLength == _packetValues.Length)                          {                              // Packet is full. Start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We were filling in an RLE packet' and we got a non-repeated color.                              // Emit the current packet and start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We are filling in an RLE packet' and we got another repeated color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We are filling in a raw packet' and we got another random color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We were filling in a raw packet' but we got a repeated color.                              // Emit the current packet without its last color' and start a                              // new RLE packet that starts with a length of 2.                              --_packetLength;                              Flush();                              Push(color);                              Push(color);                          }                          break;                  }
Magic Number,System.Drawing.PSD,RlePacketStateMachine,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,Push,The following statement contains a magic number: switch (_packetLength)                  {                      case 0:                          _rlePacket = false;                          _packetValues[0] = color;                          _packetLength = 1;                          break;                      case 1:                          _rlePacket = (color == _packetValues[0]);                          _packetValues[1] = color;                          _packetLength = 2;                          break;                      default:                          if (_packetLength == _packetValues.Length)                          {                              // Packet is full. Start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We were filling in an RLE packet' and we got a non-repeated color.                              // Emit the current packet and start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We are filling in an RLE packet' and we got another repeated color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We are filling in a raw packet' and we got another random color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We were filling in a raw packet' but we got a repeated color.                              // Emit the current packet without its last color' and start a                              // new RLE packet that starts with a length of 2.                              --_packetLength;                              Flush();                              Push(color);                              Push(color);                          }                          break;                  }
Magic Number,System.Drawing.PSD,RlePacketStateMachine,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,Push,The following statement contains a magic number: switch (_packetLength)                  {                      case 0:                          _rlePacket = false;                          _packetValues[0] = color;                          _packetLength = 1;                          break;                      case 1:                          _rlePacket = (color == _packetValues[0]);                          _packetValues[1] = color;                          _packetLength = 2;                          break;                      default:                          if (_packetLength == _packetValues.Length)                          {                              // Packet is full. Start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We were filling in an RLE packet' and we got a non-repeated color.                              // Emit the current packet and start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We are filling in an RLE packet' and we got another repeated color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We are filling in a raw packet' and we got another random color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We were filling in a raw packet' but we got a repeated color.                              // Emit the current packet without its last color' and start a                              // new RLE packet that starts with a length of 2.                              --_packetLength;                              Flush();                              Push(color);                              Push(color);                          }                          break;                  }
Magic Number,System.Drawing.PSD,RlePacketStateMachine,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,Push,The following statement contains a magic number: switch (_packetLength)                  {                      case 0:                          _rlePacket = false;                          _packetValues[0] = color;                          _packetLength = 1;                          break;                      case 1:                          _rlePacket = (color == _packetValues[0]);                          _packetValues[1] = color;                          _packetLength = 2;                          break;                      default:                          if (_packetLength == _packetValues.Length)                          {                              // Packet is full. Start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We were filling in an RLE packet' and we got a non-repeated color.                              // Emit the current packet and start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We are filling in an RLE packet' and we got another repeated color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We are filling in a raw packet' and we got another random color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We were filling in a raw packet' but we got a repeated color.                              // Emit the current packet without its last color' and start a                              // new RLE packet that starts with a length of 2.                              --_packetLength;                              Flush();                              Push(color);                              Push(color);                          }                          break;                  }
Magic Number,System.Drawing.PSD,RlePacketStateMachine,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\RleHelper.cs,Push,The following statement contains a magic number: switch (_packetLength)                  {                      case 0:                          _rlePacket = false;                          _packetValues[0] = color;                          _packetLength = 1;                          break;                      case 1:                          _rlePacket = (color == _packetValues[0]);                          _packetValues[1] = color;                          _packetLength = 2;                          break;                      default:                          if (_packetLength == _packetValues.Length)                          {                              // Packet is full. Start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We were filling in an RLE packet' and we got a non-repeated color.                              // Emit the current packet and start a new one.                              Flush();                              Push(color);                          }                          else if (_packetLength >= 2 && _rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We are filling in an RLE packet' and we got another repeated color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color != _packetValues[_packetLength - 1])                          {                              // We are filling in a raw packet' and we got another random color.                              // Add the new color to the current packet.                              ++_packetLength;                              _packetValues[_packetLength - 1] = color;                          }                          else if (_packetLength >= 2 && !_rlePacket && color == _packetValues[_packetLength - 1])                          {                              // We were filling in a raw packet' but we got a repeated color.                              // Emit the current packet without its last color' and start a                              // new RLE packet that starts with a length of 2.                              --_packetLength;                              Flush();                              Push(color);                              Push(color);                          }                          break;                  }
Magic Number,System.Drawing.PSD,Thumbnail,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Thumbnail.cs,Thumbnail,The following statement contains a magic number: ID == 1033
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return (ushort)((ushort)((x & 0xff) << 8) | ((x >> 8) & 0xff));
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return (ushort)((ushort)((x & 0xff) << 8) | ((x >> 8) & 0xff));
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 16) | (x << 16);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 16) | (x << 16);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00) >> 8) | ((x & 0x00FF00FF) << 8);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00) >> 8) | ((x & 0x00FF00FF) << 8);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 32) | (x << 32);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = (x >> 32) | (x << 32);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = ((x & 0xFFFF0000FFFF0000) >> 16) | ((x & 0x0000FFFF0000FFFF) << 16);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: x = ((x & 0xFFFF0000FFFF0000) >> 16) | ((x & 0x0000FFFF0000FFFF) << 16);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00FF00FF00) >> 8) | ((x & 0x00FF00FF00FF00FF) << 8);
Magic Number,System.Drawing.PSD,Utilities,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\Utilities.cs,SwapBytes,The following statement contains a magic number: return ((x & 0xFF00FF00FF00FF00) >> 8) | ((x & 0x00FF00FF00FF00FF) << 8);
Missing Default,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following switch statement is missing a default case: switch (psdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(alpha' red' green' blue);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(red' green' blue' alpha);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(red' green' blue' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(red' red' red);                      break;                  case ColorMode.Indexed:                      int index = red;                      c = Color.FromArgb(psdFile.ColorModeData[index]' psdFile.ColorModeData[index + 256]' psdFile.ColorModeData[index + 2 * 256]);                      break;                  case ColorMode.Lab:                      c = LabToRGB(red' green' blue);                      break;              }
Missing Default,System.Drawing.PSD,ImageDecoder,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\ImageDecoder.cs,GetColor,The following switch statement is missing a default case: switch (layer.PsdFile.ColorMode)              {                  case ColorMode.RGB:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      break;                  case ColorMode.CMYK:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' layer.SortedChannels[3].ImageData[pos]);                      break;                  case ColorMode.Multichannel:                      c = CMYKToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]' 0);                      break;                  case ColorMode.Grayscale:                  case ColorMode.Duotone:                      c = Color.FromArgb(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[0].ImageData[pos]);                      break;                  case ColorMode.Indexed:                      {                          int index = layer.SortedChannels[0].ImageData[pos];                          c = Color.FromArgb(layer.PsdFile.ColorModeData[index]' layer.PsdFile.ColorModeData[index + 256]' layer.PsdFile.ColorModeData[index + 2 * 256]);                      }                      break;                  case ColorMode.Lab:                      {                          c = LabToRGB(layer.SortedChannels[0].ImageData[pos]' layer.SortedChannels[1].ImageData[pos]' layer.SortedChannels[2].ImageData[pos]);                      }                      break;              }
Missing Default,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,LoadPixelData,The following switch statement is missing a default case: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT sure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Missing Default,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,LoadPixelData,The following switch statement is missing a default case: switch (ImageCompression)                      {                          case ImageCompression.Raw:                              imageReader.Read(ImageData' 0' ImageData.Length);                              break;                          case ImageCompression.Rle:                              {                                  var rowLengthList = new int[Layer.Rect.Height];                                    for (int i = 0; i < rowLengthList.Length; i++)                                  {                                      rowLengthList[i] = imageReader.ReadInt16();                                  }                                    for (int i = 0; i < Layer.Rect.Height; i++)                                  {                                      int rowIndex = i * Layer.Rect.Width;                                        RleHelper.DecodedRow(imageReader.BaseStream' ImageData' rowIndex' bytesPerRow);                                        //if (rowLenghtList[i] % 2 == 1)                                      //  readerImg.ReadByte();                                  }                              }                              break;                      }
Missing Default,System.Drawing.PSD,Channel,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerChannel.cs,CompressImageData,The following switch statement is missing a default case: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Layer.Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Layer.Rect.Width;                              break;                          case 16:                              bytesPerRow = Layer.Rect.Width * 2;                              break;                      }
Missing Default,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,The following switch statement is missing a default case: switch (Layer.PsdFile.Depth)                      {                          case 1:                              bytesPerRow = Rect.Width;//NOT Shure                              break;                          case 8:                              bytesPerRow = Rect.Width;                              break;                          case 16:                              bytesPerRow = Rect.Width * 2;                              break;                      }
Missing Default,System.Drawing.PSD,Mask,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\LayerMask.cs,LoadPixelData,The following switch statement is missing a default case: switch (maskChannel.ImageCompression)                      {                          case ImageCompression.Raw:                              readerImg.Read(maskChannel.ImageData' 0' maskChannel.ImageData.Length);                              break;                          case ImageCompression.Rle:                              {                                  int[] rowLenghtList = new int[Rect.Height];                                    for (int i = 0; i < rowLenghtList.Length; i++)                                      rowLenghtList[i] = readerImg.ReadInt16();                                    for (int i = 0; i < Rect.Height; i++)                                  {                                      int rowIndex = i * Rect.Width;                                      RleHelper.DecodedRow(readerImg.BaseStream' maskChannel.ImageData' rowIndex' bytesPerRow);                                  }                              }                              break;                      }
Missing Default,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following switch statement is missing a default case: switch (resID)                  {                      case ResourceIDs.ResolutionInfo:                          imgRes = new ResolutionInfo(imgRes);                          break;                      case ResourceIDs.Thumbnail1:                      case ResourceIDs.Thumbnail2:                          imgRes = new Thumbnail(imgRes);                          break;                      case ResourceIDs.AlphaChannelNames:                          imgRes = new AlphaChannels(imgRes);                          break;                  }
Missing Default,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following switch statement is missing a default case: switch (_depth)              {                  case 1:                      bytesPerRow = _columns;//NOT Shure                      break;                  case 8:                      bytesPerRow = _columns;                      break;                  case 16:                      bytesPerRow = _columns * 2;                      break;              }
Missing Default,System.Drawing.PSD,PsdFile,D:\research\architectureSmells\repos\bizzehdee_System.Drawing.PSD\PSDFile.cs,Load,The following switch statement is missing a default case: switch (ImageCompression)                  {                      case ImageCompression.Raw:                          reader.Read(ImageData[ch]' 0' ImageData[ch].Length);                          break;                      case ImageCompression.Rle:                          {                              for (int i = 0; i < _rows; i++)                              {                                  int rowIndex = i * _columns;                                  RleHelper.DecodedRow(reader.BaseStream' ImageData[ch]' rowIndex' bytesPerRow);                              }                          }                          break;                  }
