Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,Train,Cyclomatic complexity of the method is 8
Complex Method,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,TrainNetwork,Cyclomatic complexity of the method is 18
Complex Method,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,RunNetwork,Cyclomatic complexity of the method is 8
Complex Method,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,Cyclomatic complexity of the method is 9
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new InvalidInputException ("The number of pixels in input image doesn't match the number of input layer neurons"' null); " is 126.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new InvalidOutputException ("The number of pixels in output image doesn't match the number of output layer neurons"' null); " is 129.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new InvalidInputException ("The number of pixels in input image doesn't match the number of input layer neurons"' null); " is 126.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new InvalidInputException ("The number of pixels in input image doesn't match the number of input layer neurons"' null); " is 126.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,AddTrainingData,The length of the statement  "		throw new InvalidInputException ("The number of pixels in input image doesn't match the number of input layer neurons"' null); " is 126.
Long Statement,EpNeuralEngine.cs,NetworkHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NetworkHelper.cs,Train,The length of the statement  "		throw new NotInitializedException ("Helper not yet initialized. Initialize the helper by calling the Initialize function first"' null); " is 135.
Long Statement,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,TrainNetwork,The length of the statement  "			throw new InvalidInputException ("Unable to convert the output value at location " + (counter + 1) + " to Single"' null); " is 121.
Long Statement,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,ConnectLayers,The length of the statement  "		throw new NeuralEngineException ("Error occurred while trying to connect neuron layers. See stack trace for details"' ex); " is 122.
Long Statement,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,RunNetwork,The length of the statement  "			throw new InvalidInputException ("Unable to convert the  input value at location " + (counter + 1) + " to Single"' null); " is 121.
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: for (int heighTrav = 0; heighTrav < height; heighTrav++) {  	for (int widthTrav = 0; widthTrav < width; widthTrav++) {  		r = bmp.GetPixel (widthTrav' heighTrav).R;  		g = bmp.GetPixel (widthTrav' heighTrav).G;  		b = bmp.GetPixel (widthTrav' heighTrav).B;  		Single colorval = (r + g + b) / 3;  		Color col = new Color ();  		if (colorval > 255 / 2)  			col = Color.White;  		else  			col = Color.Black;  		bmp.SetPixel (widthTrav' heighTrav' col);  	}  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: for (int heighTrav = 0; heighTrav < height; heighTrav++) {  	for (int widthTrav = 0; widthTrav < width; widthTrav++) {  		r = bmp.GetPixel (widthTrav' heighTrav).R;  		g = bmp.GetPixel (widthTrav' heighTrav).G;  		b = bmp.GetPixel (widthTrav' heighTrav).B;  		Single colorval = (r + g + b) / 3;  		Color col = new Color ();  		if (colorval > 255 / 2)  			col = Color.White;  		else  			col = Color.Black;  		bmp.SetPixel (widthTrav' heighTrav' col);  	}  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: for (int heighTrav = 0; heighTrav < height; heighTrav++) {  	for (int widthTrav = 0; widthTrav < width; widthTrav++) {  		r = bmp.GetPixel (widthTrav' heighTrav).R;  		g = bmp.GetPixel (widthTrav' heighTrav).G;  		b = bmp.GetPixel (widthTrav' heighTrav).B;  		Single colorval = (r + g + b) / 3;  		Color col = new Color ();  		if (colorval > 255 / 2)  			col = Color.White;  		else  			col = Color.Black;  		bmp.SetPixel (widthTrav' heighTrav' col);  	}  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++) {  	r = bmp.GetPixel (widthTrav' heighTrav).R;  	g = bmp.GetPixel (widthTrav' heighTrav).G;  	b = bmp.GetPixel (widthTrav' heighTrav).B;  	Single colorval = (r + g + b) / 3;  	Color col = new Color ();  	if (colorval > 255 / 2)  		col = Color.White;  	else  		col = Color.Black;  	bmp.SetPixel (widthTrav' heighTrav' col);  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++) {  	r = bmp.GetPixel (widthTrav' heighTrav).R;  	g = bmp.GetPixel (widthTrav' heighTrav).G;  	b = bmp.GetPixel (widthTrav' heighTrav).B;  	Single colorval = (r + g + b) / 3;  	Color col = new Color ();  	if (colorval > 255 / 2)  		col = Color.White;  	else  		col = Color.Black;  	bmp.SetPixel (widthTrav' heighTrav' col);  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++) {  	r = bmp.GetPixel (widthTrav' heighTrav).R;  	g = bmp.GetPixel (widthTrav' heighTrav).G;  	b = bmp.GetPixel (widthTrav' heighTrav).B;  	Single colorval = (r + g + b) / 3;  	Color col = new Color ();  	if (colorval > 255 / 2)  		col = Color.White;  	else  		col = Color.Black;  	bmp.SetPixel (widthTrav' heighTrav' col);  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: if (colorval > 255 / 2)  	col = Color.White;  else  	col = Color.Black;  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ImageToMonochrome,The following statement contains a magic number: if (colorval > 255 / 2)  	col = Color.White;  else  	col = Color.Black;  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: for (int heighTrav = 0; heighTrav < height; heighTrav++) {  	for (int widthTrav = 0; widthTrav < width; widthTrav++) {  		clr = bmp.GetPixel (widthTrav' heighTrav);  		r = clr.R;  		g = clr.G;  		b = clr.B;  		Single avg = (r + g + b) / 3;  		if (avg < (255 / 2))  			destination.Add (0);  		else  			destination.Add (1);  	}  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: for (int heighTrav = 0; heighTrav < height; heighTrav++) {  	for (int widthTrav = 0; widthTrav < width; widthTrav++) {  		clr = bmp.GetPixel (widthTrav' heighTrav);  		r = clr.R;  		g = clr.G;  		b = clr.B;  		Single avg = (r + g + b) / 3;  		if (avg < (255 / 2))  			destination.Add (0);  		else  			destination.Add (1);  	}  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: for (int heighTrav = 0; heighTrav < height; heighTrav++) {  	for (int widthTrav = 0; widthTrav < width; widthTrav++) {  		clr = bmp.GetPixel (widthTrav' heighTrav);  		r = clr.R;  		g = clr.G;  		b = clr.B;  		Single avg = (r + g + b) / 3;  		if (avg < (255 / 2))  			destination.Add (0);  		else  			destination.Add (1);  	}  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++) {  	clr = bmp.GetPixel (widthTrav' heighTrav);  	r = clr.R;  	g = clr.G;  	b = clr.B;  	Single avg = (r + g + b) / 3;  	if (avg < (255 / 2))  		destination.Add (0);  	else  		destination.Add (1);  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++) {  	clr = bmp.GetPixel (widthTrav' heighTrav);  	r = clr.R;  	g = clr.G;  	b = clr.B;  	Single avg = (r + g + b) / 3;  	if (avg < (255 / 2))  		destination.Add (0);  	else  		destination.Add (1);  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++) {  	clr = bmp.GetPixel (widthTrav' heighTrav);  	r = clr.R;  	g = clr.G;  	b = clr.B;  	Single avg = (r + g + b) / 3;  	if (avg < (255 / 2))  		destination.Add (0);  	else  		destination.Add (1);  }  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: if (avg < (255 / 2))  	destination.Add (0);  else  	destination.Add (1);  
Magic Number,EpNeuralEngine.cs,ImageProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\ImageProcessingHelper.cs,ListFromImage,The following statement contains a magic number: if (avg < (255 / 2))  	destination.Add (0);  else  	destination.Add (1);  
Magic Number,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,TrainNetwork,The following statement contains a magic number: if (layers.Count < 2)  	throw new NotEnoughLayersException ("You should have at least two layers in your neural network to train it"' null);  
Magic Number,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,TrainNetwork,The following statement contains a magic number: try {  	int i = 0;  	foreach (var someNeuron in InputLayer) {  		someNeuron.OutputValue = Convert.ToSingle (data.Inputs [i]);  		i += 1;  	}  	for (int count = 1; count < layers.Count; count++) {  		NeuronLayer nl = layers [count];  		foreach (var someNeuron in nl) {  			someNeuron.UpdateOutput ();  		}  	}  	i = 0;  	foreach (var someNeuron in OutputLayer) {  		someNeuron.UpdateDelta ((float)data.Outputs [i] - someNeuron.OutputValue);  		i += 1;  	}  	for (i = layers.Count - 2; i >= 1; i--) {  		NeuronLayer currentLayer = layers [i];  		foreach (var someNeuron in currentLayer) {  			Single errorFactor = 0.0f;  			foreach (var connectedNeuron in someNeuron.ForwardConnections) {  				errorFactor = errorFactor + (connectedNeuron.DeltaValue * connectedNeuron.Inputs [someNeuron]);  			}  			someNeuron.UpdateDelta (errorFactor);  		}  	}  	for (i = 1; i < layers.Count; i++) {  		foreach (var someNeuron in layers [i]) {  			someNeuron.UpdateFreeParams ();  		}  	}  }  catch (System.Exception ex) {  	throw new TrainingException ("Error occurred while training network. "' ex);  }  
Magic Number,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,TrainNetwork,The following statement contains a magic number: for (i = layers.Count - 2; i >= 1; i--) {  	NeuronLayer currentLayer = layers [i];  	foreach (var someNeuron in currentLayer) {  		Single errorFactor = 0.0f;  		foreach (var connectedNeuron in someNeuron.ForwardConnections) {  			errorFactor = errorFactor + (connectedNeuron.DeltaValue * connectedNeuron.Inputs [someNeuron]);  		}  		someNeuron.UpdateDelta (errorFactor);  	}  }  
Magic Number,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,TrainNetwork,The following statement contains a magic number: i = layers.Count - 2
Magic Number,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,ConnectNeurons,The following statement contains a magic number: if (layers.Count < 2)  	throw new NotEnoughLayersException ("You should have at least two layers in your neural network to train it"' null);  
Magic Number,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,ConnectNeurons,The following statement contains a magic number: if (layers.Count < 2)  	throw new NotEnoughLayersException ("You should have at least two layers in your neural network to train it"' null);  
Magic Number,EpNeuralEngine.cs,NeuralNetwork,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\NeuralNetwork.cs,ConnectLayers,The following statement contains a magic number: if (layers.Count < 2)  	throw new NotEnoughLayersException ("You should have at least two layers in your neural network to train it"' null);  
Magic Number,EpNeuralEngine.cs,PatternProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\PatternProcessingHelper.cs,ListFromChar,The following statement contains a magic number: return ListFromNumber ((int)ch' 8);  
Magic Number,EpNeuralEngine.cs,PatternProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\PatternProcessingHelper.cs,NumberFromPattern,The following statement contains a magic number: for (int i = 0; i < pattern.Length; i++) {  	if (pattern [pattern.Length - 1 - i].Equals ('1'))  		bit = 1;  	else  		bit = 0;  	number = number + (((int)Math.Pow (2' i)) * bit);  }  
Magic Number,EpNeuralEngine.cs,PatternProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\PatternProcessingHelper.cs,NumberFromPattern,The following statement contains a magic number: number = number + (((int)Math.Pow (2' i)) * bit);  
Magic Number,EpNeuralEngine.cs,PatternProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\PatternProcessingHelper.cs,PatternFromNumber,The following statement contains a magic number: for (int i = 0; i < max; i++) {  	if ((((int)Math.Pow (2' i)) & number) == ((int)Math.Pow (2' i)))  		pattern = "1" + pattern;  	else  		pattern = "0" + pattern;  }  
Magic Number,EpNeuralEngine.cs,PatternProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\PatternProcessingHelper.cs,PatternFromNumber,The following statement contains a magic number: for (int i = 0; i < max; i++) {  	if ((((int)Math.Pow (2' i)) & number) == ((int)Math.Pow (2' i)))  		pattern = "1" + pattern;  	else  		pattern = "0" + pattern;  }  
Magic Number,EpNeuralEngine.cs,PatternProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\PatternProcessingHelper.cs,PatternFromNumber,The following statement contains a magic number: if ((((int)Math.Pow (2' i)) & number) == ((int)Math.Pow (2' i)))  	pattern = "1" + pattern;  else  	pattern = "0" + pattern;  
Magic Number,EpNeuralEngine.cs,PatternProcessingHelper,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\PatternProcessingHelper.cs,PatternFromNumber,The following statement contains a magic number: if ((((int)Math.Pow (2' i)) & number) == ((int)Math.Pow (2' i)))  	pattern = "1" + pattern;  else  	pattern = "0" + pattern;  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: try {  	view.Items.Clear ();  	view.Columns.Clear ();  	view.Columns.Add ("Neuron"' 100' HorizontalAlignment.Left);  	view.Columns.Add ("Bias"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Input Weights"' 120' HorizontalAlignment.Left);  	view.Columns.Add ("Delta"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Output"' 160' HorizontalAlignment.Left);  	view.View = View.Details;  	string inputs;  	NeuronLayer layer = network.Layers [0];  	int i = 0;  	foreach (INeuron myNeuron in layer) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("input" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  	i = 0;  	int j = 0;  	for (int layercount = 1; layercount < network.Layers.Count - 1; layercount++) {  		NeuronLayer nl = network.Layers [layercount];  		foreach (INeuron myNeuron in nl) {  			inputs = "";  			foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  				inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  			}  			ListViewItem viewItem = view.Items.Add ("Hidden" + i + j);  			viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  			viewItem.SubItems.Add (inputs);  			viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  			viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  			i += 1;  		}  		j += 1;  	}  	i = 0;  	foreach (INeuron myNeuron in network.Layers [network.Layers.Count - 1]) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("Output" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  }  catch (System.Exception ex) {  	throw new NeuralEngineException ("Unable to complete reporting. Error in Report function."' ex);  }  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: try {  	view.Items.Clear ();  	view.Columns.Clear ();  	view.Columns.Add ("Neuron"' 100' HorizontalAlignment.Left);  	view.Columns.Add ("Bias"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Input Weights"' 120' HorizontalAlignment.Left);  	view.Columns.Add ("Delta"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Output"' 160' HorizontalAlignment.Left);  	view.View = View.Details;  	string inputs;  	NeuronLayer layer = network.Layers [0];  	int i = 0;  	foreach (INeuron myNeuron in layer) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("input" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  	i = 0;  	int j = 0;  	for (int layercount = 1; layercount < network.Layers.Count - 1; layercount++) {  		NeuronLayer nl = network.Layers [layercount];  		foreach (INeuron myNeuron in nl) {  			inputs = "";  			foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  				inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  			}  			ListViewItem viewItem = view.Items.Add ("Hidden" + i + j);  			viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  			viewItem.SubItems.Add (inputs);  			viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  			viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  			i += 1;  		}  		j += 1;  	}  	i = 0;  	foreach (INeuron myNeuron in network.Layers [network.Layers.Count - 1]) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("Output" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  }  catch (System.Exception ex) {  	throw new NeuralEngineException ("Unable to complete reporting. Error in Report function."' ex);  }  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: try {  	view.Items.Clear ();  	view.Columns.Clear ();  	view.Columns.Add ("Neuron"' 100' HorizontalAlignment.Left);  	view.Columns.Add ("Bias"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Input Weights"' 120' HorizontalAlignment.Left);  	view.Columns.Add ("Delta"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Output"' 160' HorizontalAlignment.Left);  	view.View = View.Details;  	string inputs;  	NeuronLayer layer = network.Layers [0];  	int i = 0;  	foreach (INeuron myNeuron in layer) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("input" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  	i = 0;  	int j = 0;  	for (int layercount = 1; layercount < network.Layers.Count - 1; layercount++) {  		NeuronLayer nl = network.Layers [layercount];  		foreach (INeuron myNeuron in nl) {  			inputs = "";  			foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  				inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  			}  			ListViewItem viewItem = view.Items.Add ("Hidden" + i + j);  			viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  			viewItem.SubItems.Add (inputs);  			viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  			viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  			i += 1;  		}  		j += 1;  	}  	i = 0;  	foreach (INeuron myNeuron in network.Layers [network.Layers.Count - 1]) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("Output" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  }  catch (System.Exception ex) {  	throw new NeuralEngineException ("Unable to complete reporting. Error in Report function."' ex);  }  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: try {  	view.Items.Clear ();  	view.Columns.Clear ();  	view.Columns.Add ("Neuron"' 100' HorizontalAlignment.Left);  	view.Columns.Add ("Bias"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Input Weights"' 120' HorizontalAlignment.Left);  	view.Columns.Add ("Delta"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Output"' 160' HorizontalAlignment.Left);  	view.View = View.Details;  	string inputs;  	NeuronLayer layer = network.Layers [0];  	int i = 0;  	foreach (INeuron myNeuron in layer) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("input" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  	i = 0;  	int j = 0;  	for (int layercount = 1; layercount < network.Layers.Count - 1; layercount++) {  		NeuronLayer nl = network.Layers [layercount];  		foreach (INeuron myNeuron in nl) {  			inputs = "";  			foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  				inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  			}  			ListViewItem viewItem = view.Items.Add ("Hidden" + i + j);  			viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  			viewItem.SubItems.Add (inputs);  			viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  			viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  			i += 1;  		}  		j += 1;  	}  	i = 0;  	foreach (INeuron myNeuron in network.Layers [network.Layers.Count - 1]) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("Output" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  }  catch (System.Exception ex) {  	throw new NeuralEngineException ("Unable to complete reporting. Error in Report function."' ex);  }  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: try {  	view.Items.Clear ();  	view.Columns.Clear ();  	view.Columns.Add ("Neuron"' 100' HorizontalAlignment.Left);  	view.Columns.Add ("Bias"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Input Weights"' 120' HorizontalAlignment.Left);  	view.Columns.Add ("Delta"' 60' HorizontalAlignment.Left);  	view.Columns.Add ("Output"' 160' HorizontalAlignment.Left);  	view.View = View.Details;  	string inputs;  	NeuronLayer layer = network.Layers [0];  	int i = 0;  	foreach (INeuron myNeuron in layer) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("input" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  	i = 0;  	int j = 0;  	for (int layercount = 1; layercount < network.Layers.Count - 1; layercount++) {  		NeuronLayer nl = network.Layers [layercount];  		foreach (INeuron myNeuron in nl) {  			inputs = "";  			foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  				inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  			}  			ListViewItem viewItem = view.Items.Add ("Hidden" + i + j);  			viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  			viewItem.SubItems.Add (inputs);  			viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  			viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  			i += 1;  		}  		j += 1;  	}  	i = 0;  	foreach (INeuron myNeuron in network.Layers [network.Layers.Count - 1]) {  		inputs = "";  		foreach (INeuron con in myNeuron.Inputs.Neurons ()) {  			inputs = inputs + myNeuron.Inputs [con].ToString ("0.00") + "' ";  		}  		ListViewItem viewItem = view.Items.Add ("Output" + i);  		viewItem.SubItems.Add (myNeuron.BiasValue.ToString ("0.00"));  		viewItem.SubItems.Add (inputs);  		viewItem.SubItems.Add (myNeuron.DeltaValue.ToString ("0.00"));  		viewItem.SubItems.Add (myNeuron.OutputValue.ToString ("0.00"));  		i += 1;  	}  }  catch (System.Exception ex) {  	throw new NeuralEngineException ("Unable to complete reporting. Error in Report function."' ex);  }  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: view.Columns.Add ("Neuron"' 100' HorizontalAlignment.Left);  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: view.Columns.Add ("Bias"' 60' HorizontalAlignment.Left);  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: view.Columns.Add ("Input Weights"' 120' HorizontalAlignment.Left);  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: view.Columns.Add ("Delta"' 60' HorizontalAlignment.Left);  
Magic Number,EpNeuralEngine.cs,Util,C:\repos\juhgiyo_EpNeuralEngine.cs\EpNeuralEngine.cs\EpNeuralEngine.cs\Util.cs,Report,The following statement contains a magic number: view.Columns.Add ("Output"' 160' HorizontalAlignment.Left);  
