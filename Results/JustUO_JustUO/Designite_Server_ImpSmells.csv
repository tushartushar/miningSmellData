Implementation smell,Namespace,Class,File,Method,Description
Long Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Serialize,The method has 180 lines of code.
Long Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The method has 316 lines of code.
Long Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,ProcessDelta,The method has 165 lines of code.
Long Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The method has 169 lines of code.
Long Method,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The method has 147 lines of code.
Long Method,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The method has 142 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The method has 223 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Kill,The method has 138 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The method has 134 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The method has 129 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The method has 267 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Serialize,The method has 125 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,The method has 125 lines of code.
Long Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ProcessDelta,The method has 323 lines of code.
Long Method,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,The method has 354 lines of code.
Long Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The method has 113 lines of code.
Long Method,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The method has 127 lines of code.
Complex Method,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,Cyclomatic complexity of the method is 9
Complex Method,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,CompareTo,Cyclomatic complexity of the method is 11
Complex Method,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,Cyclomatic complexity of the method is 9
Complex Method,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetParticles,Cyclomatic complexity of the method is 8
Complex Method,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,Cyclomatic complexity of the method is 9
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetExpandFlags,Cyclomatic complexity of the method is 11
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Measure,Cyclomatic complexity of the method is 10
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Bounce,Cyclomatic complexity of the method is 8
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,MoveToWorld,Cyclomatic complexity of the method is 22
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Serialize,Cyclomatic complexity of the method is 53
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,Cyclomatic complexity of the method is 91
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,ProcessDelta,Cyclomatic complexity of the method is 38
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Delete,Cyclomatic complexity of the method is 10
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToItem,Cyclomatic complexity of the method is 8
Complex Method,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,Cyclomatic complexity of the method is 42
Complex Method,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,CurrentDomain_UnhandledException,Cyclomatic complexity of the method is 9
Complex Method,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,Cyclomatic complexity of the method is 31
Complex Method,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,VerifyType,Cyclomatic complexity of the method is 18
Complex Method,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,Cyclomatic complexity of the method is 14
Complex Method,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,FixColumn,Cyclomatic complexity of the method is 12
Complex Method,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetTopSurface,Cyclomatic complexity of the method is 14
Complex Method,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,Cyclomatic complexity of the method is 29
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,Cyclomatic complexity of the method is 11
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AddNameProperties,Cyclomatic complexity of the method is 11
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckAggrExpire,Cyclomatic complexity of the method is 9
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AggressiveAction,Cyclomatic complexity of the method is 19
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,UpdateTotal,Cyclomatic complexity of the method is 13
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,Cyclomatic complexity of the method is 79
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Resurrect,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Delete,Cyclomatic complexity of the method is 10
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnAfterDelete,Cyclomatic complexity of the method is 16
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Kill,Cyclomatic complexity of the method is 34
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Use,Cyclomatic complexity of the method is 16
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,Cyclomatic complexity of the method is 34
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendDropEffect,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,Cyclomatic complexity of the method is 45
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Damage,Cyclomatic complexity of the method is 24
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendDamageToAll,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,Cyclomatic complexity of the method is 89
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckStatTimers,Cyclomatic complexity of the method is 14
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Serialize,Cyclomatic complexity of the method is 14
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,Cyclomatic complexity of the method is 49
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendEverything,Cyclomatic complexity of the method is 10
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetPacketFlags,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetOldPacketFlags,Cyclomatic complexity of the method is 8
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanSee,Cyclomatic complexity of the method is 14
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MoveToWorld,Cyclomatic complexity of the method is 15
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,Cyclomatic complexity of the method is 34
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ProcessDelta,Cyclomatic complexity of the method is 79
Complex Method,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,Cyclomatic complexity of the method is 15
Complex Method,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Add,Cyclomatic complexity of the method is 11
Complex Method,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,RemoveXYZH,Cyclomatic complexity of the method is 10
Complex Method,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Remove,Cyclomatic complexity of the method is 10
Complex Method,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Resize,Cyclomatic complexity of the method is 11
Complex Method,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,Cyclomatic complexity of the method is 11
Complex Method,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,Cyclomatic complexity of the method is 14
Complex Method,Server,FileQueue,F:\newReposMay17\JustUO_JustUO\Server\Persistence\FileQueue.cs,Enqueue,Cyclomatic complexity of the method is 8
Complex Method,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,GetHashCode,Cyclomatic complexity of the method is 8
Complex Method,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileCSScripts,Cyclomatic complexity of the method is 25
Complex Method,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileVBScripts,Cyclomatic complexity of the method is 25
Complex Method,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,Display,Cyclomatic complexity of the method is 12
Complex Method,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,Compile,Cyclomatic complexity of the method is 8
Complex Method,Server,SecureTrade,F:\newReposMay17\JustUO_JustUO\Server\SecureTrade.cs,Cancel,Cyclomatic complexity of the method is 9
Complex Method,Server,SecureTrade,F:\newReposMay17\JustUO_JustUO\Server\SecureTrade.cs,Update,Cyclomatic complexity of the method is 27
Complex Method,Server,SecureTrade,F:\newReposMay17\JustUO_JustUO\Server\SecureTrade.cs,HandleAccountGoldTrade,Cyclomatic complexity of the method is 9
Complex Method,Server,SecureTrade,F:\newReposMay17\JustUO_JustUO\Server\SecureTrade.cs,HandleAccountGoldTrade,Cyclomatic complexity of the method is 9
Complex Method,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,Cyclomatic complexity of the method is 11
Complex Method,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,Cyclomatic complexity of the method is 12
Complex Method,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,Cyclomatic complexity of the method is 16
Complex Method,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,Cyclomatic complexity of the method is 8
Complex Method,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,Cyclomatic complexity of the method is 9
Complex Method,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,Cyclomatic complexity of the method is 12
Complex Method,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,Cyclomatic complexity of the method is 13
Complex Method,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,Cyclomatic complexity of the method is 16
Complex Method,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,GetDirection,Cyclomatic complexity of the method is 8
Complex Method,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,Cyclomatic complexity of the method is 10
Complex Method,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,Cyclomatic complexity of the method is 81
Complex Method,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,ProcessSafetyQueues,Cyclomatic complexity of the method is 11
Complex Method,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Save,Cyclomatic complexity of the method is 10
Complex Method,Server.Commands,CommandSystem,F:\newReposMay17\JustUO_JustUO\Server\Commands.cs,Split,Cyclomatic complexity of the method is 8
Complex Method,Server.Commands,CommandSystem,F:\newReposMay17\JustUO_JustUO\Server\Commands.cs,Handle,Cyclomatic complexity of the method is 9
Complex Method,CustomsFramework,ObjectDumper,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\ObjectDumper.cs,DumpElement,Cyclomatic complexity of the method is 12
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,CheckHold,Cyclomatic complexity of the method is 11
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotalGrouped,Cyclomatic complexity of the method is 15
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotalGrouped,Cyclomatic complexity of the method is 18
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotalGrouped,Cyclomatic complexity of the method is 18
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotal,Cyclomatic complexity of the method is 10
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotal,Cyclomatic complexity of the method is 10
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetBestGroupAmount,Cyclomatic complexity of the method is 8
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetBestGroupAmount,Cyclomatic complexity of the method is 8
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetBestGroupAmount,Cyclomatic complexity of the method is 9
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,Deserialize,Cyclomatic complexity of the method is 13
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,UpdateTotal,Cyclomatic complexity of the method is 12
Complex Method,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ProcessOpeners,Cyclomatic complexity of the method is 9
Complex Method,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,Cyclomatic complexity of the method is 14
Complex Method,Server.Movement,Movement,F:\newReposMay17\JustUO_JustUO\Server\Movement.cs,Offset,Cyclomatic complexity of the method is 28
Complex Method,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,Send,Cyclomatic complexity of the method is 11
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,SecureTrade,Cyclomatic complexity of the method is 21
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,Cyclomatic complexity of the method is 27
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DropReq6017,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TargetResponse,Cyclomatic complexity of the method is 16
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DisplayGumpResponse,Cyclomatic complexity of the method is 14
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,LookReq,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,BatchQueryProperties,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PartyMessage,Cyclomatic complexity of the method is 25
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,StatLockChange,Cyclomatic complexity of the method is 11
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuResponse,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuRequest,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,MobileQuery,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,Cyclomatic complexity of the method is 13
Complex Method,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,GameLogin,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,Trace,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,Seek,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUTF8StringSafe,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUTF8StringSafe,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,Cyclomatic complexity of the method is 8
Complex Method,Server.Network,WorldItem,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WorldItem,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,Cyclomatic complexity of the method is 9
Complex Method,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,Cyclomatic complexity of the method is 14
Complex Method,Server.Network,MobileIncoming,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncoming,Cyclomatic complexity of the method is 13
Complex Method,Server.Network,MobileIncomingSA,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingSA,Cyclomatic complexity of the method is 19
Complex Method,Server.Network,MobileIncomingOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingOld,Cyclomatic complexity of the method is 19
Complex Method,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,Cyclomatic complexity of the method is 12
Complex Method,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,Cyclomatic complexity of the method is 12
Complex Method,Server.Network,Packet,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InternalCompile,Cyclomatic complexity of the method is 10
Complex Method,Server.Network,SendQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\SendQueue.cs,Enqueue,Cyclomatic complexity of the method is 10
Complex Method,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,Invoke,Cyclomatic complexity of the method is 19
Long Parameter List,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The method has 5 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationEffect,The method has 5 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationEffect,The method has 6 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationEffect,The method has 7 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationParticles,The method has 5 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationParticles,The method has 6 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationParticles,The method has 8 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetEffect,The method has 5 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetEffect,The method has 6 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetParticles,The method has 6 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetParticles,The method has 7 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetParticles,The method has 9 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingEffect,The method has 7 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingEffect,The method has 9 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The method has 10 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The method has 11 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The method has 13 parameters.
Long Parameter List,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The method has 14 parameters.
Long Parameter List,Server,CharacterCreatedEventArgs,F:\newReposMay17\JustUO_JustUO\Server\EventSink.cs,CharacterCreatedEventArgs,The method has 18 parameters.
Long Parameter List,Server,CharacterCreatedEventArgs,F:\newReposMay17\JustUO_JustUO\Server\EventSink.cs,CharacterCreatedEventArgs,The method has 20 parameters.
Long Parameter List,Server,SpeechEventArgs,F:\newReposMay17\JustUO_JustUO\Server\EventSink.cs,SpeechEventArgs,The method has 5 parameters.
Long Parameter List,Server,OnPropertyChangedEventArgs,F:\newReposMay17\JustUO_JustUO\Server\EventSink.cs,OnPropertyChangedEventArgs,The method has 5 parameters.
Long Parameter List,Server,ExpansionInfo,F:\newReposMay17\JustUO_JustUO\Server\ExpansionInfo.cs,ExpansionInfo,The method has 6 parameters.
Long Parameter List,Server,ExpansionInfo,F:\newReposMay17\JustUO_JustUO\Server\ExpansionInfo.cs,ExpansionInfo,The method has 6 parameters.
Long Parameter List,Server,Rectangle3D,F:\newReposMay17\JustUO_JustUO\Server\Geometry.cs,Rectangle3D,The method has 6 parameters.
Long Parameter List,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Measure,The method has 5 parameters.
Long Parameter List,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelToAffix,The method has 5 parameters.
Long Parameter List,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,SendLocalizedMessageTo,The method has 5 parameters.
Long Parameter List,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetAverageZ,The method has 5 parameters.
Long Parameter List,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The method has 5 parameters.
Long Parameter List,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The method has 6 parameters.
Long Parameter List,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The method has 7 parameters.
Long Parameter List,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,Map,The method has 8 parameters.
Long Parameter List,Server,EquipedSkillMod,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,EquipedSkillMod,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,BeginTarget,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,BeginTarget,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The method has 6 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingEffect,The method has 8 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingEffect,The method has 6 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The method has 13 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The method has 12 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The method has 10 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The method has 9 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,FixedEffect,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,FixedParticles,The method has 8 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,FixedParticles,The method has 7 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,FixedParticles,The method has 6 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,FixedParticles,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckTrade,The method has 7 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The method has 6 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The method has 7 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PrivateOverheadMessage,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PrivateOverheadMessage,The method has 5 parameters.
Long Parameter List,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendLocalizedMessage,The method has 5 parameters.
Long Parameter List,Server,MultiTileEntry,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiTileEntry,The method has 5 parameters.
Long Parameter List,Server,ObjectPropertyList,F:\newReposMay17\JustUO_JustUO\Server\ObjectPropertyList.cs,Add,The method has 5 parameters.
Long Parameter List,Server,FileOperations,F:\newReposMay17\JustUO_JustUO\Server\Persistence\FileOperations.cs,CreateFile,The method has 7 parameters.
Long Parameter List,Server,Race,F:\newReposMay17\JustUO_JustUO\Server\Race.cs,Race,The method has 9 parameters.
Long Parameter List,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,CanMove,The method has 5 parameters.
Long Parameter List,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,ReadRectangle3D,The method has 5 parameters.
Long Parameter List,Server,SecureTrade,F:\newReposMay17\JustUO_JustUO\Server\SecureTrade.cs,HandleAccountGoldTrade,The method has 6 parameters.
Long Parameter List,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The method has 5 parameters.
Long Parameter List,Server,SkillInfo,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,SkillInfo,The method has 11 parameters.
Long Parameter List,Server,ItemData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,ItemData,The method has 7 parameters.
Long Parameter List,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The method has 5 parameters.
Long Parameter List,Server,StaticTile,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,StaticTile,The method has 5 parameters.
Long Parameter List,Server,StaticTile,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,Set,The method has 5 parameters.
Long Parameter List,Server,Timer,F:\newReposMay17\JustUO_JustUO\Server\Timer.cs,DelayCall,The method has 5 parameters.
Long Parameter List,Server,Timer,F:\newReposMay17\JustUO_JustUO\Server\Timer.cs,DelayCall,The method has 5 parameters.
Long Parameter List,Server.Mobiles,BuyItemState,F:\newReposMay17\JustUO_JustUO\Server\BaseVendor.cs,BuyItemState,The method has 7 parameters.
Long Parameter List,CustomsFramework,Utilities,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Utilities.cs,PlaceItemIn,The method has 5 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddBackground,The method has 5 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddKRButton,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddButton,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddCheck,The method has 6 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddHtml,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddHtmlIntern,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddHtmlLocalized,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddHtmlLocalized,The method has 8 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddHtmlLocalized,The method has 9 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddKRHtmlLocalized,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddKRHtmlLocalized,The method has 8 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddKRLabel,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddImageTiled,The method has 5 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddImageTiledButton,The method has 11 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddImageTiledButton,The method has 12 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddLabelCropped,The method has 6 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddRadio,The method has 6 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddTextEntry,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddTextEntry,The method has 8 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddTextEntryIntern,The method has 7 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddButtonTileArt,The method has 11 parameters.
Long Parameter List,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddButtonTileArt,The method has 12 parameters.
Long Parameter List,Server.Gumps,GumpBackground,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpBackground.cs,GumpBackground,The method has 5 parameters.
Long Parameter List,Server.Gumps,GumpButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpButton.cs,GumpButton,The method has 7 parameters.
Long Parameter List,Server.Gumps,GumpButtonTileArt,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpButtonTileArt.cs,GumpButtonTileArt,The method has 11 parameters.
Long Parameter List,Server.Gumps,GumpButtonTileArt,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpButtonTileArt.cs,GumpButtonTileArt,The method has 12 parameters.
Long Parameter List,Server.Gumps,GumpCheck,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpCheck.cs,GumpCheck,The method has 6 parameters.
Long Parameter List,Server.Gumps,GumpHtml,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtml.cs,GumpHtml,The method has 7 parameters.
Long Parameter List,Server.Gumps,GumpHtml,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtml.cs,GumpHtml,The method has 7 parameters.
Long Parameter List,Server.Gumps,GumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtmlLocalized.cs,GumpHtmlLocalized,The method has 7 parameters.
Long Parameter List,Server.Gumps,GumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtmlLocalized.cs,GumpHtmlLocalized,The method has 8 parameters.
Long Parameter List,Server.Gumps,GumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtmlLocalized.cs,GumpHtmlLocalized,The method has 9 parameters.
Long Parameter List,Server.Gumps,GumpImageTileButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpImageTileButton.cs,GumpImageTileButton,The method has 11 parameters.
Long Parameter List,Server.Gumps,GumpImageTileButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpImageTileButton.cs,GumpImageTileButton,The method has 12 parameters.
Long Parameter List,Server.Gumps,GumpImageTiled,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpImageTiled.cs,GumpImageTiled,The method has 5 parameters.
Long Parameter List,Server.Gumps,GumpLabelCropped,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpLabelCropped.cs,GumpLabelCropped,The method has 6 parameters.
Long Parameter List,Server.Gumps,GumpRadio,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpRadio.cs,GumpRadio,The method has 6 parameters.
Long Parameter List,Server.Gumps,GumpTextEntry,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpTextEntry.cs,GumpTextEntry,The method has 7 parameters.
Long Parameter List,Server.Gumps,GumpTextEntry,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpTextEntry.cs,GumpTextEntry,The method has 7 parameters.
Long Parameter List,Server.Gumps,GumpTextEntryLimited,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpTextEntryLimited.cs,GumpTextEntryLimited,The method has 8 parameters.
Long Parameter List,Server.Gumps,KRGumpButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpButton.cs,KRGumpButton,The method has 7 parameters.
Long Parameter List,Server.Gumps,KRGumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpHtmlLocalized.cs,KRGumpHtmlLocalized,The method has 7 parameters.
Long Parameter List,Server.Gumps,KRGumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpHtmlLocalized.cs,KRGumpHtmlLocalized,The method has 8 parameters.
Long Parameter List,Server.Gumps,KRGumpLabel,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpLabel.cs,KRGumpLabel,The method has 7 parameters.
Long Parameter List,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,CheckHold,The method has 6 parameters.
Long Parameter List,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotalGrouped,The method has 5 parameters.
Long Parameter List,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotalGrouped,The method has 5 parameters.
Long Parameter List,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ConsumeTotalGrouped,The method has 5 parameters.
Long Parameter List,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,RecurseConsumeUpTo,The method has 6 parameters.
Long Parameter List,Server.Items,SecureTradeContainer,F:\newReposMay17\JustUO_JustUO\Server\Items\SecureTradeContainer.cs,CheckHold,The method has 6 parameters.
Long Parameter List,Server.Movement,Movement,F:\newReposMay17\JustUO_JustUO\Server\Movement.cs,CheckMovement,The method has 5 parameters.
Long Parameter List,Server.Movement,IMovementImpl,F:\newReposMay17\JustUO_JustUO\Server\Movement.cs,CheckMovement,The method has 5 parameters.
Long Parameter List,Server.Network,BufferPool,F:\newReposMay17\JustUO_JustUO\Server\Network\BufferPool.cs,GetInfo,The method has 6 parameters.
Long Parameter List,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The method has 5 parameters.
Long Parameter List,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Pack,The method has 5 parameters.
Long Parameter List,Server.Network,ICompressor,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The method has 5 parameters.
Long Parameter List,Server.Network,Compressor32,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The method has 5 parameters.
Long Parameter List,Server.Network,Compressor64,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The method has 5 parameters.
Long Parameter List,Server.Network,CompressorUnix32,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The method has 5 parameters.
Long Parameter List,Server.Network,CompressorUnix64,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The method has 5 parameters.
Long Parameter List,Server.Network,DisplayProfile,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayProfile,The method has 5 parameters.
Long Parameter List,Server.Network,ParticleEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ParticleEffect,The method has 18 parameters.
Long Parameter List,Server.Network,ParticleEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ParticleEffect,The method has 18 parameters.
Long Parameter List,Server.Network,GraphicalEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GraphicalEffect,The method has 10 parameters.
Long Parameter List,Server.Network,GraphicalEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GraphicalEffect,The method has 10 parameters.
Long Parameter List,Server.Network,HuedEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,HuedEffect,The method has 12 parameters.
Long Parameter List,Server.Network,HuedEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,HuedEffect,The method has 12 parameters.
Long Parameter List,Server.Network,TargetParticleEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,TargetParticleEffect,The method has 9 parameters.
Long Parameter List,Server.Network,TargetEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,TargetEffect,The method has 6 parameters.
Long Parameter List,Server.Network,LocationParticleEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,LocationParticleEffect,The method has 8 parameters.
Long Parameter List,Server.Network,LocationEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,LocationEffect,The method has 6 parameters.
Long Parameter List,Server.Network,MovingParticleEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MovingParticleEffect,The method has 14 parameters.
Long Parameter List,Server.Network,MovingEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MovingEffect,The method has 9 parameters.
Long Parameter List,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalized,The method has 8 parameters.
Long Parameter List,Server.Network,DragEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DragEffect,The method has 5 parameters.
Long Parameter List,Server.Network,MobileAnimation,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileAnimation,The method has 7 parameters.
Long Parameter List,Server.Network,AsciiMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AsciiMessage,The method has 7 parameters.
Long Parameter List,Server.Network,UnicodeMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnicodeMessage,The method has 8 parameters.
Long Parameter List,Server.Network,CityInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CityInfo,The method has 7 parameters.
Long Parameter List,Server.Network,CityInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CityInfo,The method has 6 parameters.
Long Parameter List,Server.Network,CityInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CityInfo,The method has 6 parameters.
Long Parameter List,Server.Network,CityInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CityInfo,The method has 5 parameters.
Long Parameter List,Server.Network,MessageLocalizedAffix,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalizedAffix,The method has 10 parameters.
Long Parameter List,Server.Network,DisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayWaypoint,The method has 7 parameters.
Long Parameter List,Server.Network,KRDisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,KRDisplayWaypoint,The method has 5 parameters.
Long Parameter List,Server.Network,KRDisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,KRDisplayWaypoint,The method has 6 parameters.
Long Parameter List,Server.Network,KRDisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,KRDisplayWaypoint,The method has 7 parameters.
Long Parameter List,Server.Targeting,MultiTarget,F:\newReposMay17\JustUO_JustUO\Server\Targeting\MultiTarget.cs,MultiTarget,The method has 5 parameters.
Long Statement,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,Equals,The length of the statement  "	return m_Major == v.m_Major && m_Minor == v.m_Minor && m_Revision == v.m_Revision && m_Patch == v.m_Patch && m_Type == v.m_Type; " is 128.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendParticlesTo,The length of the statement  "	return (m_ParticleSupportType == ParticleSupportType.Full || (m_ParticleSupportType == ParticleSupportType.Detect && (state.IsUOTDClient || state.IsSAClient || state.IsKRClient))); " is 180.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationParticles,The length of the statement  "	//SendPacket( e.Location' e.Map' new LocationParticleEffect( e' itemID' speed' duration' hue' renderMode' effect' unknown ) ); " is 126.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetParticles,The length of the statement  "					particles = Packet.Acquire (new TargetParticleEffect (target' itemID' speed' duration' hue' renderMode' effect' (int)layer' unknown)); " is 134.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetParticles,The length of the statement  "	//SendPacket( target.Location' target.Map' new TargetParticleEffect( target' itemID' speed' duration' hue' renderMode' effect' (int)layer' unknown ) ); " is 151.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingEffect,The length of the statement  "	SendPacket (from.Location' from.Map' new MovingEffect (from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode)); " is 134.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The length of the statement  "	SendMovingParticles (from' to' itemID' speed' duration' fixedDirection' explodes' 0' 0' effect' explodeEffect' explodeSound' 0); " is 128.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The length of the statement  "	SendMovingParticles (from' to' itemID' speed' duration' fixedDirection' explodes' 0' 0' effect' explodeEffect' explodeSound' unknown); " is 134.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The length of the statement  "	SendMovingParticles (from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown); " is 163.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The length of the statement  "					particles = Packet.Acquire (new MovingParticleEffect (from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' layer' unknown)); " is 186.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The length of the statement  "					regular = Packet.Acquire (new MovingEffect (from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode)); " is 123.
Long Statement,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The length of the statement  "	//SendPacket( from.Location' from.Map' new MovingParticleEffect( from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' unknown ) ); " is 192.
Long Statement,Server,Rectangle2D,F:\newReposMay17\JustUO_JustUO\Server\Geometry.cs,Parse,The length of the statement  "	return new Rectangle2D (Convert.ToInt32 (param1)' Convert.ToInt32 (param2)' Convert.ToInt32 (param3)' Convert.ToInt32 (param4)); " is 128.
Long Statement,Server,Rectangle3D,F:\newReposMay17\JustUO_JustUO\Server\Geometry.cs,Contains,The length of the statement  "	return (p.m_X >= m_Start.m_X) && (p.m_X < m_End.m_X) && (p.m_Y >= m_Start.m_Y) && (p.m_Y < m_End.m_Y) && (p.m_Z >= m_Start.m_Z) && (p.m_Z < m_End.m_Z); " is 151.
Long Statement,Server,Rectangle3D,F:\newReposMay17\JustUO_JustUO\Server\Geometry.cs,Contains,The length of the statement  "	return (p.X >= m_Start.m_X) && (p.X < m_End.m_X) && (p.Y >= m_Start.m_Y) && (p.Y < m_End.m_Y) && (p.Z >= m_Start.m_Z) && (p.Z < m_End.m_Z); " is 139.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,VerifyCompactInfo,The length of the statement  "	bool isValid = (info.m_Name != null) || (info.m_Items != null) || (info.m_Bounce != null) || (info.m_HeldBy != null) || (info.m_BlessedFor != null) || (info.m_Spawner != null) || (info.m_TempFlags != 0) || (info.m_SavedFlags != 0) || (info.m_Weight != -1); " is 256.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Measure,The length of the statement  "	BitmapData bd = bmp.LockBits (new Rectangle (0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadOnly' PixelFormat.Format16bppArgb1555); " is 132.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,StackWith,The length of the statement  "	if (dropped.Stackable && Stackable && dropped.GetType () == GetType () && dropped.ItemID == ItemID && dropped.Hue == Hue && dropped.Name == Name && (dropped.Amount + Amount) <= 60000 && dropped != this && !dropped.Nontransferable && !Nontransferable) { " is 252.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Serialize,The length of the statement  "		if (x >= short.MinValue && x <= short.MaxValue && y >= short.MinValue && y <= short.MaxValue && z >= sbyte.MinValue && z <= sbyte.MaxValue) { " is 141.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Serialize,The length of the statement  "	ImplFlag implFlags = (m_Flags & (ImplFlag.Visible | ImplFlag.Movable | ImplFlag.Stackable | ImplFlag.Insured | ImplFlag.PayedInsurance | ImplFlag.QuestItem)); " is 158.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddItem,The length of the statement  "		Console.WriteLine ("Warning: Adding item to itself: [0x{0:X} {1}].AddItem( [0x{2:X} {3}] )"' Serial.Value' GetType ().Name' item.Serial.Value' item.GetType ().Name); " is 165.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddItem,The length of the statement  "		Console.WriteLine ("Warning: Adding parent item to child: [0x{0:X} {1}].AddItem( [0x{2:X} {3}] )"' Serial.Value' GetType ().Name' item.Serial.Value' item.GetType ().Name); " is 171.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,SendLocalizedMessageTo,The length of the statement  "	to.Send (new MessageLocalizedAffix (Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' affixType' affix' args)); " is 120.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The length of the statement  "				ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' "")); " is 161.
Long Statement,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The length of the statement  "			ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : ""))); " is 137.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The length of the statement  "	// Added to help future code support on forums' as a 'check' people can ask for to it see if they recompiled core or not " is 120.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The length of the statement  "	Console.WriteLine ("Core: .NET Framework Version {0}.{1}.{2}"' Environment.Version.Major' Environment.Version.Minor' Environment.Version.Build); " is 144.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The length of the statement  "		Console.WriteLine ("Core: Optimizing for {0} {2}processor{1}"' m_ProcessorCount' m_ProcessorCount == 1 ? "" : "s"' Is64Bit ? "64-bit " : ""); " is 141.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The length of the statement  "		Console.WriteLine ("Core: Requested high resolution timing ({0})"' UsingHighResolutionTiming ? "Supported" : "Unsupported"); " is 124.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,VerifyType,The length of the statement  "			if (t.GetMethod ("Serialize"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly) == null) { " is 138.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,VerifyType,The length of the statement  "			if (t.GetMethod ("Deserialize"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly) == null) { " is 140.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,VerifyType,The length of the statement  "			if (t.GetMethod ("Serialize"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly) == null) { " is 138.
Long Statement,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,VerifyType,The length of the statement  "			if (t.GetMethod ("Deserialize"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly) == null) { " is 140.
Long Statement,Server,FileLogger,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Write,The length of the statement  "	using (var writer = new StreamWriter (new FileStream (m_FileName' FileMode.Append' FileAccess.Write' FileShare.Read))) { " is 120.
Long Statement,Server,FileLogger,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Write,The length of the statement  "	using (var writer = new StreamWriter (new FileStream (m_FileName' FileMode.Append' FileAccess.Write' FileShare.Read))) { " is 120.
Long Statement,Server,FileLogger,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,WriteLine,The length of the statement  "	using (var writer = new StreamWriter (new FileStream (m_FileName' FileMode.Append' FileAccess.Write' FileShare.Read))) { " is 120.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetAverageZ,The length of the statement  "	avg = Math.Abs (zTop - zBottom) > Math.Abs (zLeft - zRight) ? FloorAverage (zLeft' zRight) : FloorAverage (zTop' zBottom); " is 122.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetObjectsInRange,The length of the statement  "	return PooledEnumerable<IEntity>.Instantiate (EntityEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1))); " is 161.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetClientsInRange,The length of the statement  "	return PooledEnumerable<NetState>.Instantiate (ClientEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1))); " is 162.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetItemsInRange,The length of the statement  "	return PooledEnumerable<Item>.Instantiate (ItemEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1))); " is 156.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetMobilesInRange,The length of the statement  "	return PooledEnumerable<Mobile>.Instantiate (MobileEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1))); " is 160.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The length of the statement  "		if ((surface || impassable || (checkBlocksFit && item.BlocksFit)) && (item.Z + id.CalcHeight) > z && (z + height) > item.Z) { " is 125.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The length of the statement  "		if (mobs.Any (m => m.Location.m_X == x && m.Location.m_Y == y && (m.AccessLevel < AccessLevel.Counselor || !m.Hidden) && ((m.Z + 16) > z && (z + height) > m.Z))) { " is 163.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,FixColumn,The length of the statement  "	List<Item> items = eable.Where (item => !(item is BaseMulti) && item.ItemID <= TileData.MaxItemValue).OrderBy (i => i.Z).Take (100).ToList (); " is 142.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The length of the statement  "	while (Utility.NumberBetween (x' dest.m_X' org.m_X' 0.5) && Utility.NumberBetween (y' dest.m_Y' org.m_Y' 0.5) && Utility.NumberBetween (z' dest.m_Z' org.m_Z' 0.5)) { " is 165.
Long Statement,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The length of the statement  "		if (landZ <= pointTop && landTop >= point.m_Z && (point.m_X != end.m_X || point.m_Y != end.m_Y || landZ > endTop || landTop < end.m_Z) && !landTile.Ignored) { " is 158.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The length of the statement  "						if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) { " is 151.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The length of the statement  "						if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) { " is 146.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The length of the statement  "						if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) { " is 151.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The length of the statement  "						if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) { " is 146.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The length of the statement  "			if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) { " is 126.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LiftItemDupe,The length of the statement  "		Console.WriteLine ("Warning: 0x{0:X}: Item must have a zero paramater constructor to be separated from a stack. '{1}'."' oldItem.Serial.Value' oldItem.GetType ().Name); " is 168.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Heal,The length of the statement  "		_NetState.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString ()' "")); " is 168.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AddItem,The length of the statement  "	if (item.PhysicalResistance != 0 || item.FireResistance != 0 || item.ColdResistance != 0 || item.PoisonResistance != 0 || item.EnergyResistance != 0) { " is 151.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,RemoveItem,The length of the statement  "		if (item.PhysicalResistance != 0 || item.FireResistance != 0 || item.ColdResistance != 0 || item.PoisonResistance != 0 || item.EnergyResistance != 0) { " is 151.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The length of the statement  "	if (_Deleted || target._Deleted || !Alive || IsDeadBondedPet || (!allowDead && (!target.Alive || target.IsDeadBondedPet))) { " is 124.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The length of the statement  "	if (_Deleted || (!ignoreOurBlessedness && _Blessed) || target._Deleted || target._Blessed || !Alive || IsDeadBondedPet || !target.Alive || target.IsDeadBondedPet) { " is 164.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The length of the statement  "	if (/*_Player &&*/!Region.AllowHarmful (this' target))//(target._Player || target.Body.IsHuman) && !Region.AllowHarmful( this' target )  ) " is 138.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanSee,The length of the statement  "	return this == m || (m._Map == _Map && (!m.Hidden || (IsStaff () && _AccessLevel >= m.AccessLevel)) && ((m.Alive || (Core.SE && Skills.SpiritSpeak.Value >= 100.0)) || !Alive || IsStaff () || m.Warmode)); " is 203.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,The length of the statement  "			Packet hbpPacket = Packet.Acquire (new HealthbarPoison (this))' hbyPacket = Packet.Acquire (new HealthbarYellow (this)); " is 120.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,The length of the statement  "				// We are attached to a client' so it's a bit more complex. We need to send new items and people to ourself' and ourself to other clients " is 137.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,The length of the statement  "					if (((isTeleport && (!ns.HighSeas || !_NoMoveHS)) || !Utility.InUpdateRange (oldLocation' ns.Mobile.Location)) && ns.Mobile.CanSee (this)) { " is 140.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The length of the statement  "	Effects.SendMovingParticles (this' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' layer' unknown); " is 160.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The length of the statement  "	Effects.SendMovingParticles (this' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown); " is 171.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The length of the statement  "	Effects.SendMovingParticles (this' to' itemID' speed' duration' fixedDirection' explodes' effect' explodeEffect' explodeSound' unknown); " is 136.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The length of the statement  "	Effects.SendMovingParticles (this' to' itemID' speed' duration' fixedDirection' explodes' 0' 0' effect' explodeEffect' explodeSound' 0); " is 136.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendIncomingPacket,The length of the statement  "		Packet hbpPacket = Packet.Acquire (new HealthbarPoison (this))' hbyPacket = Packet.Acquire (new HealthbarYellow (this)); " is 120.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckEquip,The length of the statement  "		if (_Items [i].CheckConflictingLayer (this' item' item.Layer) || item.CheckConflictingLayer (this' _Items [i]' _Items [i].Layer)) { " is 131.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ProcessDelta,The length of the statement  "	if ((delta & (MobileDelta.WeaponDamage | MobileDelta.Resistances | MobileDelta.Stat | MobileDelta.Weight | MobileDelta.Gold | MobileDelta.Armor | MobileDelta.StatCap | MobileDelta.Followers | MobileDelta.TithingPoints | MobileDelta.Race)) != 0) { " is 246.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ProcessDelta,The length of the statement  "	if (m._Map != null && (sendRemove || sendIncoming || sendPublicStats || sendHits || sendMoving || sendOPLUpdate || sendHair || sendFacialHair || sendHealthbarPoison || sendHealthbarYellow || sendFace)) " is 201.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The length of the statement  "		Packet p = Packet.Acquire (new MessageLocalizedAffix (_Serial' Body' type' hue' 3' number' Name' affixType' affix' args)); " is 122.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendLocalizedMessage,The length of the statement  "		ns.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' (append ? AffixType.Append : AffixType.Prepend) | AffixType.System' affix' args)); " is 186.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,InRange,The length of the statement  "	return (p.m_X >= (_Location.m_X - range)) && (p.m_X <= (_Location.m_X + range)) && (p.m_Y >= (_Location.m_Y - range)) && (p.m_Y <= (_Location.m_Y + range)); " is 156.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,InRange,The length of the statement  "	return (p.m_X >= (_Location.m_X - range)) && (p.m_X <= (_Location.m_X + range)) && (p.m_Y >= (_Location.m_Y - range)) && (p.m_Y <= (_Location.m_Y + range)); " is 156.
Long Statement,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,InRange,The length of the statement  "	return (p.X >= (_Location.m_X - range)) && (p.X <= (_Location.m_X + range)) && (p.Y >= (_Location.m_Y - range)) && (p.Y <= (_Location.m_Y + range)); " is 148.
Long Statement,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,RemoveXYZH,The length of the statement  "			if (tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z && TileData.ItemTable [tile.m_ItemID & TileData.MaxItemValue].Height >= minHeight) { " is 175.
Long Statement,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Remove,The length of the statement  "			if (tile.m_ItemID == itemID && tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z) { " is 120.
Long Statement,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,SaveItems,The length of the statement  "		if (item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)) { " is 124.
Long Statement,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,Save,The length of the statement  "	if (item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)) { " is 124.
Long Statement,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The length of the statement  "		//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count); " is 126.
Long Statement,Server,StandardSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\StandardSaveStrategy.cs,SaveItems,The length of the statement  "		if (item.Decays && item.Parent == null && item.Map != Map.Internal && (item.LastMoved + item.DecayTime) <= DateTime.UtcNow) { " is 125.
Long Statement,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,ReadRectangle3D,The length of the statement  "		if (ReadInt32 (xml' "x"' ref x1' mandatory) & ReadInt32 (xml' "y"' ref y1' mandatory) & ReadInt32 (xml' "width"' ref x2' mandatory) & ReadInt32 (xml' "height"' ref y2' mandatory)) { " is 181.
Long Statement,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,ReadRectangle3D,The length of the statement  "		if (!ReadInt32 (xml' "x1"' ref x1' mandatory) | !ReadInt32 (xml' "y1"' ref y1' mandatory) | !ReadInt32 (xml' "x2"' ref x2' mandatory) | !ReadInt32 (xml' "y2"' ref y2' mandatory)) { " is 180.
Long Statement,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileCSScripts,The length of the statement  "						parms.CompilerOptions = String.Format( "{0} /nowarn:618'169'219'414'618'429'162'252'849'1717'612'108'109'649 /recurse:Scripts/*.cs"' parms.CompilerOptions );" is 157.
Long Statement,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,Compile,The length of the statement  "	Console.WriteLine ("Finished ({0} items' {1} mobiles' {2} customs) ({3:F2} seconds)"' Core.ScriptItems' Core.ScriptMobiles' Core.ScriptCustoms' watch.Elapsed.TotalSeconds); " is 172.
Long Statement,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,SwapUnsignedInt,The length of the statement  "	return ((((source & 0x000000FF) << 0x18) | ((source & 0x0000FF00) << 8) | ((source & 0x00FF0000) >> 8) | ((source & 0xFF000000) >> 0x18))); " is 139.
Long Statement,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,The length of the statement  "		throw new Exception (String.Format ("Load failed (items={0}' mobiles={1}' guilds={2}' customs={3}' type={6}' serial={7})"' failedItems' failedMobiles' failedGuilds' failedData' failedType' (failedSerial != Serial.Zero ? failedSerial.ToString () : failedCustomSerial.ToString ()))' failed); " is 289.
Long Statement,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,The length of the statement  "	Console.WriteLine ("done ({1} items' {2} mobiles' {3} customs) ({0:F2} seconds)"' watch.Elapsed.TotalSeconds' m_Items.Count' m_Mobiles.Count' _Data.Count); " is 155.
Long Statement,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,AppendSafetyLog,The length of the statement  "	string message = String.Format ("Warning: Attempted to {1} {2} during world save." + "{0}This action could cause inconsistent state." + "{0}It is strongly advised that the offending scripts be corrected."' Environment.NewLine' action' entity); " is 243.
Long Statement,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,AppendSafetyLog,The length of the statement  "	string message = String.Format ("Warning: Attempted to {1} {2} during world save." + "{0}This action could cause inconsistent state." + "{0}It is strongly advised that the offending scripts be corrected."' Environment.NewLine' action' entity); " is 243.
Long Statement,Server.Diagnostics,BaseProfile,F:\newReposMay17\JustUO_JustUO\Server\Diagnostics\BaseProfile.cs,WriteTo,The length of the statement  "	op.Write ("{0'-100} {1'12:N0} {2'12:F5} {3'-12:F5} {4'12:F5}"' Name' Count' AverageTime.TotalSeconds' PeakTime.TotalSeconds' TotalTime.TotalSeconds); " is 149.
Long Statement,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddImageTiledButton,The length of the statement  "	Add (new GumpImageTileButton (x' y' normalID' pressedID' buttonID' type' param' itemID' hue' width' height' localizedTooltip)); " is 127.
Long Statement,Server.Gumps,Gump,F:\newReposMay17\JustUO_JustUO\Server\Gumps\Gump.cs,AddButtonTileArt,The length of the statement  "	Add (new GumpButtonTileArt (x' y' normalID' pressedID' type' param' buttonID' itemid' hue' width' height' localizedTooltip)); " is 125.
Long Statement,Server.Gumps,GumpButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpButton.cs,Compile,The length of the statement  "	return String.Format ("{{ button {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID); " is 124.
Long Statement,Server.Gumps,GumpButtonTileArt,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpButtonTileArt.cs,Compile,The length of the statement  "		return String.Format ("{{ buttontileart {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} }}{{ tooltip {11} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID' m_ItemID' m_Hue' m_Width' m_Height' m_LocalizedTooltip); " is 222.
Long Statement,Server.Gumps,GumpButtonTileArt,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpButtonTileArt.cs,Compile,The length of the statement  "		return String.Format ("{{ buttontileart {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID' m_ItemID' m_Hue' m_Width' m_Height); " is 184.
Long Statement,Server.Gumps,GumpCheck,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpCheck.cs,Compile,The length of the statement  "	return String.Format ("{{ checkbox {0} {1} {2} {3} {4} {5} }}"' m_X' m_Y' m_ID1' m_ID2' m_InitialState ? 1 : 0' m_SwitchID); " is 124.
Long Statement,Server.Gumps,GumpHtml,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtml.cs,Compile,The length of the statement  "	return String.Format ("{{ htmlgump {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' m_Text == null ? m_TextID : Parent.Intern (m_Text)' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0); " is 192.
Long Statement,Server.Gumps,GumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtmlLocalized.cs,Compile,The length of the statement  "		return String.Format ("{{ xmfhtmlgump {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' m_Number' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0); " is 153.
Long Statement,Server.Gumps,GumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtmlLocalized.cs,Compile,The length of the statement  "		return String.Format ("{{ xmfhtmlgumpcolor {0} {1} {2} {3} {4} {5} {6} {7} }}"' m_X' m_Y' m_Width' m_Height' m_Number' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0' m_Color); " is 171.
Long Statement,Server.Gumps,GumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtmlLocalized.cs,Compile,The length of the statement  "		return String.Format ("{{ xmfhtmltok {0} {1} {2} {3} {4} {5} {6} {7} @{8}@ }}"' m_X' m_Y' m_Width' m_Height' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0' m_Color' m_Number' m_Args); " is 179.
Long Statement,Server.Gumps,GumpImageTileButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpImageTileButton.cs,Compile,The length of the statement  "		return String.Format ("{{ buttontileart {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} }}{{ tooltip {11} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID' m_ItemID' m_Hue' m_Width' m_Height' m_LocalizedTooltip); " is 222.
Long Statement,Server.Gumps,GumpImageTileButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpImageTileButton.cs,Compile,The length of the statement  "		return String.Format ("{{ buttontileart {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID' m_ItemID' m_Hue' m_Width' m_Height); " is 184.
Long Statement,Server.Gumps,GumpLabel,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpLabel.cs,Compile,The length of the statement  "	return String.Format ("{{ text {0} {1} {2} {3} }}"' m_X' m_Y' m_Hue' m_Text == null ? m_TextID : Parent.Intern (m_Text)); " is 121.
Long Statement,Server.Gumps,GumpLabelCropped,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpLabelCropped.cs,Compile,The length of the statement  "	return String.Format ("{{ croppedtext {0} {1} {2} {3} {4} {5} }}"' m_X' m_Y' m_Width' m_Height' m_Hue' Parent.Intern (m_Text)); " is 127.
Long Statement,Server.Gumps,GumpRadio,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpRadio.cs,Compile,The length of the statement  "	return String.Format ("{{ radio {0} {1} {2} {3} {4} {5} }}"' m_X' m_Y' m_ID1' m_ID2' m_InitialState ? 1 : 0' m_SwitchID); " is 121.
Long Statement,Server.Gumps,GumpTextEntry,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpTextEntry.cs,Compile,The length of the statement  "	return String.Format ("{{ textentry {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' m_Hue' m_EntryID' m_InitialText == null ? m_InitialTextID : Parent.Intern (m_InitialText)); " is 189.
Long Statement,Server.Gumps,GumpTextEntryLimited,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpTextEntryLimited.cs,Compile,The length of the statement  "	return String.Format ("{{ textentrylimited {0} {1} {2} {3} {4} {5} {6} {7} }}"' m_X' m_Y' m_Width' m_Height' m_Hue' m_EntryID' Parent.Intern (m_InitialText)' m_Size); " is 166.
Long Statement,Server.Gumps,KRGumpButton,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpButton.cs,Compile,The length of the statement  "	return String.Format ("{{ kr_button {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_ID1' m_ID2' (int)m_Type' m_Param' m_ButtonID); " is 127.
Long Statement,Server.Gumps,KRGumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpHtmlLocalized.cs,Compile,The length of the statement  "		return String.Format ("{{ kr_xmfhtmlgump {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' m_Number' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0); " is 156.
Long Statement,Server.Gumps,KRGumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpHtmlLocalized.cs,Compile,The length of the statement  "		return String.Format ("{{ kr_xmfhtmlgumpcolor {0} {1} {2} {3} {4} {5} {6} {7} }}"' m_X' m_Y' m_Width' m_Height' m_Number' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0' m_Color); " is 174.
Long Statement,Server.Gumps,KRGumpLabel,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpLabel.cs,Compile,The length of the statement  "	return String.Format ("{{ kr_text {0} {1} {2} {3} {4} {5} {6} }}"' m_X' m_Y' m_Width' m_Height' m_Number' m_Background ? 1 : 0' m_Scrollbar ? 1 : 0); " is 149.
Long Statement,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,CheckHold,The length of the statement  "		if (checkItems && maxItems != 0 && (TotalItems + plusItems + item.TotalItems + (item.IsVirtualItem ? 0 : 1)) > maxItems) { " is 122.
Long Statement,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,OnSingleClick,The length of the statement  "		LabelTo (from' "({0} item{1}' {2} stone{3})"' TotalItems' TotalItems != 1 ? "s" : String.Empty' TotalWeight' TotalWeight != 1 ? "s" : String.Empty); " is 148.
Long Statement,Server.Items,BankBox,F:\newReposMay17\JustUO_JustUO\Server\Items\Containers.cs,Open,The length of the statement  "		m_Owner.PrivateOverheadMessage (MessageType.Regular' 0x3B2' true' String.Format ("Bank container has {0} items' {1} stones"' TotalItems' TotalWeight)' m_Owner.NetState); " is 169.
Long Statement,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The length of the statement  "		// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients. " is 128.
Long Statement,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,CheckEncrypted,The length of the statement  "	if (!ns.SentFirstPacket && packetID != 0xF0 && packetID != 0xF1 && packetID != 0xCF && packetID != 0x80 && packetID != 0x91 && packetID != 0xA4 && packetID != 0xEF && packetID != 0xE4 && packetID != 0xFF) " is 204.
Long Statement,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,ValidateAllTrades,The length of the statement  "		if (trade.From.Mobile.Deleted || trade.To.Mobile.Deleted || !trade.From.Mobile.Alive || !trade.To.Mobile.Alive || !trade.From.Mobile.InRange (trade.To.Mobile' 2) || trade.From.Mobile.Map != trade.To.Mobile.Map) { " is 212.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,EncodedCommand,The length of the statement  "			Console.WriteLine ("Client: {0}: Sent ingame packet (0xD7x{1:X2}) before having been attached to a mobile"' state' packetID); " is 125.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ObjectHelpRequest,The length of the statement  "		if (item != null && from.Map == item.Map && Utility.InUpdateRange (item.GetWorldLocation ()' from.Location) && from.CanSee (item)) { " is 132.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,LookReq,The length of the statement  "		if (item != null && !item.Deleted && from.CanSee (item) && Utility.InUpdateRange (from.Location' item.GetWorldLocation ())) { " is 125.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ExtendedCommand,The length of the statement  "			Console.WriteLine ("Client: {0}: Sent ingame packet (0xBFx{1:X2}) before having been attached to a mobile"' state' packetID); " is 125.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,BatchQueryProperties,The length of the statement  "			if (item != null && !item.Deleted && from.CanSee (item) && Utility.InUpdateRange (from.Location' item.GetWorldLocation ())) { " is 125.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,QueryProperties,The length of the statement  "		if (item != null && !item.Deleted && from.CanSee (item) && Utility.InUpdateRange (from.Location' item.GetWorldLocation ())) { " is 125.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PartyMessage_PrivateMessage,The length of the statement  "		PartyCommands.Handler.OnPrivateMessage (state.Mobile' World.FindMobile (pvSrc.ReadInt32 ())' pvSrc.ReadUnicodeStringSafe ()); " is 125.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The length of the statement  "		var args = new CharacterCreatedEventArgs (state' a' name' female' hue' str' dex' intl' info [cityIndex]' new SkillNameValue[3] { " is 128.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter70160,The length of the statement  "		var args = new CharacterCreatedEventArgs (state' a' name' female' hue' str' dex' intl' info [cityIndex]' new SkillNameValue[4] { " is 128.
Long Statement,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,KRCreateCharacter,The length of the statement  "		CharacterCreatedEventArgs args = new CharacterCreatedEventArgs (state' a' name' female' hue' str' dex' intel' info [cityIndex]' new SkillNameValue[4] { " is 151.
Long Statement,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUInt32,The length of the statement  "	return (uint)((m_Data [m_Index++] << 24) | (m_Data [m_Index++] << 16) | (m_Data [m_Index++] << 8) | m_Data [m_Index++]); " is 120.
Long Statement,Server.Network,Packet,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InternalCompile,The length of the statement  "			Console.WriteLine ("Warning: Compression buffer overflowed on packet 0x{0:X2} ('{1}') (length={2})"' m_PacketID' GetType ().Name' length); " is 138.
Long Statement,Server.Network,Packet,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InternalCompile,The length of the statement  "				op.WriteLine ("{0} Warning: Compression buffer overflowed on packet 0x{1:X2} ('{2}') (length={3})"' DateTime.UtcNow' m_PacketID' GetType ().Name' length); " is 154.
Long Statement,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteBigUniNull,The length of the statement  "	m_Stream.Position += Encoding.BigEndianUnicode.GetBytes (value' 0' length' m_Stream.GetBuffer ()' (int)m_Stream.Position); " is 122.
Long Statement,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteBigUniFixed,The length of the statement  "		m_Stream.Position += Encoding.BigEndianUnicode.GetBytes (value' 0' length' m_Stream.GetBuffer ()' (int)m_Stream.Position); " is 122.
Long Statement,Server.Network,SendQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\SendQueue.cs,Enqueue,The length of the statement  "		throw new ArgumentOutOfRangeException ("offset"' offset' "Offset must be greater than or equal to zero and less than the size of the buffer."); " is 143.
Long Statement,Server.Network,SendQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\SendQueue.cs,Enqueue,The length of the statement  "		throw new ArgumentOutOfRangeException ("length"' length' "Length cannot be less than zero or greater than the size of the buffer."); " is 132.
Complex Conditional,Server,Body,F:\newReposMay17\JustUO_JustUO\Server\Body.cs,Body,The conditional expression  "int.TryParse (split [0]' out bodyID) && Enum.TryParse (split [1]' true' out type) && bodyID >= 0 && bodyID < m_Types.Length"  is complex.
Complex Conditional,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The conditional expression  "fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,StackWith,The conditional expression  "dropped.Stackable && Stackable && dropped.GetType () == GetType () && dropped.ItemID == ItemID && dropped.Hue == Hue && dropped.Name == Name && (dropped.Amount + Amount) <= 60000 && dropped != this && !dropped.Nontransferable && !Nontransferable"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Serialize,The conditional expression  "x >= short.MinValue && x <= short.MaxValue && y >= short.MinValue && y <= short.MaxValue && z >= sbyte.MinValue && z <= sbyte.MaxValue"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Serialize,The conditional expression  "x >= byte.MinValue && x <= byte.MaxValue && y >= byte.MinValue && y <= byte.MaxValue"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToMobile,The conditional expression  "Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnDroppedOnto,The conditional expression  "Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnDroppedOnto,The conditional expression  "Nontransferable && from.Player && target != from.Backpack && !from.IsStaff ()"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToItem,The conditional expression  "Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null"  is complex.
Complex Conditional,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The conditional expression  "(id.Surface || id.Impassable) && checkTop > surfaceZ && (z + height) > checkZ"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The conditional expression  "x < 0 || y < 0 || x >= _Width || y >= _Height"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The conditional expression  "(surface || impassable) && (t.Z + id.CalcHeight) > z && (z + height) > t.Z"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The conditional expression  "(surface || impassable || (checkBlocksFit && item.BlocksFit)) && (item.Z + id.CalcHeight) > z && (z + height) > item.Z"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The conditional expression  "surface && !impassable && !item.Movable && z == (item.Z + id.CalcHeight)"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The conditional expression  "mobs.Any (m => m.Location.m_X == x && m.Location.m_Y == y && (m.AccessLevel < AccessLevel.Counselor || !m.Hidden) && ((m.Z + 16) > z && (z + height) > m.Z))"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetTopSurface,The conditional expression  "item is BaseMulti || item.ItemID > TileData.MaxItemValue || !item.AtWorldPoint (p.X' p.Y) || item.Movable"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,InternalGetSector,The conditional expression  "x >= 0 && x < _SectorsWidth && y >= 0 && y < _SectorsHeight"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The conditional expression  "org.X > dest.X || (org.X == dest.X && org.Y > dest.Y) || (org.X == dest.X && org.Y == dest.Y && org.Z > dest.Z)"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The conditional expression  "landZ <= pointTop && landTop >= point.m_Z && (point.m_X != end.m_X || point.m_Y != end.m_Y || landZ > endTop || landTop < end.m_Z) && !landTile.Ignored"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The conditional expression  "point.m_X == end.m_X && point.m_Y == end.m_Y && t.Z <= endTop && t.Z + height >= end.m_Z"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The conditional expression  "loc.m_X != point.m_X || loc.m_Y != point.m_Y || loc.m_Z > pointTop || loc.m_Z + height < point.m_Z"  is complex.
Complex Conditional,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The conditional expression  "loc.m_X == end.m_X && loc.m_Y == end.m_Y && loc.m_Z <= endTop && loc.m_Z + height >= end.m_Z"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AddNameProperties,The conditional expression  "ShowFameTitle && (_Player || _Body.IsHuman) && _Fame >= 10000"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AddNameProperties,The conditional expression  "guild != null && (_DisplayGuildTitle || (_Player && guild.Type != GuildType.Regular))"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The conditional expression  "_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The conditional expression  "!shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Kill,The conditional expression  "(item.Insured || item.LootType == LootType.Blessed) && item.Parent == this && item.Layer != Layer.Mount"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Use,The conditional expression  "item == null || item.Deleted || item.QuestItem || Deleted"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The conditional expression  "_DragEffects && map != null && (root == null || root is Item)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The conditional expression  "ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendDropEffect,The conditional expression  "ns.Mobile != this && ns.Mobile.CanSee (this) && ns.Mobile.InLOS (this) && ns.Mobile.CanSee (root)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The conditional expression  "heard.CanSee (this) && (_NoSpeechLOS || !heard.Player || heard.InLOS (this))"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,FindMostTotalDamageEntry,The conditional expression  "(allowSelf || de.Damager != this) && (mostTotal == null || de.DamageGiven > mostTotal.DamageGiven)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,FindLeastTotalDamageEntry,The conditional expression  "(allowSelf || de.Damager != this) && (mostTotal == null || de.DamageGiven < mostTotal.DamageGiven)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetContextMenuEntries,The conditional expression  "from == this && Backpack != null && CanSee (Backpack) && CheckAlive (false)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AddItem,The conditional expression  "item.PhysicalResistance != 0 || item.FireResistance != 0 || item.ColdResistance != 0 || item.PoisonResistance != 0 || item.EnergyResistance != 0"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,RemoveItem,The conditional expression  "item.PhysicalResistance != 0 || item.FireResistance != 0 || item.ColdResistance != 0 || item.PoisonResistance != 0 || item.EnergyResistance != 0"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The conditional expression  "_Deleted || target._Deleted || !Alive || IsDeadBondedPet || (!allowDead && (!target.Alive || target.IsDeadBondedPet))"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The conditional expression  "_Deleted || (!ignoreOurBlessedness && _Blessed) || target._Deleted || target._Blessed || !Alive || IsDeadBondedPet || !target.Alive || target.IsDeadBondedPet"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanSee,The conditional expression  "_Deleted || m == null || m._Deleted || _Map == Map.Internal || m._Map == Map.Internal"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,The conditional expression  "isTeleport && _NetState != null && (!_NetState.HighSeas || !_NoMoveHS)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,The conditional expression  "m._NetState != null && ((isTeleport && (!m._NetState.HighSeas || !_NoMoveHS)) || !inOldRange) && m.CanSee (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SetLocation,The conditional expression  "((isTeleport && (!ns.HighSeas || !_NoMoveHS)) || !Utility.InUpdateRange (oldLocation' ns.Mobile.Location)) && ns.Mobile.CanSee (this)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OpenTrade,The conditional expression  "!from.Player || !Player || !from.Alive || !Alive"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ProcessDelta,The conditional expression  "m._Map != null && (sendRemove || sendIncoming || sendPublicStats || sendHits || sendMoving || sendOPLUpdate || sendHair || sendFacialHair || sendHealthbarPoison || sendHealthbarYellow || sendFace)"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ProcessDelta,The conditional expression  "sendMoving || sendNonlocalMoving || sendHealthbarPoison || sendHealthbarYellow"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,The conditional expression  "IsPlayer () && DisableHiddenSelfClick && Hidden && @from == this"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,The conditional expression  "guild != null && (_DisplayGuildTitle || (_Player && guild.Type != GuildType.Regular))"  is complex.
Complex Conditional,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,The conditional expression  "ShowFameTitle && (_Player || _Body.IsHuman) && _Fame >= 10000"  is complex.
Complex Conditional,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The conditional expression  "file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0"  is complex.
Complex Conditional,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Add,The conditional expression  "vx >= 0 && vx < m_Width && vy >= 0 && vy < m_Height"  is complex.
Complex Conditional,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,RemoveXYZH,The conditional expression  "vx >= 0 && vx < m_Width && vy >= 0 && vy < m_Height"  is complex.
Complex Conditional,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,RemoveXYZH,The conditional expression  "tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z && TileData.ItemTable [tile.m_ItemID & TileData.MaxItemValue].Height >= minHeight"  is complex.
Complex Conditional,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Remove,The conditional expression  "vx >= 0 && vx < m_Width && vy >= 0 && vy < m_Height"  is complex.
Complex Conditional,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Remove,The conditional expression  "tile.m_ItemID == itemID && tile.m_OffsetX == (short)x && tile.m_OffsetY == (short)y && tile.m_OffsetZ == (short)z"  is complex.
Complex Conditional,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,SaveItems,The conditional expression  "item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)"  is complex.
Complex Conditional,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,Save,The conditional expression  "item.Decays && item.Parent == null && item.Map != Map.Internal && DateTime.UtcNow > (item.LastMoved + item.DecayTime)"  is complex.
Complex Conditional,Server,StandardSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\StandardSaveStrategy.cs,SaveItems,The conditional expression  "item.Decays && item.Parent == null && item.Map != Map.Internal && (item.LastMoved + item.DecayTime) <= DateTime.UtcNow"  is complex.
Complex Conditional,Server,SecureTrade,F:\newReposMay17\JustUO_JustUO\Server\SecureTrade.cs,Update,The conditional expression  "m_From.Accepted && m_To.Accepted && !m_To.IsDisposed && m_To.Accepted"  is complex.
Complex Conditional,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetStaticBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight"  is complex.
Complex Conditional,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight || m_Statics == null || m_Index == null"  is complex.
Complex Conditional,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,The conditional expression  "x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight"  is complex.
Complex Conditional,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetLandBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight"  is complex.
Complex Conditional,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The conditional expression  "x < 0 || y < 0 || x >= m_BlockWidth || y >= m_BlockHeight || m_Map == null"  is complex.
Complex Conditional,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The conditional expression  "x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight"  is complex.
Complex Conditional,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,The conditional expression  "!failedMobiles && !failedItems && !failedGuilds && File.Exists (DataBinaryPath)"  is complex.
Complex Conditional,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,The conditional expression  "failedItems || failedMobiles || failedGuilds || failedData"  is complex.
Complex Conditional,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,CheckContentDisplay,The conditional expression  "root == null || root is Item || root == from || from.IsStaff ()"  is complex.
Complex Conditional,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,CheckEncrypted,The conditional expression  "!ns.SentFirstPacket && packetID != 0xF0 && packetID != 0xF1 && packetID != 0xCF && packetID != 0x80 && packetID != 0x91 && packetID != 0xA4 && packetID != 0xEF && packetID != 0xE4 && packetID != 0xFF"  is complex.
Complex Conditional,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,ValidateAllTrades,The conditional expression  "trade.From.Mobile.Deleted || trade.To.Mobile.Deleted || !trade.From.Mobile.Alive || !trade.To.Mobile.Alive || !trade.From.Mobile.InRange (trade.To.Mobile' 2) || trade.From.Mobile.Map != trade.To.Mobile.Map"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ObjectHelpRequest,The conditional expression  "item != null && from.Map == item.Map && Utility.InUpdateRange (item.GetWorldLocation ()' from.Location) && from.CanSee (item)"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ObjectHelpRequest,The conditional expression  "m != null && from.Map == m.Map && Utility.InUpdateRange (m.Location' from.Location) && from.CanSee (m)"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,LookReq,The conditional expression  "item != null && !item.Deleted && from.CanSee (item) && Utility.InUpdateRange (from.Location' item.GetWorldLocation ())"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,Animate,The conditional expression  "from != null && ok && from.Alive && from.Body.IsHuman && !from.Mounted"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,BatchQueryProperties,The conditional expression  "item != null && !item.Deleted && from.CanSee (item) && Utility.InUpdateRange (from.Location' item.GetWorldLocation ())"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,QueryProperties,The conditional expression  "item != null && !item.Deleted && from.CanSee (item) && Utility.InUpdateRange (from.Location' item.GetWorldLocation ())"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuRequest,The conditional expression  "from != null && target != null && from.Map == target.Map && from.CanSee (target)"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The conditional expression  "info == null || a == null || cityIndex < 0 || cityIndex >= info.Length"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter70160,The conditional expression  "info == null || a == null || cityIndex < 0 || cityIndex >= info.Length"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayServer,The conditional expression  "info == null || a == null || index < 0 || index >= info.Length"  is complex.
Complex Conditional,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,KRCreateCharacter,The conditional expression  "info == null || a == null || cityIndex < 0 || cityIndex >= info.Length"  is complex.
Complex Conditional,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,Invoke,The conditional expression  "!m_AllowNonlocal && root is Mobile && root != from && from.AccessLevel == AccessLevel.Player"  is complex.
Complex Conditional,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,Invoke,The conditional expression  "map == null || map != from.Map || (m_Range != -1 && !from.InRange (loc' m_Range))"  is complex.
Virtual Method Call from Constructor,Server,BaseHairInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,BaseHairInfo,The constructor "BaseHairInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,BaseHairInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,BaseHairInfo,The constructor "BaseHairInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,BaseHairInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,BaseHairInfo,The constructor "BaseHairInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadPoint2D".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadPoint2D".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadPoint2D".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadShort".
Virtual Method Call from Constructor,Server,MultiComponentList,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiComponentList,The constructor "MultiComponentList" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadUShort".
Virtual Method Call from Constructor,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The constructor "Skill" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The constructor "Skills" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server,Timer,F:\newReposMay17\JustUO_JustUO\Server\Timer.cs,Timer,The constructor "Timer" calls a virtual method "RegCreation".
Virtual Method Call from Constructor,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The constructor "VirtueInfo" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The constructor "VirtueInfo" calls a virtual method "ReadByte".
Virtual Method Call from Constructor,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The constructor "VirtueInfo" calls a virtual method "ReadInt".
Virtual Method Call from Constructor,Server.ContextMenus,ContextMenu,F:\newReposMay17\JustUO_JustUO\Server\ContextMenus\ContextMenu.cs,ContextMenu,The constructor "ContextMenu" calls a virtual method "GetContextMenuEntries".
Virtual Method Call from Constructor,Server.ContextMenus,ContextMenu,F:\newReposMay17\JustUO_JustUO\Server\ContextMenus\ContextMenu.cs,ContextMenu,The constructor "ContextMenu" calls a virtual method "GetContextMenuEntries".
Virtual Method Call from Constructor,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,Container,The constructor "Container" calls a virtual method "UpdateContainerData".
Virtual Method Call from Constructor,Server.Network,WorldItem,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WorldItem,The constructor "WorldItem" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,WorldItemSA,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WorldItemSA,The constructor "WorldItemSA" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,WorldItemHS,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WorldItemHS,The constructor "WorldItemHS" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,UnkD3,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnkD3,The constructor "UnkD3" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileMoving,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileMoving,The constructor "MobileMoving" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileMovingOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileMovingOld,The constructor "MobileMovingOld" calls a virtual method "GetOldPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The constructor "MobileStatusExtended" calls a virtual method "CanBeRenamedBy".
Virtual Method Call from Constructor,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The constructor "MobileStatus" calls a virtual method "CanBeRenamedBy".
Virtual Method Call from Constructor,Server.Network,MobileUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileUpdate,The constructor "MobileUpdate" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileUpdateOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileUpdateOld,The constructor "MobileUpdateOld" calls a virtual method "GetOldPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileIncoming,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncoming,The constructor "MobileIncoming" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileIncomingSA,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingSA,The constructor "MobileIncomingSA" calls a virtual method "GetPacketFlags".
Virtual Method Call from Constructor,Server.Network,MobileIncomingOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingOld,The constructor "MobileIncomingOld" calls a virtual method "GetOldPacketFlags".
Empty Catch Block,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Delta,The method has an empty catch block.
Empty Catch Block,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,RemDelta,The method has an empty catch block.
Empty Catch Block,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The method has an empty catch block.
Empty Catch Block,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The method has an empty catch block.
Empty Catch Block,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Delta,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileCSScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileCSScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileVBScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileVBScripts,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,DeleteFiles,The method has an empty catch block.
Empty Catch Block,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,DeleteFiles,The method has an empty catch block.
Empty Catch Block,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,PushColor,The method has an empty catch block.
Empty Catch Block,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,PopColor,The method has an empty catch block.
Empty Catch Block,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,The method has an empty catch block.
Empty Catch Block,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Load,The method has an empty catch block.
Empty Catch Block,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,AppendSafetyLog,The method has an empty catch block.
Empty Catch Block,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The method has an empty catch block.
Empty Catch Block,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Listener,The method has an empty catch block.
Empty Catch Block,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,OnAccept,The method has an empty catch block.
Empty Catch Block,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,TraceException,The method has an empty catch block.
Empty Catch Block,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,TraceException,The method has an empty catch block.
Empty Catch Block,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The method has an empty catch block.
Empty Catch Block,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,Trace,The method has an empty catch block.
Empty Catch Block,Server.Network,Packet,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,Compile,The method has an empty catch block.
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,_ToStringImpl,The following statement contains a magic number: if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7   {  	if (m_Patch > 0) {  		builder.Append ((char)('a' + (m_Patch - 1)));  	}  } else {  	builder.Append ('.');  	builder.Append (m_Patch);  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,_ToStringImpl,The following statement contains a magic number: if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7   {  	if (m_Patch > 0) {  		builder.Append ((char)('a' + (m_Patch - 1)));  	}  } else {  	builder.Append ('.');  	builder.Append (m_Patch);  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: try {  	fmt = fmt.ToLower ();  	int br1 = fmt.IndexOf ('.');  	int br2 = fmt.IndexOf ('.'' br1 + 1);  	int br3 = br2 + 1;  	while (br3 < fmt.Length && Char.IsDigit (fmt' br3)) {  		br3++;  	}  	m_Major = Utility.ToInt32 (fmt.Substring (0' br1));  	m_Minor = Utility.ToInt32 (fmt.Substring (br1 + 1' br2 - br1 - 1));  	m_Revision = Utility.ToInt32 (fmt.Substring (br2 + 1' br3 - br2 - 1));  	if (br3 < fmt.Length) {  		if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7  		 {  			if (!Char.IsWhiteSpace (fmt' br3)) {  				m_Patch = (fmt [br3] - 'a') + 1;  			}  		} else {  			m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  		}  	}  	#region Enhance Client  	if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  		m_Type = ClientType.SA;  	} else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  		m_Type = ClientType.God;  	} else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  		m_Type = ClientType.UOTD;  	} else {  		m_Type = ClientType.Regular;  	}  	#endregion  } catch {  	m_Major = 0;  	m_Minor = 0;  	m_Revision = 0;  	m_Patch = 0;  	m_Type = ClientType.Regular;  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: try {  	fmt = fmt.ToLower ();  	int br1 = fmt.IndexOf ('.');  	int br2 = fmt.IndexOf ('.'' br1 + 1);  	int br3 = br2 + 1;  	while (br3 < fmt.Length && Char.IsDigit (fmt' br3)) {  		br3++;  	}  	m_Major = Utility.ToInt32 (fmt.Substring (0' br1));  	m_Minor = Utility.ToInt32 (fmt.Substring (br1 + 1' br2 - br1 - 1));  	m_Revision = Utility.ToInt32 (fmt.Substring (br2 + 1' br3 - br2 - 1));  	if (br3 < fmt.Length) {  		if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7  		 {  			if (!Char.IsWhiteSpace (fmt' br3)) {  				m_Patch = (fmt [br3] - 'a') + 1;  			}  		} else {  			m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  		}  	}  	#region Enhance Client  	if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  		m_Type = ClientType.SA;  	} else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  		m_Type = ClientType.God;  	} else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  		m_Type = ClientType.UOTD;  	} else {  		m_Type = ClientType.Regular;  	}  	#endregion  } catch {  	m_Major = 0;  	m_Minor = 0;  	m_Revision = 0;  	m_Patch = 0;  	m_Type = ClientType.Regular;  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: try {  	fmt = fmt.ToLower ();  	int br1 = fmt.IndexOf ('.');  	int br2 = fmt.IndexOf ('.'' br1 + 1);  	int br3 = br2 + 1;  	while (br3 < fmt.Length && Char.IsDigit (fmt' br3)) {  		br3++;  	}  	m_Major = Utility.ToInt32 (fmt.Substring (0' br1));  	m_Minor = Utility.ToInt32 (fmt.Substring (br1 + 1' br2 - br1 - 1));  	m_Revision = Utility.ToInt32 (fmt.Substring (br2 + 1' br3 - br2 - 1));  	if (br3 < fmt.Length) {  		if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7  		 {  			if (!Char.IsWhiteSpace (fmt' br3)) {  				m_Patch = (fmt [br3] - 'a') + 1;  			}  		} else {  			m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  		}  	}  	#region Enhance Client  	if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  		m_Type = ClientType.SA;  	} else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  		m_Type = ClientType.God;  	} else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  		m_Type = ClientType.UOTD;  	} else {  		m_Type = ClientType.Regular;  	}  	#endregion  } catch {  	m_Major = 0;  	m_Minor = 0;  	m_Revision = 0;  	m_Patch = 0;  	m_Type = ClientType.Regular;  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: try {  	fmt = fmt.ToLower ();  	int br1 = fmt.IndexOf ('.');  	int br2 = fmt.IndexOf ('.'' br1 + 1);  	int br3 = br2 + 1;  	while (br3 < fmt.Length && Char.IsDigit (fmt' br3)) {  		br3++;  	}  	m_Major = Utility.ToInt32 (fmt.Substring (0' br1));  	m_Minor = Utility.ToInt32 (fmt.Substring (br1 + 1' br2 - br1 - 1));  	m_Revision = Utility.ToInt32 (fmt.Substring (br2 + 1' br3 - br2 - 1));  	if (br3 < fmt.Length) {  		if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7  		 {  			if (!Char.IsWhiteSpace (fmt' br3)) {  				m_Patch = (fmt [br3] - 'a') + 1;  			}  		} else {  			m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  		}  	}  	#region Enhance Client  	if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  		m_Type = ClientType.SA;  	} else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  		m_Type = ClientType.God;  	} else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  		m_Type = ClientType.UOTD;  	} else {  		m_Type = ClientType.Regular;  	}  	#endregion  } catch {  	m_Major = 0;  	m_Minor = 0;  	m_Revision = 0;  	m_Patch = 0;  	m_Type = ClientType.Regular;  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: try {  	fmt = fmt.ToLower ();  	int br1 = fmt.IndexOf ('.');  	int br2 = fmt.IndexOf ('.'' br1 + 1);  	int br3 = br2 + 1;  	while (br3 < fmt.Length && Char.IsDigit (fmt' br3)) {  		br3++;  	}  	m_Major = Utility.ToInt32 (fmt.Substring (0' br1));  	m_Minor = Utility.ToInt32 (fmt.Substring (br1 + 1' br2 - br1 - 1));  	m_Revision = Utility.ToInt32 (fmt.Substring (br2 + 1' br3 - br2 - 1));  	if (br3 < fmt.Length) {  		if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7  		 {  			if (!Char.IsWhiteSpace (fmt' br3)) {  				m_Patch = (fmt [br3] - 'a') + 1;  			}  		} else {  			m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  		}  	}  	#region Enhance Client  	if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  		m_Type = ClientType.SA;  	} else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  		m_Type = ClientType.God;  	} else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  		m_Type = ClientType.UOTD;  	} else {  		m_Type = ClientType.Regular;  	}  	#endregion  } catch {  	m_Major = 0;  	m_Minor = 0;  	m_Revision = 0;  	m_Patch = 0;  	m_Type = ClientType.Regular;  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: if (br3 < fmt.Length) {  	if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7  	 {  		if (!Char.IsWhiteSpace (fmt' br3)) {  			m_Patch = (fmt [br3] - 'a') + 1;  		}  	} else {  		m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  	}  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: if (br3 < fmt.Length) {  	if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7  	 {  		if (!Char.IsWhiteSpace (fmt' br3)) {  			m_Patch = (fmt [br3] - 'a') + 1;  		}  	} else {  		m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  	}  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7   {  	if (!Char.IsWhiteSpace (fmt' br3)) {  		m_Patch = (fmt [br3] - 'a') + 1;  	}  } else {  	m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: if (m_Major <= 5 && m_Minor <= 0 && m_Revision <= 6)//Anything before 5.0.7   {  	if (!Char.IsWhiteSpace (fmt' br3)) {  		m_Patch = (fmt [br3] - 'a') + 1;  	}  } else {  	m_Patch = Utility.ToInt32 (fmt.Substring (br3 + 1' fmt.Length - br3 - 1));  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  	m_Type = ClientType.SA;  } else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  	m_Type = ClientType.God;  } else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  	m_Type = ClientType.UOTD;  } else {  	m_Type = ClientType.Regular;  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  	m_Type = ClientType.SA;  } else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  	m_Type = ClientType.God;  } else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  	m_Type = ClientType.UOTD;  } else {  	m_Type = ClientType.Regular;  }  
Magic Number,Server,ClientVersion,F:\newReposMay17\JustUO_JustUO\Server\ClientVersion.cs,ClientVersion,The following statement contains a magic number: if (m_Major >= 6 && m_Revision >= 14 && m_Patch >= 3) {  	m_Type = ClientType.SA;  } else if (fmt.IndexOf ("god") >= 0 || fmt.IndexOf ("gq") >= 0) {  	m_Type = ClientType.God;  } else if (fmt.IndexOf ("third dawn") >= 0 || fmt.IndexOf ("uo:td") >= 0 || fmt.IndexOf ("uotd") >= 0 || fmt.IndexOf ("uo3d") >= 0 || fmt.IndexOf ("uo:3d") >= 0) {  	m_Type = ClientType.UOTD;  } else {  	m_Type = ClientType.Regular;  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (e)) {  		if (SendParticlesTo (state)) {  			if (preEffect == null) {  				preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  			}  			state.Send (preEffect);  		}  		if (boltEffect == null) {  			boltEffect = Packet.Acquire (new BoltEffect (e' hue));  		}  		state.Send (boltEffect);  		if (sound) {  			if (playSound == null) {  				playSound = Packet.Acquire (new PlaySound (0x29' e));  			}  			state.Send (playSound);  		}  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (e)) {  		if (SendParticlesTo (state)) {  			if (preEffect == null) {  				preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  			}  			state.Send (preEffect);  		}  		if (boltEffect == null) {  			boltEffect = Packet.Acquire (new BoltEffect (e' hue));  		}  		state.Send (boltEffect);  		if (sound) {  			if (playSound == null) {  				playSound = Packet.Acquire (new PlaySound (0x29' e));  			}  			state.Send (playSound);  		}  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (e)) {  		if (SendParticlesTo (state)) {  			if (preEffect == null) {  				preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  			}  			state.Send (preEffect);  		}  		if (boltEffect == null) {  			boltEffect = Packet.Acquire (new BoltEffect (e' hue));  		}  		state.Send (boltEffect);  		if (sound) {  			if (playSound == null) {  				playSound = Packet.Acquire (new PlaySound (0x29' e));  			}  			state.Send (playSound);  		}  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (e)) {  		if (SendParticlesTo (state)) {  			if (preEffect == null) {  				preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  			}  			state.Send (preEffect);  		}  		if (boltEffect == null) {  			boltEffect = Packet.Acquire (new BoltEffect (e' hue));  		}  		state.Send (boltEffect);  		if (sound) {  			if (playSound == null) {  				playSound = Packet.Acquire (new PlaySound (0x29' e));  			}  			state.Send (playSound);  		}  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (state.Mobile.CanSee (e)) {  	if (SendParticlesTo (state)) {  		if (preEffect == null) {  			preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  		}  		state.Send (preEffect);  	}  	if (boltEffect == null) {  		boltEffect = Packet.Acquire (new BoltEffect (e' hue));  	}  	state.Send (boltEffect);  	if (sound) {  		if (playSound == null) {  			playSound = Packet.Acquire (new PlaySound (0x29' e));  		}  		state.Send (playSound);  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (state.Mobile.CanSee (e)) {  	if (SendParticlesTo (state)) {  		if (preEffect == null) {  			preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  		}  		state.Send (preEffect);  	}  	if (boltEffect == null) {  		boltEffect = Packet.Acquire (new BoltEffect (e' hue));  	}  	state.Send (boltEffect);  	if (sound) {  		if (playSound == null) {  			playSound = Packet.Acquire (new PlaySound (0x29' e));  		}  		state.Send (playSound);  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (state.Mobile.CanSee (e)) {  	if (SendParticlesTo (state)) {  		if (preEffect == null) {  			preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  		}  		state.Send (preEffect);  	}  	if (boltEffect == null) {  		boltEffect = Packet.Acquire (new BoltEffect (e' hue));  	}  	state.Send (boltEffect);  	if (sound) {  		if (playSound == null) {  			playSound = Packet.Acquire (new PlaySound (0x29' e));  		}  		state.Send (playSound);  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (state.Mobile.CanSee (e)) {  	if (SendParticlesTo (state)) {  		if (preEffect == null) {  			preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  		}  		state.Send (preEffect);  	}  	if (boltEffect == null) {  		boltEffect = Packet.Acquire (new BoltEffect (e' hue));  	}  	state.Send (boltEffect);  	if (sound) {  		if (playSound == null) {  			playSound = Packet.Acquire (new PlaySound (0x29' e));  		}  		state.Send (playSound);  	}  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (SendParticlesTo (state)) {  	if (preEffect == null) {  		preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  	}  	state.Send (preEffect);  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (SendParticlesTo (state)) {  	if (preEffect == null) {  		preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  	}  	state.Send (preEffect);  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (SendParticlesTo (state)) {  	if (preEffect == null) {  		preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  	}  	state.Send (preEffect);  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (SendParticlesTo (state)) {  	if (preEffect == null) {  		preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  	}  	state.Send (preEffect);  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (preEffect == null) {  	preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (preEffect == null) {  	preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (preEffect == null) {  	preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: if (preEffect == null) {  	preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  }  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendBoltEffect,The following statement contains a magic number: preEffect = Packet.Acquire (new TargetParticleEffect (e' 0' 10' 5' 0' 0' 5031' 3' 0));  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationEffect,The following statement contains a magic number: SendLocationEffect (p' map' itemID' duration' 10' 0' 0);  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendLocationEffect,The following statement contains a magic number: SendLocationEffect (p' map' itemID' duration' 10' hue' renderMode);  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendTargetEffect,The following statement contains a magic number: SendTargetEffect (target' itemID' 10' duration' hue' renderMode);  
Magic Number,Server,Effects,F:\newReposMay17\JustUO_JustUO\Server\Effects.cs,SendMovingParticles,The following statement contains a magic number: SendMovingParticles (from' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddNameProperty,The following statement contains a magic number: if (name == null) {  	if (m_Amount <= 1) {  		list.Add (LabelNumber);  	} else {  		list.Add (1050039' "{0}\t#{1}"' m_Amount' LabelNumber);  		// ~1_NUMBER~ ~2_ITEMNAME~  	}  } else {  	if (m_Amount <= 1) {  		list.Add (name);  	} else {  		list.Add (1050039' "{0}\t{1}"' m_Amount' Name);  		// ~1_NUMBER~ ~2_ITEMNAME~  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddNameProperty,The following statement contains a magic number: if (name == null) {  	if (m_Amount <= 1) {  		list.Add (LabelNumber);  	} else {  		list.Add (1050039' "{0}\t#{1}"' m_Amount' LabelNumber);  		// ~1_NUMBER~ ~2_ITEMNAME~  	}  } else {  	if (m_Amount <= 1) {  		list.Add (name);  	} else {  		list.Add (1050039' "{0}\t{1}"' m_Amount' Name);  		// ~1_NUMBER~ ~2_ITEMNAME~  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddNameProperty,The following statement contains a magic number: if (m_Amount <= 1) {  	list.Add (LabelNumber);  } else {  	list.Add (1050039' "{0}\t#{1}"' m_Amount' LabelNumber);  	// ~1_NUMBER~ ~2_ITEMNAME~  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddNameProperty,The following statement contains a magic number: list.Add (1050039' "{0}\t#{1}"' m_Amount' LabelNumber);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddNameProperty,The following statement contains a magic number: if (m_Amount <= 1) {  	list.Add (name);  } else {  	list.Add (1050039' "{0}\t{1}"' m_Amount' Name);  	// ~1_NUMBER~ ~2_ITEMNAME~  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddNameProperty,The following statement contains a magic number: list.Add (1050039' "{0}\t{1}"' m_Amount' Name);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if (m_LootType == LootType.Blessed) {  	list.Add (1038021);  	// blessed  } else if (m_LootType == LootType.Cursed) {  	list.Add (1049643);  	// cursed  } else if (Insured) {  	list.Add (1061682);  	// <b>insured</b>  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if (m_LootType == LootType.Blessed) {  	list.Add (1038021);  	// blessed  } else if (m_LootType == LootType.Cursed) {  	list.Add (1049643);  	// cursed  } else if (Insured) {  	list.Add (1061682);  	// <b>insured</b>  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if (m_LootType == LootType.Blessed) {  	list.Add (1038021);  	// blessed  } else if (m_LootType == LootType.Cursed) {  	list.Add (1049643);  	// cursed  } else if (Insured) {  	list.Add (1061682);  	// <b>insured</b>  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: list.Add (1038021);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if (m_LootType == LootType.Cursed) {  	list.Add (1049643);  	// cursed  } else if (Insured) {  	list.Add (1061682);  	// <b>insured</b>  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if (m_LootType == LootType.Cursed) {  	list.Add (1049643);  	// cursed  } else if (Insured) {  	list.Add (1061682);  	// <b>insured</b>  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: list.Add (1049643);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: if (Insured) {  	list.Add (1061682);  	// <b>insured</b>  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLootTypeProperty,The following statement contains a magic number: list.Add (1061682);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if (v != 0) {  	list.Add (1060448' v.ToString ());  	// physical resist ~1_val~%  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: list.Add (1060448' v.ToString ());  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if (v != 0) {  	list.Add (1060447' v.ToString ());  	// fire resist ~1_val~%  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: list.Add (1060447' v.ToString ());  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if (v != 0) {  	list.Add (1060445' v.ToString ());  	// cold resist ~1_val~%  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: list.Add (1060445' v.ToString ());  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if (v != 0) {  	list.Add (1060449' v.ToString ());  	// poison resist ~1_val~%  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: list.Add (1060449' v.ToString ());  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: if (v != 0) {  	list.Add (1060446' v.ToString ());  	// energy resist ~1_val~%  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddResistanceProperties,The following statement contains a magic number: list.Add (1060446' v.ToString ());  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddWeightProperty,The following statement contains a magic number: if (weight == 1) {  	list.Add (1072788' weight.ToString ());  	//Weight: ~1_WEIGHT~ stone  } else {  	list.Add (1072789' weight.ToString ());  	//Weight: ~1_WEIGHT~ stones  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddWeightProperty,The following statement contains a magic number: if (weight == 1) {  	list.Add (1072788' weight.ToString ());  	//Weight: ~1_WEIGHT~ stone  } else {  	list.Add (1072789' weight.ToString ());  	//Weight: ~1_WEIGHT~ stones  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddWeightProperty,The following statement contains a magic number: list.Add (1072788' weight.ToString ());  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddWeightProperty,The following statement contains a magic number: list.Add (1072789' weight.ToString ());  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddQuestItemProperty,The following statement contains a magic number: list.Add (1072351);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddSecureProperty,The following statement contains a magic number: list.Add (501644);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddLockedDownProperty,The following statement contains a magic number: list.Add (501643);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,AddBlessedForProperty,The following statement contains a magic number: list.Add (1062203' "{0}"' m.Name);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnParentDeath,The following statement contains a magic number: if (!Movable) {  	return DeathMoveResult.RemainEquiped;  } else if (parent.KeepsItemsOnDeath) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckBlessed (parent)) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnParentDeath,The following statement contains a magic number: if (parent.KeepsItemsOnDeath) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckBlessed (parent)) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnParentDeath,The following statement contains a magic number: if (CheckBlessed (parent)) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnParentDeath,The following statement contains a magic number: if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnInventoryDeath,The following statement contains a magic number: if (!Movable) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.KeepsItemsOnDeath) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckBlessed (parent)) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnInventoryDeath,The following statement contains a magic number: if (parent.KeepsItemsOnDeath) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckBlessed (parent)) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnInventoryDeath,The following statement contains a magic number: if (CheckBlessed (parent)) {  	return DeathMoveResult.MoveToBackpack;  } else if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnInventoryDeath,The following statement contains a magic number: if (CheckNewbied () && parent.Kills < 5) {  	return DeathMoveResult.MoveToBackpack;  } else if (parent.Player && Nontransferable) {  	return DeathMoveResult.MoveToBackpack;  } else {  	return DeathMoveResult.MoveToCorpse;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelTo,The following statement contains a magic number: to.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' ""));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelTo,The following statement contains a magic number: to.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' args));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelTo,The following statement contains a magic number: to.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' text));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelToAffix,The following statement contains a magic number: to.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' type' affix' ""));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelToAffix,The following statement contains a magic number: to.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' number' ""' type' affix' args));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelLootTypeTo,The following statement contains a magic number: if (m_LootType == LootType.Blessed) {  	LabelTo (to' 1041362);  	// (blessed)  } else if (m_LootType == LootType.Cursed) {  	LabelTo (to' "(cursed)");  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,LabelLootTypeTo,The following statement contains a magic number: LabelTo (to' 1041362);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,StackWith,The following statement contains a magic number: if (dropped.Stackable && Stackable && dropped.GetType () == GetType () && dropped.ItemID == ItemID && dropped.Hue == Hue && dropped.Name == Name && (dropped.Amount + Amount) <= 60000 && dropped != this && !dropped.Nontransferable && !Nontransferable) {  	if (m_LootType != dropped.m_LootType) {  		m_LootType = LootType.Regular;  	}  	Amount += dropped.Amount;  	dropped.Delete ();  	if (playSound && from != null) {  		int soundID = GetDropSound ();  		if (soundID == -1) {  			soundID = 0x42;  		}  		from.SendSound (soundID' GetWorldLocation ());  	}  	return true;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (itemID >= 0xEEA && itemID <= 0xEF2)// Are we coins?   {  	int coinBase = (itemID - 0xEEA) / 3;  	coinBase *= 3;  	coinBase += 0xEEA;  	doubled = false;  	if (m_Amount <= 1) {  		// A single coin  		itemID = coinBase;  	} else if (m_Amount <= 5) {  		// A stack of coins  		itemID = coinBase + 1;  	} else// m_Amount > 5  	 {  		// A pile of coins  		itemID = coinBase + 2;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (itemID >= 0xEEA && itemID <= 0xEF2)// Are we coins?   {  	int coinBase = (itemID - 0xEEA) / 3;  	coinBase *= 3;  	coinBase += 0xEEA;  	doubled = false;  	if (m_Amount <= 1) {  		// A single coin  		itemID = coinBase;  	} else if (m_Amount <= 5) {  		// A stack of coins  		itemID = coinBase + 1;  	} else// m_Amount > 5  	 {  		// A pile of coins  		itemID = coinBase + 2;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (itemID >= 0xEEA && itemID <= 0xEF2)// Are we coins?   {  	int coinBase = (itemID - 0xEEA) / 3;  	coinBase *= 3;  	coinBase += 0xEEA;  	doubled = false;  	if (m_Amount <= 1) {  		// A single coin  		itemID = coinBase;  	} else if (m_Amount <= 5) {  		// A stack of coins  		itemID = coinBase + 1;  	} else// m_Amount > 5  	 {  		// A pile of coins  		itemID = coinBase + 2;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (itemID >= 0xEEA && itemID <= 0xEF2)// Are we coins?   {  	int coinBase = (itemID - 0xEEA) / 3;  	coinBase *= 3;  	coinBase += 0xEEA;  	doubled = false;  	if (m_Amount <= 1) {  		// A single coin  		itemID = coinBase;  	} else if (m_Amount <= 5) {  		// A stack of coins  		itemID = coinBase + 1;  	} else// m_Amount > 5  	 {  		// A pile of coins  		itemID = coinBase + 2;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: coinBase *= 3;  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (m_Amount <= 1) {  	// A single coin  	itemID = coinBase;  } else if (m_Amount <= 5) {  	// A stack of coins  	itemID = coinBase + 1;  } else// m_Amount > 5   {  	// A pile of coins  	itemID = coinBase + 2;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (m_Amount <= 1) {  	// A single coin  	itemID = coinBase;  } else if (m_Amount <= 5) {  	// A stack of coins  	itemID = coinBase + 1;  } else// m_Amount > 5   {  	// A pile of coins  	itemID = coinBase + 2;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (m_Amount <= 5) {  	// A stack of coins  	itemID = coinBase + 1;  } else// m_Amount > 5   {  	// A pile of coins  	itemID = coinBase + 2;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (m_Amount <= 5) {  	// A stack of coins  	itemID = coinBase + 1;  } else// m_Amount > 5   {  	// A pile of coins  	itemID = coinBase + 2;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: itemID = coinBase + 2;  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (doubled) {  	bounds.Set (bounds.X' bounds.Y' bounds.Width + 5' bounds.Height + 5);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: if (doubled) {  	bounds.Set (bounds.X' bounds.Y' bounds.Width + 5' bounds.Height + 5);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: bounds.Set (bounds.X' bounds.Y' bounds.Width + 5' bounds.Height + 5);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,GetGraphicBounds,The following statement contains a magic number: bounds.Set (bounds.X' bounds.Y' bounds.Width + 5' bounds.Height + 5);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Serialize,The following statement contains a magic number: writer.Write (9);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: if (version < 7) {  	LastMoved = reader.ReadDeltaTime ();  } else {  	int minutes = reader.ReadEncodedInt ();  	try {  		LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  	} catch {  		LastMoved = DateTime.UtcNow;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: goto case 2;  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: if (version <= 3) {  	reader.ReadInt ();  	reader.ReadInt ();  	reader.ReadInt ();  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following statement contains a magic number: if (version <= 3) {  	/*m_Deleted =*/reader.ReadBool ();  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,HandleInvalidTransfer,The following statement contains a magic number: if (QuestItem) {  	from.SendLocalizedMessage (1049343);  	// You can only drop quest items into the top-most level of your backpack while you still need them for your quest.  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,HandleInvalidTransfer,The following statement contains a magic number: from.SendLocalizedMessage (1049343);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,ProcessDeltaQueue,The following statement contains a magic number: if (m_DeltaQueue.Count >= 512) {  	Parallel.ForEach (m_DeltaQueue' i => i.ProcessDelta ());  } else {  	for (int i = 0; i < m_DeltaQueue.Count; i++) {  		m_DeltaQueue [i].ProcessDelta ();  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (m_Map != null) {  	Packet p = null;  	Point3D worldLoc = GetWorldLocation ();  	IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange (worldLoc' GetMaxUpdateRange ());  	foreach (NetState state in eable) {  		Mobile m = state.Mobile;  		if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  			if (p == null) {  				if (ascii) {  					p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  				} else {  					p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  				}  				p.Acquire ();  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (m_Map != null) {  	Packet p = null;  	Point3D worldLoc = GetWorldLocation ();  	IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange (worldLoc' GetMaxUpdateRange ());  	foreach (NetState state in eable) {  		Mobile m = state.Mobile;  		if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  			if (p == null) {  				if (ascii) {  					p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  				} else {  					p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  				}  				p.Acquire ();  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: foreach (NetState state in eable) {  	Mobile m = state.Mobile;  	if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  		if (p == null) {  			if (ascii) {  				p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  			} else {  				p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  			}  			p.Acquire ();  		}  		state.Send (p);  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: foreach (NetState state in eable) {  	Mobile m = state.Mobile;  	if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  		if (p == null) {  			if (ascii) {  				p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  			} else {  				p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  			}  			p.Acquire ();  		}  		state.Send (p);  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  	if (p == null) {  		if (ascii) {  			p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  		} else {  			p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  		}  		p.Acquire ();  	}  	state.Send (p);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  	if (p == null) {  		if (ascii) {  			p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  		} else {  			p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  		}  		p.Acquire ();  	}  	state.Send (p);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (p == null) {  	if (ascii) {  		p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  	} else {  		p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  	}  	p.Acquire ();  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (p == null) {  	if (ascii) {  		p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  	} else {  		p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  	}  	p.Acquire ();  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  } else {  	p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  } else {  	p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: p = new AsciiMessage (m_Serial' m_ItemID' type' hue' 3' Name' text);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: p = new UnicodeMessage (m_Serial' m_ItemID' type' hue' 3' "ENU"' Name' text);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (m_Map != null) {  	Packet p = null;  	Point3D worldLoc = GetWorldLocation ();  	IPooledEnumerable<NetState> eable = m_Map.GetClientsInRange (worldLoc' GetMaxUpdateRange ());  	foreach (NetState state in eable) {  		Mobile m = state.Mobile;  		if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  			if (p == null) {  				p = Packet.Acquire (new MessageLocalized (m_Serial' m_ItemID' type' hue' 3' number' Name' args));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: foreach (NetState state in eable) {  	Mobile m = state.Mobile;  	if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  		if (p == null) {  			p = Packet.Acquire (new MessageLocalized (m_Serial' m_ItemID' type' hue' 3' number' Name' args));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (m.CanSee (this) && m.InRange (worldLoc' GetUpdateRange (m))) {  	if (p == null) {  		p = Packet.Acquire (new MessageLocalized (m_Serial' m_ItemID' type' hue' 3' number' Name' args));  	}  	state.Send (p);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: if (p == null) {  	p = Packet.Acquire (new MessageLocalized (m_Serial' m_ItemID' type' hue' 3' number' Name' args));  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,PublicOverheadMessage,The following statement contains a magic number: p = Packet.Acquire (new MessageLocalized (m_Serial' m_ItemID' type' hue' 3' number' Name' args));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToMobile,The following statement contains a magic number: if (Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null) {  	return false;  } else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (target.Location' 2)) {  	return false;  } else if (!from.CanSee (target) || !from.InLOS (target)) {  	return false;  } else if (!from.OnDroppedItemToMobile (this' target)) {  	return false;  } else if (!OnDroppedToMobile (from' target)) {  	return false;  } else if (!target.OnDragDrop (from' this)) {  	return false;  } else {  	return true;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToMobile,The following statement contains a magic number: if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (target.Location' 2)) {  	return false;  } else if (!from.CanSee (target) || !from.InLOS (target)) {  	return false;  } else if (!from.OnDroppedItemToMobile (this' target)) {  	return false;  } else if (!OnDroppedToMobile (from' target)) {  	return false;  } else if (!target.OnDragDrop (from' this)) {  	return false;  } else {  	return true;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnDroppedOnto,The following statement contains a magic number: if (Deleted || from.Deleted || target.Deleted || from.Map != target.Map || from.Map == null || target.Map == null) {  	return false;  } else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (target.GetWorldLocation ()' 2)) {  	return false;  } else if (!from.CanSee (target) || !from.InLOS (target)) {  	return false;  } else if (!target.IsAccessibleTo (from)) {  	return false;  } else if (!from.OnDroppedItemOnto (this' target)) {  	return false;  } else if (Nontransferable && from.Player && target != from.Backpack && !from.IsStaff ()) {  	HandleInvalidTransfer (from);  	return false;  } else {  	return target.OnDragDrop (from' this);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnDroppedOnto,The following statement contains a magic number: if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (target.GetWorldLocation ()' 2)) {  	return false;  } else if (!from.CanSee (target) || !from.InLOS (target)) {  	return false;  } else if (!target.IsAccessibleTo (from)) {  	return false;  } else if (!from.OnDroppedItemOnto (this' target)) {  	return false;  } else if (Nontransferable && from.Player && target != from.Backpack && !from.IsStaff ()) {  	HandleInvalidTransfer (from);  	return false;  } else {  	return target.OnDragDrop (from' this);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToItem,The following statement contains a magic number: if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (target.GetWorldLocation ()' 2)) {  	return false;  } else if (!from.CanSee (target) || !from.InLOS (target)) {  	return false;  } else if (!target.IsAccessibleTo (from)) {  	return false;  } else if (root is Mobile && !((Mobile)root).CheckNonlocalDrop (from' this' target)) {  	return false;  } else if (!from.OnDroppedItemToItem (this' target' p)) {  	return false;  } else if (target is Container && p.m_X != -1 && p.m_Y != -1) {  	return OnDroppedInto (from' (Container)target' p' gridloc);  } else {  	return OnDroppedOnto (from' target);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (Deleted || from.Deleted || from.Map == null) {  	return false;  } else if (!from.InRange (p' 2)) {  	return false;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (!from.InRange (p' 2)) {  	return false;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: m_OpenSlots = (1 << 20) - 1;  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < tiles.Length; ++i) {  	StaticTile tile = tiles [i];  	ItemData id = TileData.ItemTable [tile.ID & TileData.MaxItemValue];  	int checkZ = tile.Z;  	int checkTop = checkZ + id.CalcHeight;  	if (checkTop == checkZ && !id.Surface) {  		++checkTop;  	}  	int zStart = checkZ - z;  	int zEnd = checkTop - z;  	if (zStart >= 20 || zEnd < 0) {  		continue;  	}  	if (zStart < 0) {  		zStart = 0;  	}  	if (zEnd > 19) {  		zEnd = 19;  	}  	int bitCount = zEnd - zStart;  	m_OpenSlots &= ~(((1 << bitCount) - 1) << zStart);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < tiles.Length; ++i) {  	StaticTile tile = tiles [i];  	ItemData id = TileData.ItemTable [tile.ID & TileData.MaxItemValue];  	int checkZ = tile.Z;  	int checkTop = checkZ + id.CalcHeight;  	if (checkTop == checkZ && !id.Surface) {  		++checkTop;  	}  	int zStart = checkZ - z;  	int zEnd = checkTop - z;  	if (zStart >= 20 || zEnd < 0) {  		continue;  	}  	if (zStart < 0) {  		zStart = 0;  	}  	if (zEnd > 19) {  		zEnd = 19;  	}  	int bitCount = zEnd - zStart;  	m_OpenSlots &= ~(((1 << bitCount) - 1) << zStart);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < tiles.Length; ++i) {  	StaticTile tile = tiles [i];  	ItemData id = TileData.ItemTable [tile.ID & TileData.MaxItemValue];  	int checkZ = tile.Z;  	int checkTop = checkZ + id.CalcHeight;  	if (checkTop == checkZ && !id.Surface) {  		++checkTop;  	}  	int zStart = checkZ - z;  	int zEnd = checkTop - z;  	if (zStart >= 20 || zEnd < 0) {  		continue;  	}  	if (zStart < 0) {  		zStart = 0;  	}  	if (zEnd > 19) {  		zEnd = 19;  	}  	int bitCount = zEnd - zStart;  	m_OpenSlots &= ~(((1 << bitCount) - 1) << zStart);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (zStart >= 20 || zEnd < 0) {  	continue;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (zEnd > 19) {  	zEnd = 19;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (zEnd > 19) {  	zEnd = 19;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: zEnd = 19;  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < items.Count; ++i) {  	Item item = items [i];  	ItemData id = item.ItemData;  	int checkZ = item.Z;  	int checkTop = checkZ + id.CalcHeight;  	if (checkTop == checkZ && !id.Surface) {  		++checkTop;  	}  	int zStart = checkZ - z;  	int zEnd = checkTop - z;  	if (zStart >= 20 || zEnd < 0) {  		continue;  	}  	if (zStart < 0) {  		zStart = 0;  	}  	if (zEnd > 19) {  		zEnd = 19;  	}  	int bitCount = zEnd - zStart;  	m_OpenSlots &= ~(((1 << bitCount) - 1) << zStart);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < items.Count; ++i) {  	Item item = items [i];  	ItemData id = item.ItemData;  	int checkZ = item.Z;  	int checkTop = checkZ + id.CalcHeight;  	if (checkTop == checkZ && !id.Surface) {  		++checkTop;  	}  	int zStart = checkZ - z;  	int zEnd = checkTop - z;  	if (zStart >= 20 || zEnd < 0) {  		continue;  	}  	if (zStart < 0) {  		zStart = 0;  	}  	if (zEnd > 19) {  		zEnd = 19;  	}  	int bitCount = zEnd - zStart;  	m_OpenSlots &= ~(((1 << bitCount) - 1) << zStart);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < items.Count; ++i) {  	Item item = items [i];  	ItemData id = item.ItemData;  	int checkZ = item.Z;  	int checkTop = checkZ + id.CalcHeight;  	if (checkTop == checkZ && !id.Surface) {  		++checkTop;  	}  	int zStart = checkZ - z;  	int zEnd = checkTop - z;  	if (zStart >= 20 || zEnd < 0) {  		continue;  	}  	if (zStart < 0) {  		zStart = 0;  	}  	if (zEnd > 19) {  		zEnd = 19;  	}  	int bitCount = zEnd - zStart;  	m_OpenSlots &= ~(((1 << bitCount) - 1) << zStart);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (zStart >= 20 || zEnd < 0) {  	continue;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (zEnd > 19) {  	zEnd = 19;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (zEnd > 19) {  	zEnd = 19;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: zEnd = 19;  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (height > 30) {  	height = 30;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if (height > 30) {  	height = 30;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: height = 30;  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < 20; ++i) {  	if ((i + height) > 20) {  		match >>= 1;  	}  	okay = ((m_OpenSlots >> i) & match) == match;  	if (okay) {  		z += i;  		break;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: for (int i = 0; i < 20; ++i) {  	if ((i + height) > 20) {  		match >>= 1;  	}  	okay = ((m_OpenSlots >> i) & match) == match;  	if (okay) {  		z += i;  		break;  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,DropToWorld,The following statement contains a magic number: if ((i + height) > 20) {  	match >>= 1;  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,SendLocalizedMessageTo,The following statement contains a magic number: to.Send (new MessageLocalized (Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' ""));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,SendLocalizedMessageTo,The following statement contains a magic number: to.Send (new MessageLocalized (Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' args));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,SendLocalizedMessageTo,The following statement contains a magic number: to.Send (new MessageLocalizedAffix (Serial' ItemID' MessageType.Regular' 0x3B2' 3' number' ""' affixType' affix' args));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnDoubleClickDead,The following statement contains a magic number: from.LocalOverheadMessage (MessageType.Regular' 0x3B2' 1019048);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnDoubleClickNotAccessible,The following statement contains a magic number: from.SendLocalizedMessage (500447);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnDoubleClickSecureTrade,The following statement contains a magic number: from.SendLocalizedMessage (500447);  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnAosSingleClick,The following statement contains a magic number: if (opl.Header > 0) {  	from.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' opl.Header' Name' opl.HeaderArgs));  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnAosSingleClick,The following statement contains a magic number: from.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' opl.Header' Name' opl.HeaderArgs));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (ns != null) {  	if (Name == null) {  		if (m_Amount <= 1) {  			ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  		} else {  			ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  		}  	} else {  		ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : "")));  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (ns != null) {  	if (Name == null) {  		if (m_Amount <= 1) {  			ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  		} else {  			ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  		}  	} else {  		ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : "")));  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (ns != null) {  	if (Name == null) {  		if (m_Amount <= 1) {  			ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  		} else {  			ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  		}  	} else {  		ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : "")));  	}  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (Name == null) {  	if (m_Amount <= 1) {  		ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  	} else {  		ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  	}  } else {  	ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : "")));  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (Name == null) {  	if (m_Amount <= 1) {  		ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  	} else {  		ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  	}  } else {  	ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : "")));  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (Name == null) {  	if (m_Amount <= 1) {  		ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  	} else {  		ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  	}  } else {  	ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : "")));  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (m_Amount <= 1) {  	ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  } else {  	ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: if (m_Amount <= 1) {  	ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  } else {  	ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: ns.Send (new MessageLocalized (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' ""));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: ns.Send (new MessageLocalizedAffix (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' LabelNumber' ""' AffixType.Append' String.Format (" : {0}"' m_Amount)' ""));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,OnSingleClick,The following statement contains a magic number: ns.Send (new UnicodeMessage (m_Serial' m_ItemID' MessageType.Label' 0x3B2' 3' "ENU"' ""' Name + (m_Amount > 1 ? " : " + m_Amount : "")));  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,ScissorHelper,The following statement contains a magic number: if (amount > (60000 / amountPerOldItem))// let's not go over 60000   {  	amount = (60000 / amountPerOldItem);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,ScissorHelper,The following statement contains a magic number: if (amount > (60000 / amountPerOldItem))// let's not go over 60000   {  	amount = (60000 / amountPerOldItem);  }  
Magic Number,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,ScissorHelper,The following statement contains a magic number: amount = (60000 / amountPerOldItem);  
Magic Number,Server,ItemBounds,F:\newReposMay17\JustUO_JustUO\Server\ItemBounds.cs,ItemBounds,The following statement contains a magic number: if (File.Exists ("Data/Binary/Bounds.bin")) {  	using (var fs = new FileStream ("Data/Binary/Bounds.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var bin = new BinaryReader (fs);  		int count = Math.Min (m_Bounds.Length' (int)(fs.Length / 8));  		for (int i = 0; i < count; ++i) {  			int xMin = bin.ReadInt16 ();  			int yMin = bin.ReadInt16 ();  			int xMax = bin.ReadInt16 ();  			int yMax = bin.ReadInt16 ();  			m_Bounds [i].Set (xMin' yMin' (xMax - xMin) + 1' (yMax - yMin) + 1);  		}  		bin.Close ();  	}  } else {  	Console.WriteLine ("Warning: Data/Binary/Bounds.bin does not exist");  }  
Magic Number,Server,ItemBounds,F:\newReposMay17\JustUO_JustUO\Server\ItemBounds.cs,ItemBounds,The following statement contains a magic number: using (var fs = new FileStream ("Data/Binary/Bounds.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var bin = new BinaryReader (fs);  	int count = Math.Min (m_Bounds.Length' (int)(fs.Length / 8));  	for (int i = 0; i < count; ++i) {  		int xMin = bin.ReadInt16 ();  		int yMin = bin.ReadInt16 ();  		int xMax = bin.ReadInt16 ();  		int yMax = bin.ReadInt16 ();  		m_Bounds [i].Set (xMin' yMin' (xMax - xMin) + 1' (yMax - yMin) + 1);  	}  	bin.Close ();  }  
Magic Number,Server,VirtualCheck,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualCheck.cs,GetProperties,The following statement contains a magic number: list.Add (1060738' String.Format ("{0:#'0} platinum' {1:#'0} gold"' Plat' Gold));  
Magic Number,Server,HairInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,FakeSerial,The following statement contains a magic number: return (0x7FFFFFFF - 0x400 - (parent.Serial * 4));  
Magic Number,Server,FacialHairInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,FakeSerial,The following statement contains a magic number: return (0x7FFFFFFF - 0x400 - 1 - (parent.Serial * 4));  
Magic Number,Server,FaceInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,FakeSerial,The following statement contains a magic number: return (0x7FFFFFFF - 0x400 - 2 - (parent.Serial * 4));  
Magic Number,Server,FaceInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,FakeSerial,The following statement contains a magic number: return (0x7FFFFFFF - 0x400 - 2 - (parent.Serial * 4));  
Magic Number,Server,KeywordList,F:\newReposMay17\JustUO_JustUO\Server\KeywordList.cs,KeywordList,The following statement contains a magic number: m_Keywords = new int[8];  
Magic Number,Server,KeywordList,F:\newReposMay17\JustUO_JustUO\Server\KeywordList.cs,Add,The following statement contains a magic number: if ((m_Count + 1) > m_Keywords.Length) {  	int[] old = m_Keywords;  	m_Keywords = new int[old.Length * 2];  	for (int i = 0; i < old.Length; ++i) {  		m_Keywords [i] = old [i];  	}  }  
Magic Number,Server,KeywordList,F:\newReposMay17\JustUO_JustUO\Server\KeywordList.cs,Add,The following statement contains a magic number: m_Keywords = new int[old.Length * 2];  
Magic Number,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The following statement contains a magic number: if (platform == 4 || platform == 128) {  	// MS 4' MONO 128  	m_Unix = true;  	Utility.PushColor (ConsoleColor.Yellow);  	Console.WriteLine ("Core: Unix environment detected");  	Utility.PopColor ();  } else {  	m_ConsoleEventHandler = OnConsoleEvent;  	UnsafeNativeMethods.SetConsoleCtrlHandler (m_ConsoleEventHandler' true);  }  
Magic Number,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The following statement contains a magic number: if (platform == 4 || platform == 128) {  	// MS 4' MONO 128  	m_Unix = true;  	Utility.PushColor (ConsoleColor.Yellow);  	Console.WriteLine ("Core: Unix environment detected");  	Utility.PopColor ();  } else {  	m_ConsoleEventHandler = OnConsoleEvent;  	UnsafeNativeMethods.SetConsoleCtrlHandler (m_ConsoleEventHandler' true);  }  
Magic Number,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The following statement contains a magic number: try {  	long now' last = TickCount;  	const int sampleInterval = 100;  	const float ticksPerSecond = (float)(1000 * sampleInterval);  	long sample = 0;  	while (!m_Closing) {  		m_Signal.WaitOne ();  		Mobile.ProcessDeltaQueue ();  		Item.ProcessDeltaQueue ();  		Timer.Slice ();  		messagePump.Slice ();  		NetState.FlushAll ();  		NetState.ProcessDisposedQueue ();  		if (Slice != null) {  			Slice ();  		}  		if ((++sample % sampleInterval) == 0) {  			now = TickCount;  			m_CyclesPerSecond [m_CycleIndex++ % m_CyclesPerSecond.Length] = ticksPerSecond / (now - last);  			last = now;  		}  	}  } catch (Exception e) {  	CurrentDomain_UnhandledException (null' new UnhandledExceptionEventArgs (e' true));  }  
Magic Number,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,Main,The following statement contains a magic number: try {  	long now' last = TickCount;  	const int sampleInterval = 100;  	const float ticksPerSecond = (float)(1000 * sampleInterval);  	long sample = 0;  	while (!m_Closing) {  		m_Signal.WaitOne ();  		Mobile.ProcessDeltaQueue ();  		Item.ProcessDeltaQueue ();  		Timer.Slice ();  		messagePump.Slice ();  		NetState.FlushAll ();  		NetState.ProcessDisposedQueue ();  		if (Slice != null) {  			Slice ();  		}  		if ((++sample % sampleInterval) == 0) {  			now = TickCount;  			m_CyclesPerSecond [m_CycleIndex++ % m_CyclesPerSecond.Length] = ticksPerSecond / (now - last);  			last = now;  		}  	}  } catch (Exception e) {  	CurrentDomain_UnhandledException (null' new UnhandledExceptionEventArgs (e' true));  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,FloorAverage,The following statement contains a magic number: return (v / 2);  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetObjectsInRange,The following statement contains a magic number: return PooledEnumerable<IEntity>.Instantiate (EntityEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetObjectsInRange,The following statement contains a magic number: return PooledEnumerable<IEntity>.Instantiate (EntityEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetClientsInRange,The following statement contains a magic number: return PooledEnumerable<NetState>.Instantiate (ClientEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetClientsInRange,The following statement contains a magic number: return PooledEnumerable<NetState>.Instantiate (ClientEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetItemsInRange,The following statement contains a magic number: return PooledEnumerable<Item>.Instantiate (ItemEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetItemsInRange,The following statement contains a magic number: return PooledEnumerable<Item>.Instantiate (ItemEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetMobilesInRange,The following statement contains a magic number: return PooledEnumerable<Mobile>.Instantiate (MobileEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetMobilesInRange,The following statement contains a magic number: return PooledEnumerable<Mobile>.Instantiate (MobileEnumerator.Instantiate (this' new Rectangle2D (p.m_X - range' p.m_Y - range' range * 2 + 1' range * 2 + 1)));  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The following statement contains a magic number: if (checkMobiles) {  	if (mobs.Any (m => m.Location.m_X == x && m.Location.m_Y == y && (m.AccessLevel < AccessLevel.Counselor || !m.Hidden) && ((m.Z + 16) > z && (z + height) > m.Z))) {  		return false;  	}  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanFit,The following statement contains a magic number: if (mobs.Any (m => m.Location.m_X == x && m.Location.m_Y == y && (m.AccessLevel < AccessLevel.Counselor || !m.Hidden) && ((m.Z + 16) > z && (z + height) > m.Z))) {  	return false;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,CanSpawnMobile,The following statement contains a magic number: return Region.Find (new Point3D (x' y' z)' this).AllowSpawn () && CanFit (x' y' z' 16);  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is Mobile) {  	p = ((Mobile)o).Location;  	p.Z += 14;  } else if (o is Item) {  	p = ((Item)o).GetWorldLocation ();  	p.Z += (((Item)o).ItemData.Height / 2) + 1;  } else if (o is Point3D) {  	p = (Point3D)o;  } else if (o is LandTarget) {  	p = ((LandTarget)o).Location;  	int low = 0' avg = 0' top = 0;  	GetAverageZ (p.X' p.Y' ref low' ref avg' ref top);  	p.Z = top + 1;  } else if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is Mobile) {  	p = ((Mobile)o).Location;  	p.Z += 14;  } else if (o is Item) {  	p = ((Item)o).GetWorldLocation ();  	p.Z += (((Item)o).ItemData.Height / 2) + 1;  } else if (o is Point3D) {  	p = (Point3D)o;  } else if (o is LandTarget) {  	p = ((LandTarget)o).Location;  	int low = 0' avg = 0' top = 0;  	GetAverageZ (p.X' p.Y' ref low' ref avg' ref top);  	p.Z = top + 1;  } else if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is Mobile) {  	p = ((Mobile)o).Location;  	p.Z += 14;  } else if (o is Item) {  	p = ((Item)o).GetWorldLocation ();  	p.Z += (((Item)o).ItemData.Height / 2) + 1;  } else if (o is Point3D) {  	p = (Point3D)o;  } else if (o is LandTarget) {  	p = ((LandTarget)o).Location;  	int low = 0' avg = 0' top = 0;  	GetAverageZ (p.X' p.Y' ref low' ref avg' ref top);  	p.Z = top + 1;  } else if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: p.Z += 14;  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is Item) {  	p = ((Item)o).GetWorldLocation ();  	p.Z += (((Item)o).ItemData.Height / 2) + 1;  } else if (o is Point3D) {  	p = (Point3D)o;  } else if (o is LandTarget) {  	p = ((LandTarget)o).Location;  	int low = 0' avg = 0' top = 0;  	GetAverageZ (p.X' p.Y' ref low' ref avg' ref top);  	p.Z = top + 1;  } else if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is Item) {  	p = ((Item)o).GetWorldLocation ();  	p.Z += (((Item)o).ItemData.Height / 2) + 1;  } else if (o is Point3D) {  	p = (Point3D)o;  } else if (o is LandTarget) {  	p = ((LandTarget)o).Location;  	int low = 0' avg = 0' top = 0;  	GetAverageZ (p.X' p.Y' ref low' ref avg' ref top);  	p.Z = top + 1;  } else if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: p.Z += (((Item)o).ItemData.Height / 2) + 1;  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is Point3D) {  	p = (Point3D)o;  } else if (o is LandTarget) {  	p = ((LandTarget)o).Location;  	int low = 0' avg = 0' top = 0;  	GetAverageZ (p.X' p.Y' ref low' ref avg' ref top);  	p.Z = top + 1;  } else if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is LandTarget) {  	p = ((LandTarget)o).Location;  	int low = 0' avg = 0' top = 0;  	GetAverageZ (p.X' p.Y' ref low' ref avg' ref top);  	p.Z = top + 1;  } else if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: if (o is StaticTarget) {  	var st = (StaticTarget)o;  	ItemData id = TileData.ItemTable [st.ItemID & TileData.MaxItemValue];  	p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  } else if (o is IPoint3D) {  	p = new Point3D ((IPoint3D)o);  } else {  	Console.WriteLine ("Warning: Invalid object ({0}) in line of sight"' o);  	p = Point3D.Zero;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,GetPoint,The following statement contains a magic number: p = new Point3D (st.X' st.Y' st.Z - id.CalcHeight + (id.Height / 2) + 1);  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The following statement contains a magic number: while (Utility.NumberBetween (x' dest.m_X' org.m_X' 0.5) && Utility.NumberBetween (y' dest.m_Y' org.m_Y' 0.5) && Utility.NumberBetween (z' dest.m_Z' org.m_Z' 0.5)) {  	ix = (int)Math.Round (x);  	iy = (int)Math.Round (y);  	iz = (int)Math.Round (z);  	if (path.Count > 0) {  		p = path.Last;  		if (p.m_X != ix || p.m_Y != iy || p.m_Z != iz) {  			path.Add (ix' iy' iz);  		}  	} else {  		path.Add (ix' iy' iz);  	}  	x += run;  	y += rise;  	z += zslp;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The following statement contains a magic number: while (Utility.NumberBetween (x' dest.m_X' org.m_X' 0.5) && Utility.NumberBetween (y' dest.m_Y' org.m_Y' 0.5) && Utility.NumberBetween (z' dest.m_Z' org.m_Z' 0.5)) {  	ix = (int)Math.Round (x);  	iy = (int)Math.Round (y);  	iz = (int)Math.Round (z);  	if (path.Count > 0) {  		p = path.Last;  		if (p.m_X != ix || p.m_Y != iy || p.m_Z != iz) {  			path.Add (ix' iy' iz);  		}  	} else {  		path.Add (ix' iy' iz);  	}  	x += run;  	y += rise;  	z += zslp;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The following statement contains a magic number: while (Utility.NumberBetween (x' dest.m_X' org.m_X' 0.5) && Utility.NumberBetween (y' dest.m_Y' org.m_Y' 0.5) && Utility.NumberBetween (z' dest.m_Z' org.m_Z' 0.5)) {  	ix = (int)Math.Round (x);  	iy = (int)Math.Round (y);  	iz = (int)Math.Round (z);  	if (path.Count > 0) {  		p = path.Last;  		if (p.m_X != ix || p.m_Y != iy || p.m_Z != iz) {  			path.Add (ix' iy' iz);  		}  	} else {  		path.Add (ix' iy' iz);  	}  	x += run;  	y += rise;  	z += zslp;  }  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The following statement contains a magic number: eye.Z += 14;  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The following statement contains a magic number: eye.Z += 14;  
Magic Number,Server,Map,F:\newReposMay17\JustUO_JustUO\Server\Map.cs,LineOfSight,The following statement contains a magic number: target.Z += 14;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: _Resistances [2] += BaseColdResistance;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: _Resistances [3] += BasePoisonResistance;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: _Resistances [4] += BaseEnergyResistance;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: for (int i = 0; i < _Items.Count; ++i) {  	Item item = _Items [i];  	if (item.CheckPropertyConfliction (this)) {  		continue;  	}  	_Resistances [0] += item.PhysicalResistance;  	_Resistances [1] += item.FireResistance;  	_Resistances [2] += item.ColdResistance;  	_Resistances [3] += item.PoisonResistance;  	_Resistances [4] += item.EnergyResistance;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: for (int i = 0; i < _Items.Count; ++i) {  	Item item = _Items [i];  	if (item.CheckPropertyConfliction (this)) {  		continue;  	}  	_Resistances [0] += item.PhysicalResistance;  	_Resistances [1] += item.FireResistance;  	_Resistances [2] += item.ColdResistance;  	_Resistances [3] += item.PoisonResistance;  	_Resistances [4] += item.EnergyResistance;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: for (int i = 0; i < _Items.Count; ++i) {  	Item item = _Items [i];  	if (item.CheckPropertyConfliction (this)) {  		continue;  	}  	_Resistances [0] += item.PhysicalResistance;  	_Resistances [1] += item.FireResistance;  	_Resistances [2] += item.ColdResistance;  	_Resistances [3] += item.PoisonResistance;  	_Resistances [4] += item.EnergyResistance;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: _Resistances [2] += item.ColdResistance;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: _Resistances [3] += item.PoisonResistance;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ComputeResistances,The following statement contains a magic number: _Resistances [4] += item.EnergyResistance;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: if (opl.Header > 0) {  	int hue;  	if (_NameHue != -1) {  		hue = _NameHue;  	} else if (IsStaff ()) {  		hue = 11;  	} else {  		hue = Notoriety.GetHue (Notoriety.Compute (from' this));  	}  	from.Send (new MessageLocalized (_Serial' Body' MessageType.Label' hue' 3' opl.Header' Name' opl.HeaderArgs));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: if (opl.Header > 0) {  	int hue;  	if (_NameHue != -1) {  		hue = _NameHue;  	} else if (IsStaff ()) {  		hue = 11;  	} else {  		hue = Notoriety.GetHue (Notoriety.Compute (from' this));  	}  	from.Send (new MessageLocalized (_Serial' Body' MessageType.Label' hue' 3' opl.Header' Name' opl.HeaderArgs));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: if (_NameHue != -1) {  	hue = _NameHue;  } else if (IsStaff ()) {  	hue = 11;  } else {  	hue = Notoriety.GetHue (Notoriety.Compute (from' this));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: if (IsStaff ()) {  	hue = 11;  } else {  	hue = Notoriety.GetHue (Notoriety.Compute (from' this));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: hue = 11;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnAosSingleClick,The following statement contains a magic number: from.Send (new MessageLocalized (_Serial' Body' MessageType.Label' hue' 3' opl.Header' Name' opl.HeaderArgs));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AddNameProperties,The following statement contains a magic number: if (ShowFameTitle && (_Player || _Body.IsHuman) && _Fame >= 10000) {  	prefix = _Female ? "Lady" : "Lord";  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,AddNameProperties,The following statement contains a magic number: list.Add (1050045' "{0} \t{1}\t {2}"' prefix' name' suffix);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendSkillMessage,The following statement contains a magic number: SendLocalizedMessage (500118);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendActionMessage,The following statement contains a magic number: SendLocalizedMessage (500119);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if ((_Direction & Direction.Mask) == (d & Direction.Mask)) {  	// We are actually moving (not just a direction change)  	if (_Spell != null && !_Spell.OnCasterMoving (d)) {  		return false;  	}  	if (_Paralyzed || _Frozen || _Sleep) {  		SendLocalizedMessage (500111);  		// You are frozen and can not move.  		return false;  	}  	int newZ;  	if (CheckMovement (d' out newZ)) {  		int x = oldLocation.m_X' y = oldLocation.m_Y;  		int oldX = x' oldY = y;  		int oldZ = oldLocation.m_Z;  		switch (d & Direction.Mask) {  		case Direction.North:  			--y;  			break;  		case Direction.Right:  			++x;  			--y;  			break;  		case Direction.East:  			++x;  			break;  		case Direction.Down:  			++x;  			++y;  			break;  		case Direction.South:  			++y;  			break;  		case Direction.Left:  			--x;  			++y;  			break;  		case Direction.West:  			--x;  			break;  		case Direction.Up:  			--x;  			--y;  			break;  		}  		newLocation.m_X = x;  		newLocation.m_Y = y;  		newLocation.m_Z = newZ;  		_Pushing = false;  		Map map = _Map;  		if (map != null) {  			Sector oldSector = map.GetSector (oldX' oldY);  			Sector newSector = map.GetSector (x' y);  			if (oldSector != newSector) {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Mobiles.Count; ++i) {  					Mobile m = newSector.Mobiles [i];  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < newSector.Items.Count; ++i) {  					Item item = newSector.Items [i];  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			} else {  				for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  					Mobile m = oldSector.Mobiles [i];  					if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  						return false;  					}  					if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  						return false;  					}  				}  				for (int i = 0; i < oldSector.Items.Count; ++i) {  					Item item = oldSector.Items [i];  					if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  						return false;  					}  					if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  						return false;  					}  				}  			}  			if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  				return false;  			}  		} else {  			return false;  		}  		if (!InternalOnMove (d)) {  			return false;  		}  		if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  			if (_MoveRecords == null) {  				_MoveRecords = new Queue<MovementRecord> (6);  			}  			while (_MoveRecords.Count > 0) {  				MovementRecord r = _MoveRecords.Peek ();  				if (r.Expired ()) {  					_MoveRecords.Dequeue ();  				} else {  					break;  				}  			}  			if (_MoveRecords.Count >= _FwdMaxSteps) {  				var fw = new FastWalkEventArgs (_NetState);  				EventSink.InvokeFastWalk (fw);  				if (fw.Blocked) {  					return false;  				}  			}  			int delay = ComputeMovementSpeed (d);  			long end;  			if (_MoveRecords.Count > 0) {  				end = _EndQueue + delay;  			} else {  				end = Core.TickCount + delay;  			}  			_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  			_EndQueue = end;  		}  		_LastMoveTime = Core.TickCount;  	} else {  		return false;  	}  	DisruptiveAction ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (_Paralyzed || _Frozen || _Sleep) {  	SendLocalizedMessage (500111);  	// You are frozen and can not move.  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: SendLocalizedMessage (500111);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (CheckMovement (d' out newZ)) {  	int x = oldLocation.m_X' y = oldLocation.m_Y;  	int oldX = x' oldY = y;  	int oldZ = oldLocation.m_Z;  	switch (d & Direction.Mask) {  	case Direction.North:  		--y;  		break;  	case Direction.Right:  		++x;  		--y;  		break;  	case Direction.East:  		++x;  		break;  	case Direction.Down:  		++x;  		++y;  		break;  	case Direction.South:  		++y;  		break;  	case Direction.Left:  		--x;  		++y;  		break;  	case Direction.West:  		--x;  		break;  	case Direction.Up:  		--x;  		--y;  		break;  	}  	newLocation.m_X = x;  	newLocation.m_Y = y;  	newLocation.m_Z = newZ;  	_Pushing = false;  	Map map = _Map;  	if (map != null) {  		Sector oldSector = map.GetSector (oldX' oldY);  		Sector newSector = map.GetSector (x' y);  		if (oldSector != newSector) {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Mobiles.Count; ++i) {  				Mobile m = newSector.Mobiles [i];  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < newSector.Items.Count; ++i) {  				Item item = newSector.Items [i];  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		} else {  			for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  				Mobile m = oldSector.Mobiles [i];  				if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  					return false;  				}  				if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  					return false;  				}  			}  			for (int i = 0; i < oldSector.Items.Count; ++i) {  				Item item = oldSector.Items [i];  				if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  					return false;  				}  				if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  					return false;  				}  			}  		}  		if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  			return false;  		}  	} else {  		return false;  	}  	if (!InternalOnMove (d)) {  		return false;  	}  	if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  		if (_MoveRecords == null) {  			_MoveRecords = new Queue<MovementRecord> (6);  		}  		while (_MoveRecords.Count > 0) {  			MovementRecord r = _MoveRecords.Peek ();  			if (r.Expired ()) {  				_MoveRecords.Dequeue ();  			} else {  				break;  			}  		}  		if (_MoveRecords.Count >= _FwdMaxSteps) {  			var fw = new FastWalkEventArgs (_NetState);  			EventSink.InvokeFastWalk (fw);  			if (fw.Blocked) {  				return false;  			}  		}  		int delay = ComputeMovementSpeed (d);  		long end;  		if (_MoveRecords.Count > 0) {  			end = _EndQueue + delay;  		} else {  			end = Core.TickCount + delay;  		}  		_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  		_EndQueue = end;  	}  	_LastMoveTime = Core.TickCount;  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (map != null) {  	Sector oldSector = map.GetSector (oldX' oldY);  	Sector newSector = map.GetSector (x' y);  	if (oldSector != newSector) {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Mobiles.Count; ++i) {  			Mobile m = newSector.Mobiles [i];  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < newSector.Items.Count; ++i) {  			Item item = newSector.Items [i];  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	} else {  		for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  			Mobile m = oldSector.Mobiles [i];  			if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  				return false;  			}  			if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  				return false;  			}  		}  		for (int i = 0; i < oldSector.Items.Count; ++i) {  			Item item = oldSector.Items [i];  			if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  				return false;  			}  			if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  				return false;  			}  		}  	}  	if (!Region.CanMove (this' d' newLocation' oldLocation' _Map)) {  		return false;  	}  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (oldSector != newSector) {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Mobiles.Count; ++i) {  		Mobile m = newSector.Mobiles [i];  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < newSector.Items.Count; ++i) {  		Item item = newSector.Items [i];  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  } else {  	for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  		Mobile m = oldSector.Mobiles [i];  		if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  			return false;  		}  		if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  			return false;  		}  	}  	for (int i = 0; i < oldSector.Items.Count; ++i) {  		Item item = oldSector.Items [i];  		if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  			return false;  		}  		if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  			return false;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  	Mobile m = oldSector.Mobiles [i];  	if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  	Mobile m = oldSector.Mobiles [i];  	if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Items.Count; ++i) {  	Item item = oldSector.Items [i];  	if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < newSector.Mobiles.Count; ++i) {  	Mobile m = newSector.Mobiles [i];  	if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < newSector.Mobiles.Count; ++i) {  	Mobile m = newSector.Mobiles [i];  	if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < newSector.Items.Count; ++i) {  	Item item = newSector.Items [i];  	if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  	Mobile m = oldSector.Mobiles [i];  	if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  		return false;  	}  	if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  	Mobile m = oldSector.Mobiles [i];  	if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  		return false;  	}  	if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  	Mobile m = oldSector.Mobiles [i];  	if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  		return false;  	}  	if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Mobiles.Count; ++i) {  	Mobile m = oldSector.Mobiles [i];  	if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  		return false;  	}  	if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m != this && m.X == oldX && m.Y == oldY && (m.Z + 15) > oldZ && (oldZ + 15) > m.Z && !m.OnMoveOff (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (m.X == x && m.Y == y && (m.Z + 15) > newZ && (newZ + 15) > m.Z && !m.OnMoveOver (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Items.Count; ++i) {  	Item item = oldSector.Items [i];  	if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  		return false;  	}  	if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: for (int i = 0; i < oldSector.Items.Count; ++i) {  	Item item = oldSector.Items [i];  	if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  		return false;  	}  	if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (item.AtWorldPoint (oldX' oldY) && (item.Z == oldZ || ((item.Z + item.ItemData.Height) > oldZ && (oldZ + 15) > item.Z)) && !item.OnMoveOff (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (item.AtWorldPoint (x' y) && (item.Z == newZ || ((item.Z + item.ItemData.Height) > newZ && (newZ + 15) > item.Z)) && !item.OnMoveOver (this)) {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (_FwdEnabled && _NetState != null && _AccessLevel < _FwdAccessOverride && (!_FwdUotdOverride || !_NetState.IsUOTDClient)) {  	if (_MoveRecords == null) {  		_MoveRecords = new Queue<MovementRecord> (6);  	}  	while (_MoveRecords.Count > 0) {  		MovementRecord r = _MoveRecords.Peek ();  		if (r.Expired ()) {  			_MoveRecords.Dequeue ();  		} else {  			break;  		}  	}  	if (_MoveRecords.Count >= _FwdMaxSteps) {  		var fw = new FastWalkEventArgs (_NetState);  		EventSink.InvokeFastWalk (fw);  		if (fw.Blocked) {  			return false;  		}  	}  	int delay = ComputeMovementSpeed (d);  	long end;  	if (_MoveRecords.Count > 0) {  		end = _EndQueue + delay;  	} else {  		end = Core.TickCount + delay;  	}  	_MoveRecords.Enqueue (MovementRecord.NewInstance (end));  	_EndQueue = end;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: if (_MoveRecords == null) {  	_MoveRecords = new Queue<MovementRecord> (6);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following statement contains a magic number: _MoveRecords = new Queue<MovementRecord> (6);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_IgnoreMobiles && (_Map.Rules & MapRules.FreeMovement) == 0) {  	if (!shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet) {  		return true;  	}  	if (shoved._Hidden && shoved.IsStaff ()) {  		return true;  	}  	if (!_Pushing) {  		_Pushing = true;  		int number;  		if (IsStaff ()) {  			number = shoved._Hidden ? 1019041 : 1019040;  		} else {  			if (Stam == StamMax) {  				number = shoved._Hidden ? 1019043 : 1019042;  				Stam -= 10;  				RevealingAction ();  			} else {  				return false;  			}  		}  		SendLocalizedMessage (number);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_IgnoreMobiles && (_Map.Rules & MapRules.FreeMovement) == 0) {  	if (!shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet) {  		return true;  	}  	if (shoved._Hidden && shoved.IsStaff ()) {  		return true;  	}  	if (!_Pushing) {  		_Pushing = true;  		int number;  		if (IsStaff ()) {  			number = shoved._Hidden ? 1019041 : 1019040;  		} else {  			if (Stam == StamMax) {  				number = shoved._Hidden ? 1019043 : 1019042;  				Stam -= 10;  				RevealingAction ();  			} else {  				return false;  			}  		}  		SendLocalizedMessage (number);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_IgnoreMobiles && (_Map.Rules & MapRules.FreeMovement) == 0) {  	if (!shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet) {  		return true;  	}  	if (shoved._Hidden && shoved.IsStaff ()) {  		return true;  	}  	if (!_Pushing) {  		_Pushing = true;  		int number;  		if (IsStaff ()) {  			number = shoved._Hidden ? 1019041 : 1019040;  		} else {  			if (Stam == StamMax) {  				number = shoved._Hidden ? 1019043 : 1019042;  				Stam -= 10;  				RevealingAction ();  			} else {  				return false;  			}  		}  		SendLocalizedMessage (number);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_IgnoreMobiles && (_Map.Rules & MapRules.FreeMovement) == 0) {  	if (!shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet) {  		return true;  	}  	if (shoved._Hidden && shoved.IsStaff ()) {  		return true;  	}  	if (!_Pushing) {  		_Pushing = true;  		int number;  		if (IsStaff ()) {  			number = shoved._Hidden ? 1019041 : 1019040;  		} else {  			if (Stam == StamMax) {  				number = shoved._Hidden ? 1019043 : 1019042;  				Stam -= 10;  				RevealingAction ();  			} else {  				return false;  			}  		}  		SendLocalizedMessage (number);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_IgnoreMobiles && (_Map.Rules & MapRules.FreeMovement) == 0) {  	if (!shoved.Alive || !Alive || shoved.IsDeadBondedPet || IsDeadBondedPet) {  		return true;  	}  	if (shoved._Hidden && shoved.IsStaff ()) {  		return true;  	}  	if (!_Pushing) {  		_Pushing = true;  		int number;  		if (IsStaff ()) {  			number = shoved._Hidden ? 1019041 : 1019040;  		} else {  			if (Stam == StamMax) {  				number = shoved._Hidden ? 1019043 : 1019042;  				Stam -= 10;  				RevealingAction ();  			} else {  				return false;  			}  		}  		SendLocalizedMessage (number);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_Pushing) {  	_Pushing = true;  	int number;  	if (IsStaff ()) {  		number = shoved._Hidden ? 1019041 : 1019040;  	} else {  		if (Stam == StamMax) {  			number = shoved._Hidden ? 1019043 : 1019042;  			Stam -= 10;  			RevealingAction ();  		} else {  			return false;  		}  	}  	SendLocalizedMessage (number);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_Pushing) {  	_Pushing = true;  	int number;  	if (IsStaff ()) {  		number = shoved._Hidden ? 1019041 : 1019040;  	} else {  		if (Stam == StamMax) {  			number = shoved._Hidden ? 1019043 : 1019042;  			Stam -= 10;  			RevealingAction ();  		} else {  			return false;  		}  	}  	SendLocalizedMessage (number);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_Pushing) {  	_Pushing = true;  	int number;  	if (IsStaff ()) {  		number = shoved._Hidden ? 1019041 : 1019040;  	} else {  		if (Stam == StamMax) {  			number = shoved._Hidden ? 1019043 : 1019042;  			Stam -= 10;  			RevealingAction ();  		} else {  			return false;  		}  	}  	SendLocalizedMessage (number);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_Pushing) {  	_Pushing = true;  	int number;  	if (IsStaff ()) {  		number = shoved._Hidden ? 1019041 : 1019040;  	} else {  		if (Stam == StamMax) {  			number = shoved._Hidden ? 1019043 : 1019042;  			Stam -= 10;  			RevealingAction ();  		} else {  			return false;  		}  	}  	SendLocalizedMessage (number);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (!_Pushing) {  	_Pushing = true;  	int number;  	if (IsStaff ()) {  		number = shoved._Hidden ? 1019041 : 1019040;  	} else {  		if (Stam == StamMax) {  			number = shoved._Hidden ? 1019043 : 1019042;  			Stam -= 10;  			RevealingAction ();  		} else {  			return false;  		}  	}  	SendLocalizedMessage (number);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (IsStaff ()) {  	number = shoved._Hidden ? 1019041 : 1019040;  } else {  	if (Stam == StamMax) {  		number = shoved._Hidden ? 1019043 : 1019042;  		Stam -= 10;  		RevealingAction ();  	} else {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (IsStaff ()) {  	number = shoved._Hidden ? 1019041 : 1019040;  } else {  	if (Stam == StamMax) {  		number = shoved._Hidden ? 1019043 : 1019042;  		Stam -= 10;  		RevealingAction ();  	} else {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (IsStaff ()) {  	number = shoved._Hidden ? 1019041 : 1019040;  } else {  	if (Stam == StamMax) {  		number = shoved._Hidden ? 1019043 : 1019042;  		Stam -= 10;  		RevealingAction ();  	} else {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (IsStaff ()) {  	number = shoved._Hidden ? 1019041 : 1019040;  } else {  	if (Stam == StamMax) {  		number = shoved._Hidden ? 1019043 : 1019042;  		Stam -= 10;  		RevealingAction ();  	} else {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (IsStaff ()) {  	number = shoved._Hidden ? 1019041 : 1019040;  } else {  	if (Stam == StamMax) {  		number = shoved._Hidden ? 1019043 : 1019042;  		Stam -= 10;  		RevealingAction ();  	} else {  		return false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: number = shoved._Hidden ? 1019041 : 1019040;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: number = shoved._Hidden ? 1019041 : 1019040;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (Stam == StamMax) {  	number = shoved._Hidden ? 1019043 : 1019042;  	Stam -= 10;  	RevealingAction ();  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (Stam == StamMax) {  	number = shoved._Hidden ? 1019043 : 1019042;  	Stam -= 10;  	RevealingAction ();  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: if (Stam == StamMax) {  	number = shoved._Hidden ? 1019043 : 1019042;  	Stam -= 10;  	RevealingAction ();  } else {  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: number = shoved._Hidden ? 1019043 : 1019042;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: number = shoved._Hidden ? 1019043 : 1019042;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckShove,The following statement contains a magic number: Stam -= 10;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Resurrect,The following statement contains a magic number: if (!Alive) {  	if (!Region.OnResurrect (this)) {  		return;  	}  	if (!CheckResurrect ()) {  		return;  	}  	OnBeforeResurrect ();  	BankBox box = FindBankNoCreate ();  	if (box != null && box.Opened) {  		box.Close ();  	}  	Poison = null;  	Warmode = false;  	Hits = 10;  	Stam = StamMax;  	Mana = 0;  	BodyMod = 0;  	Body = Race.AliveBody (this);  	ProcessDeltaQueue ();  	for (int i = _Items.Count - 1; i >= 0; --i) {  		if (i >= _Items.Count) {  			continue;  		}  		Item item = _Items [i];  		if (item.ItemID == 0x204E) {  			item.Delete ();  		}  	}  	SendIncomingPacket ();  	SendIncomingPacket ();  	OnAfterResurrect ();  	//Send( new DeathStatus( false ) );  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Resurrect,The following statement contains a magic number: Hits = 10;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetAttackSound,The following statement contains a magic number: if (_BaseSoundId != 0) {  	return _BaseSoundId + 2;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetAttackSound,The following statement contains a magic number: return _BaseSoundId + 2;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetHurtSound,The following statement contains a magic number: if (_BaseSoundId != 0) {  	return _BaseSoundId + 3;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetHurtSound,The following statement contains a magic number: return _BaseSoundId + 3;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: if (_BaseSoundId != 0) {  	return _BaseSoundId + 4;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: return _BaseSoundId + 4;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: if (_Body.IsHuman) {  	return Utility.Random (_Female ? 0x314 : 0x423' _Female ? 4 : 5);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: if (_Body.IsHuman) {  	return Utility.Random (_Female ? 0x314 : 0x423' _Female ? 4 : 5);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: return Utility.Random (_Female ? 0x314 : 0x423' _Female ? 4 : 5);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetDeathSound,The following statement contains a magic number: return Utility.Random (_Female ? 0x314 : 0x423' _Female ? 4 : 5);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.IsStaff () || Core.TickCount - from.NextActionTime >= 0) {  	if (from.CheckAlive ()) {  		from.DisruptiveAction ();  		if (from.Holding != null) {  			reject = LRReason.AreHolding;  		} else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  			reject = LRReason.OutOfRange;  		} else if (!from.CanSee (item) || !from.InLOS (item)) {  			reject = LRReason.OutOfSight;  		} else if (!item.VerifyMove (from)) {  			reject = LRReason.CannotLift;  		}   		#region Mondain's Legacy  		else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  			reject = LRReason.Inspecific;  			from.SendLocalizedMessage (1074868);  			// Stacks of quest items cannot be unstacked.  		}   		#endregion  		else if (!item.IsAccessibleTo (from)) {  			reject = LRReason.CannotLift;  		} else if (item.Nontransferable && amount != item.Amount) {  			if (item.QuestItem) {  				from.SendLocalizedMessage (1074868);  				// Stacks of quest items cannot be unstacked.  			}  			reject = LRReason.CannotLift;  		} else if (!item.CheckLift (from' item' ref reject)) {  		} else {  			object root = item.RootParent;  			if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  				reject = LRReason.TryToSteal;  			} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  				reject = LRReason.Inspecific;  			} else if (!from.CheckAlive ()) {  				reject = LRReason.Inspecific;  			} else {  				#region Enhance Client  				if (item.Parent != null && item.Parent is Container)  					((Container)item.Parent).FreePosition (item.GridLocation);  				#endregion  				item.SetLastMoved ();  				if (item.Spawner != null) {  					item.Spawner.Remove (item);  					item.Spawner = null;  				}  				if (amount == 0) {  					amount = 1;  				}  				if (amount > item.Amount) {  					amount = item.Amount;  				}  				int oldAmount = item.Amount;  				//item.Amount = amount; //Set in LiftItemDupe  				if (amount < oldAmount) {  					LiftItemDupe (item' amount);  				}  				//item.Dupe( oldAmount - amount );  				Map map = from.Map;  				if (_DragEffects && map != null && (root == null || root is Item)) {  					IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  					Packet p = null;  					foreach (NetState ns in eable) {  						if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  							if (p == null) {  								IEntity src;  								if (root == null) {  									src = new Entity (Serial.Zero' item.Location' map);  								} else {  									src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  								}  								p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  							}  							ns.Send (p);  						}  					}  					Packet.Release (p);  					eable.Free ();  				}  				Point3D fixLoc = item.Location;  				Map fixMap = item.Map;  				bool shouldFix = (item.Parent == null);  				item.RecordBounce ();  				item.OnItemLifted (from' item);  				item.Internalize ();  				from.Holding = item;  				int liftSound = item.GetLiftSound (from);  				if (liftSound != -1) {  					from.Send (new PlaySound (liftSound' from));  				}  				from.NextActionTime = Core.TickCount + _ActionDelay;  				if (fixMap != null && shouldFix) {  					fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  				}  				reject = LRReason.Inspecific;  				rejected = false;  			}  		}  	} else {  		reject = LRReason.Inspecific;  	}  } else {  	SendActionMessage ();  	reject = LRReason.Inspecific;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.IsStaff () || Core.TickCount - from.NextActionTime >= 0) {  	if (from.CheckAlive ()) {  		from.DisruptiveAction ();  		if (from.Holding != null) {  			reject = LRReason.AreHolding;  		} else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  			reject = LRReason.OutOfRange;  		} else if (!from.CanSee (item) || !from.InLOS (item)) {  			reject = LRReason.OutOfSight;  		} else if (!item.VerifyMove (from)) {  			reject = LRReason.CannotLift;  		}   		#region Mondain's Legacy  		else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  			reject = LRReason.Inspecific;  			from.SendLocalizedMessage (1074868);  			// Stacks of quest items cannot be unstacked.  		}   		#endregion  		else if (!item.IsAccessibleTo (from)) {  			reject = LRReason.CannotLift;  		} else if (item.Nontransferable && amount != item.Amount) {  			if (item.QuestItem) {  				from.SendLocalizedMessage (1074868);  				// Stacks of quest items cannot be unstacked.  			}  			reject = LRReason.CannotLift;  		} else if (!item.CheckLift (from' item' ref reject)) {  		} else {  			object root = item.RootParent;  			if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  				reject = LRReason.TryToSteal;  			} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  				reject = LRReason.Inspecific;  			} else if (!from.CheckAlive ()) {  				reject = LRReason.Inspecific;  			} else {  				#region Enhance Client  				if (item.Parent != null && item.Parent is Container)  					((Container)item.Parent).FreePosition (item.GridLocation);  				#endregion  				item.SetLastMoved ();  				if (item.Spawner != null) {  					item.Spawner.Remove (item);  					item.Spawner = null;  				}  				if (amount == 0) {  					amount = 1;  				}  				if (amount > item.Amount) {  					amount = item.Amount;  				}  				int oldAmount = item.Amount;  				//item.Amount = amount; //Set in LiftItemDupe  				if (amount < oldAmount) {  					LiftItemDupe (item' amount);  				}  				//item.Dupe( oldAmount - amount );  				Map map = from.Map;  				if (_DragEffects && map != null && (root == null || root is Item)) {  					IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  					Packet p = null;  					foreach (NetState ns in eable) {  						if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  							if (p == null) {  								IEntity src;  								if (root == null) {  									src = new Entity (Serial.Zero' item.Location' map);  								} else {  									src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  								}  								p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  							}  							ns.Send (p);  						}  					}  					Packet.Release (p);  					eable.Free ();  				}  				Point3D fixLoc = item.Location;  				Map fixMap = item.Map;  				bool shouldFix = (item.Parent == null);  				item.RecordBounce ();  				item.OnItemLifted (from' item);  				item.Internalize ();  				from.Holding = item;  				int liftSound = item.GetLiftSound (from);  				if (liftSound != -1) {  					from.Send (new PlaySound (liftSound' from));  				}  				from.NextActionTime = Core.TickCount + _ActionDelay;  				if (fixMap != null && shouldFix) {  					fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  				}  				reject = LRReason.Inspecific;  				rejected = false;  			}  		}  	} else {  		reject = LRReason.Inspecific;  	}  } else {  	SendActionMessage ();  	reject = LRReason.Inspecific;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.IsStaff () || Core.TickCount - from.NextActionTime >= 0) {  	if (from.CheckAlive ()) {  		from.DisruptiveAction ();  		if (from.Holding != null) {  			reject = LRReason.AreHolding;  		} else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  			reject = LRReason.OutOfRange;  		} else if (!from.CanSee (item) || !from.InLOS (item)) {  			reject = LRReason.OutOfSight;  		} else if (!item.VerifyMove (from)) {  			reject = LRReason.CannotLift;  		}   		#region Mondain's Legacy  		else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  			reject = LRReason.Inspecific;  			from.SendLocalizedMessage (1074868);  			// Stacks of quest items cannot be unstacked.  		}   		#endregion  		else if (!item.IsAccessibleTo (from)) {  			reject = LRReason.CannotLift;  		} else if (item.Nontransferable && amount != item.Amount) {  			if (item.QuestItem) {  				from.SendLocalizedMessage (1074868);  				// Stacks of quest items cannot be unstacked.  			}  			reject = LRReason.CannotLift;  		} else if (!item.CheckLift (from' item' ref reject)) {  		} else {  			object root = item.RootParent;  			if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  				reject = LRReason.TryToSteal;  			} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  				reject = LRReason.Inspecific;  			} else if (!from.CheckAlive ()) {  				reject = LRReason.Inspecific;  			} else {  				#region Enhance Client  				if (item.Parent != null && item.Parent is Container)  					((Container)item.Parent).FreePosition (item.GridLocation);  				#endregion  				item.SetLastMoved ();  				if (item.Spawner != null) {  					item.Spawner.Remove (item);  					item.Spawner = null;  				}  				if (amount == 0) {  					amount = 1;  				}  				if (amount > item.Amount) {  					amount = item.Amount;  				}  				int oldAmount = item.Amount;  				//item.Amount = amount; //Set in LiftItemDupe  				if (amount < oldAmount) {  					LiftItemDupe (item' amount);  				}  				//item.Dupe( oldAmount - amount );  				Map map = from.Map;  				if (_DragEffects && map != null && (root == null || root is Item)) {  					IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  					Packet p = null;  					foreach (NetState ns in eable) {  						if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  							if (p == null) {  								IEntity src;  								if (root == null) {  									src = new Entity (Serial.Zero' item.Location' map);  								} else {  									src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  								}  								p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  							}  							ns.Send (p);  						}  					}  					Packet.Release (p);  					eable.Free ();  				}  				Point3D fixLoc = item.Location;  				Map fixMap = item.Map;  				bool shouldFix = (item.Parent == null);  				item.RecordBounce ();  				item.OnItemLifted (from' item);  				item.Internalize ();  				from.Holding = item;  				int liftSound = item.GetLiftSound (from);  				if (liftSound != -1) {  					from.Send (new PlaySound (liftSound' from));  				}  				from.NextActionTime = Core.TickCount + _ActionDelay;  				if (fixMap != null && shouldFix) {  					fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  				}  				reject = LRReason.Inspecific;  				rejected = false;  			}  		}  	} else {  		reject = LRReason.Inspecific;  	}  } else {  	SendActionMessage ();  	reject = LRReason.Inspecific;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.CheckAlive ()) {  	from.DisruptiveAction ();  	if (from.Holding != null) {  		reject = LRReason.AreHolding;  	} else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  		reject = LRReason.OutOfRange;  	} else if (!from.CanSee (item) || !from.InLOS (item)) {  		reject = LRReason.OutOfSight;  	} else if (!item.VerifyMove (from)) {  		reject = LRReason.CannotLift;  	}   	#region Mondain's Legacy  	else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  		reject = LRReason.Inspecific;  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}   	#endregion  	else if (!item.IsAccessibleTo (from)) {  		reject = LRReason.CannotLift;  	} else if (item.Nontransferable && amount != item.Amount) {  		if (item.QuestItem) {  			from.SendLocalizedMessage (1074868);  			// Stacks of quest items cannot be unstacked.  		}  		reject = LRReason.CannotLift;  	} else if (!item.CheckLift (from' item' ref reject)) {  	} else {  		object root = item.RootParent;  		if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  			reject = LRReason.TryToSteal;  		} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  			reject = LRReason.Inspecific;  		} else if (!from.CheckAlive ()) {  			reject = LRReason.Inspecific;  		} else {  			#region Enhance Client  			if (item.Parent != null && item.Parent is Container)  				((Container)item.Parent).FreePosition (item.GridLocation);  			#endregion  			item.SetLastMoved ();  			if (item.Spawner != null) {  				item.Spawner.Remove (item);  				item.Spawner = null;  			}  			if (amount == 0) {  				amount = 1;  			}  			if (amount > item.Amount) {  				amount = item.Amount;  			}  			int oldAmount = item.Amount;  			//item.Amount = amount; //Set in LiftItemDupe  			if (amount < oldAmount) {  				LiftItemDupe (item' amount);  			}  			//item.Dupe( oldAmount - amount );  			Map map = from.Map;  			if (_DragEffects && map != null && (root == null || root is Item)) {  				IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  				Packet p = null;  				foreach (NetState ns in eable) {  					if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  						if (p == null) {  							IEntity src;  							if (root == null) {  								src = new Entity (Serial.Zero' item.Location' map);  							} else {  								src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  							}  							p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  						}  						ns.Send (p);  					}  				}  				Packet.Release (p);  				eable.Free ();  			}  			Point3D fixLoc = item.Location;  			Map fixMap = item.Map;  			bool shouldFix = (item.Parent == null);  			item.RecordBounce ();  			item.OnItemLifted (from' item);  			item.Internalize ();  			from.Holding = item;  			int liftSound = item.GetLiftSound (from);  			if (liftSound != -1) {  				from.Send (new PlaySound (liftSound' from));  			}  			from.NextActionTime = Core.TickCount + _ActionDelay;  			if (fixMap != null && shouldFix) {  				fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  			}  			reject = LRReason.Inspecific;  			rejected = false;  		}  	}  } else {  	reject = LRReason.Inspecific;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.CheckAlive ()) {  	from.DisruptiveAction ();  	if (from.Holding != null) {  		reject = LRReason.AreHolding;  	} else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  		reject = LRReason.OutOfRange;  	} else if (!from.CanSee (item) || !from.InLOS (item)) {  		reject = LRReason.OutOfSight;  	} else if (!item.VerifyMove (from)) {  		reject = LRReason.CannotLift;  	}   	#region Mondain's Legacy  	else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  		reject = LRReason.Inspecific;  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}   	#endregion  	else if (!item.IsAccessibleTo (from)) {  		reject = LRReason.CannotLift;  	} else if (item.Nontransferable && amount != item.Amount) {  		if (item.QuestItem) {  			from.SendLocalizedMessage (1074868);  			// Stacks of quest items cannot be unstacked.  		}  		reject = LRReason.CannotLift;  	} else if (!item.CheckLift (from' item' ref reject)) {  	} else {  		object root = item.RootParent;  		if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  			reject = LRReason.TryToSteal;  		} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  			reject = LRReason.Inspecific;  		} else if (!from.CheckAlive ()) {  			reject = LRReason.Inspecific;  		} else {  			#region Enhance Client  			if (item.Parent != null && item.Parent is Container)  				((Container)item.Parent).FreePosition (item.GridLocation);  			#endregion  			item.SetLastMoved ();  			if (item.Spawner != null) {  				item.Spawner.Remove (item);  				item.Spawner = null;  			}  			if (amount == 0) {  				amount = 1;  			}  			if (amount > item.Amount) {  				amount = item.Amount;  			}  			int oldAmount = item.Amount;  			//item.Amount = amount; //Set in LiftItemDupe  			if (amount < oldAmount) {  				LiftItemDupe (item' amount);  			}  			//item.Dupe( oldAmount - amount );  			Map map = from.Map;  			if (_DragEffects && map != null && (root == null || root is Item)) {  				IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  				Packet p = null;  				foreach (NetState ns in eable) {  					if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  						if (p == null) {  							IEntity src;  							if (root == null) {  								src = new Entity (Serial.Zero' item.Location' map);  							} else {  								src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  							}  							p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  						}  						ns.Send (p);  					}  				}  				Packet.Release (p);  				eable.Free ();  			}  			Point3D fixLoc = item.Location;  			Map fixMap = item.Map;  			bool shouldFix = (item.Parent == null);  			item.RecordBounce ();  			item.OnItemLifted (from' item);  			item.Internalize ();  			from.Holding = item;  			int liftSound = item.GetLiftSound (from);  			if (liftSound != -1) {  				from.Send (new PlaySound (liftSound' from));  			}  			from.NextActionTime = Core.TickCount + _ActionDelay;  			if (fixMap != null && shouldFix) {  				fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  			}  			reject = LRReason.Inspecific;  			rejected = false;  		}  	}  } else {  	reject = LRReason.Inspecific;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.CheckAlive ()) {  	from.DisruptiveAction ();  	if (from.Holding != null) {  		reject = LRReason.AreHolding;  	} else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  		reject = LRReason.OutOfRange;  	} else if (!from.CanSee (item) || !from.InLOS (item)) {  		reject = LRReason.OutOfSight;  	} else if (!item.VerifyMove (from)) {  		reject = LRReason.CannotLift;  	}   	#region Mondain's Legacy  	else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  		reject = LRReason.Inspecific;  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}   	#endregion  	else if (!item.IsAccessibleTo (from)) {  		reject = LRReason.CannotLift;  	} else if (item.Nontransferable && amount != item.Amount) {  		if (item.QuestItem) {  			from.SendLocalizedMessage (1074868);  			// Stacks of quest items cannot be unstacked.  		}  		reject = LRReason.CannotLift;  	} else if (!item.CheckLift (from' item' ref reject)) {  	} else {  		object root = item.RootParent;  		if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  			reject = LRReason.TryToSteal;  		} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  			reject = LRReason.Inspecific;  		} else if (!from.CheckAlive ()) {  			reject = LRReason.Inspecific;  		} else {  			#region Enhance Client  			if (item.Parent != null && item.Parent is Container)  				((Container)item.Parent).FreePosition (item.GridLocation);  			#endregion  			item.SetLastMoved ();  			if (item.Spawner != null) {  				item.Spawner.Remove (item);  				item.Spawner = null;  			}  			if (amount == 0) {  				amount = 1;  			}  			if (amount > item.Amount) {  				amount = item.Amount;  			}  			int oldAmount = item.Amount;  			//item.Amount = amount; //Set in LiftItemDupe  			if (amount < oldAmount) {  				LiftItemDupe (item' amount);  			}  			//item.Dupe( oldAmount - amount );  			Map map = from.Map;  			if (_DragEffects && map != null && (root == null || root is Item)) {  				IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  				Packet p = null;  				foreach (NetState ns in eable) {  					if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  						if (p == null) {  							IEntity src;  							if (root == null) {  								src = new Entity (Serial.Zero' item.Location' map);  							} else {  								src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  							}  							p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  						}  						ns.Send (p);  					}  				}  				Packet.Release (p);  				eable.Free ();  			}  			Point3D fixLoc = item.Location;  			Map fixMap = item.Map;  			bool shouldFix = (item.Parent == null);  			item.RecordBounce ();  			item.OnItemLifted (from' item);  			item.Internalize ();  			from.Holding = item;  			int liftSound = item.GetLiftSound (from);  			if (liftSound != -1) {  				from.Send (new PlaySound (liftSound' from));  			}  			from.NextActionTime = Core.TickCount + _ActionDelay;  			if (fixMap != null && shouldFix) {  				fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  			}  			reject = LRReason.Inspecific;  			rejected = false;  		}  	}  } else {  	reject = LRReason.Inspecific;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.Holding != null) {  	reject = LRReason.AreHolding;  } else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  	reject = LRReason.OutOfRange;  } else if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.Holding != null) {  	reject = LRReason.AreHolding;  } else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  	reject = LRReason.OutOfRange;  } else if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.Holding != null) {  	reject = LRReason.AreHolding;  } else if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  	reject = LRReason.OutOfRange;  } else if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  	reject = LRReason.OutOfRange;  } else if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  	reject = LRReason.OutOfRange;  } else if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (from.AccessLevel < AccessLevel.GameMaster && !from.InRange (item.GetWorldLocation ()' 2)) {  	reject = LRReason.OutOfRange;  } else if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (!from.CanSee (item) || !from.InLOS (item)) {  	reject = LRReason.OutOfSight;  } else if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (!item.VerifyMove (from)) {  	reject = LRReason.CannotLift;  }   #region Mondain's Legacy  else if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (item.QuestItem && amount != item.Amount && !from.IsStaff ()) {  	reject = LRReason.Inspecific;  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }   #endregion  else if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: from.SendLocalizedMessage (1074868);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (!item.IsAccessibleTo (from)) {  	reject = LRReason.CannotLift;  } else if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (item.Nontransferable && amount != item.Amount) {  	if (item.QuestItem) {  		from.SendLocalizedMessage (1074868);  		// Stacks of quest items cannot be unstacked.  	}  	reject = LRReason.CannotLift;  } else if (!item.CheckLift (from' item' ref reject)) {  } else {  	object root = item.RootParent;  	if (root != null && root is Mobile && !((Mobile)root).CheckNonlocalLift (from' item)) {  		reject = LRReason.TryToSteal;  	} else if (!from.OnDragLift (item) || !item.OnDragLift (from)) {  		reject = LRReason.Inspecific;  	} else if (!from.CheckAlive ()) {  		reject = LRReason.Inspecific;  	} else {  		#region Enhance Client  		if (item.Parent != null && item.Parent is Container)  			((Container)item.Parent).FreePosition (item.GridLocation);  		#endregion  		item.SetLastMoved ();  		if (item.Spawner != null) {  			item.Spawner.Remove (item);  			item.Spawner = null;  		}  		if (amount == 0) {  			amount = 1;  		}  		if (amount > item.Amount) {  			amount = item.Amount;  		}  		int oldAmount = item.Amount;  		//item.Amount = amount; //Set in LiftItemDupe  		if (amount < oldAmount) {  			LiftItemDupe (item' amount);  		}  		//item.Dupe( oldAmount - amount );  		Map map = from.Map;  		if (_DragEffects && map != null && (root == null || root is Item)) {  			IPooledEnumerable<NetState> eable = map.GetClientsInRange (from.Location);  			Packet p = null;  			foreach (NetState ns in eable) {  				if (ns.Mobile != from && ns.Mobile.CanSee (from) && ns.Mobile.InLOS (from) && ns.Mobile.CanSee (root)) {  					if (p == null) {  						IEntity src;  						if (root == null) {  							src = new Entity (Serial.Zero' item.Location' map);  						} else {  							src = new Entity (((Item)root).Serial' ((Item)root).Location' map);  						}  						p = Packet.Acquire (new DragEffect (src' from' item.ItemID' item.Hue' amount));  					}  					ns.Send (p);  				}  			}  			Packet.Release (p);  			eable.Free ();  		}  		Point3D fixLoc = item.Location;  		Map fixMap = item.Map;  		bool shouldFix = (item.Parent == null);  		item.RecordBounce ();  		item.OnItemLifted (from' item);  		item.Internalize ();  		from.Holding = item;  		int liftSound = item.GetLiftSound (from);  		if (liftSound != -1) {  			from.Send (new PlaySound (liftSound' from));  		}  		from.NextActionTime = Core.TickCount + _ActionDelay;  		if (fixMap != null && shouldFix) {  			fixMap.FixColumn (fixLoc.m_X' fixLoc.m_Y);  		}  		reject = LRReason.Inspecific;  		rejected = false;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: if (item.QuestItem) {  	from.SendLocalizedMessage (1074868);  	// Stacks of quest items cannot be unstacked.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Lift,The following statement contains a magic number: from.SendLocalizedMessage (1074868);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (_Map != null) {  	IPooledEnumerable<IEntity> eable = _Map.GetObjectsInRange (_Location' range);  	foreach (IEntity o in eable) {  		if (o is Mobile) {  			var heard = (Mobile)o;  			if (heard.CanSee (this) && (_NoSpeechLOS || !heard.Player || heard.InLOS (this))) {  				if (heard._NetState != null) {  					hears.Add (heard);  				}  				if (heard.HandlesOnSpeech (this)) {  					onSpeech.Add (heard);  				}  				for (int i = 0; i < heard.Items.Count; ++i) {  					Item item = heard.Items [i];  					if (item.HandlesOnSpeech) {  						onSpeech.Add (item);  					}  					if (item is Container) {  						AddSpeechItemsFrom (onSpeech' (Container)item);  					}  				}  			}  		} else if (o is Item) {  			if (((Item)o).HandlesOnSpeech) {  				onSpeech.Add (o);  			}  			if (o is Container) {  				AddSpeechItemsFrom (onSpeech' (Container)o);  			}  		}  	}  	eable.Free ();  	object mutateContext = null;  	string mutatedText = text;  	SpeechEventArgs mutatedArgs = null;  	if (MutateSpeech (hears' ref mutatedText' ref mutateContext)) {  		mutatedArgs = new SpeechEventArgs (this' mutatedText' type' hue' new int[0]);  	}  	CheckSpeechManifest ();  	ProcessDelta ();  	Packet regp = null;  	Packet mutp = null;  	for (int i = 0; i < hears.Count; ++i) {  		Mobile heard = hears [i];  		if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  			heard.OnSpeech (regArgs);  			NetState ns = heard.NetState;  			if (ns != null) {  				if (regp == null) {  					regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  				}  				ns.Send (regp);  			}  		} else {  			heard.OnSpeech (mutatedArgs);  			NetState ns = heard.NetState;  			if (ns != null) {  				if (mutp == null) {  					mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  				}  				ns.Send (mutp);  			}  		}  	}  	Packet.Release (regp);  	Packet.Release (mutp);  	if (onSpeech.Count > 1) {  		onSpeech.Sort (LocationComparer.GetInstance (this));  	}  	for (int i = 0; i < onSpeech.Count; ++i) {  		IEntity obj = onSpeech [i];  		if (obj is Mobile) {  			var heard = (Mobile)obj;  			if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  				heard.OnSpeech (regArgs);  			} else {  				heard.OnSpeech (mutatedArgs);  			}  		} else {  			var item = (Item)obj;  			item.OnSpeech (regArgs);  		}  	}  	if (_Hears.Count > 0) {  		_Hears.Clear ();  	}  	if (_OnSpeech.Count > 0) {  		_OnSpeech.Clear ();  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (_Map != null) {  	IPooledEnumerable<IEntity> eable = _Map.GetObjectsInRange (_Location' range);  	foreach (IEntity o in eable) {  		if (o is Mobile) {  			var heard = (Mobile)o;  			if (heard.CanSee (this) && (_NoSpeechLOS || !heard.Player || heard.InLOS (this))) {  				if (heard._NetState != null) {  					hears.Add (heard);  				}  				if (heard.HandlesOnSpeech (this)) {  					onSpeech.Add (heard);  				}  				for (int i = 0; i < heard.Items.Count; ++i) {  					Item item = heard.Items [i];  					if (item.HandlesOnSpeech) {  						onSpeech.Add (item);  					}  					if (item is Container) {  						AddSpeechItemsFrom (onSpeech' (Container)item);  					}  				}  			}  		} else if (o is Item) {  			if (((Item)o).HandlesOnSpeech) {  				onSpeech.Add (o);  			}  			if (o is Container) {  				AddSpeechItemsFrom (onSpeech' (Container)o);  			}  		}  	}  	eable.Free ();  	object mutateContext = null;  	string mutatedText = text;  	SpeechEventArgs mutatedArgs = null;  	if (MutateSpeech (hears' ref mutatedText' ref mutateContext)) {  		mutatedArgs = new SpeechEventArgs (this' mutatedText' type' hue' new int[0]);  	}  	CheckSpeechManifest ();  	ProcessDelta ();  	Packet regp = null;  	Packet mutp = null;  	for (int i = 0; i < hears.Count; ++i) {  		Mobile heard = hears [i];  		if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  			heard.OnSpeech (regArgs);  			NetState ns = heard.NetState;  			if (ns != null) {  				if (regp == null) {  					regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  				}  				ns.Send (regp);  			}  		} else {  			heard.OnSpeech (mutatedArgs);  			NetState ns = heard.NetState;  			if (ns != null) {  				if (mutp == null) {  					mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  				}  				ns.Send (mutp);  			}  		}  	}  	Packet.Release (regp);  	Packet.Release (mutp);  	if (onSpeech.Count > 1) {  		onSpeech.Sort (LocationComparer.GetInstance (this));  	}  	for (int i = 0; i < onSpeech.Count; ++i) {  		IEntity obj = onSpeech [i];  		if (obj is Mobile) {  			var heard = (Mobile)obj;  			if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  				heard.OnSpeech (regArgs);  			} else {  				heard.OnSpeech (mutatedArgs);  			}  		} else {  			var item = (Item)obj;  			item.OnSpeech (regArgs);  		}  	}  	if (_Hears.Count > 0) {  		_Hears.Clear ();  	}  	if (_OnSpeech.Count > 0) {  		_OnSpeech.Clear ();  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: for (int i = 0; i < hears.Count; ++i) {  	Mobile heard = hears [i];  	if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  		heard.OnSpeech (regArgs);  		NetState ns = heard.NetState;  		if (ns != null) {  			if (regp == null) {  				regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  			}  			ns.Send (regp);  		}  	} else {  		heard.OnSpeech (mutatedArgs);  		NetState ns = heard.NetState;  		if (ns != null) {  			if (mutp == null) {  				mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  			}  			ns.Send (mutp);  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: for (int i = 0; i < hears.Count; ++i) {  	Mobile heard = hears [i];  	if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  		heard.OnSpeech (regArgs);  		NetState ns = heard.NetState;  		if (ns != null) {  			if (regp == null) {  				regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  			}  			ns.Send (regp);  		}  	} else {  		heard.OnSpeech (mutatedArgs);  		NetState ns = heard.NetState;  		if (ns != null) {  			if (mutp == null) {  				mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  			}  			ns.Send (mutp);  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  	heard.OnSpeech (regArgs);  	NetState ns = heard.NetState;  	if (ns != null) {  		if (regp == null) {  			regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  		}  		ns.Send (regp);  	}  } else {  	heard.OnSpeech (mutatedArgs);  	NetState ns = heard.NetState;  	if (ns != null) {  		if (mutp == null) {  			mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  		}  		ns.Send (mutp);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (mutatedArgs == null || !CheckHearsMutatedSpeech (heard' mutateContext)) {  	heard.OnSpeech (regArgs);  	NetState ns = heard.NetState;  	if (ns != null) {  		if (regp == null) {  			regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  		}  		ns.Send (regp);  	}  } else {  	heard.OnSpeech (mutatedArgs);  	NetState ns = heard.NetState;  	if (ns != null) {  		if (mutp == null) {  			mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  		}  		ns.Send (mutp);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (ns != null) {  	if (regp == null) {  		regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  	}  	ns.Send (regp);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (regp == null) {  	regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: regp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (ns != null) {  	if (mutp == null) {  		mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  	}  	ns.Send (mutp);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: if (mutp == null) {  	mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DoSpeech,The following statement contains a magic number: mutp = Packet.Acquire (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' mutatedText));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Heal,The following statement contains a magic number: if (message && amount > 0 && _NetState != null) {  	_NetState.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString ()' ""));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Heal,The following statement contains a magic number: if (message && amount > 0 && _NetState != null) {  	_NetState.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString ()' ""));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Heal,The following statement contains a magic number: _NetState.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString ()' ""));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Heal,The following statement contains a magic number: _NetState.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Label' 0x3B2' 3' 1008158' ""' AffixType.Append | AffixType.System' amount.ToString ()' ""));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,UsedStuckMenu,The following statement contains a magic number: if (_StuckMenuUses == null) {  	_StuckMenuUses = new DateTime[2];  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,UsedStuckMenu,The following statement contains a magic number: _StuckMenuUses = new DateTime[2];  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 32;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 31;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 30;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 29;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 28;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version <= 30) {  	LastStatGain = reader.ReadDeltaTime ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 27;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 26;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 23;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 22;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 20;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 19;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 17;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 16;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version <= 24) {  	reader.ReadDateTime ();  	reader.ReadDateTime ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 15;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 22) {  	reader.ReadInt ();  	// followers  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 14;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 13;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 12;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 11;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 10;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 9;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 8;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 7;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 6;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 5;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 4;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version <= 25) {  	Poison.Deserialize (reader);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 3;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: goto case 2;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 21) {  	_Stabled = new List<Mobile> ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 18) {  	_Virtues = new VirtueInfo ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 11) {  	_DisplayGuildTitle = true;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 3) {  	_StatCap = 225;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 3) {  	_StatCap = 225;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: _StatCap = 225;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 15) {  	_Followers = 0;  	_FollowersMax = 5;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version < 15) {  	_Followers = 0;  	_FollowersMax = 5;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: _FollowersMax = 5;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (version <= 18) {  	reader.ReadInt ();  	reader.ReadInt ();  	reader.ReadInt ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following statement contains a magic number: if (!_Player && _Dex <= 100 && _CombatTimer != null) {  	_CombatTimer.Priority = TimerPriority.FiftyMS;  } else if (_CombatTimer != null) {  	_CombatTimer.Priority = TimerPriority.EveryTick;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Serialize,The following statement contains a magic number: writer.Write (33);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (map != null) {  	ProcessDelta ();  	Packet p = null;  	//Packet pNew = null;  	IPooledEnumerable<NetState> eable = map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this)) {  			state.Mobile.ProcessDelta ();  			if (p == null) {  				#region SA  				if (Body.IsGargoyle) {  					frameCount = 10;  					if (Flying) {  						if (action >= 200 && action <= 270) {  							action = 75;  						} else {  							switch (action) {  							case 9:  							case 10:  							case 11:  								action = 71;  								break;  							case 12:  							case 13:  							case 14:  								action = 72;  								break;  							case 18:  							case 19:  								action = 71;  								break;  							case 20:  								action = 77;  								break;  							case 31:  								action = 71;  								break;  							case 34:  								action = 78;  								break;  							}  						}  					} else {  						if (action >= 260 && action <= 270) {  							action = 16;  						} else if (action >= 200 && action < 260) {  							action = 17;  						} else {  							switch (action) {  							case 9:  								action = 13;  								break;  							case 10:  								action = 14;  								break;  							case 11:  								action = 13;  								break;  							case 12:  							case 13:  							case 14:  								action = 12;  								break;  							case 18:  							case 19:  								action = 9;  								break;  							}  						}  					}  				}  				#endregion  				p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  			}  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: foreach (NetState state in eable) {  	if (state.Mobile.CanSee (this)) {  		state.Mobile.ProcessDelta ();  		if (p == null) {  			#region SA  			if (Body.IsGargoyle) {  				frameCount = 10;  				if (Flying) {  					if (action >= 200 && action <= 270) {  						action = 75;  					} else {  						switch (action) {  						case 9:  						case 10:  						case 11:  							action = 71;  							break;  						case 12:  						case 13:  						case 14:  							action = 72;  							break;  						case 18:  						case 19:  							action = 71;  							break;  						case 20:  							action = 77;  							break;  						case 31:  							action = 71;  							break;  						case 34:  							action = 78;  							break;  						}  					}  				} else {  					if (action >= 260 && action <= 270) {  						action = 16;  					} else if (action >= 200 && action < 260) {  						action = 17;  					} else {  						switch (action) {  						case 9:  							action = 13;  							break;  						case 10:  							action = 14;  							break;  						case 11:  							action = 13;  							break;  						case 12:  						case 13:  						case 14:  							action = 12;  							break;  						case 18:  						case 19:  							action = 9;  							break;  						}  					}  				}  			}  			#endregion  			p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  		}  		state.Send (p);  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (state.Mobile.CanSee (this)) {  	state.Mobile.ProcessDelta ();  	if (p == null) {  		#region SA  		if (Body.IsGargoyle) {  			frameCount = 10;  			if (Flying) {  				if (action >= 200 && action <= 270) {  					action = 75;  				} else {  					switch (action) {  					case 9:  					case 10:  					case 11:  						action = 71;  						break;  					case 12:  					case 13:  					case 14:  						action = 72;  						break;  					case 18:  					case 19:  						action = 71;  						break;  					case 20:  						action = 77;  						break;  					case 31:  						action = 71;  						break;  					case 34:  						action = 78;  						break;  					}  				}  			} else {  				if (action >= 260 && action <= 270) {  					action = 16;  				} else if (action >= 200 && action < 260) {  					action = 17;  				} else {  					switch (action) {  					case 9:  						action = 13;  						break;  					case 10:  						action = 14;  						break;  					case 11:  						action = 13;  						break;  					case 12:  					case 13:  					case 14:  						action = 12;  						break;  					case 18:  					case 19:  						action = 9;  						break;  					}  				}  			}  		}  		#endregion  		p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  	}  	state.Send (p);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (p == null) {  	#region SA  	if (Body.IsGargoyle) {  		frameCount = 10;  		if (Flying) {  			if (action >= 200 && action <= 270) {  				action = 75;  			} else {  				switch (action) {  				case 9:  				case 10:  				case 11:  					action = 71;  					break;  				case 12:  				case 13:  				case 14:  					action = 72;  					break;  				case 18:  				case 19:  					action = 71;  					break;  				case 20:  					action = 77;  					break;  				case 31:  					action = 71;  					break;  				case 34:  					action = 78;  					break;  				}  			}  		} else {  			if (action >= 260 && action <= 270) {  				action = 16;  			} else if (action >= 200 && action < 260) {  				action = 17;  			} else {  				switch (action) {  				case 9:  					action = 13;  					break;  				case 10:  					action = 14;  					break;  				case 11:  					action = 13;  					break;  				case 12:  				case 13:  				case 14:  					action = 12;  					break;  				case 18:  				case 19:  					action = 9;  					break;  				}  			}  		}  	}  	#endregion  	p = Packet.Acquire (new MobileAnimation (this' action' frameCount' repeatCount' forward' repeat' delay));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Body.IsGargoyle) {  	frameCount = 10;  	if (Flying) {  		if (action >= 200 && action <= 270) {  			action = 75;  		} else {  			switch (action) {  			case 9:  			case 10:  			case 11:  				action = 71;  				break;  			case 12:  			case 13:  			case 14:  				action = 72;  				break;  			case 18:  			case 19:  				action = 71;  				break;  			case 20:  				action = 77;  				break;  			case 31:  				action = 71;  				break;  			case 34:  				action = 78;  				break;  			}  		}  	} else {  		if (action >= 260 && action <= 270) {  			action = 16;  		} else if (action >= 200 && action < 260) {  			action = 17;  		} else {  			switch (action) {  			case 9:  				action = 13;  				break;  			case 10:  				action = 14;  				break;  			case 11:  				action = 13;  				break;  			case 12:  			case 13:  			case 14:  				action = 12;  				break;  			case 18:  			case 19:  				action = 9;  				break;  			}  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: frameCount = 10;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (Flying) {  	if (action >= 200 && action <= 270) {  		action = 75;  	} else {  		switch (action) {  		case 9:  		case 10:  		case 11:  			action = 71;  			break;  		case 12:  		case 13:  		case 14:  			action = 72;  			break;  		case 18:  		case 19:  			action = 71;  			break;  		case 20:  			action = 77;  			break;  		case 31:  			action = 71;  			break;  		case 34:  			action = 78;  			break;  		}  	}  } else {  	if (action >= 260 && action <= 270) {  		action = 16;  	} else if (action >= 200 && action < 260) {  		action = 17;  	} else {  		switch (action) {  		case 9:  			action = 13;  			break;  		case 10:  			action = 14;  			break;  		case 11:  			action = 13;  			break;  		case 12:  		case 13:  		case 14:  			action = 12;  			break;  		case 18:  		case 19:  			action = 9;  			break;  		}  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action <= 270) {  	action = 75;  } else {  	switch (action) {  	case 9:  	case 10:  	case 11:  		action = 71;  		break;  	case 12:  	case 13:  	case 14:  		action = 72;  		break;  	case 18:  	case 19:  		action = 71;  		break;  	case 20:  		action = 77;  		break;  	case 31:  		action = 71;  		break;  	case 34:  		action = 78;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 75;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 71;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 72;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 71;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 77;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 71;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 78;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 260 && action <= 270) {  	action = 16;  } else if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 16;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: if (action >= 200 && action < 260) {  	action = 17;  } else {  	switch (action) {  	case 9:  		action = 13;  		break;  	case 10:  		action = 14;  		break;  	case 11:  		action = 13;  		break;  	case 12:  	case 13:  	case 14:  		action = 12;  		break;  	case 18:  	case 19:  		action = 9;  		break;  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 17;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 13;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 14;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 13;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 12;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following statement contains a magic number: action = 9;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SayTo,The following statement contains a magic number: to.Send (new MessageLocalized (_Serial' Body' MessageType.Regular' _SpeechHue' 3' number' Name' ""));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SayTo,The following statement contains a magic number: to.Send (new MessageLocalized (_Serial' Body' MessageType.Regular' _SpeechHue' 3' number' Name' args));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSaid,The following statement contains a magic number: if (_Squelched) {  	if (Core.ML) {  		SendLocalizedMessage (500168);  		// You can not say anything' you have been muted.  	} else {  		SendMessage ("You can not say anything' you have been squelched.");  		//Cliloc ITSELF changed during ML.  	}  	e.Blocked = true;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSaid,The following statement contains a magic number: if (Core.ML) {  	SendLocalizedMessage (500168);  	// You can not say anything' you have been muted.  } else {  	SendMessage ("You can not say anything' you have been squelched.");  	//Cliloc ITSELF changed during ML.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSaid,The following statement contains a magic number: SendLocalizedMessage (500168);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: if (_Deleted || target._Deleted || !Alive || IsDeadBondedPet || (!allowDead && (!target.Alive || target.IsDeadBondedPet))) {  	if (message) {  		SendLocalizedMessage (1001017);  		// You can not perform beneficial acts on your target.  	}  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: if (message) {  	SendLocalizedMessage (1001017);  	// You can not perform beneficial acts on your target.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: SendLocalizedMessage (1001017);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: if (/*_Player &&*/!Region.AllowBeneficial (this' target)) {  	// TODO: Pets  	//if ( !(target._Player || target.Body.IsHuman || target.Body.IsAnimal) )  	//{  	if (message) {  		SendLocalizedMessage (1001017);  		// You can not perform beneficial acts on your target.  	}  	return false;  	//}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: if (message) {  	SendLocalizedMessage (1001017);  	// You can not perform beneficial acts on your target.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeBeneficial,The following statement contains a magic number: SendLocalizedMessage (1001017);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: if (_Deleted || (!ignoreOurBlessedness && _Blessed) || target._Deleted || target._Blessed || !Alive || IsDeadBondedPet || !target.Alive || target.IsDeadBondedPet) {  	if (message) {  		SendLocalizedMessage (1001018);  		// You can not perform negative acts on your target.  	}  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: if (message) {  	SendLocalizedMessage (1001018);  	// You can not perform negative acts on your target.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: SendLocalizedMessage (1001018);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: if (/*_Player &&*/!Region.AllowHarmful (this' target))//(target._Player || target.Body.IsHuman) && !Region.AllowHarmful( this' target )  )   {  	if (message) {  		SendLocalizedMessage (1001018);  		// You can not perform negative acts on your target.  	}  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: if (message) {  	SendLocalizedMessage (1001018);  	// You can not perform negative acts on your target.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanBeHarmful,The following statement contains a magic number: SendLocalizedMessage (1001018);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CanSee,The following statement contains a magic number: return this == m || (m._Map == _Map && (!m.Hidden || (IsStaff () && _AccessLevel >= m.AccessLevel)) && ((m.Alive || (Core.SE && Skills.SpiritSpeak.Value >= 100.0)) || !Alive || IsStaff () || m.Warmode));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisonImmunity,The following statement contains a magic number: PublicOverheadMessage (MessageType.Emote' 0x3B2' 1005534);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if (poison != null) {  	#region Mondain's Legacy  	LocalOverheadMessage (MessageType.Regular' 0x21' 1042857 + (poison.RealLevel * 2));  	NonlocalOverheadMessage (MessageType.Regular' 0x21' 1042858 + (poison.RealLevel * 2)' Name);  	#endregion  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if (poison != null) {  	#region Mondain's Legacy  	LocalOverheadMessage (MessageType.Regular' 0x21' 1042857 + (poison.RealLevel * 2));  	NonlocalOverheadMessage (MessageType.Regular' 0x21' 1042858 + (poison.RealLevel * 2)' Name);  	#endregion  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if (poison != null) {  	#region Mondain's Legacy  	LocalOverheadMessage (MessageType.Regular' 0x21' 1042857 + (poison.RealLevel * 2));  	NonlocalOverheadMessage (MessageType.Regular' 0x21' 1042858 + (poison.RealLevel * 2)' Name);  	#endregion  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: if (poison != null) {  	#region Mondain's Legacy  	LocalOverheadMessage (MessageType.Regular' 0x21' 1042857 + (poison.RealLevel * 2));  	NonlocalOverheadMessage (MessageType.Regular' 0x21' 1042858 + (poison.RealLevel * 2)' Name);  	#endregion  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: LocalOverheadMessage (MessageType.Regular' 0x21' 1042857 + (poison.RealLevel * 2));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: LocalOverheadMessage (MessageType.Regular' 0x21' 1042857 + (poison.RealLevel * 2));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: NonlocalOverheadMessage (MessageType.Regular' 0x21' 1042858 + (poison.RealLevel * 2)' Name);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnPoisoned,The following statement contains a magic number: NonlocalOverheadMessage (MessageType.Regular' 0x21' 1042858 + (poison.RealLevel * 2)' Name);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,MovingParticles,The following statement contains a magic number: Effects.SendMovingParticles (this' to' itemID' speed' duration' fixedDirection' explodes' hue' renderMode' effect' explodeEffect' explodeSound' (EffectLayer)255' unknown);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnDragDrop,The following statement contains a magic number: if (from.InRange (Location' 2)) {  	return OpenTrade (from' dropped);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnEquip,The following statement contains a magic number: if (item.QuestItem) {  	item.QuestItem = false;  	SendLocalizedMessage (1074769);  	// An item must be in your backpack (and not in a container within) to be toggled as a quest item.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnEquip,The following statement contains a magic number: SendLocalizedMessage (1074769);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DefaultMobileInit,The following statement contains a magic number: _StatCap = 225;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DefaultMobileInit,The following statement contains a magic number: _FollowersMax = 5;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,ProcessDeltaQueue,The following statement contains a magic number: if (_DeltaQueue.Count >= 512) {  	Parallel.ForEach (_DeltaQueue' m => m.ProcessDelta ());  	_DeltaQueue.Clear ();  } else {  	while (_DeltaQueue.Count > 0) {  		_DeltaQueue.Dequeue ().ProcessDelta ();  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckAlive,The following statement contains a magic number: if (!Alive) {  	if (message) {  		LocalOverheadMessage (MessageType.Regular' 0x3B2' 1019048);  		// I am dead and cannot do that.  	}  	return false;  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckAlive,The following statement contains a magic number: if (message) {  	LocalOverheadMessage (MessageType.Regular' 0x3B2' 1019048);  	// I am dead and cannot do that.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,CheckAlive,The following statement contains a magic number: LocalOverheadMessage (MessageType.Regular' 0x3B2' 1019048);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if (_Map != null) {  	Packet p = null;  	if (ascii) {  		p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  	} else {  		p = new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text);  	}  	p.Acquire ();  	IPooledEnumerable<NetState> eable = _Map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this) && (noLineOfSight || state.Mobile.InLOS (this))) {  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if (_Map != null) {  	Packet p = null;  	if (ascii) {  		p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  	} else {  		p = new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text);  	}  	p.Acquire ();  	IPooledEnumerable<NetState> eable = _Map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this) && (noLineOfSight || state.Mobile.InLOS (this))) {  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  } else {  	p = new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  } else {  	p = new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: p = new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if (_Map != null) {  	Packet p = Packet.Acquire (new MessageLocalized (_Serial' Body' type' hue' 3' number' Name' args));  	IPooledEnumerable<NetState> eable = _Map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this) && (noLineOfSight || state.Mobile.InLOS (this))) {  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PublicOverheadMessage,The following statement contains a magic number: if (_Map != null) {  	Packet p = Packet.Acquire (new MessageLocalizedAffix (_Serial' Body' type' hue' 3' number' Name' affixType' affix' args));  	IPooledEnumerable<NetState> eable = _Map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state.Mobile.CanSee (this) && (noLineOfSight || state.Mobile.InLOS (this))) {  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: if (ascii) {  	state.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  } else {  	state.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: if (ascii) {  	state.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  } else {  	state.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: state.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: state.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,PrivateOverheadMessage,The following statement contains a magic number: state.Send (new MessageLocalized (_Serial' Body' type' hue' 3' number' Name' args));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if (ns != null) {  	if (ascii) {  		ns.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  	} else {  		ns.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if (ns != null) {  	if (ascii) {  		ns.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  	} else {  		ns.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if (ascii) {  	ns.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  } else {  	ns.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if (ascii) {  	ns.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  } else {  	ns.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: ns.Send (new AsciiMessage (_Serial' Body' type' hue' 3' Name' text));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: ns.Send (new UnicodeMessage (_Serial' Body' type' hue' 3' _Language' Name' text));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: if (ns != null) {  	ns.Send (new MessageLocalized (_Serial' Body' type' hue' 3' number' Name' args));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,LocalOverheadMessage,The following statement contains a magic number: ns.Send (new MessageLocalized (_Serial' Body' type' hue' 3' number' Name' args));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if (_Map != null) {  	Packet p = Packet.Acquire (new MessageLocalized (_Serial' Body' type' hue' 3' number' Name' args));  	IPooledEnumerable<NetState> eable = _Map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state != _NetState && state.Mobile.CanSee (this)) {  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if (_Map != null) {  	Packet p = null;  	if (ascii) {  		p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  	} else {  		p = new UnicodeMessage (_Serial' Body' type' hue' 3' Language' Name' text);  	}  	p.Acquire ();  	IPooledEnumerable<NetState> eable = _Map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state != _NetState && state.Mobile.CanSee (this)) {  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if (_Map != null) {  	Packet p = null;  	if (ascii) {  		p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  	} else {  		p = new UnicodeMessage (_Serial' Body' type' hue' 3' Language' Name' text);  	}  	p.Acquire ();  	IPooledEnumerable<NetState> eable = _Map.GetClientsInRange (_Location);  	foreach (NetState state in eable) {  		if (state != _NetState && state.Mobile.CanSee (this)) {  			state.Send (p);  		}  	}  	Packet.Release (p);  	eable.Free ();  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  } else {  	p = new UnicodeMessage (_Serial' Body' type' hue' 3' Language' Name' text);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  } else {  	p = new UnicodeMessage (_Serial' Body' type' hue' 3' Language' Name' text);  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: p = new AsciiMessage (_Serial' Body' type' hue' 3' Name' text);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,NonlocalOverheadMessage,The following statement contains a magic number: p = new UnicodeMessage (_Serial' Body' type' hue' 3' Language' Name' text);  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendLocalizedMessage,The following statement contains a magic number: if (hue == 0x3B2 && (args == null || args.Length == 0)) {  	NetState ns = _NetState;  	if (ns != null) {  		ns.Send (MessageLocalized.InstantiateGeneric (number));  	}  } else {  	NetState ns = _NetState;  	if (ns != null) {  		ns.Send (new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' args));  	}  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendLocalizedMessage,The following statement contains a magic number: if (ns != null) {  	ns.Send (new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' args));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendLocalizedMessage,The following statement contains a magic number: ns.Send (new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' args));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendLocalizedMessage,The following statement contains a magic number: if (ns != null) {  	ns.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' (append ? AffixType.Append : AffixType.Prepend) | AffixType.System' affix' args));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendLocalizedMessage,The following statement contains a magic number: ns.Send (new MessageLocalizedAffix (Serial.MinusOne' -1' MessageType.Regular' hue' 3' number' "System"' (append ? AffixType.Append : AffixType.Prepend) | AffixType.System' affix' args));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendMessage,The following statement contains a magic number: if (ns != null) {  	ns.Send (new UnicodeMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendMessage,The following statement contains a magic number: ns.Send (new UnicodeMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendAsciiMessage,The following statement contains a magic number: if (ns != null) {  	ns.Send (new AsciiMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,SendAsciiMessage,The following statement contains a magic number: ns.Send (new AsciiMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text));  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,The following statement contains a magic number: if (_NameHue != -1) {  	hue = _NameHue;  } else if (IsStaff ()) {  	hue = 11;  } else {  	hue = Notoriety.GetHue (Notoriety.Compute (from' this));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,The following statement contains a magic number: if (IsStaff ()) {  	hue = 11;  } else {  	hue = Notoriety.GetHue (Notoriety.Compute (from' this));  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,The following statement contains a magic number: hue = 11;  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,OnSingleClick,The following statement contains a magic number: if (ShowFameTitle && (_Player || _Body.IsHuman) && _Fame >= 10000) {  	prefix = (_Female ? "Lady" : "Lord");  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DisruptiveAction,The following statement contains a magic number: if (Meditating) {  	Meditating = false;  	SendLocalizedMessage (500134);  	// You stop meditating.  }  
Magic Number,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,DisruptiveAction,The following statement contains a magic number: SendLocalizedMessage (500134);  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Load,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (multiID * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return MultiComponentList.Empty;  	}  	m_StreamReader.BaseStream.Seek (lookup' SeekOrigin.Begin);  	return new MultiComponentList (m_StreamReader' length / (MultiComponentList.PostHSFormat ? 16 : 12));  } catch {  	return MultiComponentList.Empty;  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Load,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (multiID * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return MultiComponentList.Empty;  	}  	m_StreamReader.BaseStream.Seek (lookup' SeekOrigin.Begin);  	return new MultiComponentList (m_StreamReader' length / (MultiComponentList.PostHSFormat ? 16 : 12));  } catch {  	return MultiComponentList.Empty;  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Load,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (multiID * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return MultiComponentList.Empty;  	}  	m_StreamReader.BaseStream.Seek (lookup' SeekOrigin.Begin);  	return new MultiComponentList (m_StreamReader' length / (MultiComponentList.PostHSFormat ? 16 : 12));  } catch {  	return MultiComponentList.Empty;  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Load,The following statement contains a magic number: m_IndexReader.BaseStream.Seek (multiID * 12' SeekOrigin.Begin);  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Load,The following statement contains a magic number: return new MultiComponentList (m_StreamReader' length / (MultiComponentList.PostHSFormat ? 16 : 12));  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,Load,The following statement contains a magic number: return new MultiComponentList (m_StreamReader' length / (MultiComponentList.PostHSFormat ? 16 : 12));  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (idxPath) && File.Exists (mulPath)) {  	m_Index = new FileStream (idxPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_IndexReader = new BinaryReader (m_Index);  	m_Stream = new FileStream (mulPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_StreamReader = new BinaryReader (m_Stream);  	m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];  	string vdPath = Core.FindDataFile ("verdata.mul");  	if (File.Exists (vdPath)) {  		using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var bin = new BinaryReader (fs);  			int count = bin.ReadInt32 ();  			for (int i = 0; i < count; ++i) {  				int file = bin.ReadInt32 ();  				int index = bin.ReadInt32 ();  				int lookup = bin.ReadInt32 ();  				int length = bin.ReadInt32 ();  				int extra = bin.ReadInt32 ();  				if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  					bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  					m_Components [index] = new MultiComponentList (bin' length / 12);  					bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  				}  			}  			bin.Close ();  		}  	}  } else {  	Console.WriteLine ("Warning: Multi data files not found");  	m_Components = new MultiComponentList[0];  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (idxPath) && File.Exists (mulPath)) {  	m_Index = new FileStream (idxPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_IndexReader = new BinaryReader (m_Index);  	m_Stream = new FileStream (mulPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_StreamReader = new BinaryReader (m_Stream);  	m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];  	string vdPath = Core.FindDataFile ("verdata.mul");  	if (File.Exists (vdPath)) {  		using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var bin = new BinaryReader (fs);  			int count = bin.ReadInt32 ();  			for (int i = 0; i < count; ++i) {  				int file = bin.ReadInt32 ();  				int index = bin.ReadInt32 ();  				int lookup = bin.ReadInt32 ();  				int length = bin.ReadInt32 ();  				int extra = bin.ReadInt32 ();  				if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  					bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  					m_Components [index] = new MultiComponentList (bin' length / 12);  					bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  				}  			}  			bin.Close ();  		}  	}  } else {  	Console.WriteLine ("Warning: Multi data files not found");  	m_Components = new MultiComponentList[0];  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (idxPath) && File.Exists (mulPath)) {  	m_Index = new FileStream (idxPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_IndexReader = new BinaryReader (m_Index);  	m_Stream = new FileStream (mulPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_StreamReader = new BinaryReader (m_Stream);  	m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];  	string vdPath = Core.FindDataFile ("verdata.mul");  	if (File.Exists (vdPath)) {  		using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var bin = new BinaryReader (fs);  			int count = bin.ReadInt32 ();  			for (int i = 0; i < count; ++i) {  				int file = bin.ReadInt32 ();  				int index = bin.ReadInt32 ();  				int lookup = bin.ReadInt32 ();  				int length = bin.ReadInt32 ();  				int extra = bin.ReadInt32 ();  				if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  					bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  					m_Components [index] = new MultiComponentList (bin' length / 12);  					bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  				}  			}  			bin.Close ();  		}  	}  } else {  	Console.WriteLine ("Warning: Multi data files not found");  	m_Components = new MultiComponentList[0];  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (idxPath) && File.Exists (mulPath)) {  	m_Index = new FileStream (idxPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_IndexReader = new BinaryReader (m_Index);  	m_Stream = new FileStream (mulPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_StreamReader = new BinaryReader (m_Stream);  	m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];  	string vdPath = Core.FindDataFile ("verdata.mul");  	if (File.Exists (vdPath)) {  		using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var bin = new BinaryReader (fs);  			int count = bin.ReadInt32 ();  			for (int i = 0; i < count; ++i) {  				int file = bin.ReadInt32 ();  				int index = bin.ReadInt32 ();  				int lookup = bin.ReadInt32 ();  				int length = bin.ReadInt32 ();  				int extra = bin.ReadInt32 ();  				if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  					bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  					m_Components [index] = new MultiComponentList (bin' length / 12);  					bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  				}  			}  			bin.Close ();  		}  	}  } else {  	Console.WriteLine ("Warning: Multi data files not found");  	m_Components = new MultiComponentList[0];  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (idxPath) && File.Exists (mulPath)) {  	m_Index = new FileStream (idxPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_IndexReader = new BinaryReader (m_Index);  	m_Stream = new FileStream (mulPath' FileMode.Open' FileAccess.Read' FileShare.Read);  	m_StreamReader = new BinaryReader (m_Stream);  	m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];  	string vdPath = Core.FindDataFile ("verdata.mul");  	if (File.Exists (vdPath)) {  		using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var bin = new BinaryReader (fs);  			int count = bin.ReadInt32 ();  			for (int i = 0; i < count; ++i) {  				int file = bin.ReadInt32 ();  				int index = bin.ReadInt32 ();  				int lookup = bin.ReadInt32 ();  				int length = bin.ReadInt32 ();  				int extra = bin.ReadInt32 ();  				if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  					bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  					m_Components [index] = new MultiComponentList (bin' length / 12);  					bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  				}  			}  			bin.Close ();  		}  	}  } else {  	Console.WriteLine ("Warning: Multi data files not found");  	m_Components = new MultiComponentList[0];  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: m_Components = new MultiComponentList[(int)(m_Index.Length / 12)];  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (vdPath)) {  	using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var bin = new BinaryReader (fs);  		int count = bin.ReadInt32 ();  		for (int i = 0; i < count; ++i) {  			int file = bin.ReadInt32 ();  			int index = bin.ReadInt32 ();  			int lookup = bin.ReadInt32 ();  			int length = bin.ReadInt32 ();  			int extra = bin.ReadInt32 ();  			if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  				bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  				m_Components [index] = new MultiComponentList (bin' length / 12);  				bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  			}  		}  		bin.Close ();  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (vdPath)) {  	using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var bin = new BinaryReader (fs);  		int count = bin.ReadInt32 ();  		for (int i = 0; i < count; ++i) {  			int file = bin.ReadInt32 ();  			int index = bin.ReadInt32 ();  			int lookup = bin.ReadInt32 ();  			int length = bin.ReadInt32 ();  			int extra = bin.ReadInt32 ();  			if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  				bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  				m_Components [index] = new MultiComponentList (bin' length / 12);  				bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  			}  		}  		bin.Close ();  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (vdPath)) {  	using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var bin = new BinaryReader (fs);  		int count = bin.ReadInt32 ();  		for (int i = 0; i < count; ++i) {  			int file = bin.ReadInt32 ();  			int index = bin.ReadInt32 ();  			int lookup = bin.ReadInt32 ();  			int length = bin.ReadInt32 ();  			int extra = bin.ReadInt32 ();  			if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  				bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  				m_Components [index] = new MultiComponentList (bin' length / 12);  				bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  			}  		}  		bin.Close ();  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (File.Exists (vdPath)) {  	using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var bin = new BinaryReader (fs);  		int count = bin.ReadInt32 ();  		for (int i = 0; i < count; ++i) {  			int file = bin.ReadInt32 ();  			int index = bin.ReadInt32 ();  			int lookup = bin.ReadInt32 ();  			int length = bin.ReadInt32 ();  			int extra = bin.ReadInt32 ();  			if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  				bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  				m_Components [index] = new MultiComponentList (bin' length / 12);  				bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  			}  		}  		bin.Close ();  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var bin = new BinaryReader (fs);  	int count = bin.ReadInt32 ();  	for (int i = 0; i < count; ++i) {  		int file = bin.ReadInt32 ();  		int index = bin.ReadInt32 ();  		int lookup = bin.ReadInt32 ();  		int length = bin.ReadInt32 ();  		int extra = bin.ReadInt32 ();  		if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  			bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  			m_Components [index] = new MultiComponentList (bin' length / 12);  			bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  		}  	}  	bin.Close ();  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var bin = new BinaryReader (fs);  	int count = bin.ReadInt32 ();  	for (int i = 0; i < count; ++i) {  		int file = bin.ReadInt32 ();  		int index = bin.ReadInt32 ();  		int lookup = bin.ReadInt32 ();  		int length = bin.ReadInt32 ();  		int extra = bin.ReadInt32 ();  		if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  			bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  			m_Components [index] = new MultiComponentList (bin' length / 12);  			bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  		}  	}  	bin.Close ();  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var bin = new BinaryReader (fs);  	int count = bin.ReadInt32 ();  	for (int i = 0; i < count; ++i) {  		int file = bin.ReadInt32 ();  		int index = bin.ReadInt32 ();  		int lookup = bin.ReadInt32 ();  		int length = bin.ReadInt32 ();  		int extra = bin.ReadInt32 ();  		if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  			bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  			m_Components [index] = new MultiComponentList (bin' length / 12);  			bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  		}  	}  	bin.Close ();  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: using (var fs = new FileStream (vdPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var bin = new BinaryReader (fs);  	int count = bin.ReadInt32 ();  	for (int i = 0; i < count; ++i) {  		int file = bin.ReadInt32 ();  		int index = bin.ReadInt32 ();  		int lookup = bin.ReadInt32 ();  		int length = bin.ReadInt32 ();  		int extra = bin.ReadInt32 ();  		if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  			bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  			m_Components [index] = new MultiComponentList (bin' length / 12);  			bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  		}  	}  	bin.Close ();  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int file = bin.ReadInt32 ();  	int index = bin.ReadInt32 ();  	int lookup = bin.ReadInt32 ();  	int length = bin.ReadInt32 ();  	int extra = bin.ReadInt32 ();  	if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  		bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  		m_Components [index] = new MultiComponentList (bin' length / 12);  		bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int file = bin.ReadInt32 ();  	int index = bin.ReadInt32 ();  	int lookup = bin.ReadInt32 ();  	int length = bin.ReadInt32 ();  	int extra = bin.ReadInt32 ();  	if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  		bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  		m_Components [index] = new MultiComponentList (bin' length / 12);  		bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int file = bin.ReadInt32 ();  	int index = bin.ReadInt32 ();  	int lookup = bin.ReadInt32 ();  	int length = bin.ReadInt32 ();  	int extra = bin.ReadInt32 ();  	if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  		bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  		m_Components [index] = new MultiComponentList (bin' length / 12);  		bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int file = bin.ReadInt32 ();  	int index = bin.ReadInt32 ();  	int lookup = bin.ReadInt32 ();  	int length = bin.ReadInt32 ();  	int extra = bin.ReadInt32 ();  	if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  		bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  		m_Components [index] = new MultiComponentList (bin' length / 12);  		bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  	}  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  	bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  	m_Components [index] = new MultiComponentList (bin' length / 12);  	bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  	bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  	m_Components [index] = new MultiComponentList (bin' length / 12);  	bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  	bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  	m_Components [index] = new MultiComponentList (bin' length / 12);  	bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: if (file == 14 && index >= 0 && index < m_Components.Length && lookup >= 0 && length > 0) {  	bin.BaseStream.Seek (lookup' SeekOrigin.Begin);  	m_Components [index] = new MultiComponentList (bin' length / 12);  	bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  }  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: m_Components [index] = new MultiComponentList (bin' length / 12);  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  
Magic Number,Server,MultiData,F:\newReposMay17\JustUO_JustUO\Server\MultiData.cs,MultiData,The following statement contains a magic number: bin.BaseStream.Seek (24 + (i * 20)' SeekOrigin.Begin);  
Magic Number,Server,ObjectPropertyList,F:\newReposMay17\JustUO_JustUO\Server\ObjectPropertyList.cs,ObjectPropertyList,The following statement contains a magic number: EnsureCapacity (128);  
Magic Number,Server,ObjectPropertyList,F:\newReposMay17\JustUO_JustUO\Server\ObjectPropertyList.cs,Terminate,The following statement contains a magic number: m_Stream.Seek (11' SeekOrigin.Begin);  
Magic Number,Server,ObjectPropertyList,F:\newReposMay17\JustUO_JustUO\Server\ObjectPropertyList.cs,AddHash,The following statement contains a magic number: m_Hash ^= (val >> 26) & 0x3F;  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (indexBuffer == null) {  	indexBuffer = new byte[20];  }  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer = new byte[20];  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [1] = (byte)(typeCode >> 8);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [2] = (byte)(typeCode >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [2] = (byte)(typeCode >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [3] = (byte)(typeCode >> 24);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [3] = (byte)(typeCode >> 24);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [4] = (byte)(serial);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [5] = (byte)(serial >> 8);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [5] = (byte)(serial >> 8);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [6] = (byte)(serial >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [6] = (byte)(serial >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [7] = (byte)(serial >> 24);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [7] = (byte)(serial >> 24);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [8] = (byte)(position);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [9] = (byte)(position >> 8);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [9] = (byte)(position >> 8);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [10] = (byte)(position >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [10] = (byte)(position >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [11] = (byte)(position >> 24);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [11] = (byte)(position >> 24);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [12] = (byte)(position >> 32);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [12] = (byte)(position >> 32);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [13] = (byte)(position >> 40);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [13] = (byte)(position >> 40);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [14] = (byte)(position >> 48);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [14] = (byte)(position >> 48);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [15] = (byte)(position >> 56);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [15] = (byte)(position >> 56);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [16] = (byte)(length);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [17] = (byte)(length >> 8);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [17] = (byte)(length >> 8);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [18] = (byte)(length >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [18] = (byte)(length >> 16);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [19] = (byte)(length >> 24);  
Magic Number,Server,BinaryMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\BinaryMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [19] = (byte)(length >> 24);  
Magic Number,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,Save,The following statement contains a magic number: saveTasks [2] = SaveGuilds ();  
Magic Number,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,Save,The following statement contains a magic number: saveTasks [3] = SaveData ();  
Magic Number,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [1] = (byte)(count >> 8);  
Magic Number,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [2] = (byte)(count >> 16);  
Magic Number,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [2] = (byte)(count >> 16);  
Magic Number,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [3] = (byte)(count >> 24);  
Magic Number,Server,DynamicSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\DynamicSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [3] = (byte)(count >> 24);  
Magic Number,Server,FileQueue,F:\newReposMay17\JustUO_JustUO\Server\Persistence\FileQueue.cs,FileQueue,The following statement contains a magic number: bufferPool = new BufferPool ("File Buffers"' 64' bufferSize);  
Magic Number,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,Save,The following statement contains a magic number: for (int i = 0; i < consumers.Length; ++i) {  	consumers [i] = new Consumer (this' 256);  }  
Magic Number,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,Save,The following statement contains a magic number: consumers [i] = new Consumer (this' 256);  
Magic Number,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [1] = (byte)(count >> 8);  
Magic Number,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [2] = (byte)(count >> 16);  
Magic Number,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [2] = (byte)(count >> 16);  
Magic Number,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [3] = (byte)(count >> 24);  
Magic Number,Server,ParallelSaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\ParallelSaveStrategy.cs,WriteCount,The following statement contains a magic number: buffer [3] = (byte)(count >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: if (memLength > 0) {  	byte[] memBuffer = _memStream.GetBuffer ();  	long actualPosition = dataFile.Position;  	dataFile.Write (memBuffer' 0' memLength);  	//The buffer contains the data from many items.  	//Console.WriteLine("Writing {0} bytes starting at {1}' with {2} things"' memLength' actualPosition' _orderedIndexInfo.Count);  	var indexBuffer = new byte[20];  	//int indexWritten = _orderedIndexInfo.Count * indexBuffer.Length;  	//int totalWritten = memLength + indexWritten  	foreach (IndexInfo info in _orderedIndexInfo) {  		/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  		indexBuffer [1] = (byte)(info.typeCode >> 8);  		indexBuffer [2] = (byte)(info.typeCode >> 16);  		indexBuffer [3] = (byte)(info.typeCode >> 24);  		indexBuffer [4] = (byte)(info.serial);  		indexBuffer [5] = (byte)(info.serial >> 8);  		indexBuffer [6] = (byte)(info.serial >> 16);  		indexBuffer [7] = (byte)(info.serial >> 24);  		indexBuffer [8] = (byte)(actualPosition);  		indexBuffer [9] = (byte)(actualPosition >> 8);  		indexBuffer [10] = (byte)(actualPosition >> 16);  		indexBuffer [11] = (byte)(actualPosition >> 24);  		indexBuffer [12] = (byte)(actualPosition >> 32);  		indexBuffer [13] = (byte)(actualPosition >> 40);  		indexBuffer [14] = (byte)(actualPosition >> 48);  		indexBuffer [15] = (byte)(actualPosition >> 56);  		indexBuffer [16] = (byte)(info.size);  		indexBuffer [17] = (byte)(info.size >> 8);  		indexBuffer [18] = (byte)(info.size >> 16);  		indexBuffer [19] = (byte)(info.size >> 24);  		indexFile.Write (indexBuffer' 0' indexBuffer.Length);  		actualPosition += info.size;  	}  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: foreach (IndexInfo info in _orderedIndexInfo) {  	/* 					int typeCode = info.typeCode; 					int serial = info.serial; 					int length = info.size; 					*/indexBuffer [0] = (byte)(info.typeCode);  	indexBuffer [1] = (byte)(info.typeCode >> 8);  	indexBuffer [2] = (byte)(info.typeCode >> 16);  	indexBuffer [3] = (byte)(info.typeCode >> 24);  	indexBuffer [4] = (byte)(info.serial);  	indexBuffer [5] = (byte)(info.serial >> 8);  	indexBuffer [6] = (byte)(info.serial >> 16);  	indexBuffer [7] = (byte)(info.serial >> 24);  	indexBuffer [8] = (byte)(actualPosition);  	indexBuffer [9] = (byte)(actualPosition >> 8);  	indexBuffer [10] = (byte)(actualPosition >> 16);  	indexBuffer [11] = (byte)(actualPosition >> 24);  	indexBuffer [12] = (byte)(actualPosition >> 32);  	indexBuffer [13] = (byte)(actualPosition >> 40);  	indexBuffer [14] = (byte)(actualPosition >> 48);  	indexBuffer [15] = (byte)(actualPosition >> 56);  	indexBuffer [16] = (byte)(info.size);  	indexBuffer [17] = (byte)(info.size >> 8);  	indexBuffer [18] = (byte)(info.size >> 16);  	indexBuffer [19] = (byte)(info.size >> 24);  	indexFile.Write (indexBuffer' 0' indexBuffer.Length);  	actualPosition += info.size;  }  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [1] = (byte)(info.typeCode >> 8);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [2] = (byte)(info.typeCode >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [2] = (byte)(info.typeCode >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [3] = (byte)(info.typeCode >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [3] = (byte)(info.typeCode >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [4] = (byte)(info.serial);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [5] = (byte)(info.serial >> 8);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [5] = (byte)(info.serial >> 8);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [6] = (byte)(info.serial >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [6] = (byte)(info.serial >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [7] = (byte)(info.serial >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [7] = (byte)(info.serial >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [8] = (byte)(actualPosition);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [9] = (byte)(actualPosition >> 8);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [9] = (byte)(actualPosition >> 8);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [10] = (byte)(actualPosition >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [10] = (byte)(actualPosition >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [11] = (byte)(actualPosition >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [11] = (byte)(actualPosition >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [12] = (byte)(actualPosition >> 32);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [12] = (byte)(actualPosition >> 32);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [13] = (byte)(actualPosition >> 40);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [13] = (byte)(actualPosition >> 40);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [14] = (byte)(actualPosition >> 48);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [14] = (byte)(actualPosition >> 48);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [15] = (byte)(actualPosition >> 56);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [15] = (byte)(actualPosition >> 56);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [16] = (byte)(info.size);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [17] = (byte)(info.size >> 8);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [17] = (byte)(info.size >> 8);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [18] = (byte)(info.size >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [18] = (byte)(info.size >> 16);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [19] = (byte)(info.size >> 24);  
Magic Number,Server,QueuedMemoryWriter,F:\newReposMay17\JustUO_JustUO\Server\Persistence\QueuedMemoryWriter.cs,CommitTo,The following statement contains a magic number: indexBuffer [19] = (byte)(info.size >> 24);  
Magic Number,Server,SaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\SaveStrategy.cs,Acquire,The following statement contains a magic number: if (Core.MultiProcessor) {  	int processorCount = Core.ProcessorCount;  	#if DynamicSaveStrategy  	                if (processorCount > 2)                 {                     return new DualSaveStrategy(); // new DynamicSaveStrategy(); // TODO: Stabilize                 } #else  	if (processorCount > 16) {  		return new DualSaveStrategy ();  		// new ParallelSaveStrategy(processorCount); // TODO: Stabilize  	}  	#endif  	return new DualSaveStrategy ();  }  
Magic Number,Server,SaveStrategy,F:\newReposMay17\JustUO_JustUO\Server\Persistence\SaveStrategy.cs,Acquire,The following statement contains a magic number: if (processorCount > 16) {  	return new DualSaveStrategy ();  	// new ParallelSaveStrategy(processorCount); // TODO: Stabilize  }  
Magic Number,Server,Point3DList,F:\newReposMay17\JustUO_JustUO\Server\Point3DList.cs,Point3DList,The following statement contains a magic number: m_List = new Point3D[8];  
Magic Number,Server,Point3DList,F:\newReposMay17\JustUO_JustUO\Server\Point3DList.cs,Add,The following statement contains a magic number: if ((m_Count + 1) > m_List.Length) {  	Point3D[] old = m_List;  	m_List = new Point3D[old.Length * 2];  	for (int i = 0; i < old.Length; ++i) {  		m_List [i] = old [i];  	}  }  
Magic Number,Server,Point3DList,F:\newReposMay17\JustUO_JustUO\Server\Point3DList.cs,Add,The following statement contains a magic number: m_List = new Point3D[old.Length * 2];  
Magic Number,Server,Point3DList,F:\newReposMay17\JustUO_JustUO\Server\Point3DList.cs,Add,The following statement contains a magic number: if ((m_Count + 1) > m_List.Length) {  	Point3D[] old = m_List;  	m_List = new Point3D[old.Length * 2];  	for (int i = 0; i < old.Length; ++i) {  		m_List [i] = old [i];  	}  }  
Magic Number,Server,Point3DList,F:\newReposMay17\JustUO_JustUO\Server\Point3DList.cs,Add,The following statement contains a magic number: m_List = new Point3D[old.Length * 2];  
Magic Number,Server,Poison,F:\newReposMay17\JustUO_JustUO\Server\Poison.cs,Deserialize,The following statement contains a magic number: switch (reader.ReadByte ()) {  case 1:  	return GetPoison (reader.ReadByte ());  case 2:  	//no longer used' safe to remove?  	reader.ReadInt ();  	reader.ReadDouble ();  	reader.ReadInt ();  	reader.ReadTimeSpan ();  	break;  }  
Magic Number,Server,SimpleRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextBool,The following statement contains a magic number: return NextDouble () >= .5;  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: b [7] = 0;  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: _GetBytes (b' 0' 7);  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: _GetBytes (b' 1' 7);  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: fixed (byte* buf = b) {  	r = *(ulong*)(&buf [0]) >> 3;  }  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: r = *(ulong*)(&buf [0]) >> 3;  
Magic Number,Server,CSPRandom,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: return (double)r / 9007199254740992;  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: b [7] = 0;  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: _GetBytes (b' 0' 7);  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: _GetBytes (b' 1' 7);  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: fixed (byte* buf = b) {  	r = *(ulong*)(&buf [0]) >> 3;  }  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: r = *(ulong*)(&buf [0]) >> 3;  
Magic Number,Server,RDRand32,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: return (double)r / 9007199254740992;  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: if (BitConverter.IsLittleEndian) {  	b [7] = 0;  	_GetBytes (b' 0' 7);  } else {  	b [0] = 0;  	_GetBytes (b' 1' 7);  }  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: b [7] = 0;  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: _GetBytes (b' 0' 7);  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: _GetBytes (b' 1' 7);  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: fixed (byte* buf = b) {  	r = *(ulong*)(&buf [0]) >> 3;  }  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: r = *(ulong*)(&buf [0]) >> 3;  
Magic Number,Server,RDRand64,F:\newReposMay17\JustUO_JustUO\Server\Random.cs,NextDouble,The following statement contains a magic number: return (double)r / 9007199254740992;  
Magic Number,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,OnCriminalAction,The following statement contains a magic number: if (m_Parent != null) {  	m_Parent.OnCriminalAction (m' message);  } else if (message) {  	m.SendLocalizedMessage (1005040);  	// You've committed a criminal act!!  }  
Magic Number,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,OnCriminalAction,The following statement contains a magic number: if (message) {  	m.SendLocalizedMessage (1005040);  	// You've committed a criminal act!!  }  
Magic Number,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,OnCriminalAction,The following statement contains a magic number: m.SendLocalizedMessage (1005040);  
Magic Number,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,Region,The following statement contains a magic number: if (!ReadPoint3D (xml ["go"]' map' ref m_GoLocation' false) && m_Area.Length > 0) {  	Point3D start = m_Area [0].Start;  	Point3D end = m_Area [0].End;  	int x = start.X + (end.X - start.X) / 2;  	int y = start.Y + (end.Y - start.Y) / 2;  	m_GoLocation = new Point3D (x' y' m_Map.GetAverageZ (x' y));  }  
Magic Number,Server,Region,F:\newReposMay17\JustUO_JustUO\Server\Region.cs,Region,The following statement contains a magic number: if (!ReadPoint3D (xml ["go"]' map' ref m_GoLocation' false) && m_Area.Length > 0) {  	Point3D start = m_Area [0].Start;  	Point3D end = m_Area [0].End;  	int x = start.X + (end.X - start.X) / 2;  	int y = start.Y + (end.Y - start.Y) / 2;  	m_GoLocation = new Point3D (x' y' m_Map.GetAverageZ (x' y));  }  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileCSScripts,The following statement contains a magic number: using (var provider = new CSharpCodeProvider ()) {  	string path = GetUnusedPath ("Scripts.CS");  	var parms = new CompilerParameters (GetReferenceAssemblies ()' path' debug);  	string options = GetCompilerOptions (debug);  	if (options != null) {  		parms.CompilerOptions = options;  	}  	if (Core.HaltOnWarning) {  		parms.WarningLevel = 4;  	}  	#if !MONO  	CompilerResults results = provider.CompileAssemblyFromFile (parms' files);  	#else  					parms.CompilerOptions = String.Format( "{0} /nowarn:618'169'219'414'618'429'162'252'849'1717'612'108'109'649 /recurse:Scripts/*.cs"' parms.CompilerOptions ); 				CompilerResults results = provider.CompileAssemblyFromFile( parms' String.Empty ); #endif  	m_AdditionalReferences.Add (path);  	Display (results);  	#if !MONO  	if (results.Errors.Count > 0) {  		assembly = null;  		return false;  	}  	#else  					if( results.Errors.Count > 0 ) { 					foreach( CompilerError err in results.Errors ) { 						if ( !err.IsWarning ) { 							assembly = null; 							return false; 						} 					} 				}                 #endif  	if (cache && Path.GetFileName (path) == "Scripts.CS.dll") {  		try {  			byte[] hashCode = GetHashCode (path' files' debug);  			using (var fs = new FileStream ("Scripts/Output/Scripts.CS.hash"' FileMode.Create' FileAccess.Write' FileShare.None)) {  				using (var bin = new BinaryWriter (fs)) {  					bin.Write (hashCode' 0' hashCode.Length);  				}  			}  		} catch {  		}  	}  	assembly = results.CompiledAssembly;  	return true;  }  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileCSScripts,The following statement contains a magic number: if (Core.HaltOnWarning) {  	parms.WarningLevel = 4;  }  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileCSScripts,The following statement contains a magic number: parms.WarningLevel = 4;  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileVBScripts,The following statement contains a magic number: using (var provider = new VBCodeProvider ()) {  	string path = GetUnusedPath ("Scripts.VB");  	var parms = new CompilerParameters (GetReferenceAssemblies ()' path' debug);  	string options = GetCompilerOptions (debug);  	if (options != null) {  		parms.CompilerOptions = options;  	}  	if (Core.HaltOnWarning) {  		parms.WarningLevel = 4;  	}  	CompilerResults results = provider.CompileAssemblyFromFile (parms' files);  	m_AdditionalReferences.Add (path);  	Display (results);  	if (results.Errors.Count > 0) {  		assembly = null;  		return false;  	}  	if (cache && Path.GetFileName (path) == "Scripts.VB.dll") {  		try {  			byte[] hashCode = GetHashCode (path' files' debug);  			using (var fs = new FileStream ("Scripts/Output/Scripts.VB.hash"' FileMode.Create' FileAccess.Write' FileShare.None)) {  				using (var bin = new BinaryWriter (fs)) {  					bin.Write (hashCode' 0' hashCode.Length);  				}  			}  		} catch {  		}  	}  	assembly = results.CompiledAssembly;  	return true;  }  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileVBScripts,The following statement contains a magic number: if (Core.HaltOnWarning) {  	parms.WarningLevel = 4;  }  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,CompileVBScripts,The following statement contains a magic number: parms.WarningLevel = 4;  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,GetUnusedPath,The following statement contains a magic number: for (int i = 2; File.Exists (path) && i <= 1000; ++i) {  	path = Path.Combine (Core.BaseDirectory' String.Format ("Scripts/Output/{0}.{1}.dll"' name' i));  }  
Magic Number,Server,ScriptCompiler,F:\newReposMay17\JustUO_JustUO\Server\ScriptCompiler.cs,GetUnusedPath,The following statement contains a magic number: for (int i = 2; File.Exists (path) && i <= 1000; ++i) {  	path = Path.Combine (Core.BaseDirectory' String.Format ("Scripts/Output/{0}.{1}.dll"' name' i));  }  
Magic Number,Server,Season,F:\newReposMay17\JustUO_JustUO\Server\Season.cs,Season,The following statement contains a magic number: RegisterSeason (2' "fall");  
Magic Number,Server,Season,F:\newReposMay17\JustUO_JustUO\Server\Season.cs,Season,The following statement contains a magic number: RegisterSeason (3' "winter");  
Magic Number,Server,Season,F:\newReposMay17\JustUO_JustUO\Server\Season.cs,Season,The following statement contains a magic number: RegisterSeason (4' "desolation");  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,WriteEncodedInt,The following statement contains a magic number: while (v >= 0x80) {  	if ((m_Index + 1) > m_Buffer.Length) {  		Flush ();  	}  	m_Buffer [m_Index++] = (byte)(v | 0x80);  	v >>= 7;  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,WriteEncodedInt,The following statement contains a magic number: v >>= 7;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 8) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 1] = (byte)(value >> 8);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 4] = (byte)(value >> 32);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 4] = (byte)(value >> 32);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 5] = (byte)(value >> 40);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 5] = (byte)(value >> 40);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 6] = (byte)(value >> 48);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 6] = (byte)(value >> 48);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 7] = (byte)(value >> 56);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 7] = (byte)(value >> 56);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 8;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 8) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 1] = (byte)(value >> 8);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 4] = (byte)(value >> 32);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 4] = (byte)(value >> 32);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 5] = (byte)(value >> 40);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 5] = (byte)(value >> 40);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 6] = (byte)(value >> 48);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 6] = (byte)(value >> 48);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 7] = (byte)(value >> 56);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 7] = (byte)(value >> 56);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 8;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 4) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 1] = (byte)(value >> 8);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 4;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 4) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 1] = (byte)(value >> 8);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 2] = (byte)(value >> 16);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 3] = (byte)(value >> 24);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 4;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 2) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 1] = (byte)(value >> 8);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 2;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 2) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Buffer [m_Index + 1] = (byte)(value >> 8);  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 2;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 8) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 8;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 4) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: m_Index += 4;  
Magic Number,Server,BinaryFileWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,Write,The following statement contains a magic number: if ((m_Index + 8) > m_Buffer.Length) {  	Flush ();  }  
Magic Number,Server,BinaryFileReader,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,ReadEncodedInt,The following statement contains a magic number: do {  	b = m_File.ReadByte ();  	v |= (b & 0x7F) << shift;  	shift += 7;  } while (b >= 0x80);  
Magic Number,Server,BinaryFileReader,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,ReadEncodedInt,The following statement contains a magic number: shift += 7;  
Magic Number,Server,AsyncWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,AsyncWriter,The following statement contains a magic number: m_Mem = new MemoryStream (BufferSize + 1024);  
Magic Number,Server,AsyncWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,OnWrite,The following statement contains a magic number: if (curlen >= BufferSize) {  	Enqueue (m_Mem);  	m_Mem = new MemoryStream (BufferSize + 1024);  	m_Bin = new BinaryWriter (m_Mem' Utility.UTF8WithEncoding);  	m_LastPos = 0;  }  
Magic Number,Server,AsyncWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,OnWrite,The following statement contains a magic number: m_Mem = new MemoryStream (BufferSize + 1024);  
Magic Number,Server,AsyncWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,WriteEncodedInt,The following statement contains a magic number: while (v >= 0x80) {  	m_Bin.Write ((byte)(v | 0x80));  	v >>= 7;  }  
Magic Number,Server,AsyncWriter,F:\newReposMay17\JustUO_JustUO\Server\Serialization.cs,WriteEncodedInt,The following statement contains a magic number: v >>= 7;  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The following statement contains a magic number: switch (version) {  case 0: {  	m_Base = reader.ReadUShort ();  	m_Cap = reader.ReadUShort ();  	Lock = (SkillLock)reader.ReadByte ();  	break;  }  case 0xFF: {  	m_Base = 0;  	m_Cap = 1000;  	Lock = SkillLock.Up;  	break;  }  default: {  	if ((version & 0xC0) == 0x00) {  		if ((version & 0x1) != 0) {  			m_Base = reader.ReadUShort ();  		}  		if ((version & 0x2) != 0) {  			m_Cap = reader.ReadUShort ();  		} else {  			m_Cap = 1000;  		}  		if ((version & 0x4) != 0) {  			Lock = (SkillLock)reader.ReadByte ();  		}  	}  	break;  }  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The following statement contains a magic number: switch (version) {  case 0: {  	m_Base = reader.ReadUShort ();  	m_Cap = reader.ReadUShort ();  	Lock = (SkillLock)reader.ReadByte ();  	break;  }  case 0xFF: {  	m_Base = 0;  	m_Cap = 1000;  	Lock = SkillLock.Up;  	break;  }  default: {  	if ((version & 0xC0) == 0x00) {  		if ((version & 0x1) != 0) {  			m_Base = reader.ReadUShort ();  		}  		if ((version & 0x2) != 0) {  			m_Cap = reader.ReadUShort ();  		} else {  			m_Cap = 1000;  		}  		if ((version & 0x4) != 0) {  			Lock = (SkillLock)reader.ReadByte ();  		}  	}  	break;  }  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The following statement contains a magic number: m_Cap = 1000;  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The following statement contains a magic number: if ((version & 0xC0) == 0x00) {  	if ((version & 0x1) != 0) {  		m_Base = reader.ReadUShort ();  	}  	if ((version & 0x2) != 0) {  		m_Cap = reader.ReadUShort ();  	} else {  		m_Cap = 1000;  	}  	if ((version & 0x4) != 0) {  		Lock = (SkillLock)reader.ReadByte ();  	}  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The following statement contains a magic number: if ((version & 0x2) != 0) {  	m_Cap = reader.ReadUShort ();  } else {  	m_Cap = 1000;  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skill,The following statement contains a magic number: m_Cap = 1000;  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Serialize,The following statement contains a magic number: if (m_Base == 0 && m_Cap == 1000 && Lock == SkillLock.Up) {  	writer.Write ((byte)0xFF);  	// default  } else {  	int flags = 0x0;  	if (m_Base != 0) {  		flags |= 0x1;  	}  	if (m_Cap != 1000) {  		flags |= 0x2;  	}  	if (Lock != SkillLock.Up) {  		flags |= 0x4;  	}  	writer.Write ((byte)flags);  	// version  	if (m_Base != 0) {  		writer.Write ((short)m_Base);  	}  	if (m_Cap != 1000) {  		writer.Write ((short)m_Cap);  	}  	if (Lock != SkillLock.Up) {  		writer.Write ((byte)Lock);  	}  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Serialize,The following statement contains a magic number: if (m_Base == 0 && m_Cap == 1000 && Lock == SkillLock.Up) {  	writer.Write ((byte)0xFF);  	// default  } else {  	int flags = 0x0;  	if (m_Base != 0) {  		flags |= 0x1;  	}  	if (m_Cap != 1000) {  		flags |= 0x2;  	}  	if (Lock != SkillLock.Up) {  		flags |= 0x4;  	}  	writer.Write ((byte)flags);  	// version  	if (m_Base != 0) {  		writer.Write ((short)m_Base);  	}  	if (m_Cap != 1000) {  		writer.Write ((short)m_Cap);  	}  	if (Lock != SkillLock.Up) {  		writer.Write ((byte)Lock);  	}  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Serialize,The following statement contains a magic number: if (m_Base == 0 && m_Cap == 1000 && Lock == SkillLock.Up) {  	writer.Write ((byte)0xFF);  	// default  } else {  	int flags = 0x0;  	if (m_Base != 0) {  		flags |= 0x1;  	}  	if (m_Cap != 1000) {  		flags |= 0x2;  	}  	if (Lock != SkillLock.Up) {  		flags |= 0x4;  	}  	writer.Write ((byte)flags);  	// version  	if (m_Base != 0) {  		writer.Write ((short)m_Base);  	}  	if (m_Cap != 1000) {  		writer.Write ((short)m_Cap);  	}  	if (Lock != SkillLock.Up) {  		writer.Write ((byte)Lock);  	}  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Serialize,The following statement contains a magic number: if (m_Cap != 1000) {  	flags |= 0x2;  }  
Magic Number,Server,Skill,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Serialize,The following statement contains a magic number: if (m_Cap != 1000) {  	writer.Write ((short)m_Cap);  }  
Magic Number,Server,SkillInfo,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,SkillInfo,The following statement contains a magic number: StrScale = strScale / 100.0;  
Magic Number,Server,SkillInfo,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,SkillInfo,The following statement contains a magic number: DexScale = dexScale / 100.0;  
Magic Number,Server,SkillInfo,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,SkillInfo,The following statement contains a magic number: IntScale = intScale / 100.0;  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,UseSkill,The following statement contains a magic number: if (skillID >= 0 && skillID < SkillInfo.Table.Length) {  	SkillInfo info = SkillInfo.Table [skillID];  	if (info.Callback != null) {  		if (Core.TickCount - from.NextSkillTime >= 0 && from.Spell == null) {  			from.DisruptiveAction ();  			from.NextSkillTime = Core.TickCount + (int)(info.Callback (from)).TotalMilliseconds;  			return true;  		} else {  			from.SendSkillMessage ();  		}  	} else {  		from.SendLocalizedMessage (500014);  		// That skill cannot be used directly.  	}  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,UseSkill,The following statement contains a magic number: if (info.Callback != null) {  	if (Core.TickCount - from.NextSkillTime >= 0 && from.Spell == null) {  		from.DisruptiveAction ();  		from.NextSkillTime = Core.TickCount + (int)(info.Callback (from)).TotalMilliseconds;  		return true;  	} else {  		from.SendSkillMessage ();  	}  } else {  	from.SendLocalizedMessage (500014);  	// That skill cannot be used directly.  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,UseSkill,The following statement contains a magic number: from.SendLocalizedMessage (500014);  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Serialize,The following statement contains a magic number: writer.Write (3);  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: Cap = 7000;  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: switch (version) {  case 3:  case 2: {  	Cap = reader.ReadInt ();  	goto case 1;  }  case 1: {  	if (version < 2) {  		Cap = 7000;  	}  	if (version < 3) {  		/*m_Total =*/reader.ReadInt ();  	}  	SkillInfo[] info = SkillInfo.Table;  	m_Skills = new Skill[info.Length];  	int count = reader.ReadInt ();  	for (int i = 0; i < count; ++i) {  		if (i < info.Length) {  			var sk = new Skill (this' info [i]' reader);  			if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  				m_Skills [i] = sk;  				Total += sk.BaseFixedPoint;  			}  		} else {  			new Skill (this' null' reader);  		}  	}  	//for ( int i = count; i < info.Length; ++i )  	//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );  	break;  }  case 0: {  	reader.ReadInt ();  	goto case 1;  }  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: switch (version) {  case 3:  case 2: {  	Cap = reader.ReadInt ();  	goto case 1;  }  case 1: {  	if (version < 2) {  		Cap = 7000;  	}  	if (version < 3) {  		/*m_Total =*/reader.ReadInt ();  	}  	SkillInfo[] info = SkillInfo.Table;  	m_Skills = new Skill[info.Length];  	int count = reader.ReadInt ();  	for (int i = 0; i < count; ++i) {  		if (i < info.Length) {  			var sk = new Skill (this' info [i]' reader);  			if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  				m_Skills [i] = sk;  				Total += sk.BaseFixedPoint;  			}  		} else {  			new Skill (this' null' reader);  		}  	}  	//for ( int i = count; i < info.Length; ++i )  	//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );  	break;  }  case 0: {  	reader.ReadInt ();  	goto case 1;  }  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: switch (version) {  case 3:  case 2: {  	Cap = reader.ReadInt ();  	goto case 1;  }  case 1: {  	if (version < 2) {  		Cap = 7000;  	}  	if (version < 3) {  		/*m_Total =*/reader.ReadInt ();  	}  	SkillInfo[] info = SkillInfo.Table;  	m_Skills = new Skill[info.Length];  	int count = reader.ReadInt ();  	for (int i = 0; i < count; ++i) {  		if (i < info.Length) {  			var sk = new Skill (this' info [i]' reader);  			if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  				m_Skills [i] = sk;  				Total += sk.BaseFixedPoint;  			}  		} else {  			new Skill (this' null' reader);  		}  	}  	//for ( int i = count; i < info.Length; ++i )  	//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );  	break;  }  case 0: {  	reader.ReadInt ();  	goto case 1;  }  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: switch (version) {  case 3:  case 2: {  	Cap = reader.ReadInt ();  	goto case 1;  }  case 1: {  	if (version < 2) {  		Cap = 7000;  	}  	if (version < 3) {  		/*m_Total =*/reader.ReadInt ();  	}  	SkillInfo[] info = SkillInfo.Table;  	m_Skills = new Skill[info.Length];  	int count = reader.ReadInt ();  	for (int i = 0; i < count; ++i) {  		if (i < info.Length) {  			var sk = new Skill (this' info [i]' reader);  			if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  				m_Skills [i] = sk;  				Total += sk.BaseFixedPoint;  			}  		} else {  			new Skill (this' null' reader);  		}  	}  	//for ( int i = count; i < info.Length; ++i )  	//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );  	break;  }  case 0: {  	reader.ReadInt ();  	goto case 1;  }  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: switch (version) {  case 3:  case 2: {  	Cap = reader.ReadInt ();  	goto case 1;  }  case 1: {  	if (version < 2) {  		Cap = 7000;  	}  	if (version < 3) {  		/*m_Total =*/reader.ReadInt ();  	}  	SkillInfo[] info = SkillInfo.Table;  	m_Skills = new Skill[info.Length];  	int count = reader.ReadInt ();  	for (int i = 0; i < count; ++i) {  		if (i < info.Length) {  			var sk = new Skill (this' info [i]' reader);  			if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  				m_Skills [i] = sk;  				Total += sk.BaseFixedPoint;  			}  		} else {  			new Skill (this' null' reader);  		}  	}  	//for ( int i = count; i < info.Length; ++i )  	//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );  	break;  }  case 0: {  	reader.ReadInt ();  	goto case 1;  }  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: switch (version) {  case 3:  case 2: {  	Cap = reader.ReadInt ();  	goto case 1;  }  case 1: {  	if (version < 2) {  		Cap = 7000;  	}  	if (version < 3) {  		/*m_Total =*/reader.ReadInt ();  	}  	SkillInfo[] info = SkillInfo.Table;  	m_Skills = new Skill[info.Length];  	int count = reader.ReadInt ();  	for (int i = 0; i < count; ++i) {  		if (i < info.Length) {  			var sk = new Skill (this' info [i]' reader);  			if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  				m_Skills [i] = sk;  				Total += sk.BaseFixedPoint;  			}  		} else {  			new Skill (this' null' reader);  		}  	}  	//for ( int i = count; i < info.Length; ++i )  	//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );  	break;  }  case 0: {  	reader.ReadInt ();  	goto case 1;  }  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: if (version < 2) {  	Cap = 7000;  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: if (version < 2) {  	Cap = 7000;  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: Cap = 7000;  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: if (version < 3) {  	/*m_Total =*/reader.ReadInt ();  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	if (i < info.Length) {  		var sk = new Skill (this' info [i]' reader);  		if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  			m_Skills [i] = sk;  			Total += sk.BaseFixedPoint;  		}  	} else {  		new Skill (this' null' reader);  	}  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: if (i < info.Length) {  	var sk = new Skill (this' info [i]' reader);  	if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  		m_Skills [i] = sk;  		Total += sk.BaseFixedPoint;  	}  } else {  	new Skill (this' null' reader);  }  
Magic Number,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following statement contains a magic number: if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  	m_Skills [i] = sk;  	Total += sk.BaseFixedPoint;  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,ReadNameString,The following statement contains a magic number: bin.Read (m_StringBuffer' 0' 20);  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,ReadNameString,The following statement contains a magic number: for (count = 0; count < 20 && m_StringBuffer [count] != 0; ++count) {  	;  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,The following statement contains a magic number: if (File.Exists (filePath)) {  	using (var fs = new FileStream (filePath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var bin = new BinaryReader (fs);  		if (fs.Length >= 3188736) {  			// 7.0.9.0  			m_LandData = new LandData[0x4000];  			for (int i = 0; i < 0x4000; ++i) {  				if (i == 1 || (i > 0 && (i & 0x1F) == 0)) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt64 ();  				bin.ReadInt16 ();  				// skip 2 bytes -- textureID  				m_LandData [i] = new LandData (ReadNameString (bin)' flags);  			}  			m_ItemData = new ItemData[0x10000];  			for (int i = 0; i < 0x10000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt64 ();  				int weight = bin.ReadByte ();  				int quality = bin.ReadByte ();  				bin.ReadInt16 ();  				bin.ReadByte ();  				int quantity = bin.ReadByte ();  				bin.ReadInt32 ();  				bin.ReadByte ();  				int value = bin.ReadByte ();  				int height = bin.ReadByte ();  				m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  			}  		} else {  			m_LandData = new LandData[0x4000];  			for (int i = 0; i < 0x4000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt32 ();  				bin.ReadInt16 ();  				// skip 2 bytes -- textureID  				m_LandData [i] = new LandData (ReadNameString (bin)' flags);  			}  			if (fs.Length == 1644544) {  				// 7.0.0.0  				m_ItemData = new ItemData[0x8000];  				for (int i = 0; i < 0x8000; ++i) {  					if ((i & 0x1F) == 0) {  						bin.ReadInt32 ();  						// header  					}  					var flags = (TileFlag)bin.ReadInt32 ();  					int weight = bin.ReadByte ();  					int quality = bin.ReadByte ();  					bin.ReadInt16 ();  					bin.ReadByte ();  					int quantity = bin.ReadByte ();  					bin.ReadInt32 ();  					bin.ReadByte ();  					int value = bin.ReadByte ();  					int height = bin.ReadByte ();  					m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  				}  			} else {  				m_ItemData = new ItemData[0x4000];  				for (int i = 0; i < 0x4000; ++i) {  					if ((i & 0x1F) == 0) {  						bin.ReadInt32 ();  						// header  					}  					var flags = (TileFlag)bin.ReadInt32 ();  					int weight = bin.ReadByte ();  					int quality = bin.ReadByte ();  					bin.ReadInt16 ();  					bin.ReadByte ();  					int quantity = bin.ReadByte ();  					bin.ReadInt32 ();  					bin.ReadByte ();  					int value = bin.ReadByte ();  					int height = bin.ReadByte ();  					m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  				}  			}  		}  	}  	m_MaxLandValue = m_LandData.Length - 1;  	m_MaxItemValue = m_ItemData.Length - 1;  } else {  	Console.WriteLine ("tiledata.mul was not found");  	Console.WriteLine ("Make sure your Scripts/Misc/DataPath.cs is properly configured");  	Console.WriteLine ("After pressing return an exception will be thrown and the server will terminate");  	throw new Exception (String.Format ("TileData: {0} not found"' filePath));  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,The following statement contains a magic number: if (File.Exists (filePath)) {  	using (var fs = new FileStream (filePath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var bin = new BinaryReader (fs);  		if (fs.Length >= 3188736) {  			// 7.0.9.0  			m_LandData = new LandData[0x4000];  			for (int i = 0; i < 0x4000; ++i) {  				if (i == 1 || (i > 0 && (i & 0x1F) == 0)) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt64 ();  				bin.ReadInt16 ();  				// skip 2 bytes -- textureID  				m_LandData [i] = new LandData (ReadNameString (bin)' flags);  			}  			m_ItemData = new ItemData[0x10000];  			for (int i = 0; i < 0x10000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt64 ();  				int weight = bin.ReadByte ();  				int quality = bin.ReadByte ();  				bin.ReadInt16 ();  				bin.ReadByte ();  				int quantity = bin.ReadByte ();  				bin.ReadInt32 ();  				bin.ReadByte ();  				int value = bin.ReadByte ();  				int height = bin.ReadByte ();  				m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  			}  		} else {  			m_LandData = new LandData[0x4000];  			for (int i = 0; i < 0x4000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt32 ();  				bin.ReadInt16 ();  				// skip 2 bytes -- textureID  				m_LandData [i] = new LandData (ReadNameString (bin)' flags);  			}  			if (fs.Length == 1644544) {  				// 7.0.0.0  				m_ItemData = new ItemData[0x8000];  				for (int i = 0; i < 0x8000; ++i) {  					if ((i & 0x1F) == 0) {  						bin.ReadInt32 ();  						// header  					}  					var flags = (TileFlag)bin.ReadInt32 ();  					int weight = bin.ReadByte ();  					int quality = bin.ReadByte ();  					bin.ReadInt16 ();  					bin.ReadByte ();  					int quantity = bin.ReadByte ();  					bin.ReadInt32 ();  					bin.ReadByte ();  					int value = bin.ReadByte ();  					int height = bin.ReadByte ();  					m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  				}  			} else {  				m_ItemData = new ItemData[0x4000];  				for (int i = 0; i < 0x4000; ++i) {  					if ((i & 0x1F) == 0) {  						bin.ReadInt32 ();  						// header  					}  					var flags = (TileFlag)bin.ReadInt32 ();  					int weight = bin.ReadByte ();  					int quality = bin.ReadByte ();  					bin.ReadInt16 ();  					bin.ReadByte ();  					int quantity = bin.ReadByte ();  					bin.ReadInt32 ();  					bin.ReadByte ();  					int value = bin.ReadByte ();  					int height = bin.ReadByte ();  					m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  				}  			}  		}  	}  	m_MaxLandValue = m_LandData.Length - 1;  	m_MaxItemValue = m_ItemData.Length - 1;  } else {  	Console.WriteLine ("tiledata.mul was not found");  	Console.WriteLine ("Make sure your Scripts/Misc/DataPath.cs is properly configured");  	Console.WriteLine ("After pressing return an exception will be thrown and the server will terminate");  	throw new Exception (String.Format ("TileData: {0} not found"' filePath));  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,The following statement contains a magic number: using (var fs = new FileStream (filePath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var bin = new BinaryReader (fs);  	if (fs.Length >= 3188736) {  		// 7.0.9.0  		m_LandData = new LandData[0x4000];  		for (int i = 0; i < 0x4000; ++i) {  			if (i == 1 || (i > 0 && (i & 0x1F) == 0)) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt64 ();  			bin.ReadInt16 ();  			// skip 2 bytes -- textureID  			m_LandData [i] = new LandData (ReadNameString (bin)' flags);  		}  		m_ItemData = new ItemData[0x10000];  		for (int i = 0; i < 0x10000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt64 ();  			int weight = bin.ReadByte ();  			int quality = bin.ReadByte ();  			bin.ReadInt16 ();  			bin.ReadByte ();  			int quantity = bin.ReadByte ();  			bin.ReadInt32 ();  			bin.ReadByte ();  			int value = bin.ReadByte ();  			int height = bin.ReadByte ();  			m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  		}  	} else {  		m_LandData = new LandData[0x4000];  		for (int i = 0; i < 0x4000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt32 ();  			bin.ReadInt16 ();  			// skip 2 bytes -- textureID  			m_LandData [i] = new LandData (ReadNameString (bin)' flags);  		}  		if (fs.Length == 1644544) {  			// 7.0.0.0  			m_ItemData = new ItemData[0x8000];  			for (int i = 0; i < 0x8000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt32 ();  				int weight = bin.ReadByte ();  				int quality = bin.ReadByte ();  				bin.ReadInt16 ();  				bin.ReadByte ();  				int quantity = bin.ReadByte ();  				bin.ReadInt32 ();  				bin.ReadByte ();  				int value = bin.ReadByte ();  				int height = bin.ReadByte ();  				m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  			}  		} else {  			m_ItemData = new ItemData[0x4000];  			for (int i = 0; i < 0x4000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt32 ();  				int weight = bin.ReadByte ();  				int quality = bin.ReadByte ();  				bin.ReadInt16 ();  				bin.ReadByte ();  				int quantity = bin.ReadByte ();  				bin.ReadInt32 ();  				bin.ReadByte ();  				int value = bin.ReadByte ();  				int height = bin.ReadByte ();  				m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  			}  		}  	}  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,The following statement contains a magic number: using (var fs = new FileStream (filePath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var bin = new BinaryReader (fs);  	if (fs.Length >= 3188736) {  		// 7.0.9.0  		m_LandData = new LandData[0x4000];  		for (int i = 0; i < 0x4000; ++i) {  			if (i == 1 || (i > 0 && (i & 0x1F) == 0)) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt64 ();  			bin.ReadInt16 ();  			// skip 2 bytes -- textureID  			m_LandData [i] = new LandData (ReadNameString (bin)' flags);  		}  		m_ItemData = new ItemData[0x10000];  		for (int i = 0; i < 0x10000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt64 ();  			int weight = bin.ReadByte ();  			int quality = bin.ReadByte ();  			bin.ReadInt16 ();  			bin.ReadByte ();  			int quantity = bin.ReadByte ();  			bin.ReadInt32 ();  			bin.ReadByte ();  			int value = bin.ReadByte ();  			int height = bin.ReadByte ();  			m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  		}  	} else {  		m_LandData = new LandData[0x4000];  		for (int i = 0; i < 0x4000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt32 ();  			bin.ReadInt16 ();  			// skip 2 bytes -- textureID  			m_LandData [i] = new LandData (ReadNameString (bin)' flags);  		}  		if (fs.Length == 1644544) {  			// 7.0.0.0  			m_ItemData = new ItemData[0x8000];  			for (int i = 0; i < 0x8000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt32 ();  				int weight = bin.ReadByte ();  				int quality = bin.ReadByte ();  				bin.ReadInt16 ();  				bin.ReadByte ();  				int quantity = bin.ReadByte ();  				bin.ReadInt32 ();  				bin.ReadByte ();  				int value = bin.ReadByte ();  				int height = bin.ReadByte ();  				m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  			}  		} else {  			m_ItemData = new ItemData[0x4000];  			for (int i = 0; i < 0x4000; ++i) {  				if ((i & 0x1F) == 0) {  					bin.ReadInt32 ();  					// header  				}  				var flags = (TileFlag)bin.ReadInt32 ();  				int weight = bin.ReadByte ();  				int quality = bin.ReadByte ();  				bin.ReadInt16 ();  				bin.ReadByte ();  				int quantity = bin.ReadByte ();  				bin.ReadInt32 ();  				bin.ReadByte ();  				int value = bin.ReadByte ();  				int height = bin.ReadByte ();  				m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  			}  		}  	}  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,The following statement contains a magic number: if (fs.Length >= 3188736) {  	// 7.0.9.0  	m_LandData = new LandData[0x4000];  	for (int i = 0; i < 0x4000; ++i) {  		if (i == 1 || (i > 0 && (i & 0x1F) == 0)) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt64 ();  		bin.ReadInt16 ();  		// skip 2 bytes -- textureID  		m_LandData [i] = new LandData (ReadNameString (bin)' flags);  	}  	m_ItemData = new ItemData[0x10000];  	for (int i = 0; i < 0x10000; ++i) {  		if ((i & 0x1F) == 0) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt64 ();  		int weight = bin.ReadByte ();  		int quality = bin.ReadByte ();  		bin.ReadInt16 ();  		bin.ReadByte ();  		int quantity = bin.ReadByte ();  		bin.ReadInt32 ();  		bin.ReadByte ();  		int value = bin.ReadByte ();  		int height = bin.ReadByte ();  		m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  	}  } else {  	m_LandData = new LandData[0x4000];  	for (int i = 0; i < 0x4000; ++i) {  		if ((i & 0x1F) == 0) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt32 ();  		bin.ReadInt16 ();  		// skip 2 bytes -- textureID  		m_LandData [i] = new LandData (ReadNameString (bin)' flags);  	}  	if (fs.Length == 1644544) {  		// 7.0.0.0  		m_ItemData = new ItemData[0x8000];  		for (int i = 0; i < 0x8000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt32 ();  			int weight = bin.ReadByte ();  			int quality = bin.ReadByte ();  			bin.ReadInt16 ();  			bin.ReadByte ();  			int quantity = bin.ReadByte ();  			bin.ReadInt32 ();  			bin.ReadByte ();  			int value = bin.ReadByte ();  			int height = bin.ReadByte ();  			m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  		}  	} else {  		m_ItemData = new ItemData[0x4000];  		for (int i = 0; i < 0x4000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt32 ();  			int weight = bin.ReadByte ();  			int quality = bin.ReadByte ();  			bin.ReadInt16 ();  			bin.ReadByte ();  			int quantity = bin.ReadByte ();  			bin.ReadInt32 ();  			bin.ReadByte ();  			int value = bin.ReadByte ();  			int height = bin.ReadByte ();  			m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  		}  	}  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,The following statement contains a magic number: if (fs.Length >= 3188736) {  	// 7.0.9.0  	m_LandData = new LandData[0x4000];  	for (int i = 0; i < 0x4000; ++i) {  		if (i == 1 || (i > 0 && (i & 0x1F) == 0)) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt64 ();  		bin.ReadInt16 ();  		// skip 2 bytes -- textureID  		m_LandData [i] = new LandData (ReadNameString (bin)' flags);  	}  	m_ItemData = new ItemData[0x10000];  	for (int i = 0; i < 0x10000; ++i) {  		if ((i & 0x1F) == 0) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt64 ();  		int weight = bin.ReadByte ();  		int quality = bin.ReadByte ();  		bin.ReadInt16 ();  		bin.ReadByte ();  		int quantity = bin.ReadByte ();  		bin.ReadInt32 ();  		bin.ReadByte ();  		int value = bin.ReadByte ();  		int height = bin.ReadByte ();  		m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  	}  } else {  	m_LandData = new LandData[0x4000];  	for (int i = 0; i < 0x4000; ++i) {  		if ((i & 0x1F) == 0) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt32 ();  		bin.ReadInt16 ();  		// skip 2 bytes -- textureID  		m_LandData [i] = new LandData (ReadNameString (bin)' flags);  	}  	if (fs.Length == 1644544) {  		// 7.0.0.0  		m_ItemData = new ItemData[0x8000];  		for (int i = 0; i < 0x8000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt32 ();  			int weight = bin.ReadByte ();  			int quality = bin.ReadByte ();  			bin.ReadInt16 ();  			bin.ReadByte ();  			int quantity = bin.ReadByte ();  			bin.ReadInt32 ();  			bin.ReadByte ();  			int value = bin.ReadByte ();  			int height = bin.ReadByte ();  			m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  		}  	} else {  		m_ItemData = new ItemData[0x4000];  		for (int i = 0; i < 0x4000; ++i) {  			if ((i & 0x1F) == 0) {  				bin.ReadInt32 ();  				// header  			}  			var flags = (TileFlag)bin.ReadInt32 ();  			int weight = bin.ReadByte ();  			int quality = bin.ReadByte ();  			bin.ReadInt16 ();  			bin.ReadByte ();  			int quantity = bin.ReadByte ();  			bin.ReadInt32 ();  			bin.ReadByte ();  			int value = bin.ReadByte ();  			int height = bin.ReadByte ();  			m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  		}  	}  }  
Magic Number,Server,TileData,F:\newReposMay17\JustUO_JustUO\Server\TileData.cs,TileData,The following statement contains a magic number: if (fs.Length == 1644544) {  	// 7.0.0.0  	m_ItemData = new ItemData[0x8000];  	for (int i = 0; i < 0x8000; ++i) {  		if ((i & 0x1F) == 0) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt32 ();  		int weight = bin.ReadByte ();  		int quality = bin.ReadByte ();  		bin.ReadInt16 ();  		bin.ReadByte ();  		int quantity = bin.ReadByte ();  		bin.ReadInt32 ();  		bin.ReadByte ();  		int value = bin.ReadByte ();  		int height = bin.ReadByte ();  		m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  	}  } else {  	m_ItemData = new ItemData[0x4000];  	for (int i = 0; i < 0x4000; ++i) {  		if ((i & 0x1F) == 0) {  			bin.ReadInt32 ();  			// header  		}  		var flags = (TileFlag)bin.ReadInt32 ();  		int weight = bin.ReadByte ();  		int quality = bin.ReadByte ();  		bin.ReadInt16 ();  		bin.ReadByte ();  		int quantity = bin.ReadByte ();  		bin.ReadInt32 ();  		bin.ReadByte ();  		int value = bin.ReadByte ();  		int height = bin.ReadByte ();  		m_ItemData [i] = new ItemData (ReadNameString (bin)' flags' weight' quality' quantity' value' height);  	}  }  
Magic Number,Server,TileList,F:\newReposMay17\JustUO_JustUO\Server\TileList.cs,TileList,The following statement contains a magic number: m_Tiles = new StaticTile[8];  
Magic Number,Server,TileList,F:\newReposMay17\JustUO_JustUO\Server\TileList.cs,AddRange,The following statement contains a magic number: if ((m_Count + tiles.Length) > m_Tiles.Length) {  	StaticTile[] old = m_Tiles;  	m_Tiles = new StaticTile[(m_Count + tiles.Length) * 2];  	for (int i = 0; i < old.Length; ++i) {  		m_Tiles [i] = old [i];  	}  }  
Magic Number,Server,TileList,F:\newReposMay17\JustUO_JustUO\Server\TileList.cs,AddRange,The following statement contains a magic number: m_Tiles = new StaticTile[(m_Count + tiles.Length) * 2];  
Magic Number,Server,TileList,F:\newReposMay17\JustUO_JustUO\Server\TileList.cs,Add,The following statement contains a magic number: if ((m_Count + 1) > m_Tiles.Length) {  	StaticTile[] old = m_Tiles;  	m_Tiles = new StaticTile[old.Length * 2];  	for (int i = 0; i < old.Length; ++i) {  		m_Tiles [i] = old [i];  	}  }  
Magic Number,Server,TileList,F:\newReposMay17\JustUO_JustUO\Server\TileList.cs,Add,The following statement contains a magic number: m_Tiles = new StaticTile[old.Length * 2];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_BlockWidth = width >> 3;  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_BlockHeight = height >> 3;  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_EmptyStaticBlock = new StaticTile[8][][];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_EmptyStaticBlock [i] = new StaticTile[8][];  	for (int j = 0; j < 8; ++j) {  		m_EmptyStaticBlock [i] [j] = new StaticTile[0];  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_EmptyStaticBlock [i] = new StaticTile[8][];  	for (int j = 0; j < 8; ++j) {  		m_EmptyStaticBlock [i] [j] = new StaticTile[0];  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_EmptyStaticBlock [i] = new StaticTile[8][];  	for (int j = 0; j < 8; ++j) {  		m_EmptyStaticBlock [i] [j] = new StaticTile[0];  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_EmptyStaticBlock [i] = new StaticTile[8][];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: for (int j = 0; j < 8; ++j) {  	m_EmptyStaticBlock [i] [j] = new StaticTile[0];  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,TileMatrix,The following statement contains a magic number: m_InvalidLandBlock = new LandTile[196];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: if (m_StaticPatches [x] == null) {  	m_StaticPatches [x] = new int[(m_BlockHeight + 31) >> 5];  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: if (m_StaticPatches [x] == null) {  	m_StaticPatches [x] = new int[(m_BlockHeight + 31) >> 5];  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: m_StaticPatches [x] = new int[(m_BlockHeight + 31) >> 5];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: m_StaticPatches [x] = new int[(m_BlockHeight + 31) >> 5];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetStaticBlock,The following statement contains a magic number: m_StaticPatches [x] [y >> 5] |= 1 << (y & 0x1F);  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,The following statement contains a magic number: if (tiles == null) {  	for (int i = 0; tiles == null && i < m_FileShare.Count; ++i) {  		TileMatrix shared = m_FileShare [i];  		if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  			StaticTile[][][][] theirTiles = shared.m_StaticTiles [x];  			if (theirTiles != null)  				tiles = theirTiles [y];  			if (tiles != null) {  				int[] theirBits = shared.m_StaticPatches [x];  				if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0)  					tiles = null;  			}  		}  	}  	if (tiles == null)  		tiles = ReadStaticBlock (x' y);  	m_StaticTiles [x] [y] = tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,The following statement contains a magic number: for (int i = 0; tiles == null && i < m_FileShare.Count; ++i) {  	TileMatrix shared = m_FileShare [i];  	if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  		StaticTile[][][][] theirTiles = shared.m_StaticTiles [x];  		if (theirTiles != null)  			tiles = theirTiles [y];  		if (tiles != null) {  			int[] theirBits = shared.m_StaticPatches [x];  			if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0)  				tiles = null;  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,The following statement contains a magic number: if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  	StaticTile[][][][] theirTiles = shared.m_StaticTiles [x];  	if (theirTiles != null)  		tiles = theirTiles [y];  	if (tiles != null) {  		int[] theirBits = shared.m_StaticPatches [x];  		if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0)  			tiles = null;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,The following statement contains a magic number: if (tiles != null) {  	int[] theirBits = shared.m_StaticPatches [x];  	if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0)  		tiles = null;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetStaticBlock,The following statement contains a magic number: if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0)  	tiles = null;  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: if (m_LandPatches [x] == null) {  	m_LandPatches [x] = new int[(m_BlockHeight + 31) >> 5];  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: if (m_LandPatches [x] == null) {  	m_LandPatches [x] = new int[(m_BlockHeight + 31) >> 5];  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: m_LandPatches [x] = new int[(m_BlockHeight + 31) >> 5];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: m_LandPatches [x] = new int[(m_BlockHeight + 31) >> 5];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,SetLandBlock,The following statement contains a magic number: m_LandPatches [x] [y >> 5] |= 1 << (y & 0x1F);  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: if (tiles == null) {  	lock (m_FileShare) {  		for (int i = 0; tiles == null && i < m_FileShare.Count; ++i) {  			TileMatrix shared = m_FileShare [i];  			lock (shared) {  				if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  					LandTile[][] theirTiles = shared.m_LandTiles [x];  					if (theirTiles != null) {  						tiles = theirTiles [y];  					}  					if (tiles != null) {  						int[] theirBits = shared.m_LandPatches [x];  						if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0) {  							tiles = null;  						}  					}  				}  			}  		}  	}  	if (tiles == null) {  		tiles = ReadLandBlock (x' y);  	}  	m_LandTiles [x] [y] = tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: lock (m_FileShare) {  	for (int i = 0; tiles == null && i < m_FileShare.Count; ++i) {  		TileMatrix shared = m_FileShare [i];  		lock (shared) {  			if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  				LandTile[][] theirTiles = shared.m_LandTiles [x];  				if (theirTiles != null) {  					tiles = theirTiles [y];  				}  				if (tiles != null) {  					int[] theirBits = shared.m_LandPatches [x];  					if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0) {  						tiles = null;  					}  				}  			}  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: for (int i = 0; tiles == null && i < m_FileShare.Count; ++i) {  	TileMatrix shared = m_FileShare [i];  	lock (shared) {  		if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  			LandTile[][] theirTiles = shared.m_LandTiles [x];  			if (theirTiles != null) {  				tiles = theirTiles [y];  			}  			if (tiles != null) {  				int[] theirBits = shared.m_LandPatches [x];  				if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0) {  					tiles = null;  				}  			}  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: lock (shared) {  	if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  		LandTile[][] theirTiles = shared.m_LandTiles [x];  		if (theirTiles != null) {  			tiles = theirTiles [y];  		}  		if (tiles != null) {  			int[] theirBits = shared.m_LandPatches [x];  			if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0) {  				tiles = null;  			}  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: if (x >= 0 && x < shared.m_BlockWidth && y >= 0 && y < shared.m_BlockHeight) {  	LandTile[][] theirTiles = shared.m_LandTiles [x];  	if (theirTiles != null) {  		tiles = theirTiles [y];  	}  	if (tiles != null) {  		int[] theirBits = shared.m_LandPatches [x];  		if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0) {  			tiles = null;  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: if (tiles != null) {  	int[] theirBits = shared.m_LandPatches [x];  	if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0) {  		tiles = null;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandBlock,The following statement contains a magic number: if (theirBits != null && (theirBits [y >> 5] & (1 << (y & 0x1F))) != 0) {  	tiles = null;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,GetLandTile,The following statement contains a magic number: return tiles [((y & 0x7) << 3) + (x & 0x7)];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: try {  	m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  	int lookup = m_IndexReader.ReadInt32 ();  	int length = m_IndexReader.ReadInt32 ();  	if (lookup < 0 || length <= 0) {  		return m_EmptyStaticBlock;  	} else {  		int count = length / 7;  		m_Statics.Seek (lookup' SeekOrigin.Begin);  		if (m_TileBuffer.Length < count) {  			m_TileBuffer = new StaticTile[count];  		}  		StaticTile[] staTiles = m_TileBuffer;  		//new StaticTile[tileCount];  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  									NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  			if (m_Lists == null) {  				m_Lists = new TileList[8][];  				for (int i = 0; i < 8; ++i) {  					m_Lists [i] = new TileList[8];  					for (int j = 0; j < 8; ++j) {  						m_Lists [i] [j] = new TileList ();  					}  				}  			}  			TileList[][] lists = m_Lists;  			StaticTile* pCur = pTiles' pEnd = pTiles + count;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int i = 0; i < 8; ++i) {  				tiles [i] = new StaticTile[8][];  				for (int j = 0; j < 8; ++j) {  					tiles [i] [j] = lists [i] [j].ToArray ();  				}  			}  			return tiles;  		}  	}  } catch (EndOfStreamException) {  	if (DateTime.UtcNow >= m_NextStaticWarning) {  		Console.WriteLine ("Warning: Static EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextStaticWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_EmptyStaticBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: m_IndexReader.BaseStream.Seek (((x * m_BlockHeight) + y) * 12' SeekOrigin.Begin);  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (lookup < 0 || length <= 0) {  	return m_EmptyStaticBlock;  } else {  	int count = length / 7;  	m_Statics.Seek (lookup' SeekOrigin.Begin);  	if (m_TileBuffer.Length < count) {  		m_TileBuffer = new StaticTile[count];  	}  	StaticTile[] staTiles = m_TileBuffer;  	//new StaticTile[tileCount];  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  								NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  		if (m_Lists == null) {  			m_Lists = new TileList[8][];  			for (int i = 0; i < 8; ++i) {  				m_Lists [i] = new TileList[8];  				for (int j = 0; j < 8; ++j) {  					m_Lists [i] [j] = new TileList ();  				}  			}  		}  		TileList[][] lists = m_Lists;  		StaticTile* pCur = pTiles' pEnd = pTiles + count;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int i = 0; i < 8; ++i) {  			tiles [i] = new StaticTile[8][];  			for (int j = 0; j < 8; ++j) {  				tiles [i] [j] = lists [i] [j].ToArray ();  			}  		}  		return tiles;  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (m_Statics.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  							NativeReader.Read( m_Statics.Handle' pTiles' length ); #endif  	if (m_Lists == null) {  		m_Lists = new TileList[8][];  		for (int i = 0; i < 8; ++i) {  			m_Lists [i] = new TileList[8];  			for (int j = 0; j < 8; ++j) {  				m_Lists [i] [j] = new TileList ();  			}  		}  	}  	TileList[][] lists = m_Lists;  	StaticTile* pCur = pTiles' pEnd = pTiles + count;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int i = 0; i < 8; ++i) {  		tiles [i] = new StaticTile[8][];  		for (int j = 0; j < 8; ++j) {  			tiles [i] [j] = lists [i] [j].ToArray ();  		}  	}  	return tiles;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (m_Lists == null) {  	m_Lists = new TileList[8][];  	for (int i = 0; i < 8; ++i) {  		m_Lists [i] = new TileList[8];  		for (int j = 0; j < 8; ++j) {  			m_Lists [i] [j] = new TileList ();  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (m_Lists == null) {  	m_Lists = new TileList[8][];  	for (int i = 0; i < 8; ++i) {  		m_Lists [i] = new TileList[8];  		for (int j = 0; j < 8; ++j) {  			m_Lists [i] [j] = new TileList ();  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (m_Lists == null) {  	m_Lists = new TileList[8][];  	for (int i = 0; i < 8; ++i) {  		m_Lists [i] = new TileList[8];  		for (int j = 0; j < 8; ++j) {  			m_Lists [i] [j] = new TileList ();  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: if (m_Lists == null) {  	m_Lists = new TileList[8][];  	for (int i = 0; i < 8; ++i) {  		m_Lists [i] = new TileList[8];  		for (int j = 0; j < 8; ++j) {  			m_Lists [i] [j] = new TileList ();  		}  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: m_Lists = new TileList[8][];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_Lists [i] = new TileList[8];  	for (int j = 0; j < 8; ++j) {  		m_Lists [i] [j] = new TileList ();  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_Lists [i] = new TileList[8];  	for (int j = 0; j < 8; ++j) {  		m_Lists [i] [j] = new TileList ();  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_Lists [i] = new TileList[8];  	for (int j = 0; j < 8; ++j) {  		m_Lists [i] [j] = new TileList ();  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: m_Lists [i] = new TileList[8];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int j = 0; j < 8; ++j) {  	m_Lists [i] [j] = new TileList ();  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	tiles [i] = new StaticTile[8][];  	for (int j = 0; j < 8; ++j) {  		tiles [i] [j] = lists [i] [j].ToArray ();  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	tiles [i] = new StaticTile[8][];  	for (int j = 0; j < 8; ++j) {  		tiles [i] [j] = lists [i] [j].ToArray ();  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	tiles [i] = new StaticTile[8][];  	for (int j = 0; j < 8; ++j) {  		tiles [i] [j] = lists [i] [j].ToArray ();  	}  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: tiles [i] = new StaticTile[8][];  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadStaticBlock,The following statement contains a magic number: for (int j = 0; j < 8; ++j) {  	tiles [i] [j] = lists [i] [j].ToArray ();  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try {  	int offset = ((x * m_BlockHeight) + y) * 196 + 4;  	if (m_MapIndex != null) {  		offset = m_MapIndex.Lookup (offset);  	}  	m_Map.Seek (offset' SeekOrigin.Begin);  	var tiles = new LandTile[64];  	fixed (LandTile* pTiles = tiles) {  		#if !MONO  		NativeReader.Read (m_Map.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  		#else  							NativeReader.Read( m_Map.Handle' pTiles' 192 ); #endif  	}  	return tiles;  } catch {  	if (DateTime.UtcNow >= m_NextLandWarning) {  		Console.WriteLine ("Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_InvalidLandBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try {  	int offset = ((x * m_BlockHeight) + y) * 196 + 4;  	if (m_MapIndex != null) {  		offset = m_MapIndex.Lookup (offset);  	}  	m_Map.Seek (offset' SeekOrigin.Begin);  	var tiles = new LandTile[64];  	fixed (LandTile* pTiles = tiles) {  		#if !MONO  		NativeReader.Read (m_Map.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  		#else  							NativeReader.Read( m_Map.Handle' pTiles' 192 ); #endif  	}  	return tiles;  } catch {  	if (DateTime.UtcNow >= m_NextLandWarning) {  		Console.WriteLine ("Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_InvalidLandBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try {  	int offset = ((x * m_BlockHeight) + y) * 196 + 4;  	if (m_MapIndex != null) {  		offset = m_MapIndex.Lookup (offset);  	}  	m_Map.Seek (offset' SeekOrigin.Begin);  	var tiles = new LandTile[64];  	fixed (LandTile* pTiles = tiles) {  		#if !MONO  		NativeReader.Read (m_Map.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  		#else  							NativeReader.Read( m_Map.Handle' pTiles' 192 ); #endif  	}  	return tiles;  } catch {  	if (DateTime.UtcNow >= m_NextLandWarning) {  		Console.WriteLine ("Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_InvalidLandBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: try {  	int offset = ((x * m_BlockHeight) + y) * 196 + 4;  	if (m_MapIndex != null) {  		offset = m_MapIndex.Lookup (offset);  	}  	m_Map.Seek (offset' SeekOrigin.Begin);  	var tiles = new LandTile[64];  	fixed (LandTile* pTiles = tiles) {  		#if !MONO  		NativeReader.Read (m_Map.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  		#else  							NativeReader.Read( m_Map.Handle' pTiles' 192 ); #endif  	}  	return tiles;  } catch {  	if (DateTime.UtcNow >= m_NextLandWarning) {  		Console.WriteLine ("Warning: Land EOS for {0} ({1}' {2})"' m_Owner' x' y);  		m_NextLandWarning = DateTime.UtcNow + TimeSpan.FromMinutes (1.0);  	}  	return m_InvalidLandBlock;  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: fixed (LandTile* pTiles = tiles) {  	#if !MONO  	NativeReader.Read (m_Map.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  	#else  						NativeReader.Read( m_Map.Handle' pTiles' 192 ); #endif  }  
Magic Number,Server,TileMatrix,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,ReadLandBlock,The following statement contains a magic number: NativeReader.Read (m_Map.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: do {  	stream.Seek (nextTable' SeekOrigin.Begin);  	int count = m_Reader.ReadInt32 ();  	nextTable = m_Reader.ReadInt32 ();  	m_Reader.ReadInt32 ();  	for (int i = 0; i < count; ++i) {  		int offset = m_Reader.ReadInt32 ();  		if (offset == 0) {  			stream.Seek (30' SeekOrigin.Current);  			continue;  		}  		m_Reader.ReadInt64 ();  		int length = m_Reader.ReadInt32 ();  		entries.Add (new UOPEntry (offset' length));  		stream.Seek (18' SeekOrigin.Current);  	}  } while (nextTable != 0 && nextTable < m_Length);  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: do {  	stream.Seek (nextTable' SeekOrigin.Begin);  	int count = m_Reader.ReadInt32 ();  	nextTable = m_Reader.ReadInt32 ();  	m_Reader.ReadInt32 ();  	for (int i = 0; i < count; ++i) {  		int offset = m_Reader.ReadInt32 ();  		if (offset == 0) {  			stream.Seek (30' SeekOrigin.Current);  			continue;  		}  		m_Reader.ReadInt64 ();  		int length = m_Reader.ReadInt32 ();  		entries.Add (new UOPEntry (offset' length));  		stream.Seek (18' SeekOrigin.Current);  	}  } while (nextTable != 0 && nextTable < m_Length);  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int offset = m_Reader.ReadInt32 ();  	if (offset == 0) {  		stream.Seek (30' SeekOrigin.Current);  		continue;  	}  	m_Reader.ReadInt64 ();  	int length = m_Reader.ReadInt32 ();  	entries.Add (new UOPEntry (offset' length));  	stream.Seek (18' SeekOrigin.Current);  }  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int offset = m_Reader.ReadInt32 ();  	if (offset == 0) {  		stream.Seek (30' SeekOrigin.Current);  		continue;  	}  	m_Reader.ReadInt64 ();  	int length = m_Reader.ReadInt32 ();  	entries.Add (new UOPEntry (offset' length));  	stream.Seek (18' SeekOrigin.Current);  }  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: if (offset == 0) {  	stream.Seek (30' SeekOrigin.Current);  	continue;  }  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: stream.Seek (30' SeekOrigin.Current);  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: stream.Seek (18' SeekOrigin.Current);  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for (int i = 0; i < entries.Count; ++i) {  	stream.Seek (entries [i].m_Offset + 2' SeekOrigin.Begin);  	int dataOffset = m_Reader.ReadInt16 ();  	entries [i].m_Offset += 4 + dataOffset;  	stream.Seek (dataOffset' SeekOrigin.Current);  	entries [i].m_Order = m_Reader.ReadInt32 ();  }  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: for (int i = 0; i < entries.Count; ++i) {  	stream.Seek (entries [i].m_Offset + 2' SeekOrigin.Begin);  	int dataOffset = m_Reader.ReadInt16 ();  	entries [i].m_Offset += 4 + dataOffset;  	stream.Seek (dataOffset' SeekOrigin.Current);  	entries [i].m_Order = m_Reader.ReadInt32 ();  }  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: stream.Seek (entries [i].m_Offset + 2' SeekOrigin.Begin);  
Magic Number,Server,UOPIndex,F:\newReposMay17\JustUO_JustUO\Server\TileMatrix.cs,UOPIndex,The following statement contains a magic number: entries [i].m_Offset += 4 + dataOffset;  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var count = (int)(indexReader.BaseStream.Length / 4);  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int x = blockID / matrix.BlockHeight;  			int y = blockID % matrix.BlockHeight;  			fsData.Seek (4' SeekOrigin.Current);  			var tiles = new LandTile[64];  			fixed (LandTile* pTiles = tiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  				#else  											NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  			}  			matrix.SetLandBlock (x' y' tiles);  		}  		indexReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var count = (int)(indexReader.BaseStream.Length / 4);  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int x = blockID / matrix.BlockHeight;  			int y = blockID % matrix.BlockHeight;  			fsData.Seek (4' SeekOrigin.Current);  			var tiles = new LandTile[64];  			fixed (LandTile* pTiles = tiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  				#else  											NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  			}  			matrix.SetLandBlock (x' y' tiles);  		}  		indexReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var count = (int)(indexReader.BaseStream.Length / 4);  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int x = blockID / matrix.BlockHeight;  			int y = blockID % matrix.BlockHeight;  			fsData.Seek (4' SeekOrigin.Current);  			var tiles = new LandTile[64];  			fixed (LandTile* pTiles = tiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  				#else  											NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  			}  			matrix.SetLandBlock (x' y' tiles);  		}  		indexReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var count = (int)(indexReader.BaseStream.Length / 4);  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int x = blockID / matrix.BlockHeight;  			int y = blockID % matrix.BlockHeight;  			fsData.Seek (4' SeekOrigin.Current);  			var tiles = new LandTile[64];  			fixed (LandTile* pTiles = tiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  				#else  											NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  			}  			matrix.SetLandBlock (x' y' tiles);  		}  		indexReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var count = (int)(indexReader.BaseStream.Length / 4);  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int x = blockID / matrix.BlockHeight;  		int y = blockID % matrix.BlockHeight;  		fsData.Seek (4' SeekOrigin.Current);  		var tiles = new LandTile[64];  		fixed (LandTile* pTiles = tiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  			#else  										NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  		}  		matrix.SetLandBlock (x' y' tiles);  	}  	indexReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var count = (int)(indexReader.BaseStream.Length / 4);  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int x = blockID / matrix.BlockHeight;  		int y = blockID % matrix.BlockHeight;  		fsData.Seek (4' SeekOrigin.Current);  		var tiles = new LandTile[64];  		fixed (LandTile* pTiles = tiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  			#else  										NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  		}  		matrix.SetLandBlock (x' y' tiles);  	}  	indexReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var count = (int)(indexReader.BaseStream.Length / 4);  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int x = blockID / matrix.BlockHeight;  		int y = blockID % matrix.BlockHeight;  		fsData.Seek (4' SeekOrigin.Current);  		var tiles = new LandTile[64];  		fixed (LandTile* pTiles = tiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  			#else  										NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  		}  		matrix.SetLandBlock (x' y' tiles);  	}  	indexReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var count = (int)(indexReader.BaseStream.Length / 4);  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int x = blockID / matrix.BlockHeight;  		int y = blockID % matrix.BlockHeight;  		fsData.Seek (4' SeekOrigin.Current);  		var tiles = new LandTile[64];  		fixed (LandTile* pTiles = tiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  			#else  										NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  		}  		matrix.SetLandBlock (x' y' tiles);  	}  	indexReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int x = blockID / matrix.BlockHeight;  	int y = blockID % matrix.BlockHeight;  	fsData.Seek (4' SeekOrigin.Current);  	var tiles = new LandTile[64];  	fixed (LandTile* pTiles = tiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  		#else  									NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  	}  	matrix.SetLandBlock (x' y' tiles);  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int x = blockID / matrix.BlockHeight;  	int y = blockID % matrix.BlockHeight;  	fsData.Seek (4' SeekOrigin.Current);  	var tiles = new LandTile[64];  	fixed (LandTile* pTiles = tiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  		#else  									NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  	}  	matrix.SetLandBlock (x' y' tiles);  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int x = blockID / matrix.BlockHeight;  	int y = blockID % matrix.BlockHeight;  	fsData.Seek (4' SeekOrigin.Current);  	var tiles = new LandTile[64];  	fixed (LandTile* pTiles = tiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  		#else  									NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  	}  	matrix.SetLandBlock (x' y' tiles);  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: fsData.Seek (4' SeekOrigin.Current);  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: fixed (LandTile* pTiles = tiles) {  	#if !MONO  	NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  	#else  								NativeReader.Read( fsData.Handle' pTiles' 192 ); #endif  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchLand,The following statement contains a magic number: NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' 192);  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsData = new FileStream (dataPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  			var indexReader = new BinaryReader (fsIndex);  			var lookupReader = new BinaryReader (fsLookup);  			var count = (int)(indexReader.BaseStream.Length / 4);  			var lists = new TileList[8][];  			for (int x = 0; x < 8; ++x) {  				lists [x] = new TileList[8];  				for (int y = 0; y < 8; ++y) {  					lists [x] [y] = new TileList ();  				}  			}  			for (int i = 0; i < count; ++i) {  				int blockID = indexReader.ReadInt32 ();  				int blockX = blockID / matrix.BlockHeight;  				int blockY = blockID % matrix.BlockHeight;  				int offset = lookupReader.ReadInt32 ();  				int length = lookupReader.ReadInt32 ();  				lookupReader.ReadInt32 ();  				// Extra  				if (offset < 0 || length <= 0) {  					matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  					continue;  				}  				fsData.Seek (offset' SeekOrigin.Begin);  				int tileCount = length / 7;  				if (m_TileBuffer.Length < tileCount) {  					m_TileBuffer = new StaticTile[tileCount];  				}  				StaticTile[] staTiles = m_TileBuffer;  				fixed (StaticTile* pTiles = staTiles) {  					#if !MONO  					NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  					#else  													NativeReader.Read( fsData.Handle' pTiles' length ); #endif  					StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  					while (pCur < pEnd) {  						lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  						pCur = pCur + 1;  					}  					var tiles = new StaticTile[8][][];  					for (int x = 0; x < 8; ++x) {  						tiles [x] = new StaticTile[8][];  						for (int y = 0; y < 8; ++y) {  							tiles [x] [y] = lists [x] [y].ToArray ();  						}  					}  					matrix.SetStaticBlock (blockX' blockY' tiles);  				}  			}  			indexReader.Close ();  			lookupReader.Close ();  			return count;  		}  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsIndex = new FileStream (indexPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		var indexReader = new BinaryReader (fsIndex);  		var lookupReader = new BinaryReader (fsLookup);  		var count = (int)(indexReader.BaseStream.Length / 4);  		var lists = new TileList[8][];  		for (int x = 0; x < 8; ++x) {  			lists [x] = new TileList[8];  			for (int y = 0; y < 8; ++y) {  				lists [x] [y] = new TileList ();  			}  		}  		for (int i = 0; i < count; ++i) {  			int blockID = indexReader.ReadInt32 ();  			int blockX = blockID / matrix.BlockHeight;  			int blockY = blockID % matrix.BlockHeight;  			int offset = lookupReader.ReadInt32 ();  			int length = lookupReader.ReadInt32 ();  			lookupReader.ReadInt32 ();  			// Extra  			if (offset < 0 || length <= 0) {  				matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  				continue;  			}  			fsData.Seek (offset' SeekOrigin.Begin);  			int tileCount = length / 7;  			if (m_TileBuffer.Length < tileCount) {  				m_TileBuffer = new StaticTile[tileCount];  			}  			StaticTile[] staTiles = m_TileBuffer;  			fixed (StaticTile* pTiles = staTiles) {  				#if !MONO  				NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  				#else  												NativeReader.Read( fsData.Handle' pTiles' length ); #endif  				StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  				while (pCur < pEnd) {  					lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  					pCur = pCur + 1;  				}  				var tiles = new StaticTile[8][][];  				for (int x = 0; x < 8; ++x) {  					tiles [x] = new StaticTile[8][];  					for (int y = 0; y < 8; ++y) {  						tiles [x] [y] = lists [x] [y].ToArray ();  					}  				}  				matrix.SetStaticBlock (blockX' blockY' tiles);  			}  		}  		indexReader.Close ();  		lookupReader.Close ();  		return count;  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: using (var fsLookup = new FileStream (lookupPath' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	var indexReader = new BinaryReader (fsIndex);  	var lookupReader = new BinaryReader (fsLookup);  	var count = (int)(indexReader.BaseStream.Length / 4);  	var lists = new TileList[8][];  	for (int x = 0; x < 8; ++x) {  		lists [x] = new TileList[8];  		for (int y = 0; y < 8; ++y) {  			lists [x] [y] = new TileList ();  		}  	}  	for (int i = 0; i < count; ++i) {  		int blockID = indexReader.ReadInt32 ();  		int blockX = blockID / matrix.BlockHeight;  		int blockY = blockID % matrix.BlockHeight;  		int offset = lookupReader.ReadInt32 ();  		int length = lookupReader.ReadInt32 ();  		lookupReader.ReadInt32 ();  		// Extra  		if (offset < 0 || length <= 0) {  			matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  			continue;  		}  		fsData.Seek (offset' SeekOrigin.Begin);  		int tileCount = length / 7;  		if (m_TileBuffer.Length < tileCount) {  			m_TileBuffer = new StaticTile[tileCount];  		}  		StaticTile[] staTiles = m_TileBuffer;  		fixed (StaticTile* pTiles = staTiles) {  			#if !MONO  			NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  			#else  											NativeReader.Read( fsData.Handle' pTiles' length ); #endif  			StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  			while (pCur < pEnd) {  				lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  				pCur = pCur + 1;  			}  			var tiles = new StaticTile[8][][];  			for (int x = 0; x < 8; ++x) {  				tiles [x] = new StaticTile[8][];  				for (int y = 0; y < 8; ++y) {  					tiles [x] [y] = lists [x] [y].ToArray ();  				}  			}  			matrix.SetStaticBlock (blockX' blockY' tiles);  		}  	}  	indexReader.Close ();  	lookupReader.Close ();  	return count;  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int x = 0; x < 8; ++x) {  	lists [x] = new TileList[8];  	for (int y = 0; y < 8; ++y) {  		lists [x] [y] = new TileList ();  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int x = 0; x < 8; ++x) {  	lists [x] = new TileList[8];  	for (int y = 0; y < 8; ++y) {  		lists [x] [y] = new TileList ();  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int x = 0; x < 8; ++x) {  	lists [x] = new TileList[8];  	for (int y = 0; y < 8; ++y) {  		lists [x] [y] = new TileList ();  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: lists [x] = new TileList[8];  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int y = 0; y < 8; ++y) {  	lists [x] [y] = new TileList ();  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int blockX = blockID / matrix.BlockHeight;  	int blockY = blockID % matrix.BlockHeight;  	int offset = lookupReader.ReadInt32 ();  	int length = lookupReader.ReadInt32 ();  	lookupReader.ReadInt32 ();  	// Extra  	if (offset < 0 || length <= 0) {  		matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  		continue;  	}  	fsData.Seek (offset' SeekOrigin.Begin);  	int tileCount = length / 7;  	if (m_TileBuffer.Length < tileCount) {  		m_TileBuffer = new StaticTile[tileCount];  	}  	StaticTile[] staTiles = m_TileBuffer;  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  										NativeReader.Read( fsData.Handle' pTiles' length ); #endif  		StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int x = 0; x < 8; ++x) {  			tiles [x] = new StaticTile[8][];  			for (int y = 0; y < 8; ++y) {  				tiles [x] [y] = lists [x] [y].ToArray ();  			}  		}  		matrix.SetStaticBlock (blockX' blockY' tiles);  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int blockX = blockID / matrix.BlockHeight;  	int blockY = blockID % matrix.BlockHeight;  	int offset = lookupReader.ReadInt32 ();  	int length = lookupReader.ReadInt32 ();  	lookupReader.ReadInt32 ();  	// Extra  	if (offset < 0 || length <= 0) {  		matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  		continue;  	}  	fsData.Seek (offset' SeekOrigin.Begin);  	int tileCount = length / 7;  	if (m_TileBuffer.Length < tileCount) {  		m_TileBuffer = new StaticTile[tileCount];  	}  	StaticTile[] staTiles = m_TileBuffer;  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  										NativeReader.Read( fsData.Handle' pTiles' length ); #endif  		StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int x = 0; x < 8; ++x) {  			tiles [x] = new StaticTile[8][];  			for (int y = 0; y < 8; ++y) {  				tiles [x] [y] = lists [x] [y].ToArray ();  			}  		}  		matrix.SetStaticBlock (blockX' blockY' tiles);  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int blockX = blockID / matrix.BlockHeight;  	int blockY = blockID % matrix.BlockHeight;  	int offset = lookupReader.ReadInt32 ();  	int length = lookupReader.ReadInt32 ();  	lookupReader.ReadInt32 ();  	// Extra  	if (offset < 0 || length <= 0) {  		matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  		continue;  	}  	fsData.Seek (offset' SeekOrigin.Begin);  	int tileCount = length / 7;  	if (m_TileBuffer.Length < tileCount) {  		m_TileBuffer = new StaticTile[tileCount];  	}  	StaticTile[] staTiles = m_TileBuffer;  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  										NativeReader.Read( fsData.Handle' pTiles' length ); #endif  		StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int x = 0; x < 8; ++x) {  			tiles [x] = new StaticTile[8][];  			for (int y = 0; y < 8; ++y) {  				tiles [x] [y] = lists [x] [y].ToArray ();  			}  		}  		matrix.SetStaticBlock (blockX' blockY' tiles);  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int blockX = blockID / matrix.BlockHeight;  	int blockY = blockID % matrix.BlockHeight;  	int offset = lookupReader.ReadInt32 ();  	int length = lookupReader.ReadInt32 ();  	lookupReader.ReadInt32 ();  	// Extra  	if (offset < 0 || length <= 0) {  		matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  		continue;  	}  	fsData.Seek (offset' SeekOrigin.Begin);  	int tileCount = length / 7;  	if (m_TileBuffer.Length < tileCount) {  		m_TileBuffer = new StaticTile[tileCount];  	}  	StaticTile[] staTiles = m_TileBuffer;  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  										NativeReader.Read( fsData.Handle' pTiles' length ); #endif  		StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int x = 0; x < 8; ++x) {  			tiles [x] = new StaticTile[8][];  			for (int y = 0; y < 8; ++y) {  				tiles [x] [y] = lists [x] [y].ToArray ();  			}  		}  		matrix.SetStaticBlock (blockX' blockY' tiles);  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int blockID = indexReader.ReadInt32 ();  	int blockX = blockID / matrix.BlockHeight;  	int blockY = blockID % matrix.BlockHeight;  	int offset = lookupReader.ReadInt32 ();  	int length = lookupReader.ReadInt32 ();  	lookupReader.ReadInt32 ();  	// Extra  	if (offset < 0 || length <= 0) {  		matrix.SetStaticBlock (blockX' blockY' matrix.EmptyStaticBlock);  		continue;  	}  	fsData.Seek (offset' SeekOrigin.Begin);  	int tileCount = length / 7;  	if (m_TileBuffer.Length < tileCount) {  		m_TileBuffer = new StaticTile[tileCount];  	}  	StaticTile[] staTiles = m_TileBuffer;  	fixed (StaticTile* pTiles = staTiles) {  		#if !MONO  		NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  		#else  										NativeReader.Read( fsData.Handle' pTiles' length ); #endif  		StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  		while (pCur < pEnd) {  			lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  			pCur = pCur + 1;  		}  		var tiles = new StaticTile[8][][];  		for (int x = 0; x < 8; ++x) {  			tiles [x] = new StaticTile[8][];  			for (int y = 0; y < 8; ++y) {  				tiles [x] [y] = lists [x] [y].ToArray ();  			}  		}  		matrix.SetStaticBlock (blockX' blockY' tiles);  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  									NativeReader.Read( fsData.Handle' pTiles' length ); #endif  	StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int x = 0; x < 8; ++x) {  		tiles [x] = new StaticTile[8][];  		for (int y = 0; y < 8; ++y) {  			tiles [x] [y] = lists [x] [y].ToArray ();  		}  	}  	matrix.SetStaticBlock (blockX' blockY' tiles);  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  									NativeReader.Read( fsData.Handle' pTiles' length ); #endif  	StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int x = 0; x < 8; ++x) {  		tiles [x] = new StaticTile[8][];  		for (int y = 0; y < 8; ++y) {  			tiles [x] [y] = lists [x] [y].ToArray ();  		}  	}  	matrix.SetStaticBlock (blockX' blockY' tiles);  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  									NativeReader.Read( fsData.Handle' pTiles' length ); #endif  	StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int x = 0; x < 8; ++x) {  		tiles [x] = new StaticTile[8][];  		for (int y = 0; y < 8; ++y) {  			tiles [x] [y] = lists [x] [y].ToArray ();  		}  	}  	matrix.SetStaticBlock (blockX' blockY' tiles);  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: fixed (StaticTile* pTiles = staTiles) {  	#if !MONO  	NativeReader.Read (fsData.SafeFileHandle.DangerousGetHandle ()' pTiles' length);  	#else  									NativeReader.Read( fsData.Handle' pTiles' length ); #endif  	StaticTile* pCur = pTiles' pEnd = pTiles + tileCount;  	while (pCur < pEnd) {  		lists [pCur->m_X & 0x7] [pCur->m_Y & 0x7].Add (pCur->m_ID' pCur->m_Z);  		pCur = pCur + 1;  	}  	var tiles = new StaticTile[8][][];  	for (int x = 0; x < 8; ++x) {  		tiles [x] = new StaticTile[8][];  		for (int y = 0; y < 8; ++y) {  			tiles [x] [y] = lists [x] [y].ToArray ();  		}  	}  	matrix.SetStaticBlock (blockX' blockY' tiles);  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int x = 0; x < 8; ++x) {  	tiles [x] = new StaticTile[8][];  	for (int y = 0; y < 8; ++y) {  		tiles [x] [y] = lists [x] [y].ToArray ();  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int x = 0; x < 8; ++x) {  	tiles [x] = new StaticTile[8][];  	for (int y = 0; y < 8; ++y) {  		tiles [x] [y] = lists [x] [y].ToArray ();  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int x = 0; x < 8; ++x) {  	tiles [x] = new StaticTile[8][];  	for (int y = 0; y < 8; ++y) {  		tiles [x] [y] = lists [x] [y].ToArray ();  	}  }  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: tiles [x] = new StaticTile[8][];  
Magic Number,Server,TileMatrixPatch,F:\newReposMay17\JustUO_JustUO\Server\TileMatrixPatch.cs,PatchStatics,The following statement contains a magic number: for (int y = 0; y < 8; ++y) {  	tiles [x] [y] = lists [x] [y].ToArray ();  }  
Magic Number,Server,Timer,F:\newReposMay17\JustUO_JustUO\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if (ts >= TimeSpan.FromSeconds (10.0)) {  	return TimerPriority.OneSecond;  }  
Magic Number,Server,Timer,F:\newReposMay17\JustUO_JustUO\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if (ts >= TimeSpan.FromSeconds (5.0)) {  	return TimerPriority.TwoFiftyMS;  }  
Magic Number,Server,Timer,F:\newReposMay17\JustUO_JustUO\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if (ts >= TimeSpan.FromSeconds (2.5)) {  	return TimerPriority.FiftyMS;  }  
Magic Number,Server,Timer,F:\newReposMay17\JustUO_JustUO\Server\Timer.cs,ComputePriority,The following statement contains a magic number: if (ts >= TimeSpan.FromSeconds (0.5)) {  	return TimerPriority.TenMS;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int part = 0;  	int partBase = 10;  	string pattern = split [i];  	for (int j = 0; j < pattern.Length; j++) {  		char c = pattern [j];  		if (c == 'x' || c == 'X') {  			partBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c == '/') {  			if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  			 {  				return false;  			}  			partBase = 10;  			cidrBits = true;  		} else {  			return false;  		}  	}  	bytes [i] = (byte)part;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int part = 0;  	int partBase = 10;  	string pattern = split [i];  	for (int j = 0; j < pattern.Length; j++) {  		char c = pattern [j];  		if (c == 'x' || c == 'X') {  			partBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c == '/') {  			if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  			 {  				return false;  			}  			partBase = 10;  			cidrBits = true;  		} else {  			return false;  		}  	}  	bytes [i] = (byte)part;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int part = 0;  	int partBase = 10;  	string pattern = split [i];  	for (int j = 0; j < pattern.Length; j++) {  		char c = pattern [j];  		if (c == 'x' || c == 'X') {  			partBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c == '/') {  			if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  			 {  				return false;  			}  			partBase = 10;  			cidrBits = true;  		} else {  			return false;  		}  	}  	bytes [i] = (byte)part;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int part = 0;  	int partBase = 10;  	string pattern = split [i];  	for (int j = 0; j < pattern.Length; j++) {  		char c = pattern [j];  		if (c == 'x' || c == 'X') {  			partBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c == '/') {  			if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  			 {  				return false;  			}  			partBase = 10;  			cidrBits = true;  		} else {  			return false;  		}  	}  	bytes [i] = (byte)part;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int part = 0;  	int partBase = 10;  	string pattern = split [i];  	for (int j = 0; j < pattern.Length; j++) {  		char c = pattern [j];  		if (c == 'x' || c == 'X') {  			partBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c == '/') {  			if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  			 {  				return false;  			}  			partBase = 10;  			cidrBits = true;  		} else {  			return false;  		}  	}  	bytes [i] = (byte)part;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int part = 0;  	int partBase = 10;  	string pattern = split [i];  	for (int j = 0; j < pattern.Length; j++) {  		char c = pattern [j];  		if (c == 'x' || c == 'X') {  			partBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c == '/') {  			if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  			 {  				return false;  			}  			partBase = 10;  			cidrBits = true;  		} else {  			return false;  		}  	}  	bytes [i] = (byte)part;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int part = 0;  	int partBase = 10;  	string pattern = split [i];  	for (int j = 0; j < pattern.Length; j++) {  		char c = pattern [j];  		if (c == 'x' || c == 'X') {  			partBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (cidrBits) {  				cidrLength *= partBase;  				cidrLength += offset;  			} else {  				part *= partBase;  				part += offset;  			}  		} else if (c == '/') {  			if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  			 {  				return false;  			}  			partBase = 10;  			cidrBits = true;  		} else {  			return false;  		}  	}  	bytes [i] = (byte)part;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int j = 0; j < pattern.Length; j++) {  	char c = pattern [j];  	if (c == 'x' || c == 'X') {  		partBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c == '/') {  		if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  		 {  			return false;  		}  		partBase = 10;  		cidrBits = true;  	} else {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int j = 0; j < pattern.Length; j++) {  	char c = pattern [j];  	if (c == 'x' || c == 'X') {  		partBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c == '/') {  		if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  		 {  			return false;  		}  		partBase = 10;  		cidrBits = true;  	} else {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int j = 0; j < pattern.Length; j++) {  	char c = pattern [j];  	if (c == 'x' || c == 'X') {  		partBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c == '/') {  		if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  		 {  			return false;  		}  		partBase = 10;  		cidrBits = true;  	} else {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int j = 0; j < pattern.Length; j++) {  	char c = pattern [j];  	if (c == 'x' || c == 'X') {  		partBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c == '/') {  		if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  		 {  			return false;  		}  		partBase = 10;  		cidrBits = true;  	} else {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: for (int j = 0; j < pattern.Length; j++) {  	char c = pattern [j];  	if (c == 'x' || c == 'X') {  		partBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (cidrBits) {  			cidrLength *= partBase;  			cidrLength += offset;  		} else {  			part *= partBase;  			part += offset;  		}  	} else if (c == '/') {  		if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  		 {  			return false;  		}  		partBase = 10;  		cidrBits = true;  	} else {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	partBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	partBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	partBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	partBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	partBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: partBase = 16;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (cidrBits) {  		cidrLength *= partBase;  		cidrLength += offset;  	} else {  		part *= partBase;  		part += offset;  	}  } else if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (c == '/') {  	if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte  	 {  		return false;  	}  	partBase = 10;  	cidrBits = true;  } else {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (cidrBits || i != 3)//If there's two '/' or the '/' isn't in the last byte   {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: partBase = 10;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatchCIDR,The following statement contains a magic number: if (cidrLength <= 0 || cidrLength >= 32)//if invalid cidr Length' just compare IPs   {  	return cidrPrefixValue == ipValue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: if (bytes.Length != 4) {  	return 0;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: return (uint)((((bytes [0] << 0x18) | (bytes [1] << 0x10)) | (bytes [2] << 8)) | bytes [3]) & (0xffffffff);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: return (uint)((((bytes [0] << 0x18) | (bytes [1] << 0x10)) | (bytes [2] << 8)) | bytes [3]) & (0xffffffff);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,OrderedAddressValue,The following statement contains a magic number: return (uint)((((bytes [0] << 0x18) | (bytes [1] << 0x10)) | (bytes [2] << 8)) | bytes [3]) & (0xffffffff);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,SwapUnsignedInt,The following statement contains a magic number: return ((((source & 0x000000FF) << 0x18) | ((source & 0x0000FF00) << 8) | ((source & 0x00FF0000) >> 8) | ((source & 0xFF000000) >> 0x18)));  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,SwapUnsignedInt,The following statement contains a magic number: return ((((source & 0x000000FF) << 0x18) | ((source & 0x0000FF00) << 8) | ((source & 0x00FF0000) >> 8) | ((source & 0xFF000000) >> 0x18)));  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr.Length == 16)//sanity 0 - 15 //10 11 //12 13 14 15   {  	if (addr [10] != 0xFF || addr [11] != 0xFF) {  		return false;  	}  	for (int i = 0; i < 10; i++) {  		if (addr [i] != 0) {  			return false;  		}  	}  	var v4Addr = new byte[4];  	for (int i = 0; i < 4; i++) {  		v4Addr [i] = addr [12 + i];  	}  	address = new IPAddress (v4Addr);  	return true;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr.Length == 16)//sanity 0 - 15 //10 11 //12 13 14 15   {  	if (addr [10] != 0xFF || addr [11] != 0xFF) {  		return false;  	}  	for (int i = 0; i < 10; i++) {  		if (addr [i] != 0) {  			return false;  		}  	}  	var v4Addr = new byte[4];  	for (int i = 0; i < 4; i++) {  		v4Addr [i] = addr [12 + i];  	}  	address = new IPAddress (v4Addr);  	return true;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr.Length == 16)//sanity 0 - 15 //10 11 //12 13 14 15   {  	if (addr [10] != 0xFF || addr [11] != 0xFF) {  		return false;  	}  	for (int i = 0; i < 10; i++) {  		if (addr [i] != 0) {  			return false;  		}  	}  	var v4Addr = new byte[4];  	for (int i = 0; i < 4; i++) {  		v4Addr [i] = addr [12 + i];  	}  	address = new IPAddress (v4Addr);  	return true;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr.Length == 16)//sanity 0 - 15 //10 11 //12 13 14 15   {  	if (addr [10] != 0xFF || addr [11] != 0xFF) {  		return false;  	}  	for (int i = 0; i < 10; i++) {  		if (addr [i] != 0) {  			return false;  		}  	}  	var v4Addr = new byte[4];  	for (int i = 0; i < 4; i++) {  		v4Addr [i] = addr [12 + i];  	}  	address = new IPAddress (v4Addr);  	return true;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr.Length == 16)//sanity 0 - 15 //10 11 //12 13 14 15   {  	if (addr [10] != 0xFF || addr [11] != 0xFF) {  		return false;  	}  	for (int i = 0; i < 10; i++) {  		if (addr [i] != 0) {  			return false;  		}  	}  	var v4Addr = new byte[4];  	for (int i = 0; i < 4; i++) {  		v4Addr [i] = addr [12 + i];  	}  	address = new IPAddress (v4Addr);  	return true;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr.Length == 16)//sanity 0 - 15 //10 11 //12 13 14 15   {  	if (addr [10] != 0xFF || addr [11] != 0xFF) {  		return false;  	}  	for (int i = 0; i < 10; i++) {  		if (addr [i] != 0) {  			return false;  		}  	}  	var v4Addr = new byte[4];  	for (int i = 0; i < 4; i++) {  		v4Addr [i] = addr [12 + i];  	}  	address = new IPAddress (v4Addr);  	return true;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr.Length == 16)//sanity 0 - 15 //10 11 //12 13 14 15   {  	if (addr [10] != 0xFF || addr [11] != 0xFF) {  		return false;  	}  	for (int i = 0; i < 10; i++) {  		if (addr [i] != 0) {  			return false;  		}  	}  	var v4Addr = new byte[4];  	for (int i = 0; i < 4; i++) {  		v4Addr [i] = addr [12 + i];  	}  	address = new IPAddress (v4Addr);  	return true;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr [10] != 0xFF || addr [11] != 0xFF) {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: if (addr [10] != 0xFF || addr [11] != 0xFF) {  	return false;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  	if (addr [i] != 0) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	v4Addr [i] = addr [12 + i];  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	v4Addr [i] = addr [12 + i];  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,TryConvertIPv6toIPv4,The following statement contains a magic number: v4Addr [i] = addr [12 + i];  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int i = 0; i < 4; ++i) {  	int lowPart' highPart;  	if (i >= split.Length) {  		lowPart = 0;  		highPart = 255;  	} else {  		string pattern = split [i];  		if (pattern == "*") {  			lowPart = 0;  			highPart = 255;  		} else {  			lowPart = 0;  			highPart = 0;  			bool highOnly = false;  			int lowBase = 10;  			int highBase = 10;  			for (int j = 0; j < pattern.Length; ++j) {  				char c = pattern [j];  				if (c == '?') {  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += 0;  					}  					highPart *= highBase;  					highPart += highBase - 1;  				} else if (c == '-') {  					highOnly = true;  					highPart = 0;  				} else if (c == 'x' || c == 'X') {  					lowBase = 16;  					highBase = 16;  				} else if (c >= '0' && c <= '9') {  					int offset = c - '0';  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'a' && c <= 'f') {  					int offset = 10 + (c - 'a');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else if (c >= 'A' && c <= 'F') {  					int offset = 10 + (c - 'A');  					if (!highOnly) {  						lowPart *= lowBase;  						lowPart += offset;  					}  					highPart *= highBase;  					highPart += offset;  				} else {  					valid = false;  					//high & lowpart would be 0 if it got to here.  				}  			}  		}  	}  	int b = (byte)(GetAddressValue (ip) >> (i * 8));  	if (b < lowPart || b > highPart) {  		return false;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (i >= split.Length) {  	lowPart = 0;  	highPart = 255;  } else {  	string pattern = split [i];  	if (pattern == "*") {  		lowPart = 0;  		highPart = 255;  	} else {  		lowPart = 0;  		highPart = 0;  		bool highOnly = false;  		int lowBase = 10;  		int highBase = 10;  		for (int j = 0; j < pattern.Length; ++j) {  			char c = pattern [j];  			if (c == '?') {  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += 0;  				}  				highPart *= highBase;  				highPart += highBase - 1;  			} else if (c == '-') {  				highOnly = true;  				highPart = 0;  			} else if (c == 'x' || c == 'X') {  				lowBase = 16;  				highBase = 16;  			} else if (c >= '0' && c <= '9') {  				int offset = c - '0';  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'a' && c <= 'f') {  				int offset = 10 + (c - 'a');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else if (c >= 'A' && c <= 'F') {  				int offset = 10 + (c - 'A');  				if (!highOnly) {  					lowPart *= lowBase;  					lowPart += offset;  				}  				highPart *= highBase;  				highPart += offset;  			} else {  				valid = false;  				//high & lowpart would be 0 if it got to here.  			}  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: highPart = 255;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (pattern == "*") {  	lowPart = 0;  	highPart = 255;  } else {  	lowPart = 0;  	highPart = 0;  	bool highOnly = false;  	int lowBase = 10;  	int highBase = 10;  	for (int j = 0; j < pattern.Length; ++j) {  		char c = pattern [j];  		if (c == '?') {  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += 0;  			}  			highPart *= highBase;  			highPart += highBase - 1;  		} else if (c == '-') {  			highOnly = true;  			highPart = 0;  		} else if (c == 'x' || c == 'X') {  			lowBase = 16;  			highBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else {  			valid = false;  			//high & lowpart would be 0 if it got to here.  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (pattern == "*") {  	lowPart = 0;  	highPart = 255;  } else {  	lowPart = 0;  	highPart = 0;  	bool highOnly = false;  	int lowBase = 10;  	int highBase = 10;  	for (int j = 0; j < pattern.Length; ++j) {  		char c = pattern [j];  		if (c == '?') {  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += 0;  			}  			highPart *= highBase;  			highPart += highBase - 1;  		} else if (c == '-') {  			highOnly = true;  			highPart = 0;  		} else if (c == 'x' || c == 'X') {  			lowBase = 16;  			highBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else {  			valid = false;  			//high & lowpart would be 0 if it got to here.  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (pattern == "*") {  	lowPart = 0;  	highPart = 255;  } else {  	lowPart = 0;  	highPart = 0;  	bool highOnly = false;  	int lowBase = 10;  	int highBase = 10;  	for (int j = 0; j < pattern.Length; ++j) {  		char c = pattern [j];  		if (c == '?') {  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += 0;  			}  			highPart *= highBase;  			highPart += highBase - 1;  		} else if (c == '-') {  			highOnly = true;  			highPart = 0;  		} else if (c == 'x' || c == 'X') {  			lowBase = 16;  			highBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else {  			valid = false;  			//high & lowpart would be 0 if it got to here.  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (pattern == "*") {  	lowPart = 0;  	highPart = 255;  } else {  	lowPart = 0;  	highPart = 0;  	bool highOnly = false;  	int lowBase = 10;  	int highBase = 10;  	for (int j = 0; j < pattern.Length; ++j) {  		char c = pattern [j];  		if (c == '?') {  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += 0;  			}  			highPart *= highBase;  			highPart += highBase - 1;  		} else if (c == '-') {  			highOnly = true;  			highPart = 0;  		} else if (c == 'x' || c == 'X') {  			lowBase = 16;  			highBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else {  			valid = false;  			//high & lowpart would be 0 if it got to here.  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (pattern == "*") {  	lowPart = 0;  	highPart = 255;  } else {  	lowPart = 0;  	highPart = 0;  	bool highOnly = false;  	int lowBase = 10;  	int highBase = 10;  	for (int j = 0; j < pattern.Length; ++j) {  		char c = pattern [j];  		if (c == '?') {  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += 0;  			}  			highPart *= highBase;  			highPart += highBase - 1;  		} else if (c == '-') {  			highOnly = true;  			highPart = 0;  		} else if (c == 'x' || c == 'X') {  			lowBase = 16;  			highBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else {  			valid = false;  			//high & lowpart would be 0 if it got to here.  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (pattern == "*") {  	lowPart = 0;  	highPart = 255;  } else {  	lowPart = 0;  	highPart = 0;  	bool highOnly = false;  	int lowBase = 10;  	int highBase = 10;  	for (int j = 0; j < pattern.Length; ++j) {  		char c = pattern [j];  		if (c == '?') {  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += 0;  			}  			highPart *= highBase;  			highPart += highBase - 1;  		} else if (c == '-') {  			highOnly = true;  			highPart = 0;  		} else if (c == 'x' || c == 'X') {  			lowBase = 16;  			highBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else {  			valid = false;  			//high & lowpart would be 0 if it got to here.  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (pattern == "*") {  	lowPart = 0;  	highPart = 255;  } else {  	lowPart = 0;  	highPart = 0;  	bool highOnly = false;  	int lowBase = 10;  	int highBase = 10;  	for (int j = 0; j < pattern.Length; ++j) {  		char c = pattern [j];  		if (c == '?') {  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += 0;  			}  			highPart *= highBase;  			highPart += highBase - 1;  		} else if (c == '-') {  			highOnly = true;  			highPart = 0;  		} else if (c == 'x' || c == 'X') {  			lowBase = 16;  			highBase = 16;  		} else if (c >= '0' && c <= '9') {  			int offset = c - '0';  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'a' && c <= 'f') {  			int offset = 10 + (c - 'a');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else if (c >= 'A' && c <= 'F') {  			int offset = 10 + (c - 'A');  			if (!highOnly) {  				lowPart *= lowBase;  				lowPart += offset;  			}  			highPart *= highBase;  			highPart += offset;  		} else {  			valid = false;  			//high & lowpart would be 0 if it got to here.  		}  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: highPart = 255;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int j = 0; j < pattern.Length; ++j) {  	char c = pattern [j];  	if (c == '?') {  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += 0;  		}  		highPart *= highBase;  		highPart += highBase - 1;  	} else if (c == '-') {  		highOnly = true;  		highPart = 0;  	} else if (c == 'x' || c == 'X') {  		lowBase = 16;  		highBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else {  		valid = false;  		//high & lowpart would be 0 if it got to here.  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int j = 0; j < pattern.Length; ++j) {  	char c = pattern [j];  	if (c == '?') {  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += 0;  		}  		highPart *= highBase;  		highPart += highBase - 1;  	} else if (c == '-') {  		highOnly = true;  		highPart = 0;  	} else if (c == 'x' || c == 'X') {  		lowBase = 16;  		highBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else {  		valid = false;  		//high & lowpart would be 0 if it got to here.  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int j = 0; j < pattern.Length; ++j) {  	char c = pattern [j];  	if (c == '?') {  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += 0;  		}  		highPart *= highBase;  		highPart += highBase - 1;  	} else if (c == '-') {  		highOnly = true;  		highPart = 0;  	} else if (c == 'x' || c == 'X') {  		lowBase = 16;  		highBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else {  		valid = false;  		//high & lowpart would be 0 if it got to here.  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: for (int j = 0; j < pattern.Length; ++j) {  	char c = pattern [j];  	if (c == '?') {  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += 0;  		}  		highPart *= highBase;  		highPart += highBase - 1;  	} else if (c == '-') {  		highOnly = true;  		highPart = 0;  	} else if (c == 'x' || c == 'X') {  		lowBase = 16;  		highBase = 16;  	} else if (c >= '0' && c <= '9') {  		int offset = c - '0';  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'a' && c <= 'f') {  		int offset = 10 + (c - 'a');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else if (c >= 'A' && c <= 'F') {  		int offset = 10 + (c - 'A');  		if (!highOnly) {  			lowPart *= lowBase;  			lowPart += offset;  		}  		highPart *= highBase;  		highPart += offset;  	} else {  		valid = false;  		//high & lowpart would be 0 if it got to here.  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '?') {  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += 0;  	}  	highPart *= highBase;  	highPart += highBase - 1;  } else if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '?') {  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += 0;  	}  	highPart *= highBase;  	highPart += highBase - 1;  } else if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '?') {  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += 0;  	}  	highPart *= highBase;  	highPart += highBase - 1;  } else if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '?') {  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += 0;  	}  	highPart *= highBase;  	highPart += highBase - 1;  } else if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == '-') {  	highOnly = true;  	highPart = 0;  } else if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c == 'x' || c == 'X') {  	lowBase = 16;  	highBase = 16;  } else if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: lowBase = 16;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: highBase = 16;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c >= '0' && c <= '9') {  	int offset = c - '0';  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c >= 'a' && c <= 'f') {  	int offset = 10 + (c - 'a');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,IPMatch,The following statement contains a magic number: if (c >= 'A' && c <= 'F') {  	int offset = 10 + (c - 'A');  	if (!highOnly) {  		lowPart *= lowBase;  		lowPart += offset;  	}  	highPart *= highBase;  	highPart += offset;  } else {  	valid = false;  	//high & lowpart would be 0 if it got to here.  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ToInt32,The following statement contains a magic number: if (value.StartsWith ("0x")) {  	int.TryParse (value.Substring (2)' NumberStyles.HexNumber' null' out i);  } else {  	int.TryParse (value' out i);  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ToInt32,The following statement contains a magic number: int.TryParse (value.Substring (2)' NumberStyles.HexNumber' null' out i);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,GetDirection,The following statement contains a magic number: if (adx >= ady * 3) {  	if (dx > 0) {  		return Direction.East;  	} else {  		return Direction.West;  	}  } else if (ady >= adx * 3) {  	if (dy > 0) {  		return Direction.South;  	} else {  		return Direction.North;  	}  } else if (dx > 0) {  	if (dy > 0) {  		return Direction.Down;  	} else {  		return Direction.Right;  	}  } else {  	if (dy > 0) {  		return Direction.Left;  	} else {  		return Direction.Up;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,GetDirection,The following statement contains a magic number: if (adx >= ady * 3) {  	if (dx > 0) {  		return Direction.East;  	} else {  		return Direction.West;  	}  } else if (ady >= adx * 3) {  	if (dy > 0) {  		return Direction.South;  	} else {  		return Direction.North;  	}  } else if (dx > 0) {  	if (dy > 0) {  		return Direction.Down;  	} else {  		return Direction.Right;  	}  } else {  	if (dy > 0) {  		return Direction.Left;  	} else {  		return Direction.Up;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,GetDirection,The following statement contains a magic number: if (ady >= adx * 3) {  	if (dy > 0) {  		return Direction.South;  	} else {  		return Direction.North;  	}  } else if (dx > 0) {  	if (dy > 0) {  		return Direction.Down;  	} else {  		return Direction.Right;  	}  } else {  	if (dy > 0) {  		return Direction.Left;  	} else {  		return Direction.Up;  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch (Random (6)) {  case 0:  	return RandomPinkHue ();  case 1:  	return RandomBlueHue ();  case 2:  	return RandomGreenHue ();  case 3:  	return RandomOrangeHue ();  case 4:  	return RandomRedHue ();  case 5:  	return RandomYellowHue ();  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch (Random (6)) {  case 0:  	return RandomPinkHue ();  case 1:  	return RandomBlueHue ();  case 2:  	return RandomGreenHue ();  case 3:  	return RandomOrangeHue ();  case 4:  	return RandomRedHue ();  case 5:  	return RandomYellowHue ();  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch (Random (6)) {  case 0:  	return RandomPinkHue ();  case 1:  	return RandomBlueHue ();  case 2:  	return RandomGreenHue ();  case 3:  	return RandomOrangeHue ();  case 4:  	return RandomRedHue ();  case 5:  	return RandomYellowHue ();  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch (Random (6)) {  case 0:  	return RandomPinkHue ();  case 1:  	return RandomBlueHue ();  case 2:  	return RandomGreenHue ();  case 3:  	return RandomOrangeHue ();  case 4:  	return RandomRedHue ();  case 5:  	return RandomYellowHue ();  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNondyedHue,The following statement contains a magic number: switch (Random (6)) {  case 0:  	return RandomPinkHue ();  case 1:  	return RandomBlueHue ();  case 2:  	return RandomGreenHue ();  case 3:  	return RandomOrangeHue ();  case 4:  	return RandomRedHue ();  case 5:  	return RandomYellowHue ();  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomPinkHue,The following statement contains a magic number: return Random (1201' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomPinkHue,The following statement contains a magic number: return Random (1201' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomBlueHue,The following statement contains a magic number: return Random (1301' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomBlueHue,The following statement contains a magic number: return Random (1301' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomGreenHue,The following statement contains a magic number: return Random (1401' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomGreenHue,The following statement contains a magic number: return Random (1401' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomOrangeHue,The following statement contains a magic number: return Random (1501' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomOrangeHue,The following statement contains a magic number: return Random (1501' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomRedHue,The following statement contains a magic number: return Random (1601' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomRedHue,The following statement contains a magic number: return Random (1601' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomYellowHue,The following statement contains a magic number: return Random (1701' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomYellowHue,The following statement contains a magic number: return Random (1701' 54);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNeutralHue,The following statement contains a magic number: return Random (1801' 108);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNeutralHue,The following statement contains a magic number: return Random (1801' 108);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSnakeHue,The following statement contains a magic number: return Random (2001' 18);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSnakeHue,The following statement contains a magic number: return Random (2001' 18);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomBirdHue,The following statement contains a magic number: return Random (2101' 30);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomBirdHue,The following statement contains a magic number: return Random (2101' 30);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSlimeHue,The following statement contains a magic number: return Random (2201' 24);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSlimeHue,The following statement contains a magic number: return Random (2201' 24);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomAnimalHue,The following statement contains a magic number: return Random (2301' 18);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomAnimalHue,The following statement contains a magic number: return Random (2301' 18);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomMetalHue,The following statement contains a magic number: return Random (2401' 30);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomMetalHue,The following statement contains a magic number: return Random (2401' 30);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if (hue < 2) {  	return 2;  } else if (hue > 1001) {  	return 1001;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if (hue < 2) {  	return 2;  } else if (hue > 1001) {  	return 1001;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if (hue < 2) {  	return 2;  } else if (hue > 1001) {  	return 1001;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if (hue < 2) {  	return 2;  } else if (hue > 1001) {  	return 1001;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: return 2;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if (hue > 1001) {  	return 1001;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: if (hue > 1001) {  	return 1001;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipDyedHue,The following statement contains a magic number: return 1001;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomDyedHue,The following statement contains a magic number: return Random (2' 1000);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomDyedHue,The following statement contains a magic number: return Random (2' 1000);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomBrightHue,The following statement contains a magic number: if (RandomDouble () < 0.1) {  	return RandomList (0x62' 0x71);  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if (hue < 1002) {  	return 1002;  } else if (hue > 1058) {  	return 1058;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if (hue < 1002) {  	return 1002;  } else if (hue > 1058) {  	return 1058;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if (hue < 1002) {  	return 1002;  } else if (hue > 1058) {  	return 1058;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if (hue < 1002) {  	return 1002;  } else if (hue > 1058) {  	return 1058;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: return 1002;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if (hue > 1058) {  	return 1058;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: if (hue > 1058) {  	return 1058;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipSkinHue,The following statement contains a magic number: return 1058;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSkinHue,The following statement contains a magic number: return Random (1002' 57) | 0x8000;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSkinHue,The following statement contains a magic number: return Random (1002' 57) | 0x8000;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if (hue < 1102) {  	return 1102;  } else if (hue > 1149) {  	return 1149;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if (hue < 1102) {  	return 1102;  } else if (hue > 1149) {  	return 1149;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if (hue < 1102) {  	return 1102;  } else if (hue > 1149) {  	return 1149;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if (hue < 1102) {  	return 1102;  } else if (hue > 1149) {  	return 1149;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: return 1102;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if (hue > 1149) {  	return 1149;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: if (hue > 1149) {  	return 1149;  } else {  	return hue;  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,ClipHairHue,The following statement contains a magic number: return 1149;  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomHairHue,The following statement contains a magic number: return Random (1102' 48);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomHairHue,The following statement contains a magic number: return Random (1102' 48);  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSkill,The following statement contains a magic number: return m_AllSkills [Random (m_AllSkills.Length - (Core.ML ? 0 : Core.SE ? 1 : Core.AOS ? 3 : 6))];  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomSkill,The following statement contains a magic number: return m_AllSkills [Random (m_AllSkills.Length - (Core.ML ? 0 : Core.SE ? 1 : Core.AOS ? 3 : 6))];  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int i = 0; i < whole; ++i' byteIndex += 16) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (16);  	for (int j = 0; j < 16; ++j) {  		int c = input.ReadByte ();  		bytes.Append (c.ToString ("X2"));  		if (j != 7) {  			bytes.Append (' ');  		} else {  			bytes.Append ("  ");  		}  		if (c >= 0x20 && c < 0x80/*0x7F*/) {  			chars.Append ((char)c);  		} else {  			chars.Append ('.');  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int i = 0; i < whole; ++i' byteIndex += 16) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (16);  	for (int j = 0; j < 16; ++j) {  		int c = input.ReadByte ();  		bytes.Append (c.ToString ("X2"));  		if (j != 7) {  			bytes.Append (' ');  		} else {  			bytes.Append ("  ");  		}  		if (c >= 0x20 && c < 0x80/*0x7F*/) {  			chars.Append ((char)c);  		} else {  			chars.Append ('.');  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int i = 0; i < whole; ++i' byteIndex += 16) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (16);  	for (int j = 0; j < 16; ++j) {  		int c = input.ReadByte ();  		bytes.Append (c.ToString ("X2"));  		if (j != 7) {  			bytes.Append (' ');  		} else {  			bytes.Append ("  ");  		}  		if (c >= 0x20 && c < 0x80/*0x7F*/) {  			chars.Append ((char)c);  		} else {  			chars.Append ('.');  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int i = 0; i < whole; ++i' byteIndex += 16) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (16);  	for (int j = 0; j < 16; ++j) {  		int c = input.ReadByte ();  		bytes.Append (c.ToString ("X2"));  		if (j != 7) {  			bytes.Append (' ');  		} else {  			bytes.Append ("  ");  		}  		if (c >= 0x20 && c < 0x80/*0x7F*/) {  			chars.Append ((char)c);  		} else {  			chars.Append ('.');  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int i = 0; i < whole; ++i' byteIndex += 16) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (16);  	for (int j = 0; j < 16; ++j) {  		int c = input.ReadByte ();  		bytes.Append (c.ToString ("X2"));  		if (j != 7) {  			bytes.Append (' ');  		} else {  			bytes.Append ("  ");  		}  		if (c >= 0x20 && c < 0x80/*0x7F*/) {  			chars.Append ((char)c);  		} else {  			chars.Append ('.');  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: byteIndex += 16
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int j = 0; j < 16; ++j) {  	int c = input.ReadByte ();  	bytes.Append (c.ToString ("X2"));  	if (j != 7) {  		bytes.Append (' ');  	} else {  		bytes.Append ("  ");  	}  	if (c >= 0x20 && c < 0x80/*0x7F*/) {  		chars.Append ((char)c);  	} else {  		chars.Append ('.');  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int j = 0; j < 16; ++j) {  	int c = input.ReadByte ();  	bytes.Append (c.ToString ("X2"));  	if (j != 7) {  		bytes.Append (' ');  	} else {  		bytes.Append ("  ");  	}  	if (c >= 0x20 && c < 0x80/*0x7F*/) {  		chars.Append ((char)c);  	} else {  		chars.Append ('.');  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if (j != 7) {  	bytes.Append (' ');  } else {  	bytes.Append ("  ");  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if (rem != 0) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (rem);  	for (int j = 0; j < 16; ++j) {  		if (j < rem) {  			int c = input.ReadByte ();  			bytes.Append (c.ToString ("X2"));  			if (j != 7) {  				bytes.Append (' ');  			} else {  				bytes.Append ("  ");  			}  			if (c >= 0x20 && c < 0x80/*0x7F*/) {  				chars.Append ((char)c);  			} else {  				chars.Append ('.');  			}  		} else {  			bytes.Append ("   ");  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if (rem != 0) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (rem);  	for (int j = 0; j < 16; ++j) {  		if (j < rem) {  			int c = input.ReadByte ();  			bytes.Append (c.ToString ("X2"));  			if (j != 7) {  				bytes.Append (' ');  			} else {  				bytes.Append ("  ");  			}  			if (c >= 0x20 && c < 0x80/*0x7F*/) {  				chars.Append ((char)c);  			} else {  				chars.Append ('.');  			}  		} else {  			bytes.Append ("   ");  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if (rem != 0) {  	var bytes = new StringBuilder (49);  	var chars = new StringBuilder (rem);  	for (int j = 0; j < 16; ++j) {  		if (j < rem) {  			int c = input.ReadByte ();  			bytes.Append (c.ToString ("X2"));  			if (j != 7) {  				bytes.Append (' ');  			} else {  				bytes.Append ("  ");  			}  			if (c >= 0x20 && c < 0x80/*0x7F*/) {  				chars.Append ((char)c);  			} else {  				chars.Append ('.');  			}  		} else {  			bytes.Append ("   ");  		}  	}  	output.Write (byteIndex.ToString ("X4"));  	output.Write ("   ");  	output.Write (bytes.ToString ());  	output.Write ("  ");  	output.WriteLine (chars.ToString ());  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int j = 0; j < 16; ++j) {  	if (j < rem) {  		int c = input.ReadByte ();  		bytes.Append (c.ToString ("X2"));  		if (j != 7) {  			bytes.Append (' ');  		} else {  			bytes.Append ("  ");  		}  		if (c >= 0x20 && c < 0x80/*0x7F*/) {  			chars.Append ((char)c);  		} else {  			chars.Append ('.');  		}  	} else {  		bytes.Append ("   ");  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: for (int j = 0; j < 16; ++j) {  	if (j < rem) {  		int c = input.ReadByte ();  		bytes.Append (c.ToString ("X2"));  		if (j != 7) {  			bytes.Append (' ');  		} else {  			bytes.Append ("  ");  		}  		if (c >= 0x20 && c < 0x80/*0x7F*/) {  			chars.Append ((char)c);  		} else {  			chars.Append ('.');  		}  	} else {  		bytes.Append ("   ");  	}  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if (j < rem) {  	int c = input.ReadByte ();  	bytes.Append (c.ToString ("X2"));  	if (j != 7) {  		bytes.Append (' ');  	} else {  		bytes.Append ("  ");  	}  	if (c >= 0x20 && c < 0x80/*0x7F*/) {  		chars.Append ((char)c);  	} else {  		chars.Append ('.');  	}  } else {  	bytes.Append ("   ");  }  
Magic Number,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,FormatBuffer,The following statement contains a magic number: if (j != 7) {  	bytes.Append (' ');  } else {  	bytes.Append ("  ");  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,SetValue,The following statement contains a magic number: if (m_Values == null) {  	m_Values = new int[8];  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,SetValue,The following statement contains a magic number: m_Values = new int[8];  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: switch (version) {  case 1:  //Changed the values throughout the virtue system  case 0: {  	int mask = reader.ReadByte ();  	if (mask != 0) {  		m_Values = new int[8];  		for (int i = 0; i < 8; ++i) {  			if ((mask & (1 << i)) != 0) {  				m_Values [i] = reader.ReadInt ();  			}  		}  	}  	break;  }  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: switch (version) {  case 1:  //Changed the values throughout the virtue system  case 0: {  	int mask = reader.ReadByte ();  	if (mask != 0) {  		m_Values = new int[8];  		for (int i = 0; i < 8; ++i) {  			if ((mask & (1 << i)) != 0) {  				m_Values [i] = reader.ReadInt ();  			}  		}  	}  	break;  }  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if (mask != 0) {  	m_Values = new int[8];  	for (int i = 0; i < 8; ++i) {  		if ((mask & (1 << i)) != 0) {  			m_Values [i] = reader.ReadInt ();  		}  	}  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if (mask != 0) {  	m_Values = new int[8];  	for (int i = 0; i < 8; ++i) {  		if ((mask & (1 << i)) != 0) {  			m_Values [i] = reader.ReadInt ();  		}  	}  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: m_Values = new int[8];  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	if ((mask & (1 << i)) != 0) {  		m_Values [i] = reader.ReadInt ();  	}  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if (version == 0) {  	Compassion *= 200;  	Sacrifice *= 250;  	//Even though 40 (the max) only gives 10k' It's because it was formerly too easy  	//No direct conversion factor for Justice' this is just an approximation  	Justice *= 500;  	//All the other virtues haven't been defined at 'version 0' point in time in the scripts.  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if (version == 0) {  	Compassion *= 200;  	Sacrifice *= 250;  	//Even though 40 (the max) only gives 10k' It's because it was formerly too easy  	//No direct conversion factor for Justice' this is just an approximation  	Justice *= 500;  	//All the other virtues haven't been defined at 'version 0' point in time in the scripts.  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: if (version == 0) {  	Compassion *= 200;  	Sacrifice *= 250;  	//Even though 40 (the max) only gives 10k' It's because it was formerly too easy  	//No direct conversion factor for Justice' this is just an approximation  	Justice *= 500;  	//All the other virtues haven't been defined at 'version 0' point in time in the scripts.  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: Compassion *= 200;  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: Sacrifice *= 250;  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following statement contains a magic number: Justice *= 500;  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,Serialize,The following statement contains a magic number: if (info.m_Values == null) {  	writer.Write ((byte)0);  } else {  	int mask = 0;  	for (int i = 0; i < 8; ++i) {  		if (info.m_Values [i] != 0) {  			mask |= 1 << i;  		}  	}  	writer.Write ((byte)mask);  	for (int i = 0; i < 8; ++i) {  		if (info.m_Values [i] != 0) {  			writer.Write (info.m_Values [i]);  		}  	}  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,Serialize,The following statement contains a magic number: if (info.m_Values == null) {  	writer.Write ((byte)0);  } else {  	int mask = 0;  	for (int i = 0; i < 8; ++i) {  		if (info.m_Values [i] != 0) {  			mask |= 1 << i;  		}  	}  	writer.Write ((byte)mask);  	for (int i = 0; i < 8; ++i) {  		if (info.m_Values [i] != 0) {  			writer.Write (info.m_Values [i]);  		}  	}  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,Serialize,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	if (info.m_Values [i] != 0) {  		mask |= 1 << i;  	}  }  
Magic Number,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,Serialize,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	if (info.m_Values [i] != 0) {  		writer.Write (info.m_Values [i]);  	}  }  
Magic Number,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Broadcast,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text);  } else {  	p = new UnicodeMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text);  }  
Magic Number,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Broadcast,The following statement contains a magic number: if (ascii) {  	p = new AsciiMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text);  } else {  	p = new UnicodeMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text);  }  
Magic Number,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Broadcast,The following statement contains a magic number: p = new AsciiMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "System"' text);  
Magic Number,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,Broadcast,The following statement contains a magic number: p = new UnicodeMessage (Serial.MinusOne' -1' MessageType.Regular' hue' 3' "ENU"' "System"' text);  
Magic Number,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,AppendSafetyLog,The following statement contains a magic number: try {  	using (var op = new StreamWriter ("world-save-errors.log"' true)) {  		op.WriteLine ("{0}\t{1}"' DateTime.UtcNow' message);  		op.WriteLine (new StackTrace (2).ToString ());  		op.WriteLine ();  	}  } catch {  }  
Magic Number,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,AppendSafetyLog,The following statement contains a magic number: using (var op = new StreamWriter ("world-save-errors.log"' true)) {  	op.WriteLine ("{0}\t{1}"' DateTime.UtcNow' message);  	op.WriteLine (new StackTrace (2).ToString ());  	op.WriteLine ();  }  
Magic Number,Server,World,F:\newReposMay17\JustUO_JustUO\Server\World.cs,AppendSafetyLog,The following statement contains a magic number: op.WriteLine (new StackTrace (2).ToString ());  
Magic Number,Server.Commands,CommandSystem,F:\newReposMay17\JustUO_JustUO\Server\Commands.cs,Split,The following statement contains a magic number: while (start < array.Length) {  	char c = array [start];  	if (c == '"') {  		++start;  		end = start;  		while (end < array.Length) {  			if (array [end] != '"' || array [end - 1] == '\\') {  				++end;  			} else {  				break;  			}  		}  		list.Add (value.Substring (start' end - start));  		start = end + 2;  	} else if (c != ' ') {  		end = start;  		while (end < array.Length) {  			if (array [end] != ' ') {  				++end;  			} else {  				break;  			}  		}  		list.Add (value.Substring (start' end - start));  		start = end + 1;  	} else {  		++start;  	}  }  
Magic Number,Server.Commands,CommandSystem,F:\newReposMay17\JustUO_JustUO\Server\Commands.cs,Split,The following statement contains a magic number: if (c == '"') {  	++start;  	end = start;  	while (end < array.Length) {  		if (array [end] != '"' || array [end - 1] == '\\') {  			++end;  		} else {  			break;  		}  	}  	list.Add (value.Substring (start' end - start));  	start = end + 2;  } else if (c != ' ') {  	end = start;  	while (end < array.Length) {  		if (array [end] != ' ') {  			++end;  		} else {  			break;  		}  	}  	list.Add (value.Substring (start' end - start));  	start = end + 1;  } else {  	++start;  }  
Magic Number,Server.Commands,CommandSystem,F:\newReposMay17\JustUO_JustUO\Server\Commands.cs,Split,The following statement contains a magic number: start = end + 2;  
Magic Number,Server.ContextMenus,ContextMenuEntry,F:\newReposMay17\JustUO_JustUO\Server\ContextMenus\ContextMenuEntry.cs,ContextMenuEntry,The following statement contains a magic number: if (number <= 0x7FFF)// Legacy code support   {  	Number = 3000000 + number;  } else {  	Number = number;  }  
Magic Number,Server.ContextMenus,ContextMenuEntry,F:\newReposMay17\JustUO_JustUO\Server\ContextMenus\ContextMenuEntry.cs,ContextMenuEntry,The following statement contains a magic number: Number = 3000000 + number;  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: while (src_pos < sourceLength) {  	leaf = GetBit (source [src_pos]' bit_num);  	leaf_value = _huffmanTree [node' leaf];  	// all numbers below 1 (0..-256) are codewords  	// if the halt codeword has been found' skip this byte  	if (leaf_value == -256) {  		bit_num = 8;  		node = 0;  		src_pos++;  		var newsource = new byte[sourceLength - src_pos];  		Array.Copy (source' src_pos' newsource' 0' sourceLength - src_pos);  		source = newsource;  		destinationLength = dest_pos;  		return true;  	} else if (leaf_value < 1) {  		destination [dest_pos] = (byte)-leaf_value;  		leaf_value = 0;  		dest_pos++;  	}  	bit_num--;  	node = leaf_value;  	/* if its the end of the byte' go to the next byte */if (bit_num < 1) {  		bit_num = 8;  		src_pos++;  	}  	// check to see if the current codeword has no end  	// if not' make it an incomplete byte  	if (src_pos == sourceLength) {  		if (node != 0) {  			return false;  		}  	}  	/*if(obj != NULL && src_pos == *src_size && node)                 {                 obj->incomplete_byte = src[src_pos-1];                 obj->has_incomplete = 1;                 }*/}  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: while (src_pos < sourceLength) {  	leaf = GetBit (source [src_pos]' bit_num);  	leaf_value = _huffmanTree [node' leaf];  	// all numbers below 1 (0..-256) are codewords  	// if the halt codeword has been found' skip this byte  	if (leaf_value == -256) {  		bit_num = 8;  		node = 0;  		src_pos++;  		var newsource = new byte[sourceLength - src_pos];  		Array.Copy (source' src_pos' newsource' 0' sourceLength - src_pos);  		source = newsource;  		destinationLength = dest_pos;  		return true;  	} else if (leaf_value < 1) {  		destination [dest_pos] = (byte)-leaf_value;  		leaf_value = 0;  		dest_pos++;  	}  	bit_num--;  	node = leaf_value;  	/* if its the end of the byte' go to the next byte */if (bit_num < 1) {  		bit_num = 8;  		src_pos++;  	}  	// check to see if the current codeword has no end  	// if not' make it an incomplete byte  	if (src_pos == sourceLength) {  		if (node != 0) {  			return false;  		}  	}  	/*if(obj != NULL && src_pos == *src_size && node)                 {                 obj->incomplete_byte = src[src_pos-1];                 obj->has_incomplete = 1;                 }*/}  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: while (src_pos < sourceLength) {  	leaf = GetBit (source [src_pos]' bit_num);  	leaf_value = _huffmanTree [node' leaf];  	// all numbers below 1 (0..-256) are codewords  	// if the halt codeword has been found' skip this byte  	if (leaf_value == -256) {  		bit_num = 8;  		node = 0;  		src_pos++;  		var newsource = new byte[sourceLength - src_pos];  		Array.Copy (source' src_pos' newsource' 0' sourceLength - src_pos);  		source = newsource;  		destinationLength = dest_pos;  		return true;  	} else if (leaf_value < 1) {  		destination [dest_pos] = (byte)-leaf_value;  		leaf_value = 0;  		dest_pos++;  	}  	bit_num--;  	node = leaf_value;  	/* if its the end of the byte' go to the next byte */if (bit_num < 1) {  		bit_num = 8;  		src_pos++;  	}  	// check to see if the current codeword has no end  	// if not' make it an incomplete byte  	if (src_pos == sourceLength) {  		if (node != 0) {  			return false;  		}  	}  	/*if(obj != NULL && src_pos == *src_size && node)                 {                 obj->incomplete_byte = src[src_pos-1];                 obj->has_incomplete = 1;                 }*/}  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: if (leaf_value == -256) {  	bit_num = 8;  	node = 0;  	src_pos++;  	var newsource = new byte[sourceLength - src_pos];  	Array.Copy (source' src_pos' newsource' 0' sourceLength - src_pos);  	source = newsource;  	destinationLength = dest_pos;  	return true;  } else if (leaf_value < 1) {  	destination [dest_pos] = (byte)-leaf_value;  	leaf_value = 0;  	dest_pos++;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: if (leaf_value == -256) {  	bit_num = 8;  	node = 0;  	src_pos++;  	var newsource = new byte[sourceLength - src_pos];  	Array.Copy (source' src_pos' newsource' 0' sourceLength - src_pos);  	source = newsource;  	destinationLength = dest_pos;  	return true;  } else if (leaf_value < 1) {  	destination [dest_pos] = (byte)-leaf_value;  	leaf_value = 0;  	dest_pos++;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: bit_num = 8;  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: if (bit_num < 1) {  	bit_num = 8;  	src_pos++;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,Decompress,The following statement contains a magic number: bit_num = 8;  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: while (index < sourceLength) {  	leaf = GetBit (source [index]' bit);  	value = _huffmanTree [node' leaf];  	if (value == -256) {  		bit = 8;  		node = 0;  		index++;  		continue;  	} else if (value < 1) {  		return (byte)-value;  	}  	bit--;  	node = value;  	if (bit < 1) {  		bit = 8;  		index++;  	}  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: while (index < sourceLength) {  	leaf = GetBit (source [index]' bit);  	value = _huffmanTree [node' leaf];  	if (value == -256) {  		bit = 8;  		node = 0;  		index++;  		continue;  	} else if (value < 1) {  		return (byte)-value;  	}  	bit--;  	node = value;  	if (bit < 1) {  		bit = 8;  		index++;  	}  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: while (index < sourceLength) {  	leaf = GetBit (source [index]' bit);  	value = _huffmanTree [node' leaf];  	if (value == -256) {  		bit = 8;  		node = 0;  		index++;  		continue;  	} else if (value < 1) {  		return (byte)-value;  	}  	bit--;  	node = value;  	if (bit < 1) {  		bit = 8;  		index++;  	}  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: if (value == -256) {  	bit = 8;  	node = 0;  	index++;  	continue;  } else if (value < 1) {  	return (byte)-value;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: if (value == -256) {  	bit = 8;  	node = 0;  	index++;  	continue;  } else if (value < 1) {  	return (byte)-value;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: bit = 8;  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: if (bit < 1) {  	bit = 8;  	index++;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressFirstByte,The following statement contains a magic number: bit = 8;  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: while (src_pos < src_size) {  	leaf = GetBit (src [src_pos]' bit_num);  	leaf_value = _huffmanTree [node' leaf];  	// all numbers below 1 (0..-256) are codewords  	// if the halt codeword has been found' skip this byte  	if (leaf_value == -256) {  		bit_num = 8;  		node = 0;  		src_pos++;  		continue;  	} else if (leaf_value < 1) {  		dest [dest_pos] = (byte)-leaf_value;  		leaf_value = 0;  		dest_pos++;  	}  	bit_num--;  	node = leaf_value;  	/* if its the end of the byte' go to the next byte */if (bit_num < 1) {  		bit_num = 8;  		src_pos++;  	}  	// check to see if the current codeword has no end  	// if not' make it an incomplete byte  	/*if(obj != NULL && src_pos == *src_size && node)                 {                 obj->incomplete_byte = src[src_pos-1];                 obj->has_incomplete = 1;                 }*/}  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: while (src_pos < src_size) {  	leaf = GetBit (src [src_pos]' bit_num);  	leaf_value = _huffmanTree [node' leaf];  	// all numbers below 1 (0..-256) are codewords  	// if the halt codeword has been found' skip this byte  	if (leaf_value == -256) {  		bit_num = 8;  		node = 0;  		src_pos++;  		continue;  	} else if (leaf_value < 1) {  		dest [dest_pos] = (byte)-leaf_value;  		leaf_value = 0;  		dest_pos++;  	}  	bit_num--;  	node = leaf_value;  	/* if its the end of the byte' go to the next byte */if (bit_num < 1) {  		bit_num = 8;  		src_pos++;  	}  	// check to see if the current codeword has no end  	// if not' make it an incomplete byte  	/*if(obj != NULL && src_pos == *src_size && node)                 {                 obj->incomplete_byte = src[src_pos-1];                 obj->has_incomplete = 1;                 }*/}  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: while (src_pos < src_size) {  	leaf = GetBit (src [src_pos]' bit_num);  	leaf_value = _huffmanTree [node' leaf];  	// all numbers below 1 (0..-256) are codewords  	// if the halt codeword has been found' skip this byte  	if (leaf_value == -256) {  		bit_num = 8;  		node = 0;  		src_pos++;  		continue;  	} else if (leaf_value < 1) {  		dest [dest_pos] = (byte)-leaf_value;  		leaf_value = 0;  		dest_pos++;  	}  	bit_num--;  	node = leaf_value;  	/* if its the end of the byte' go to the next byte */if (bit_num < 1) {  		bit_num = 8;  		src_pos++;  	}  	// check to see if the current codeword has no end  	// if not' make it an incomplete byte  	/*if(obj != NULL && src_pos == *src_size && node)                 {                 obj->incomplete_byte = src[src_pos-1];                 obj->has_incomplete = 1;                 }*/}  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: if (leaf_value == -256) {  	bit_num = 8;  	node = 0;  	src_pos++;  	continue;  } else if (leaf_value < 1) {  	dest [dest_pos] = (byte)-leaf_value;  	leaf_value = 0;  	dest_pos++;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: if (leaf_value == -256) {  	bit_num = 8;  	node = 0;  	src_pos++;  	continue;  } else if (leaf_value < 1) {  	dest [dest_pos] = (byte)-leaf_value;  	leaf_value = 0;  	dest_pos++;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: bit_num = 8;  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: if (bit_num < 1) {  	bit_num = 8;  	src_pos++;  }  
Magic Number,CustomsFramework,Decompressor,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\Decompressor.cs,DecompressAll,The following statement contains a magic number: bit_num = 8;  
Magic Number,CustomsFramework,ObjectDumper,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Utilities\ObjectDumper.cs,Dump,The following statement contains a magic number: return Dump (element' 2);  
Magic Number,Server.Items,BaseMulti,F:\newReposMay17\JustUO_JustUO\Server\Items\BaseMulti.cs,GetMaxUpdateRange,The following statement contains a magic number: return base.GetMaxUpdateRange () + 4;  
Magic Number,Server.Items,BaseMulti,F:\newReposMay17\JustUO_JustUO\Server\Items\BaseMulti.cs,GetUpdateRange,The following statement contains a magic number: return base.GetUpdateRange (m) + 4;  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,CheckItemUse,The following statement contains a magic number: if (item != this && from.AccessLevel < AccessLevel.GameMaster && IsDecoContainer) {  	from.LocalOverheadMessage (MessageType.Regular' 0x3B2' 1019045);  	// I can't reach that.  	return false;  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,CheckItemUse,The following statement contains a magic number: from.LocalOverheadMessage (MessageType.Regular' 0x3B2' 1019045);  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,SendCantStoreMessage,The following statement contains a magic number: to.SendLocalizedMessage (500176);  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,Serialize,The following statement contains a magic number: writer.Write (2);  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,Deserialize,The following statement contains a magic number: switch (version) {  case 2: {  	var flags = (SaveFlag)reader.ReadByte ();  	if (GetSaveFlag (flags' SaveFlag.MaxItems)) {  		m_MaxItems = reader.ReadEncodedInt ();  	} else {  		m_MaxItems = -1;  	}  	if (GetSaveFlag (flags' SaveFlag.GumpID)) {  		m_GumpID = reader.ReadEncodedInt ();  	} else {  		m_GumpID = -1;  	}  	if (GetSaveFlag (flags' SaveFlag.DropSound)) {  		m_DropSound = reader.ReadEncodedInt ();  	} else {  		m_DropSound = -1;  	}  	m_LiftOverride = GetSaveFlag (flags' SaveFlag.LiftOverride);  	break;  }  case 1: {  	m_MaxItems = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 1) {  		m_MaxItems = m_GlobalMaxItems;  	}  	m_GumpID = reader.ReadInt ();  	m_DropSound = reader.ReadInt ();  	if (m_GumpID == DefaultGumpID) {  		m_GumpID = -1;  	}  	if (m_DropSound == DefaultDropSound) {  		m_DropSound = -1;  	}  	if (m_MaxItems == DefaultMaxItems) {  		m_MaxItems = -1;  	}  	//m_Bounds = new Rectangle2D( reader.ReadPoint2D()' reader.ReadPoint2D() );  	reader.ReadPoint2D ();  	reader.ReadPoint2D ();  	break;  }  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,DropItem,The following statement contains a magic number: if (bounds.Width >= ourBounds.Width) {  	x = (ourBounds.Width - bounds.Width) / 2;  } else {  	x = Utility.Random (ourBounds.Width - bounds.Width);  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,DropItem,The following statement contains a magic number: x = (ourBounds.Width - bounds.Width) / 2;  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,DropItem,The following statement contains a magic number: if (bounds.Height >= ourBounds.Height) {  	y = (ourBounds.Height - bounds.Height) / 2;  } else {  	y = Utility.Random (ourBounds.Height - bounds.Height);  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,DropItem,The following statement contains a magic number: y = (ourBounds.Height - bounds.Height) / 2;  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,OnDoubleClickSecureTrade,The following statement contains a magic number: if (from.InRange (GetWorldLocation ()' 2)) {  	DisplayTo (from);  	SecureTradeContainer cont = GetSecureTradeCont ();  	if (cont != null) {  		SecureTrade trade = cont.Trade;  		if (trade != null && trade.From.Mobile == from) {  			DisplayTo (trade.To.Mobile);  		} else if (trade != null && trade.To.Mobile == from) {  			DisplayTo (trade.From.Mobile);  		}  	}  } else {  	from.SendLocalizedMessage (500446);  	// That is too far away.  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,OnDoubleClickSecureTrade,The following statement contains a magic number: if (from.InRange (GetWorldLocation ()' 2)) {  	DisplayTo (from);  	SecureTradeContainer cont = GetSecureTradeCont ();  	if (cont != null) {  		SecureTrade trade = cont.Trade;  		if (trade != null && trade.From.Mobile == from) {  			DisplayTo (trade.To.Mobile);  		} else if (trade != null && trade.To.Mobile == from) {  			DisplayTo (trade.From.Mobile);  		}  	}  } else {  	from.SendLocalizedMessage (500446);  	// That is too far away.  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,OnDoubleClickSecureTrade,The following statement contains a magic number: from.SendLocalizedMessage (500446);  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (DisplaysContent)//CheckContentDisplay( from ) )   {  	if (Core.ML) {  		if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.  		 {  			list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  			// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  		} else {  			list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  			// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  		}  		//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  	} else {  		list.Add (1050044' "{0}\t{1}"' TotalItems' TotalWeight);  		// ~1_COUNT~ items' ~2_WEIGHT~ stones  	}  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (DisplaysContent)//CheckContentDisplay( from ) )   {  	if (Core.ML) {  		if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.  		 {  			list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  			// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  		} else {  			list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  			// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  		}  		//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  	} else {  		list.Add (1050044' "{0}\t{1}"' TotalItems' TotalWeight);  		// ~1_COUNT~ items' ~2_WEIGHT~ stones  	}  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (DisplaysContent)//CheckContentDisplay( from ) )   {  	if (Core.ML) {  		if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.  		 {  			list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  			// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  		} else {  			list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  			// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  		}  		//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  	} else {  		list.Add (1050044' "{0}\t{1}"' TotalItems' TotalWeight);  		// ~1_COUNT~ items' ~2_WEIGHT~ stones  	}  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (Core.ML) {  	if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.  	 {  		list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  		// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  	} else {  		list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  		// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  	}  	//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  } else {  	list.Add (1050044' "{0}\t{1}"' TotalItems' TotalWeight);  	// ~1_COUNT~ items' ~2_WEIGHT~ stones  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (Core.ML) {  	if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.  	 {  		list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  		// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  	} else {  		list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  		// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  	}  	//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  } else {  	list.Add (1050044' "{0}\t{1}"' TotalItems' TotalWeight);  	// ~1_COUNT~ items' ~2_WEIGHT~ stones  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (Core.ML) {  	if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.  	 {  		list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  		// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  	} else {  		list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  		// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  	}  	//TODO: Where do the other clilocs come into play? 1073839 & 1073840?  } else {  	list.Add (1050044' "{0}\t{1}"' TotalItems' TotalWeight);  	// ~1_COUNT~ items' ~2_WEIGHT~ stones  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.   {  	list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  	// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  } else {  	list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  	// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: if (ParentsContain<BankBox> ())//Root Parent is the Mobile.  Parent could be another containter.   {  	list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  	// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~ stones  } else {  	list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  	// Contents: ~1_COUNT~/~2_MAXCOUNT~ items' ~3_WEIGHT~/~4_MAXWEIGHT~ stones  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: list.Add (1073841' "{0}\t{1}\t{2}"' TotalItems' MaxItems' TotalWeight);  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: list.Add (1072241' "{0}\t{1}\t{2}\t{3}"' TotalItems' MaxItems' TotalWeight' MaxWeight);  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetProperties,The following statement contains a magic number: list.Add (1050044' "{0}\t{1}"' TotalItems' TotalWeight);  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,OnDoubleClick,The following statement contains a magic number: if (from.IsStaff () || from.InRange (GetWorldLocation ()' 2)) {  	DisplayTo (from);  } else {  	from.SendLocalizedMessage (500446);  	// That is too far away.  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,OnDoubleClick,The following statement contains a magic number: if (from.IsStaff () || from.InRange (GetWorldLocation ()' 2)) {  	DisplayTo (from);  } else {  	from.SendLocalizedMessage (500446);  	// That is too far away.  }  
Magic Number,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,OnDoubleClick,The following statement contains a magic number: from.SendLocalizedMessage (500446);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (!File.Exists (path)) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  	return;  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (!File.Exists (path)) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  	return;  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (!File.Exists (path)) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  	return;  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (!File.Exists (path)) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  	return;  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using (var reader = new StreamReader (path)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		line = line.Trim ();  		if (line.Length == 0 || line.StartsWith ("#")) {  			continue;  		}  		try {  			string[] split = line.Split ('\t');  			if (split.Length >= 3) {  				int gumpID = Utility.ToInt32 (split [0]);  				string[] aRect = split [1].Split (' ');  				if (aRect.Length < 4) {  					continue;  				}  				int x = Utility.ToInt32 (aRect [0]);  				int y = Utility.ToInt32 (aRect [1]);  				int width = Utility.ToInt32 (aRect [2]);  				int height = Utility.ToInt32 (aRect [3]);  				var bounds = new Rectangle2D (x' y' width' height);  				int dropSound = Utility.ToInt32 (split [2]);  				var data = new ContainerData (gumpID' bounds' dropSound);  				if (m_Default == null) {  					m_Default = data;  				}  				if (split.Length >= 4) {  					string[] aIDs = split [3].Split (''');  					for (int i = 0; i < aIDs.Length; i++) {  						int id = Utility.ToInt32 (aIDs [i]);  						if (m_Table.ContainsKey (id)) {  							Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  						} else {  							m_Table [id] = data;  						}  					}  				}  			}  		} catch {  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using (var reader = new StreamReader (path)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		line = line.Trim ();  		if (line.Length == 0 || line.StartsWith ("#")) {  			continue;  		}  		try {  			string[] split = line.Split ('\t');  			if (split.Length >= 3) {  				int gumpID = Utility.ToInt32 (split [0]);  				string[] aRect = split [1].Split (' ');  				if (aRect.Length < 4) {  					continue;  				}  				int x = Utility.ToInt32 (aRect [0]);  				int y = Utility.ToInt32 (aRect [1]);  				int width = Utility.ToInt32 (aRect [2]);  				int height = Utility.ToInt32 (aRect [3]);  				var bounds = new Rectangle2D (x' y' width' height);  				int dropSound = Utility.ToInt32 (split [2]);  				var data = new ContainerData (gumpID' bounds' dropSound);  				if (m_Default == null) {  					m_Default = data;  				}  				if (split.Length >= 4) {  					string[] aIDs = split [3].Split (''');  					for (int i = 0; i < aIDs.Length; i++) {  						int id = Utility.ToInt32 (aIDs [i]);  						if (m_Table.ContainsKey (id)) {  							Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  						} else {  							m_Table [id] = data;  						}  					}  				}  			}  		} catch {  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using (var reader = new StreamReader (path)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		line = line.Trim ();  		if (line.Length == 0 || line.StartsWith ("#")) {  			continue;  		}  		try {  			string[] split = line.Split ('\t');  			if (split.Length >= 3) {  				int gumpID = Utility.ToInt32 (split [0]);  				string[] aRect = split [1].Split (' ');  				if (aRect.Length < 4) {  					continue;  				}  				int x = Utility.ToInt32 (aRect [0]);  				int y = Utility.ToInt32 (aRect [1]);  				int width = Utility.ToInt32 (aRect [2]);  				int height = Utility.ToInt32 (aRect [3]);  				var bounds = new Rectangle2D (x' y' width' height);  				int dropSound = Utility.ToInt32 (split [2]);  				var data = new ContainerData (gumpID' bounds' dropSound);  				if (m_Default == null) {  					m_Default = data;  				}  				if (split.Length >= 4) {  					string[] aIDs = split [3].Split (''');  					for (int i = 0; i < aIDs.Length; i++) {  						int id = Utility.ToInt32 (aIDs [i]);  						if (m_Table.ContainsKey (id)) {  							Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  						} else {  							m_Table [id] = data;  						}  					}  				}  			}  		} catch {  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using (var reader = new StreamReader (path)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		line = line.Trim ();  		if (line.Length == 0 || line.StartsWith ("#")) {  			continue;  		}  		try {  			string[] split = line.Split ('\t');  			if (split.Length >= 3) {  				int gumpID = Utility.ToInt32 (split [0]);  				string[] aRect = split [1].Split (' ');  				if (aRect.Length < 4) {  					continue;  				}  				int x = Utility.ToInt32 (aRect [0]);  				int y = Utility.ToInt32 (aRect [1]);  				int width = Utility.ToInt32 (aRect [2]);  				int height = Utility.ToInt32 (aRect [3]);  				var bounds = new Rectangle2D (x' y' width' height);  				int dropSound = Utility.ToInt32 (split [2]);  				var data = new ContainerData (gumpID' bounds' dropSound);  				if (m_Default == null) {  					m_Default = data;  				}  				if (split.Length >= 4) {  					string[] aIDs = split [3].Split (''');  					for (int i = 0; i < aIDs.Length; i++) {  						int id = Utility.ToInt32 (aIDs [i]);  						if (m_Table.ContainsKey (id)) {  							Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  						} else {  							m_Table [id] = data;  						}  					}  				}  			}  		} catch {  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using (var reader = new StreamReader (path)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		line = line.Trim ();  		if (line.Length == 0 || line.StartsWith ("#")) {  			continue;  		}  		try {  			string[] split = line.Split ('\t');  			if (split.Length >= 3) {  				int gumpID = Utility.ToInt32 (split [0]);  				string[] aRect = split [1].Split (' ');  				if (aRect.Length < 4) {  					continue;  				}  				int x = Utility.ToInt32 (aRect [0]);  				int y = Utility.ToInt32 (aRect [1]);  				int width = Utility.ToInt32 (aRect [2]);  				int height = Utility.ToInt32 (aRect [3]);  				var bounds = new Rectangle2D (x' y' width' height);  				int dropSound = Utility.ToInt32 (split [2]);  				var data = new ContainerData (gumpID' bounds' dropSound);  				if (m_Default == null) {  					m_Default = data;  				}  				if (split.Length >= 4) {  					string[] aIDs = split [3].Split (''');  					for (int i = 0; i < aIDs.Length; i++) {  						int id = Utility.ToInt32 (aIDs [i]);  						if (m_Table.ContainsKey (id)) {  							Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  						} else {  							m_Table [id] = data;  						}  					}  				}  			}  		} catch {  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using (var reader = new StreamReader (path)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		line = line.Trim ();  		if (line.Length == 0 || line.StartsWith ("#")) {  			continue;  		}  		try {  			string[] split = line.Split ('\t');  			if (split.Length >= 3) {  				int gumpID = Utility.ToInt32 (split [0]);  				string[] aRect = split [1].Split (' ');  				if (aRect.Length < 4) {  					continue;  				}  				int x = Utility.ToInt32 (aRect [0]);  				int y = Utility.ToInt32 (aRect [1]);  				int width = Utility.ToInt32 (aRect [2]);  				int height = Utility.ToInt32 (aRect [3]);  				var bounds = new Rectangle2D (x' y' width' height);  				int dropSound = Utility.ToInt32 (split [2]);  				var data = new ContainerData (gumpID' bounds' dropSound);  				if (m_Default == null) {  					m_Default = data;  				}  				if (split.Length >= 4) {  					string[] aIDs = split [3].Split (''');  					for (int i = 0; i < aIDs.Length; i++) {  						int id = Utility.ToInt32 (aIDs [i]);  						if (m_Table.ContainsKey (id)) {  							Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  						} else {  							m_Table [id] = data;  						}  					}  				}  			}  		} catch {  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: using (var reader = new StreamReader (path)) {  	string line;  	while ((line = reader.ReadLine ()) != null) {  		line = line.Trim ();  		if (line.Length == 0 || line.StartsWith ("#")) {  			continue;  		}  		try {  			string[] split = line.Split ('\t');  			if (split.Length >= 3) {  				int gumpID = Utility.ToInt32 (split [0]);  				string[] aRect = split [1].Split (' ');  				if (aRect.Length < 4) {  					continue;  				}  				int x = Utility.ToInt32 (aRect [0]);  				int y = Utility.ToInt32 (aRect [1]);  				int width = Utility.ToInt32 (aRect [2]);  				int height = Utility.ToInt32 (aRect [3]);  				var bounds = new Rectangle2D (x' y' width' height);  				int dropSound = Utility.ToInt32 (split [2]);  				var data = new ContainerData (gumpID' bounds' dropSound);  				if (m_Default == null) {  					m_Default = data;  				}  				if (split.Length >= 4) {  					string[] aIDs = split [3].Split (''');  					for (int i = 0; i < aIDs.Length; i++) {  						int id = Utility.ToInt32 (aIDs [i]);  						if (m_Table.ContainsKey (id)) {  							Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  						} else {  							m_Table [id] = data;  						}  					}  				}  			}  		} catch {  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.Length == 0 || line.StartsWith ("#")) {  		continue;  	}  	try {  		string[] split = line.Split ('\t');  		if (split.Length >= 3) {  			int gumpID = Utility.ToInt32 (split [0]);  			string[] aRect = split [1].Split (' ');  			if (aRect.Length < 4) {  				continue;  			}  			int x = Utility.ToInt32 (aRect [0]);  			int y = Utility.ToInt32 (aRect [1]);  			int width = Utility.ToInt32 (aRect [2]);  			int height = Utility.ToInt32 (aRect [3]);  			var bounds = new Rectangle2D (x' y' width' height);  			int dropSound = Utility.ToInt32 (split [2]);  			var data = new ContainerData (gumpID' bounds' dropSound);  			if (m_Default == null) {  				m_Default = data;  			}  			if (split.Length >= 4) {  				string[] aIDs = split [3].Split (''');  				for (int i = 0; i < aIDs.Length; i++) {  					int id = Utility.ToInt32 (aIDs [i]);  					if (m_Table.ContainsKey (id)) {  						Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  					} else {  						m_Table [id] = data;  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.Length == 0 || line.StartsWith ("#")) {  		continue;  	}  	try {  		string[] split = line.Split ('\t');  		if (split.Length >= 3) {  			int gumpID = Utility.ToInt32 (split [0]);  			string[] aRect = split [1].Split (' ');  			if (aRect.Length < 4) {  				continue;  			}  			int x = Utility.ToInt32 (aRect [0]);  			int y = Utility.ToInt32 (aRect [1]);  			int width = Utility.ToInt32 (aRect [2]);  			int height = Utility.ToInt32 (aRect [3]);  			var bounds = new Rectangle2D (x' y' width' height);  			int dropSound = Utility.ToInt32 (split [2]);  			var data = new ContainerData (gumpID' bounds' dropSound);  			if (m_Default == null) {  				m_Default = data;  			}  			if (split.Length >= 4) {  				string[] aIDs = split [3].Split (''');  				for (int i = 0; i < aIDs.Length; i++) {  					int id = Utility.ToInt32 (aIDs [i]);  					if (m_Table.ContainsKey (id)) {  						Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  					} else {  						m_Table [id] = data;  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.Length == 0 || line.StartsWith ("#")) {  		continue;  	}  	try {  		string[] split = line.Split ('\t');  		if (split.Length >= 3) {  			int gumpID = Utility.ToInt32 (split [0]);  			string[] aRect = split [1].Split (' ');  			if (aRect.Length < 4) {  				continue;  			}  			int x = Utility.ToInt32 (aRect [0]);  			int y = Utility.ToInt32 (aRect [1]);  			int width = Utility.ToInt32 (aRect [2]);  			int height = Utility.ToInt32 (aRect [3]);  			var bounds = new Rectangle2D (x' y' width' height);  			int dropSound = Utility.ToInt32 (split [2]);  			var data = new ContainerData (gumpID' bounds' dropSound);  			if (m_Default == null) {  				m_Default = data;  			}  			if (split.Length >= 4) {  				string[] aIDs = split [3].Split (''');  				for (int i = 0; i < aIDs.Length; i++) {  					int id = Utility.ToInt32 (aIDs [i]);  					if (m_Table.ContainsKey (id)) {  						Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  					} else {  						m_Table [id] = data;  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.Length == 0 || line.StartsWith ("#")) {  		continue;  	}  	try {  		string[] split = line.Split ('\t');  		if (split.Length >= 3) {  			int gumpID = Utility.ToInt32 (split [0]);  			string[] aRect = split [1].Split (' ');  			if (aRect.Length < 4) {  				continue;  			}  			int x = Utility.ToInt32 (aRect [0]);  			int y = Utility.ToInt32 (aRect [1]);  			int width = Utility.ToInt32 (aRect [2]);  			int height = Utility.ToInt32 (aRect [3]);  			var bounds = new Rectangle2D (x' y' width' height);  			int dropSound = Utility.ToInt32 (split [2]);  			var data = new ContainerData (gumpID' bounds' dropSound);  			if (m_Default == null) {  				m_Default = data;  			}  			if (split.Length >= 4) {  				string[] aIDs = split [3].Split (''');  				for (int i = 0; i < aIDs.Length; i++) {  					int id = Utility.ToInt32 (aIDs [i]);  					if (m_Table.ContainsKey (id)) {  						Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  					} else {  						m_Table [id] = data;  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.Length == 0 || line.StartsWith ("#")) {  		continue;  	}  	try {  		string[] split = line.Split ('\t');  		if (split.Length >= 3) {  			int gumpID = Utility.ToInt32 (split [0]);  			string[] aRect = split [1].Split (' ');  			if (aRect.Length < 4) {  				continue;  			}  			int x = Utility.ToInt32 (aRect [0]);  			int y = Utility.ToInt32 (aRect [1]);  			int width = Utility.ToInt32 (aRect [2]);  			int height = Utility.ToInt32 (aRect [3]);  			var bounds = new Rectangle2D (x' y' width' height);  			int dropSound = Utility.ToInt32 (split [2]);  			var data = new ContainerData (gumpID' bounds' dropSound);  			if (m_Default == null) {  				m_Default = data;  			}  			if (split.Length >= 4) {  				string[] aIDs = split [3].Split (''');  				for (int i = 0; i < aIDs.Length; i++) {  					int id = Utility.ToInt32 (aIDs [i]);  					if (m_Table.ContainsKey (id)) {  						Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  					} else {  						m_Table [id] = data;  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.Length == 0 || line.StartsWith ("#")) {  		continue;  	}  	try {  		string[] split = line.Split ('\t');  		if (split.Length >= 3) {  			int gumpID = Utility.ToInt32 (split [0]);  			string[] aRect = split [1].Split (' ');  			if (aRect.Length < 4) {  				continue;  			}  			int x = Utility.ToInt32 (aRect [0]);  			int y = Utility.ToInt32 (aRect [1]);  			int width = Utility.ToInt32 (aRect [2]);  			int height = Utility.ToInt32 (aRect [3]);  			var bounds = new Rectangle2D (x' y' width' height);  			int dropSound = Utility.ToInt32 (split [2]);  			var data = new ContainerData (gumpID' bounds' dropSound);  			if (m_Default == null) {  				m_Default = data;  			}  			if (split.Length >= 4) {  				string[] aIDs = split [3].Split (''');  				for (int i = 0; i < aIDs.Length; i++) {  					int id = Utility.ToInt32 (aIDs [i]);  					if (m_Table.ContainsKey (id)) {  						Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  					} else {  						m_Table [id] = data;  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	line = line.Trim ();  	if (line.Length == 0 || line.StartsWith ("#")) {  		continue;  	}  	try {  		string[] split = line.Split ('\t');  		if (split.Length >= 3) {  			int gumpID = Utility.ToInt32 (split [0]);  			string[] aRect = split [1].Split (' ');  			if (aRect.Length < 4) {  				continue;  			}  			int x = Utility.ToInt32 (aRect [0]);  			int y = Utility.ToInt32 (aRect [1]);  			int width = Utility.ToInt32 (aRect [2]);  			int height = Utility.ToInt32 (aRect [3]);  			var bounds = new Rectangle2D (x' y' width' height);  			int dropSound = Utility.ToInt32 (split [2]);  			var data = new ContainerData (gumpID' bounds' dropSound);  			if (m_Default == null) {  				m_Default = data;  			}  			if (split.Length >= 4) {  				string[] aIDs = split [3].Split (''');  				for (int i = 0; i < aIDs.Length; i++) {  					int id = Utility.ToInt32 (aIDs [i]);  					if (m_Table.ContainsKey (id)) {  						Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  					} else {  						m_Table [id] = data;  					}  				}  			}  		}  	} catch {  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: try {  	string[] split = line.Split ('\t');  	if (split.Length >= 3) {  		int gumpID = Utility.ToInt32 (split [0]);  		string[] aRect = split [1].Split (' ');  		if (aRect.Length < 4) {  			continue;  		}  		int x = Utility.ToInt32 (aRect [0]);  		int y = Utility.ToInt32 (aRect [1]);  		int width = Utility.ToInt32 (aRect [2]);  		int height = Utility.ToInt32 (aRect [3]);  		var bounds = new Rectangle2D (x' y' width' height);  		int dropSound = Utility.ToInt32 (split [2]);  		var data = new ContainerData (gumpID' bounds' dropSound);  		if (m_Default == null) {  			m_Default = data;  		}  		if (split.Length >= 4) {  			string[] aIDs = split [3].Split (''');  			for (int i = 0; i < aIDs.Length; i++) {  				int id = Utility.ToInt32 (aIDs [i]);  				if (m_Table.ContainsKey (id)) {  					Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  				} else {  					m_Table [id] = data;  				}  			}  		}  	}  } catch {  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: try {  	string[] split = line.Split ('\t');  	if (split.Length >= 3) {  		int gumpID = Utility.ToInt32 (split [0]);  		string[] aRect = split [1].Split (' ');  		if (aRect.Length < 4) {  			continue;  		}  		int x = Utility.ToInt32 (aRect [0]);  		int y = Utility.ToInt32 (aRect [1]);  		int width = Utility.ToInt32 (aRect [2]);  		int height = Utility.ToInt32 (aRect [3]);  		var bounds = new Rectangle2D (x' y' width' height);  		int dropSound = Utility.ToInt32 (split [2]);  		var data = new ContainerData (gumpID' bounds' dropSound);  		if (m_Default == null) {  			m_Default = data;  		}  		if (split.Length >= 4) {  			string[] aIDs = split [3].Split (''');  			for (int i = 0; i < aIDs.Length; i++) {  				int id = Utility.ToInt32 (aIDs [i]);  				if (m_Table.ContainsKey (id)) {  					Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  				} else {  					m_Table [id] = data;  				}  			}  		}  	}  } catch {  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: try {  	string[] split = line.Split ('\t');  	if (split.Length >= 3) {  		int gumpID = Utility.ToInt32 (split [0]);  		string[] aRect = split [1].Split (' ');  		if (aRect.Length < 4) {  			continue;  		}  		int x = Utility.ToInt32 (aRect [0]);  		int y = Utility.ToInt32 (aRect [1]);  		int width = Utility.ToInt32 (aRect [2]);  		int height = Utility.ToInt32 (aRect [3]);  		var bounds = new Rectangle2D (x' y' width' height);  		int dropSound = Utility.ToInt32 (split [2]);  		var data = new ContainerData (gumpID' bounds' dropSound);  		if (m_Default == null) {  			m_Default = data;  		}  		if (split.Length >= 4) {  			string[] aIDs = split [3].Split (''');  			for (int i = 0; i < aIDs.Length; i++) {  				int id = Utility.ToInt32 (aIDs [i]);  				if (m_Table.ContainsKey (id)) {  					Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  				} else {  					m_Table [id] = data;  				}  			}  		}  	}  } catch {  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: try {  	string[] split = line.Split ('\t');  	if (split.Length >= 3) {  		int gumpID = Utility.ToInt32 (split [0]);  		string[] aRect = split [1].Split (' ');  		if (aRect.Length < 4) {  			continue;  		}  		int x = Utility.ToInt32 (aRect [0]);  		int y = Utility.ToInt32 (aRect [1]);  		int width = Utility.ToInt32 (aRect [2]);  		int height = Utility.ToInt32 (aRect [3]);  		var bounds = new Rectangle2D (x' y' width' height);  		int dropSound = Utility.ToInt32 (split [2]);  		var data = new ContainerData (gumpID' bounds' dropSound);  		if (m_Default == null) {  			m_Default = data;  		}  		if (split.Length >= 4) {  			string[] aIDs = split [3].Split (''');  			for (int i = 0; i < aIDs.Length; i++) {  				int id = Utility.ToInt32 (aIDs [i]);  				if (m_Table.ContainsKey (id)) {  					Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  				} else {  					m_Table [id] = data;  				}  			}  		}  	}  } catch {  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: try {  	string[] split = line.Split ('\t');  	if (split.Length >= 3) {  		int gumpID = Utility.ToInt32 (split [0]);  		string[] aRect = split [1].Split (' ');  		if (aRect.Length < 4) {  			continue;  		}  		int x = Utility.ToInt32 (aRect [0]);  		int y = Utility.ToInt32 (aRect [1]);  		int width = Utility.ToInt32 (aRect [2]);  		int height = Utility.ToInt32 (aRect [3]);  		var bounds = new Rectangle2D (x' y' width' height);  		int dropSound = Utility.ToInt32 (split [2]);  		var data = new ContainerData (gumpID' bounds' dropSound);  		if (m_Default == null) {  			m_Default = data;  		}  		if (split.Length >= 4) {  			string[] aIDs = split [3].Split (''');  			for (int i = 0; i < aIDs.Length; i++) {  				int id = Utility.ToInt32 (aIDs [i]);  				if (m_Table.ContainsKey (id)) {  					Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  				} else {  					m_Table [id] = data;  				}  			}  		}  	}  } catch {  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: try {  	string[] split = line.Split ('\t');  	if (split.Length >= 3) {  		int gumpID = Utility.ToInt32 (split [0]);  		string[] aRect = split [1].Split (' ');  		if (aRect.Length < 4) {  			continue;  		}  		int x = Utility.ToInt32 (aRect [0]);  		int y = Utility.ToInt32 (aRect [1]);  		int width = Utility.ToInt32 (aRect [2]);  		int height = Utility.ToInt32 (aRect [3]);  		var bounds = new Rectangle2D (x' y' width' height);  		int dropSound = Utility.ToInt32 (split [2]);  		var data = new ContainerData (gumpID' bounds' dropSound);  		if (m_Default == null) {  			m_Default = data;  		}  		if (split.Length >= 4) {  			string[] aIDs = split [3].Split (''');  			for (int i = 0; i < aIDs.Length; i++) {  				int id = Utility.ToInt32 (aIDs [i]);  				if (m_Table.ContainsKey (id)) {  					Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  				} else {  					m_Table [id] = data;  				}  			}  		}  	}  } catch {  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: try {  	string[] split = line.Split ('\t');  	if (split.Length >= 3) {  		int gumpID = Utility.ToInt32 (split [0]);  		string[] aRect = split [1].Split (' ');  		if (aRect.Length < 4) {  			continue;  		}  		int x = Utility.ToInt32 (aRect [0]);  		int y = Utility.ToInt32 (aRect [1]);  		int width = Utility.ToInt32 (aRect [2]);  		int height = Utility.ToInt32 (aRect [3]);  		var bounds = new Rectangle2D (x' y' width' height);  		int dropSound = Utility.ToInt32 (split [2]);  		var data = new ContainerData (gumpID' bounds' dropSound);  		if (m_Default == null) {  			m_Default = data;  		}  		if (split.Length >= 4) {  			string[] aIDs = split [3].Split (''');  			for (int i = 0; i < aIDs.Length; i++) {  				int id = Utility.ToInt32 (aIDs [i]);  				if (m_Table.ContainsKey (id)) {  					Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  				} else {  					m_Table [id] = data;  				}  			}  		}  	}  } catch {  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 3) {  	int gumpID = Utility.ToInt32 (split [0]);  	string[] aRect = split [1].Split (' ');  	if (aRect.Length < 4) {  		continue;  	}  	int x = Utility.ToInt32 (aRect [0]);  	int y = Utility.ToInt32 (aRect [1]);  	int width = Utility.ToInt32 (aRect [2]);  	int height = Utility.ToInt32 (aRect [3]);  	var bounds = new Rectangle2D (x' y' width' height);  	int dropSound = Utility.ToInt32 (split [2]);  	var data = new ContainerData (gumpID' bounds' dropSound);  	if (m_Default == null) {  		m_Default = data;  	}  	if (split.Length >= 4) {  		string[] aIDs = split [3].Split (''');  		for (int i = 0; i < aIDs.Length; i++) {  			int id = Utility.ToInt32 (aIDs [i]);  			if (m_Table.ContainsKey (id)) {  				Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  			} else {  				m_Table [id] = data;  			}  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 3) {  	int gumpID = Utility.ToInt32 (split [0]);  	string[] aRect = split [1].Split (' ');  	if (aRect.Length < 4) {  		continue;  	}  	int x = Utility.ToInt32 (aRect [0]);  	int y = Utility.ToInt32 (aRect [1]);  	int width = Utility.ToInt32 (aRect [2]);  	int height = Utility.ToInt32 (aRect [3]);  	var bounds = new Rectangle2D (x' y' width' height);  	int dropSound = Utility.ToInt32 (split [2]);  	var data = new ContainerData (gumpID' bounds' dropSound);  	if (m_Default == null) {  		m_Default = data;  	}  	if (split.Length >= 4) {  		string[] aIDs = split [3].Split (''');  		for (int i = 0; i < aIDs.Length; i++) {  			int id = Utility.ToInt32 (aIDs [i]);  			if (m_Table.ContainsKey (id)) {  				Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  			} else {  				m_Table [id] = data;  			}  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 3) {  	int gumpID = Utility.ToInt32 (split [0]);  	string[] aRect = split [1].Split (' ');  	if (aRect.Length < 4) {  		continue;  	}  	int x = Utility.ToInt32 (aRect [0]);  	int y = Utility.ToInt32 (aRect [1]);  	int width = Utility.ToInt32 (aRect [2]);  	int height = Utility.ToInt32 (aRect [3]);  	var bounds = new Rectangle2D (x' y' width' height);  	int dropSound = Utility.ToInt32 (split [2]);  	var data = new ContainerData (gumpID' bounds' dropSound);  	if (m_Default == null) {  		m_Default = data;  	}  	if (split.Length >= 4) {  		string[] aIDs = split [3].Split (''');  		for (int i = 0; i < aIDs.Length; i++) {  			int id = Utility.ToInt32 (aIDs [i]);  			if (m_Table.ContainsKey (id)) {  				Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  			} else {  				m_Table [id] = data;  			}  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 3) {  	int gumpID = Utility.ToInt32 (split [0]);  	string[] aRect = split [1].Split (' ');  	if (aRect.Length < 4) {  		continue;  	}  	int x = Utility.ToInt32 (aRect [0]);  	int y = Utility.ToInt32 (aRect [1]);  	int width = Utility.ToInt32 (aRect [2]);  	int height = Utility.ToInt32 (aRect [3]);  	var bounds = new Rectangle2D (x' y' width' height);  	int dropSound = Utility.ToInt32 (split [2]);  	var data = new ContainerData (gumpID' bounds' dropSound);  	if (m_Default == null) {  		m_Default = data;  	}  	if (split.Length >= 4) {  		string[] aIDs = split [3].Split (''');  		for (int i = 0; i < aIDs.Length; i++) {  			int id = Utility.ToInt32 (aIDs [i]);  			if (m_Table.ContainsKey (id)) {  				Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  			} else {  				m_Table [id] = data;  			}  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 3) {  	int gumpID = Utility.ToInt32 (split [0]);  	string[] aRect = split [1].Split (' ');  	if (aRect.Length < 4) {  		continue;  	}  	int x = Utility.ToInt32 (aRect [0]);  	int y = Utility.ToInt32 (aRect [1]);  	int width = Utility.ToInt32 (aRect [2]);  	int height = Utility.ToInt32 (aRect [3]);  	var bounds = new Rectangle2D (x' y' width' height);  	int dropSound = Utility.ToInt32 (split [2]);  	var data = new ContainerData (gumpID' bounds' dropSound);  	if (m_Default == null) {  		m_Default = data;  	}  	if (split.Length >= 4) {  		string[] aIDs = split [3].Split (''');  		for (int i = 0; i < aIDs.Length; i++) {  			int id = Utility.ToInt32 (aIDs [i]);  			if (m_Table.ContainsKey (id)) {  				Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  			} else {  				m_Table [id] = data;  			}  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 3) {  	int gumpID = Utility.ToInt32 (split [0]);  	string[] aRect = split [1].Split (' ');  	if (aRect.Length < 4) {  		continue;  	}  	int x = Utility.ToInt32 (aRect [0]);  	int y = Utility.ToInt32 (aRect [1]);  	int width = Utility.ToInt32 (aRect [2]);  	int height = Utility.ToInt32 (aRect [3]);  	var bounds = new Rectangle2D (x' y' width' height);  	int dropSound = Utility.ToInt32 (split [2]);  	var data = new ContainerData (gumpID' bounds' dropSound);  	if (m_Default == null) {  		m_Default = data;  	}  	if (split.Length >= 4) {  		string[] aIDs = split [3].Split (''');  		for (int i = 0; i < aIDs.Length; i++) {  			int id = Utility.ToInt32 (aIDs [i]);  			if (m_Table.ContainsKey (id)) {  				Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  			} else {  				m_Table [id] = data;  			}  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 3) {  	int gumpID = Utility.ToInt32 (split [0]);  	string[] aRect = split [1].Split (' ');  	if (aRect.Length < 4) {  		continue;  	}  	int x = Utility.ToInt32 (aRect [0]);  	int y = Utility.ToInt32 (aRect [1]);  	int width = Utility.ToInt32 (aRect [2]);  	int height = Utility.ToInt32 (aRect [3]);  	var bounds = new Rectangle2D (x' y' width' height);  	int dropSound = Utility.ToInt32 (split [2]);  	var data = new ContainerData (gumpID' bounds' dropSound);  	if (m_Default == null) {  		m_Default = data;  	}  	if (split.Length >= 4) {  		string[] aIDs = split [3].Split (''');  		for (int i = 0; i < aIDs.Length; i++) {  			int id = Utility.ToInt32 (aIDs [i]);  			if (m_Table.ContainsKey (id)) {  				Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  			} else {  				m_Table [id] = data;  			}  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (aRect.Length < 4) {  	continue;  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 4) {  	string[] aIDs = split [3].Split (''');  	for (int i = 0; i < aIDs.Length; i++) {  		int id = Utility.ToInt32 (aIDs [i]);  		if (m_Table.ContainsKey (id)) {  			Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  		} else {  			m_Table [id] = data;  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (split.Length >= 4) {  	string[] aIDs = split [3].Split (''');  	for (int i = 0; i < aIDs.Length; i++) {  		int id = Utility.ToInt32 (aIDs [i]);  		if (m_Table.ContainsKey (id)) {  			Console.WriteLine (@"Warning: double ItemID entry in Data\containers.cfg");  		} else {  			m_Table [id] = data;  		}  	}  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (m_Default == null) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (m_Default == null) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (m_Default == null) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: if (m_Default == null) {  	m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  }  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Items,ContainerData,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,ContainerData,The following statement contains a magic number: m_Default = new ContainerData (0x3C' new Rectangle2D (44' 65' 142' 94)' 0x48);  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,ByteQueue,The following statement contains a magic number: m_Buffer = new byte[2048];  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: if (m_Size >= 3) {  	return (m_Buffer [(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer [(m_Head + 2) % m_Buffer.Length];  }  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: if (m_Size >= 3) {  	return (m_Buffer [(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer [(m_Head + 2) % m_Buffer.Length];  }  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: if (m_Size >= 3) {  	return (m_Buffer [(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer [(m_Head + 2) % m_Buffer.Length];  }  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: return (m_Buffer [(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer [(m_Head + 2) % m_Buffer.Length];  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,GetPacketLength,The following statement contains a magic number: return (m_Buffer [(m_Head + 1) % m_Buffer.Length] << 8) | m_Buffer [(m_Head + 2) % m_Buffer.Length];  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,Enqueue,The following statement contains a magic number: if ((m_Size + size) > m_Buffer.Length) {  	SetCapacity ((m_Size + size + 2047) & ~2047);  }  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,Enqueue,The following statement contains a magic number: if ((m_Size + size) > m_Buffer.Length) {  	SetCapacity ((m_Size + size + 2047) & ~2047);  }  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,Enqueue,The following statement contains a magic number: SetCapacity ((m_Size + size + 2047) & ~2047);  
Magic Number,Server.Network,ByteQueue,F:\newReposMay17\JustUO_JustUO\Server\Network\ByteQueue.cs,Enqueue,The following statement contains a magic number: SetCapacity ((m_Size + size + 2047) & ~2047);  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (int* pTable = _huffmanTable) {  	int* pEntry;  	fixed (byte* pInputBuffer = input) {  		byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  		fixed (byte* pOutputBuffer = output) {  			byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  			while (pInput < pInputEnd) {  				pEntry = &pTable [*pInput++ << 1];  				bitCount += pEntry [CountIndex];  				bitValue <<= pEntry [CountIndex];  				bitValue |= pEntry [ValueIndex];  				while (bitCount >= 8) {  					bitCount -= 8;  					if (pOutput < pOutputEnd) {  						*pOutput++ = (byte)(bitValue >> bitCount);  					} else {  						length = 0;  						return;  					}  				}  			}  			// terminal code  			pEntry = &pTable [0x200];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			// align on byte boundary  			if ((bitCount & 7) != 0) {  				bitValue <<= (8 - (bitCount & 7));  				bitCount += (8 - (bitCount & 7));  			}  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  			length = (int)(pOutput - pOutputBuffer);  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pInputBuffer = input) {  	byte* pInput = pInputBuffer + offset' pInputEnd = pInput + count;  	fixed (byte* pOutputBuffer = output) {  		byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  		while (pInput < pInputEnd) {  			pEntry = &pTable [*pInput++ << 1];  			bitCount += pEntry [CountIndex];  			bitValue <<= pEntry [CountIndex];  			bitValue |= pEntry [ValueIndex];  			while (bitCount >= 8) {  				bitCount -= 8;  				if (pOutput < pOutputEnd) {  					*pOutput++ = (byte)(bitValue >> bitCount);  				} else {  					length = 0;  					return;  				}  			}  		}  		// terminal code  		pEntry = &pTable [0x200];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		// align on byte boundary  		if ((bitCount & 7) != 0) {  			bitValue <<= (8 - (bitCount & 7));  			bitCount += (8 - (bitCount & 7));  		}  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  		length = (int)(pOutput - pOutputBuffer);  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: fixed (byte* pOutputBuffer = output) {  	byte* pOutput = pOutputBuffer' pOutputEnd = pOutput + BufferSize;  	while (pInput < pInputEnd) {  		pEntry = &pTable [*pInput++ << 1];  		bitCount += pEntry [CountIndex];  		bitValue <<= pEntry [CountIndex];  		bitValue |= pEntry [ValueIndex];  		while (bitCount >= 8) {  			bitCount -= 8;  			if (pOutput < pOutputEnd) {  				*pOutput++ = (byte)(bitValue >> bitCount);  			} else {  				length = 0;  				return;  			}  		}  	}  	// terminal code  	pEntry = &pTable [0x200];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	// align on byte boundary  	if ((bitCount & 7) != 0) {  		bitValue <<= (8 - (bitCount & 7));  		bitCount += (8 - (bitCount & 7));  	}  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  	length = (int)(pOutput - pOutputBuffer);  	return;  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: while (pInput < pInputEnd) {  	pEntry = &pTable [*pInput++ << 1];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: while (pInput < pInputEnd) {  	pEntry = &pTable [*pInput++ << 1];  	bitCount += pEntry [CountIndex];  	bitValue <<= pEntry [CountIndex];  	bitValue |= pEntry [ValueIndex];  	while (bitCount >= 8) {  		bitCount -= 8;  		if (pOutput < pOutputEnd) {  			*pOutput++ = (byte)(bitValue >> bitCount);  		} else {  			length = 0;  			return;  		}  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: while (bitCount >= 8) {  	bitCount -= 8;  	if (pOutput < pOutputEnd) {  		*pOutput++ = (byte)(bitValue >> bitCount);  	} else {  		length = 0;  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: while (bitCount >= 8) {  	bitCount -= 8;  	if (pOutput < pOutputEnd) {  		*pOutput++ = (byte)(bitValue >> bitCount);  	} else {  		length = 0;  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: bitCount -= 8;  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: if ((bitCount & 7) != 0) {  	bitValue <<= (8 - (bitCount & 7));  	bitCount += (8 - (bitCount & 7));  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: if ((bitCount & 7) != 0) {  	bitValue <<= (8 - (bitCount & 7));  	bitCount += (8 - (bitCount & 7));  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: if ((bitCount & 7) != 0) {  	bitValue <<= (8 - (bitCount & 7));  	bitCount += (8 - (bitCount & 7));  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: if ((bitCount & 7) != 0) {  	bitValue <<= (8 - (bitCount & 7));  	bitCount += (8 - (bitCount & 7));  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: if ((bitCount & 7) != 0) {  	bitValue <<= (8 - (bitCount & 7));  	bitCount += (8 - (bitCount & 7));  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: bitValue <<= (8 - (bitCount & 7));  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: bitValue <<= (8 - (bitCount & 7));  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: bitCount += (8 - (bitCount & 7));  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: bitCount += (8 - (bitCount & 7));  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: while (bitCount >= 8) {  	bitCount -= 8;  	if (pOutput < pOutputEnd) {  		*pOutput++ = (byte)(bitValue >> bitCount);  	} else {  		length = 0;  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: while (bitCount >= 8) {  	bitCount -= 8;  	if (pOutput < pOutputEnd) {  		*pOutput++ = (byte)(bitValue >> bitCount);  	} else {  		length = 0;  		return;  	}  }  
Magic Number,Server.Network,Compression,F:\newReposMay17\JustUO_JustUO\Server\Network\Compression.cs,Compress,The following statement contains a magic number: bitCount -= 8;  
Magic Number,Server.Network,EncodedReader,F:\newReposMay17\JustUO_JustUO\Server\Network\EncodedReader.cs,ReadPoint3D,The following statement contains a magic number: if (m_Reader.ReadByte () != 3) {  	return Point3D.Zero;  }  
Magic Number,Server.Network,EncodedReader,F:\newReposMay17\JustUO_JustUO\Server\Network\EncodedReader.cs,ReadUnicodeStringSafe,The following statement contains a magic number: if (m_Reader.ReadByte () != 2) {  	return "";  }  
Magic Number,Server.Network,EncodedReader,F:\newReposMay17\JustUO_JustUO\Server\Network\EncodedReader.cs,ReadUnicodeString,The following statement contains a magic number: if (m_Reader.ReadByte () != 2) {  	return "";  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: try {  	s.LingerState.Enabled = false;  	#if !MONO  	s.ExclusiveAddressUse = false;  	#endif  	s.Bind (ipep);  	s.Listen (8);  	return s;  } catch (Exception e) {  	if (e is SocketException) {  		var se = (SocketException)e;  		if (se.ErrorCode == 10048) {  			// WSAEADDRINUSE  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port);  			Utility.PopColor ();  		} else if (se.ErrorCode == 10049) {  			// WSAEADDRNOTAVAIL  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  			Utility.PopColor ();  		} else {  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Exception:");  			Console.WriteLine (e);  			Utility.PopColor ();  		}  	}  	return null;  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: try {  	s.LingerState.Enabled = false;  	#if !MONO  	s.ExclusiveAddressUse = false;  	#endif  	s.Bind (ipep);  	s.Listen (8);  	return s;  } catch (Exception e) {  	if (e is SocketException) {  		var se = (SocketException)e;  		if (se.ErrorCode == 10048) {  			// WSAEADDRINUSE  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port);  			Utility.PopColor ();  		} else if (se.ErrorCode == 10049) {  			// WSAEADDRNOTAVAIL  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  			Utility.PopColor ();  		} else {  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Exception:");  			Console.WriteLine (e);  			Utility.PopColor ();  		}  	}  	return null;  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: try {  	s.LingerState.Enabled = false;  	#if !MONO  	s.ExclusiveAddressUse = false;  	#endif  	s.Bind (ipep);  	s.Listen (8);  	return s;  } catch (Exception e) {  	if (e is SocketException) {  		var se = (SocketException)e;  		if (se.ErrorCode == 10048) {  			// WSAEADDRINUSE  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port);  			Utility.PopColor ();  		} else if (se.ErrorCode == 10049) {  			// WSAEADDRNOTAVAIL  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  			Utility.PopColor ();  		} else {  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Listener Exception:");  			Console.WriteLine (e);  			Utility.PopColor ();  		}  	}  	return null;  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: s.Listen (8);  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: if (e is SocketException) {  	var se = (SocketException)e;  	if (se.ErrorCode == 10048) {  		// WSAEADDRINUSE  		Utility.PushColor (ConsoleColor.Red);  		Console.WriteLine ("Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port);  		Utility.PopColor ();  	} else if (se.ErrorCode == 10049) {  		// WSAEADDRNOTAVAIL  		Utility.PushColor (ConsoleColor.Red);  		Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  		Utility.PopColor ();  	} else {  		Utility.PushColor (ConsoleColor.Red);  		Console.WriteLine ("Listener Exception:");  		Console.WriteLine (e);  		Utility.PopColor ();  	}  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: if (e is SocketException) {  	var se = (SocketException)e;  	if (se.ErrorCode == 10048) {  		// WSAEADDRINUSE  		Utility.PushColor (ConsoleColor.Red);  		Console.WriteLine ("Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port);  		Utility.PopColor ();  	} else if (se.ErrorCode == 10049) {  		// WSAEADDRNOTAVAIL  		Utility.PushColor (ConsoleColor.Red);  		Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  		Utility.PopColor ();  	} else {  		Utility.PushColor (ConsoleColor.Red);  		Console.WriteLine ("Listener Exception:");  		Console.WriteLine (e);  		Utility.PopColor ();  	}  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: if (se.ErrorCode == 10048) {  	// WSAEADDRINUSE  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port);  	Utility.PopColor ();  } else if (se.ErrorCode == 10049) {  	// WSAEADDRNOTAVAIL  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  	Utility.PopColor ();  } else {  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Exception:");  	Console.WriteLine (e);  	Utility.PopColor ();  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: if (se.ErrorCode == 10048) {  	// WSAEADDRINUSE  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Failed: {0}:{1} (In Use)"' ipep.Address' ipep.Port);  	Utility.PopColor ();  } else if (se.ErrorCode == 10049) {  	// WSAEADDRNOTAVAIL  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  	Utility.PopColor ();  } else {  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Exception:");  	Console.WriteLine (e);  	Utility.PopColor ();  }  
Magic Number,Server.Network,Listener,F:\newReposMay17\JustUO_JustUO\Server\Network\Listener.cs,Bind,The following statement contains a magic number: if (se.ErrorCode == 10049) {  	// WSAEADDRNOTAVAIL  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Failed: {0}:{1} (Unavailable)"' ipep.Address' ipep.Port);  	Utility.PopColor ();  } else {  	Utility.PushColor (ConsoleColor.Red);  	Console.WriteLine ("Listener Exception:");  	Console.WriteLine (e);  	Utility.PopColor ();  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,MessagePump,The following statement contains a magic number: do {  	for (int i = 0; i < ipep.Length; i++) {  		var l = new Listener (ipep [i]);  		if (!success && l != null) {  			success = true;  		}  		m_Listeners [i] = l;  	}  	if (!success) {  		Utility.PushColor (ConsoleColor.Yellow);  		Console.WriteLine ("Retrying...");  		Utility.PopColor ();  		Thread.Sleep (10000);  	}  } while (!success);  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,MessagePump,The following statement contains a magic number: if (!success) {  	Utility.PushColor (ConsoleColor.Yellow);  	Console.WriteLine ("Retrying...");  	Utility.PopColor ();  	Thread.Sleep (10000);  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,MessagePump,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.GetPacketID () == 0xEF) {  	// new packet in client	6.0.5.0	replaces the traditional seed method with a	seed packet  	// 0xEF	= 239 =	multicast IP' so this should never appear in a normal seed.	 So	this is	backwards compatible with older	clients.  	ns.Seeded = true;  	return true;  } else if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: if (buffer.Length >= 4) {  	var m_Peek = new byte[4];  	buffer.Dequeue (m_Peek' 0' 4);  	int seed = (m_Peek [0] << 24) | (m_Peek [1] << 16) | (m_Peek [2] << 8) | m_Peek [3];  	if (seed == 0) {  		Utility.PushColor (ConsoleColor.Green);  		Console.WriteLine ("Login: {0}: Invalid client detected' disconnecting"' ns);  		Utility.PopColor ();  		ns.Dispose ();  		return false;  	}  	ns.m_Seed = seed;  	ns.Seeded = true;  	return true;  } else {  	return false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleSeed,The following statement contains a magic number: buffer.Dequeue (m_Peek' 0' 4);  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: lock (buffer) {  	if (!ns.Seeded) {  		if (!HandleSeed (ns' buffer)) {  			return;  		}  	}  	int length = buffer.Length;  	while (length > 0 && ns.Running) {  		int packetID = buffer.GetPacketID ();  		if (CheckEncrypted (ns' packetID)) {  			break;  		}  		PacketHandler handler = ns.GetHandler (packetID);  		if (handler == null) {  			var data = new byte[length];  			length = buffer.Dequeue (data' 0' length);  			new PacketReader (data' length' false).Trace (ns);  			break;  		}  		int packetLength = handler.Length;  		if (packetLength <= 0) {  			if (length >= 3) {  				packetLength = buffer.GetPacketLength ();  				if (packetLength < 3) {  					ns.Dispose ();  					break;  				}  			} else {  				break;  			}  		}  		if (length >= packetLength) {  			if (handler.Ingame) {  				if (ns.Mobile == null) {  					Utility.PushColor (ConsoleColor.DarkRed);  					Console.WriteLine ("Client: {0}: Sent ingame packet (0x{1:X2}) before having been attached to a mobile"' ns' packetID);  					Utility.PopColor ();  					ns.Dispose ();  					break;  				} else if (ns.Mobile.Deleted) {  					ns.Dispose ();  					break;  				}  			}  			ThrottlePacketCallback throttler = handler.ThrottleCallback;  			if (throttler != null && !throttler (ns)) {  				m_Throttled.Enqueue (ns);  				return;  			}  			PacketReceiveProfile prof = null;  			if (Core.Profiling) {  				prof = PacketReceiveProfile.Acquire (packetID);  			}  			if (prof != null) {  				prof.Start ();  			}  			byte[] packetBuffer;  			if (BufferSize >= packetLength) {  				packetBuffer = m_Buffers.AcquireBuffer ();  			} else {  				packetBuffer = new byte[packetLength];  			}  			packetLength = buffer.Dequeue (packetBuffer' 0' packetLength);  			var r = new PacketReader (packetBuffer' packetLength' handler.Length != 0);  			handler.OnReceive (ns' r);  			length = buffer.Length;  			if (BufferSize >= packetLength) {  				m_Buffers.ReleaseBuffer (packetBuffer);  			}  			if (prof != null) {  				prof.Finish (packetLength);  			}  		} else {  			break;  		}  	}  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: lock (buffer) {  	if (!ns.Seeded) {  		if (!HandleSeed (ns' buffer)) {  			return;  		}  	}  	int length = buffer.Length;  	while (length > 0 && ns.Running) {  		int packetID = buffer.GetPacketID ();  		if (CheckEncrypted (ns' packetID)) {  			break;  		}  		PacketHandler handler = ns.GetHandler (packetID);  		if (handler == null) {  			var data = new byte[length];  			length = buffer.Dequeue (data' 0' length);  			new PacketReader (data' length' false).Trace (ns);  			break;  		}  		int packetLength = handler.Length;  		if (packetLength <= 0) {  			if (length >= 3) {  				packetLength = buffer.GetPacketLength ();  				if (packetLength < 3) {  					ns.Dispose ();  					break;  				}  			} else {  				break;  			}  		}  		if (length >= packetLength) {  			if (handler.Ingame) {  				if (ns.Mobile == null) {  					Utility.PushColor (ConsoleColor.DarkRed);  					Console.WriteLine ("Client: {0}: Sent ingame packet (0x{1:X2}) before having been attached to a mobile"' ns' packetID);  					Utility.PopColor ();  					ns.Dispose ();  					break;  				} else if (ns.Mobile.Deleted) {  					ns.Dispose ();  					break;  				}  			}  			ThrottlePacketCallback throttler = handler.ThrottleCallback;  			if (throttler != null && !throttler (ns)) {  				m_Throttled.Enqueue (ns);  				return;  			}  			PacketReceiveProfile prof = null;  			if (Core.Profiling) {  				prof = PacketReceiveProfile.Acquire (packetID);  			}  			if (prof != null) {  				prof.Start ();  			}  			byte[] packetBuffer;  			if (BufferSize >= packetLength) {  				packetBuffer = m_Buffers.AcquireBuffer ();  			} else {  				packetBuffer = new byte[packetLength];  			}  			packetLength = buffer.Dequeue (packetBuffer' 0' packetLength);  			var r = new PacketReader (packetBuffer' packetLength' handler.Length != 0);  			handler.OnReceive (ns' r);  			length = buffer.Length;  			if (BufferSize >= packetLength) {  				m_Buffers.ReleaseBuffer (packetBuffer);  			}  			if (prof != null) {  				prof.Finish (packetLength);  			}  		} else {  			break;  		}  	}  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: while (length > 0 && ns.Running) {  	int packetID = buffer.GetPacketID ();  	if (CheckEncrypted (ns' packetID)) {  		break;  	}  	PacketHandler handler = ns.GetHandler (packetID);  	if (handler == null) {  		var data = new byte[length];  		length = buffer.Dequeue (data' 0' length);  		new PacketReader (data' length' false).Trace (ns);  		break;  	}  	int packetLength = handler.Length;  	if (packetLength <= 0) {  		if (length >= 3) {  			packetLength = buffer.GetPacketLength ();  			if (packetLength < 3) {  				ns.Dispose ();  				break;  			}  		} else {  			break;  		}  	}  	if (length >= packetLength) {  		if (handler.Ingame) {  			if (ns.Mobile == null) {  				Utility.PushColor (ConsoleColor.DarkRed);  				Console.WriteLine ("Client: {0}: Sent ingame packet (0x{1:X2}) before having been attached to a mobile"' ns' packetID);  				Utility.PopColor ();  				ns.Dispose ();  				break;  			} else if (ns.Mobile.Deleted) {  				ns.Dispose ();  				break;  			}  		}  		ThrottlePacketCallback throttler = handler.ThrottleCallback;  		if (throttler != null && !throttler (ns)) {  			m_Throttled.Enqueue (ns);  			return;  		}  		PacketReceiveProfile prof = null;  		if (Core.Profiling) {  			prof = PacketReceiveProfile.Acquire (packetID);  		}  		if (prof != null) {  			prof.Start ();  		}  		byte[] packetBuffer;  		if (BufferSize >= packetLength) {  			packetBuffer = m_Buffers.AcquireBuffer ();  		} else {  			packetBuffer = new byte[packetLength];  		}  		packetLength = buffer.Dequeue (packetBuffer' 0' packetLength);  		var r = new PacketReader (packetBuffer' packetLength' handler.Length != 0);  		handler.OnReceive (ns' r);  		length = buffer.Length;  		if (BufferSize >= packetLength) {  			m_Buffers.ReleaseBuffer (packetBuffer);  		}  		if (prof != null) {  			prof.Finish (packetLength);  		}  	} else {  		break;  	}  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: while (length > 0 && ns.Running) {  	int packetID = buffer.GetPacketID ();  	if (CheckEncrypted (ns' packetID)) {  		break;  	}  	PacketHandler handler = ns.GetHandler (packetID);  	if (handler == null) {  		var data = new byte[length];  		length = buffer.Dequeue (data' 0' length);  		new PacketReader (data' length' false).Trace (ns);  		break;  	}  	int packetLength = handler.Length;  	if (packetLength <= 0) {  		if (length >= 3) {  			packetLength = buffer.GetPacketLength ();  			if (packetLength < 3) {  				ns.Dispose ();  				break;  			}  		} else {  			break;  		}  	}  	if (length >= packetLength) {  		if (handler.Ingame) {  			if (ns.Mobile == null) {  				Utility.PushColor (ConsoleColor.DarkRed);  				Console.WriteLine ("Client: {0}: Sent ingame packet (0x{1:X2}) before having been attached to a mobile"' ns' packetID);  				Utility.PopColor ();  				ns.Dispose ();  				break;  			} else if (ns.Mobile.Deleted) {  				ns.Dispose ();  				break;  			}  		}  		ThrottlePacketCallback throttler = handler.ThrottleCallback;  		if (throttler != null && !throttler (ns)) {  			m_Throttled.Enqueue (ns);  			return;  		}  		PacketReceiveProfile prof = null;  		if (Core.Profiling) {  			prof = PacketReceiveProfile.Acquire (packetID);  		}  		if (prof != null) {  			prof.Start ();  		}  		byte[] packetBuffer;  		if (BufferSize >= packetLength) {  			packetBuffer = m_Buffers.AcquireBuffer ();  		} else {  			packetBuffer = new byte[packetLength];  		}  		packetLength = buffer.Dequeue (packetBuffer' 0' packetLength);  		var r = new PacketReader (packetBuffer' packetLength' handler.Length != 0);  		handler.OnReceive (ns' r);  		length = buffer.Length;  		if (BufferSize >= packetLength) {  			m_Buffers.ReleaseBuffer (packetBuffer);  		}  		if (prof != null) {  			prof.Finish (packetLength);  		}  	} else {  		break;  	}  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: if (packetLength <= 0) {  	if (length >= 3) {  		packetLength = buffer.GetPacketLength ();  		if (packetLength < 3) {  			ns.Dispose ();  			break;  		}  	} else {  		break;  	}  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: if (packetLength <= 0) {  	if (length >= 3) {  		packetLength = buffer.GetPacketLength ();  		if (packetLength < 3) {  			ns.Dispose ();  			break;  		}  	} else {  		break;  	}  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: if (length >= 3) {  	packetLength = buffer.GetPacketLength ();  	if (packetLength < 3) {  		ns.Dispose ();  		break;  	}  } else {  	break;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: if (length >= 3) {  	packetLength = buffer.GetPacketLength ();  	if (packetLength < 3) {  		ns.Dispose ();  		break;  	}  } else {  	break;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: if (packetLength < 3) {  	ns.Dispose ();  	break;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: try {  	if (ns.Version.Major > 8)  		ns.IsKRClient = true;  } //Standard classic client does not display version this early' so we can rule SA enhanced client out  catch {  	ns.IsKRClient = false;  }  
Magic Number,Server.Network,MessagePump,F:\newReposMay17\JustUO_JustUO\Server\Network\MessagePump.cs,HandleReceive,The following statement contains a magic number: if (ns.Version.Major > 8)  	ns.IsKRClient = true;  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,ValidateAllTrades,The following statement contains a magic number: for (int i = m_Trades.Count - 1; i >= 0; --i) {  	if (i >= m_Trades.Count) {  		continue;  	}  	SecureTrade trade = m_Trades [i];  	if (trade.From.Mobile.Deleted || trade.To.Mobile.Deleted || !trade.From.Mobile.Alive || !trade.To.Mobile.Alive || !trade.From.Mobile.InRange (trade.To.Mobile' 2) || trade.From.Mobile.Map != trade.To.Mobile.Map) {  		trade.Cancel ();  	}  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,ValidateAllTrades,The following statement contains a magic number: if (trade.From.Mobile.Deleted || trade.To.Mobile.Deleted || !trade.From.Mobile.Alive || !trade.To.Mobile.Alive || !trade.From.Mobile.InRange (trade.To.Mobile' 2) || trade.From.Mobile.Map != trade.To.Mobile.Map) {  	trade.Cancel ();  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,LaunchBrowser,The following statement contains a magic number: Send (new MessageLocalized (Serial.MinusOne' -1' MessageType.Label' 0x35' 3' 501231' ""' ""));  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,LaunchBrowser,The following statement contains a magic number: Send (new MessageLocalized (Serial.MinusOne' -1' MessageType.Label' 0x35' 3' 501231' ""' ""));  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,NetState,The following statement contains a magic number: m_NextCheckActivity = Core.TickCount + 30000;  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,OnReceive,The following statement contains a magic number: try {  	int byteCount = s.EndReceive (asyncResult);  	if (byteCount > 0) {  		m_NextCheckActivity = Core.TickCount + 90000;  		byte[] buffer = m_RecvBuffer;  		if (m_Encoder != null) {  			m_Encoder.DecodeIncomingPacket (this' ref buffer' ref byteCount);  		}  		lock (m_Buffer)  			m_Buffer.Enqueue (buffer' 0' byteCount);  		m_MessagePump.OnReceive (this);  		lock (m_AsyncLock) {  			m_AsyncState &= ~AsyncState.Pending;  			if ((m_AsyncState & AsyncState.Paused) == 0) {  				try {  					InternalBeginReceive ();  				} catch (Exception ex) {  					TraceException (ex);  					Dispose (false);  				}  			}  		}  	} else {  		Dispose (false);  	}  } catch {  	Dispose (false);  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,OnReceive,The following statement contains a magic number: if (byteCount > 0) {  	m_NextCheckActivity = Core.TickCount + 90000;  	byte[] buffer = m_RecvBuffer;  	if (m_Encoder != null) {  		m_Encoder.DecodeIncomingPacket (this' ref buffer' ref byteCount);  	}  	lock (m_Buffer)  		m_Buffer.Enqueue (buffer' 0' byteCount);  	m_MessagePump.OnReceive (this);  	lock (m_AsyncLock) {  		m_AsyncState &= ~AsyncState.Pending;  		if ((m_AsyncState & AsyncState.Paused) == 0) {  			try {  				InternalBeginReceive ();  			} catch (Exception ex) {  				TraceException (ex);  				Dispose (false);  			}  		}  	}  } else {  	Dispose (false);  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,OnReceive,The following statement contains a magic number: m_NextCheckActivity = Core.TickCount + 90000;  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,OnSend,The following statement contains a magic number: try {  	int bytes = s.EndSend (asyncResult);  	if (bytes <= 0) {  		Dispose (false);  		return;  	}  	m_NextCheckActivity = Core.TickCount + 90000;  	if (m_CoalesceSleep >= 0) {  		Thread.Sleep (m_CoalesceSleep);  	}  	SendQueue.Gram gram;  	lock (m_SendQueue) {  		gram = m_SendQueue.Dequeue ();  		if (gram == null && m_SendQueue.IsFlushReady) {  			gram = m_SendQueue.CheckFlushReady ();  		}  	}  	if (gram != null) {  		try {  			s.BeginSend (gram.Buffer' 0' gram.Length' SocketFlags.None' m_OnSend' s);  		} catch (Exception ex) {  			TraceException (ex);  			Dispose (false);  		}  	} else {  		lock (_sendL)  			_sending = false;  	}  } catch (Exception) {  	Dispose (false);  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,OnSend,The following statement contains a magic number: m_NextCheckActivity = Core.TickCount + 90000;  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,FlushAll,The following statement contains a magic number: if (m_Instances.Count > 1024) {  	Parallel.ForEach (m_Instances' ns => ns.Flush ());  } else {  	for (int i = 0; i < m_Instances.Count; ++i) {  		m_Instances [i].Flush ();  	}  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,Initialize,The following statement contains a magic number: Timer.DelayCall (TimeSpan.FromMinutes (1.0)' TimeSpan.FromMinutes (1.5)' CheckAllAlive);  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,CheckAllAlive,The following statement contains a magic number: try {  	long curTicks = Core.TickCount;  	if (m_Instances.Count >= 1024) {  		Parallel.ForEach (m_Instances' ns => ns.CheckAlive (curTicks));  	} else {  		for (int i = 0; i < m_Instances.Count; ++i) {  			m_Instances [i].CheckAlive (curTicks);  		}  	}  } catch (Exception ex) {  	TraceException (ex);  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,CheckAllAlive,The following statement contains a magic number: if (m_Instances.Count >= 1024) {  	Parallel.ForEach (m_Instances' ns => ns.CheckAlive (curTicks));  } else {  	for (int i = 0; i < m_Instances.Count; ++i) {  		m_Instances [i].CheckAlive (curTicks);  	}  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,ProcessDisposedQueue,The following statement contains a magic number: lock (m_Disposed) {  	int breakout = 0;  	while (breakout < 200 && m_Disposed.Count > 0) {  		++breakout;  		NetState ns = m_Disposed.Dequeue ();  		Mobile m = ns.m_Mobile;  		IAccount a = ns.m_Account;  		if (m != null) {  			m.NetState = null;  			ns.m_Mobile = null;  		}  		ns.m_Gumps.Clear ();  		ns.m_Menus.Clear ();  		ns.m_HuePickers.Clear ();  		ns.m_Account = null;  		ns.m_ServerInfo = null;  		ns.m_CityInfo = null;  		m_Instances.Remove (ns);  		Utility.PushColor (ConsoleColor.DarkRed);  		if (a != null) {  			ns.WriteConsole ("Disconnected. [{0} Online] [{1}]"' m_Instances.Count' a);  		} else {  			ns.WriteConsole ("Disconnected. [{0} Online]"' m_Instances.Count);  		}  		Utility.PopColor ();  	}  }  
Magic Number,Server.Network,NetState,F:\newReposMay17\JustUO_JustUO\Server\Network\NetState.cs,ProcessDisposedQueue,The following statement contains a magic number: while (breakout < 200 && m_Disposed.Count > 0) {  	++breakout;  	NetState ns = m_Disposed.Dequeue ();  	Mobile m = ns.m_Mobile;  	IAccount a = ns.m_Account;  	if (m != null) {  		m.NetState = null;  		ns.m_Mobile = null;  	}  	ns.m_Gumps.Clear ();  	ns.m_Menus.Clear ();  	ns.m_HuePickers.Clear ();  	ns.m_Account = null;  	ns.m_ServerInfo = null;  	ns.m_CityInfo = null;  	m_Instances.Remove (ns);  	Utility.PushColor (ConsoleColor.DarkRed);  	if (a != null) {  		ns.WriteConsole ("Disconnected. [{0} Online] [{1}]"' m_Instances.Count' a);  	} else {  		ns.WriteConsole ("Disconnected. [{0} Online]"' m_Instances.Count);  	}  	Utility.PopColor ();  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x00' 104' false' CreateCharacter);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x01' 5' false' Disconnect);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x02' 7' true' MovementReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x04' 2' true' GodModeRequest);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x05' 5' true' AttackReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x06' 5' true' UseReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x07' 7' true' LiftReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x08' 14' true' DropReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x09' 5' true' LookReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x0A' 11' true' Edit);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x13' 10' true' EquipReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x14' 6' true' ChangeZ);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x22' 3' true' Resynchronize);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x2C' 2' true' DeathStatusResponse);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x34' 10' true' MobileQuery);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x47' 11' true' NewTerrain);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x48' 73' true' NewAnimData);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x58' 106' true' NewRegion);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x5D' 73' false' PlayCharacter);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x61' 9' true' DeleteStatic);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x6C' 19' true' TargetResponse);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x72' 5' true' SetWarMode);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x73' 2' false' PingReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x75' 35' true' RenameRequest);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x79' 9' true' ResourceQuery);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x7E' 2' true' GodviewQuery);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x7D' 13' true' MenuResponse);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x80' 62' false' AccountLogin);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x83' 39' false' DeleteCharacter);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x91' 65' false' GameLogin);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x95' 9' true' HuePickerResponse);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x9B' 258' true' HelpRequest);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0x9D' 51' true' GMSingle);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xA0' 3' false' PlayServer);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xA4' 149' false' SystemInfo);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xA7' 4' true' RequestScrollWindow);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xB5' 64' true' ChatRequest);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xB6' 9' true' ObjectHelpRequest);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xBB' 9' false' AccountID);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xC8' 2' true' SetUpdateRange);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xC9' 6' true' TripTime);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xCA' 6' true' UTripTime);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xD1' 2' true' LogoutReq);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xEF' 21' false' LoginServerSeed);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xF8' 106' false' CreateCharacter70160);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register6017 (0x08' 15' true' DropReq6017);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PacketHandlers,The following statement contains a magic number: Register (0xFF' 4' false' KRSeed);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,SecureTrade,The following statement contains a magic number: switch (pvSrc.ReadByte ()) {  case 1:  	// Cancel  	{  		Serial serial = pvSrc.ReadInt32 ();  		SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  		if (cont != null) {  			SecureTrade trade = cont.Trade;  			if (trade != null) {  				if (trade.From.Mobile == state.Mobile || trade.To.Mobile == state.Mobile) {  					trade.Cancel ();  				}  			}  		}  	}  	break;  case 2:  	// Check  	{  		Serial serial = pvSrc.ReadInt32 ();  		SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  		if (cont != null) {  			SecureTrade trade = cont.Trade;  			bool value = pvSrc.ReadInt32 () != 0;  			if (trade != null) {  				if (trade.From.Mobile == state.Mobile) {  					trade.From.Accepted = value;  					trade.Update ();  				} else if (trade.To.Mobile == state.Mobile) {  					trade.To.Accepted = value;  					trade.Update ();  				}  			}  		}  	}  	break;  case 3:  	// Update Gold  	{  		if (Core.TOL) {  			Serial serial = pvSrc.ReadInt32 ();  			SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  			if (cont != null) {  				int gold = pvSrc.ReadInt32 ();  				int plat = pvSrc.ReadInt32 ();  				SecureTrade trade = cont.Trade;  				if (trade != null) {  					if (trade.From.Mobile == state.Mobile) {  						trade.From.Gold = gold;  						trade.From.Plat = plat;  						trade.UpdateFromCurrency ();  					} else if (trade.To.Mobile == state.Mobile) {  						trade.To.Gold = gold;  						trade.To.Plat = plat;  						trade.UpdateToCurrency ();  					}  				}  			}  		}  	}  	break;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,SecureTrade,The following statement contains a magic number: switch (pvSrc.ReadByte ()) {  case 1:  	// Cancel  	{  		Serial serial = pvSrc.ReadInt32 ();  		SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  		if (cont != null) {  			SecureTrade trade = cont.Trade;  			if (trade != null) {  				if (trade.From.Mobile == state.Mobile || trade.To.Mobile == state.Mobile) {  					trade.Cancel ();  				}  			}  		}  	}  	break;  case 2:  	// Check  	{  		Serial serial = pvSrc.ReadInt32 ();  		SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  		if (cont != null) {  			SecureTrade trade = cont.Trade;  			bool value = pvSrc.ReadInt32 () != 0;  			if (trade != null) {  				if (trade.From.Mobile == state.Mobile) {  					trade.From.Accepted = value;  					trade.Update ();  				} else if (trade.To.Mobile == state.Mobile) {  					trade.To.Accepted = value;  					trade.Update ();  				}  			}  		}  	}  	break;  case 3:  	// Update Gold  	{  		if (Core.TOL) {  			Serial serial = pvSrc.ReadInt32 ();  			SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  			if (cont != null) {  				int gold = pvSrc.ReadInt32 ();  				int plat = pvSrc.ReadInt32 ();  				SecureTrade trade = cont.Trade;  				if (trade != null) {  					if (trade.From.Mobile == state.Mobile) {  						trade.From.Gold = gold;  						trade.From.Plat = plat;  						trade.UpdateFromCurrency ();  					} else if (trade.To.Mobile == state.Mobile) {  						trade.To.Gold = gold;  						trade.To.Plat = plat;  						trade.UpdateToCurrency ();  					}  				}  			}  		}  	}  	break;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (vendor == null) {  	return;  } else if (vendor.Deleted || !Utility.RangeCheck (vendor.Location' state.Mobile.Location' 10)) {  	state.Send (new EndVendorBuy (vendor));  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (vendor.Deleted || !Utility.RangeCheck (vendor.Location' state.Mobile.Location' 10)) {  	state.Send (new EndVendorBuy (vendor));  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (flag == 0x02) {  	msgSize -= 1 + 2 + 4 + 1;  	if ((msgSize / 7) > 100) {  		return;  	}  	var buyList = new List<BuyItemResponse> (msgSize / 7);  	for (; msgSize > 0; msgSize -= 7) {  		byte layer = pvSrc.ReadByte ();  		Serial serial = pvSrc.ReadInt32 ();  		int amount = pvSrc.ReadInt16 ();  		buyList.Add (new BuyItemResponse (serial' amount));  	}  	if (buyList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnBuyItems (state.Mobile' buyList)) {  			state.Send (new EndVendorBuy (vendor));  		}  	}  } else {  	state.Send (new EndVendorBuy (vendor));  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (flag == 0x02) {  	msgSize -= 1 + 2 + 4 + 1;  	if ((msgSize / 7) > 100) {  		return;  	}  	var buyList = new List<BuyItemResponse> (msgSize / 7);  	for (; msgSize > 0; msgSize -= 7) {  		byte layer = pvSrc.ReadByte ();  		Serial serial = pvSrc.ReadInt32 ();  		int amount = pvSrc.ReadInt16 ();  		buyList.Add (new BuyItemResponse (serial' amount));  	}  	if (buyList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnBuyItems (state.Mobile' buyList)) {  			state.Send (new EndVendorBuy (vendor));  		}  	}  } else {  	state.Send (new EndVendorBuy (vendor));  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (flag == 0x02) {  	msgSize -= 1 + 2 + 4 + 1;  	if ((msgSize / 7) > 100) {  		return;  	}  	var buyList = new List<BuyItemResponse> (msgSize / 7);  	for (; msgSize > 0; msgSize -= 7) {  		byte layer = pvSrc.ReadByte ();  		Serial serial = pvSrc.ReadInt32 ();  		int amount = pvSrc.ReadInt16 ();  		buyList.Add (new BuyItemResponse (serial' amount));  	}  	if (buyList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnBuyItems (state.Mobile' buyList)) {  			state.Send (new EndVendorBuy (vendor));  		}  	}  } else {  	state.Send (new EndVendorBuy (vendor));  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (flag == 0x02) {  	msgSize -= 1 + 2 + 4 + 1;  	if ((msgSize / 7) > 100) {  		return;  	}  	var buyList = new List<BuyItemResponse> (msgSize / 7);  	for (; msgSize > 0; msgSize -= 7) {  		byte layer = pvSrc.ReadByte ();  		Serial serial = pvSrc.ReadInt32 ();  		int amount = pvSrc.ReadInt16 ();  		buyList.Add (new BuyItemResponse (serial' amount));  	}  	if (buyList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnBuyItems (state.Mobile' buyList)) {  			state.Send (new EndVendorBuy (vendor));  		}  	}  } else {  	state.Send (new EndVendorBuy (vendor));  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (flag == 0x02) {  	msgSize -= 1 + 2 + 4 + 1;  	if ((msgSize / 7) > 100) {  		return;  	}  	var buyList = new List<BuyItemResponse> (msgSize / 7);  	for (; msgSize > 0; msgSize -= 7) {  		byte layer = pvSrc.ReadByte ();  		Serial serial = pvSrc.ReadInt32 ();  		int amount = pvSrc.ReadInt16 ();  		buyList.Add (new BuyItemResponse (serial' amount));  	}  	if (buyList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnBuyItems (state.Mobile' buyList)) {  			state.Send (new EndVendorBuy (vendor));  		}  	}  } else {  	state.Send (new EndVendorBuy (vendor));  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if (flag == 0x02) {  	msgSize -= 1 + 2 + 4 + 1;  	if ((msgSize / 7) > 100) {  		return;  	}  	var buyList = new List<BuyItemResponse> (msgSize / 7);  	for (; msgSize > 0; msgSize -= 7) {  		byte layer = pvSrc.ReadByte ();  		Serial serial = pvSrc.ReadInt32 ();  		int amount = pvSrc.ReadInt16 ();  		buyList.Add (new BuyItemResponse (serial' amount));  	}  	if (buyList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnBuyItems (state.Mobile' buyList)) {  			state.Send (new EndVendorBuy (vendor));  		}  	}  } else {  	state.Send (new EndVendorBuy (vendor));  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: msgSize -= 1 + 2 + 4 + 1;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: msgSize -= 1 + 2 + 4 + 1;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ((msgSize / 7) > 100) {  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: if ((msgSize / 7) > 100) {  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: for (; msgSize > 0; msgSize -= 7) {  	byte layer = pvSrc.ReadByte ();  	Serial serial = pvSrc.ReadInt32 ();  	int amount = pvSrc.ReadInt16 ();  	buyList.Add (new BuyItemResponse (serial' amount));  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorBuyReply,The following statement contains a magic number: msgSize -= 7
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if (vendor == null) {  	return;  } else if (vendor.Deleted || !Utility.RangeCheck (vendor.Location' state.Mobile.Location' 10)) {  	state.Send (new EndVendorSell (vendor));  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if (vendor.Deleted || !Utility.RangeCheck (vendor.Location' state.Mobile.Location' 10)) {  	state.Send (new EndVendorSell (vendor));  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if (count < 100 && pvSrc.Size == (1 + 2 + 4 + 2 + (count * 6))) {  	var sellList = new List<SellItemResponse> (count);  	for (int i = 0; i < count; i++) {  		Item item = World.FindItem (pvSrc.ReadInt32 ());  		int Amount = pvSrc.ReadInt16 ();  		if (item != null && Amount > 0) {  			sellList.Add (new SellItemResponse (item' Amount));  		}  	}  	if (sellList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnSellItems (state.Mobile' sellList)) {  			state.Send (new EndVendorSell (vendor));  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if (count < 100 && pvSrc.Size == (1 + 2 + 4 + 2 + (count * 6))) {  	var sellList = new List<SellItemResponse> (count);  	for (int i = 0; i < count; i++) {  		Item item = World.FindItem (pvSrc.ReadInt32 ());  		int Amount = pvSrc.ReadInt16 ();  		if (item != null && Amount > 0) {  			sellList.Add (new SellItemResponse (item' Amount));  		}  	}  	if (sellList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnSellItems (state.Mobile' sellList)) {  			state.Send (new EndVendorSell (vendor));  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if (count < 100 && pvSrc.Size == (1 + 2 + 4 + 2 + (count * 6))) {  	var sellList = new List<SellItemResponse> (count);  	for (int i = 0; i < count; i++) {  		Item item = World.FindItem (pvSrc.ReadInt32 ());  		int Amount = pvSrc.ReadInt16 ();  		if (item != null && Amount > 0) {  			sellList.Add (new SellItemResponse (item' Amount));  		}  	}  	if (sellList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnSellItems (state.Mobile' sellList)) {  			state.Send (new EndVendorSell (vendor));  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if (count < 100 && pvSrc.Size == (1 + 2 + 4 + 2 + (count * 6))) {  	var sellList = new List<SellItemResponse> (count);  	for (int i = 0; i < count; i++) {  		Item item = World.FindItem (pvSrc.ReadInt32 ());  		int Amount = pvSrc.ReadInt16 ();  		if (item != null && Amount > 0) {  			sellList.Add (new SellItemResponse (item' Amount));  		}  	}  	if (sellList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnSellItems (state.Mobile' sellList)) {  			state.Send (new EndVendorSell (vendor));  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,VendorSellReply,The following statement contains a magic number: if (count < 100 && pvSrc.Size == (1 + 2 + 4 + 2 + (count * 6))) {  	var sellList = new List<SellItemResponse> (count);  	for (int i = 0; i < count; i++) {  		Item item = World.FindItem (pvSrc.ReadInt32 ());  		int Amount = pvSrc.ReadInt16 ();  		if (item != null && Amount > 0) {  			sellList.Add (new SellItemResponse (item' Amount));  		}  	}  	if (sellList.Count > 0) {  		var v = vendor as IVendor;  		if (v != null && v.OnSellItems (state.Mobile' sellList)) {  			state.Send (new EndVendorSell (vendor));  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DeleteCharacter,The following statement contains a magic number: pvSrc.Seek (30' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,NewRegion,The following statement contains a magic number: if (VerifyGC (state)) {  	string name = pvSrc.ReadString (40);  	int unk = pvSrc.ReadInt32 ();  	int x = pvSrc.ReadInt16 ();  	int y = pvSrc.ReadInt16 ();  	int width = pvSrc.ReadInt16 ();  	int height = pvSrc.ReadInt16 ();  	int zStart = pvSrc.ReadInt16 ();  	int zEnd = pvSrc.ReadInt16 ();  	string desc = pvSrc.ReadString (40);  	int soundFX = pvSrc.ReadInt16 ();  	int music = pvSrc.ReadInt16 ();  	int nightFX = pvSrc.ReadInt16 ();  	int dungeon = pvSrc.ReadByte ();  	int light = pvSrc.ReadInt16 ();  	Console.WriteLine ("God Client: {0}: New Region '{1}' ('{2}')"' state' name' desc);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,NewRegion,The following statement contains a magic number: if (VerifyGC (state)) {  	string name = pvSrc.ReadString (40);  	int unk = pvSrc.ReadInt32 ();  	int x = pvSrc.ReadInt16 ();  	int y = pvSrc.ReadInt16 ();  	int width = pvSrc.ReadInt16 ();  	int height = pvSrc.ReadInt16 ();  	int zStart = pvSrc.ReadInt16 ();  	int zEnd = pvSrc.ReadInt16 ();  	string desc = pvSrc.ReadString (40);  	int soundFX = pvSrc.ReadInt16 ();  	int music = pvSrc.ReadInt16 ();  	int nightFX = pvSrc.ReadInt16 ();  	int dungeon = pvSrc.ReadByte ();  	int light = pvSrc.ReadInt16 ();  	Console.WriteLine ("God Client: {0}: New Region '{1}' ('{2}')"' state' name' desc);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: switch (type) {  case 0x00:// Go   {  	if (VerifyGC (state)) {  		try {  			string[] split = command.Split (' ');  			int x = Utility.ToInt32 (split [0]);  			int y = Utility.ToInt32 (split [1]);  			int z;  			if (split.Length >= 3) {  				z = Utility.ToInt32 (split [2]);  			} else if (m.Map != null) {  				z = m.Map.GetAverageZ (x' y);  			} else {  				z = 0;  			}  			m.Location = new Point3D (x' y' z);  		} catch {  		}  	}  	break;  }  case 0xC7:// Animate   {  	EventSink.InvokeAnimateRequest (new AnimateRequestEventArgs (m' command));  	break;  }  case 0x24:// Use skill   {  	int skillIndex;  	if (!int.TryParse (command.Split (' ') [0]' out skillIndex)) {  		break;  	}  	Skills.UseSkill (m' skillIndex);  	break;  }  case 0x43:// Open spellbook   {  	int booktype;  	if (!int.TryParse (command' out booktype)) {  		booktype = 1;  	}  	EventSink.InvokeOpenSpellbookRequest (new OpenSpellbookRequestEventArgs (m' booktype));  	break;  }  case 0x27:// Cast spell from book   {  	string[] split = command.Split (' ');  	if (split.Length > 0) {  		int spellID = Utility.ToInt32 (split [0]) - 1;  		int serial = split.Length > 1 ? Utility.ToInt32 (split [1]) : -1;  		EventSink.InvokeCastSpellRequest (new CastSpellRequestEventArgs (m' spellID' World.FindItem (serial)));  	}  	break;  }  case 0x2F:// Old scroll double click   {  	/* 						 * This command is still sent for items 0xEF3 - 0xEF9 						 * 						 * Command is one of three' depending on the item ID of the scroll: 						 * - [scroll serial] 						 * - [scroll serial] [target serial] 						 * - [scroll serial] [x] [y] [z] 						 */break;  }  case 0x58:// Open door   {  	EventSink.InvokeOpenDoorMacroUsed (new OpenDoorMacroEventArgs (m));  	break;  }  case 0x56:// Cast spell from macro   {  	int spellID = Utility.ToInt32 (command) - 1;  	EventSink.InvokeCastSpellRequest (new CastSpellRequestEventArgs (m' spellID' null));  	break;  }  case 0xF4:// Invoke virtues from macro   {  	int virtueID = Utility.ToInt32 (command) - 1;  	EventSink.InvokeVirtueMacroRequest (new VirtueMacroRequestEventArgs (m' virtueID));  	break;  }  default: {  	Console.WriteLine ("Client: {0}: Unknown text-command type 0x{1:X2}: {2}"' state' type' command);  	break;  }  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: switch (type) {  case 0x00:// Go   {  	if (VerifyGC (state)) {  		try {  			string[] split = command.Split (' ');  			int x = Utility.ToInt32 (split [0]);  			int y = Utility.ToInt32 (split [1]);  			int z;  			if (split.Length >= 3) {  				z = Utility.ToInt32 (split [2]);  			} else if (m.Map != null) {  				z = m.Map.GetAverageZ (x' y);  			} else {  				z = 0;  			}  			m.Location = new Point3D (x' y' z);  		} catch {  		}  	}  	break;  }  case 0xC7:// Animate   {  	EventSink.InvokeAnimateRequest (new AnimateRequestEventArgs (m' command));  	break;  }  case 0x24:// Use skill   {  	int skillIndex;  	if (!int.TryParse (command.Split (' ') [0]' out skillIndex)) {  		break;  	}  	Skills.UseSkill (m' skillIndex);  	break;  }  case 0x43:// Open spellbook   {  	int booktype;  	if (!int.TryParse (command' out booktype)) {  		booktype = 1;  	}  	EventSink.InvokeOpenSpellbookRequest (new OpenSpellbookRequestEventArgs (m' booktype));  	break;  }  case 0x27:// Cast spell from book   {  	string[] split = command.Split (' ');  	if (split.Length > 0) {  		int spellID = Utility.ToInt32 (split [0]) - 1;  		int serial = split.Length > 1 ? Utility.ToInt32 (split [1]) : -1;  		EventSink.InvokeCastSpellRequest (new CastSpellRequestEventArgs (m' spellID' World.FindItem (serial)));  	}  	break;  }  case 0x2F:// Old scroll double click   {  	/* 						 * This command is still sent for items 0xEF3 - 0xEF9 						 * 						 * Command is one of three' depending on the item ID of the scroll: 						 * - [scroll serial] 						 * - [scroll serial] [target serial] 						 * - [scroll serial] [x] [y] [z] 						 */break;  }  case 0x58:// Open door   {  	EventSink.InvokeOpenDoorMacroUsed (new OpenDoorMacroEventArgs (m));  	break;  }  case 0x56:// Cast spell from macro   {  	int spellID = Utility.ToInt32 (command) - 1;  	EventSink.InvokeCastSpellRequest (new CastSpellRequestEventArgs (m' spellID' null));  	break;  }  case 0xF4:// Invoke virtues from macro   {  	int virtueID = Utility.ToInt32 (command) - 1;  	EventSink.InvokeVirtueMacroRequest (new VirtueMacroRequestEventArgs (m' virtueID));  	break;  }  default: {  	Console.WriteLine ("Client: {0}: Unknown text-command type 0x{1:X2}: {2}"' state' type' command);  	break;  }  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: if (VerifyGC (state)) {  	try {  		string[] split = command.Split (' ');  		int x = Utility.ToInt32 (split [0]);  		int y = Utility.ToInt32 (split [1]);  		int z;  		if (split.Length >= 3) {  			z = Utility.ToInt32 (split [2]);  		} else if (m.Map != null) {  			z = m.Map.GetAverageZ (x' y);  		} else {  			z = 0;  		}  		m.Location = new Point3D (x' y' z);  	} catch {  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: if (VerifyGC (state)) {  	try {  		string[] split = command.Split (' ');  		int x = Utility.ToInt32 (split [0]);  		int y = Utility.ToInt32 (split [1]);  		int z;  		if (split.Length >= 3) {  			z = Utility.ToInt32 (split [2]);  		} else if (m.Map != null) {  			z = m.Map.GetAverageZ (x' y);  		} else {  			z = 0;  		}  		m.Location = new Point3D (x' y' z);  	} catch {  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: try {  	string[] split = command.Split (' ');  	int x = Utility.ToInt32 (split [0]);  	int y = Utility.ToInt32 (split [1]);  	int z;  	if (split.Length >= 3) {  		z = Utility.ToInt32 (split [2]);  	} else if (m.Map != null) {  		z = m.Map.GetAverageZ (x' y);  	} else {  		z = 0;  	}  	m.Location = new Point3D (x' y' z);  } catch {  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: try {  	string[] split = command.Split (' ');  	int x = Utility.ToInt32 (split [0]);  	int y = Utility.ToInt32 (split [1]);  	int z;  	if (split.Length >= 3) {  		z = Utility.ToInt32 (split [2]);  	} else if (m.Map != null) {  		z = m.Map.GetAverageZ (x' y);  	} else {  		z = 0;  	}  	m.Location = new Point3D (x' y' z);  } catch {  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: if (split.Length >= 3) {  	z = Utility.ToInt32 (split [2]);  } else if (m.Map != null) {  	z = m.Map.GetAverageZ (x' y);  } else {  	z = 0;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: if (split.Length >= 3) {  	z = Utility.ToInt32 (split [2]);  } else if (m.Map != null) {  	z = m.Map.GetAverageZ (x' y);  } else {  	z = 0;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,TextCommand,The following statement contains a magic number: z = Utility.ToInt32 (split [2]);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,AsciiPromptResponse,The following statement contains a magic number: if (text.Length > 128)  	return;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodePromptResponse,The following statement contains a magic number: pvSrc.ReadString (4);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodePromptResponse,The following statement contains a magic number: if (text.Length > 128)  	return;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ProfileReq,The following statement contains a magic number: switch (type) {  case 0x00:// display request   {  	EventSink.InvokeProfileRequest (new ProfileRequestEventArgs (beholder' beheld));  	break;  }  case 0x01:// edit request   {  	pvSrc.ReadInt16 ();  	// Skip  	int length = pvSrc.ReadUInt16 ();  	if (length > 511) {  		return;  	}  	string text = pvSrc.ReadUnicodeString (length);  	EventSink.InvokeChangeProfileRequest (new ChangeProfileRequestEventArgs (beholder' beheld' text));  	break;  }  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ProfileReq,The following statement contains a magic number: if (length > 511) {  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,EquipReq,The following statement contains a magic number: pvSrc.Seek (5' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DisplayGumpResponse,The following statement contains a magic number: foreach (Gump gump in state.Gumps) {  	if (gump.Serial == serial && gump.TypeID == typeID) {  		int switchCount = pvSrc.ReadInt32 ();  		if (switchCount < 0 || switchCount > gump.m_Switches) {  			Utility.PushColor (ConsoleColor.DarkRed);  			state.WriteConsole ("Invalid gump response' disconnecting...");  			Utility.PopColor ();  			state.Dispose ();  			return;  		}  		var switches = new int[switchCount];  		for (int j = 0; j < switches.Length; ++j) {  			switches [j] = pvSrc.ReadInt32 ();  		}  		int textCount = pvSrc.ReadInt32 ();  		if (textCount < 0 || textCount > gump.m_TextEntries) {  			Utility.PushColor (ConsoleColor.DarkRed);  			state.WriteConsole ("Invalid gump response' disconnecting...");  			Utility.PopColor ();  			state.Dispose ();  			return;  		}  		var textEntries = new TextRelay[textCount];  		for (int j = 0; j < textEntries.Length; ++j) {  			int entryID = pvSrc.ReadUInt16 ();  			int textLength = pvSrc.ReadUInt16 ();  			if (textLength > 239) {  				Utility.PushColor (ConsoleColor.DarkRed);  				state.WriteConsole ("Invalid gump response' disconnecting...");  				Utility.PopColor ();  				state.Dispose ();  				return;  			}  			string text = pvSrc.ReadUnicodeStringSafe (textLength);  			textEntries [j] = new TextRelay (entryID' text);  		}  		state.RemoveGump (gump);  		GumpProfile prof = GumpProfile.Acquire (gump.GetType ());  		if (prof != null) {  			prof.Start ();  		}  		gump.OnResponse (state' new RelayInfo (buttonID' switches' textEntries));  		if (prof != null) {  			prof.Finish ();  		}  		return;  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DisplayGumpResponse,The following statement contains a magic number: if (gump.Serial == serial && gump.TypeID == typeID) {  	int switchCount = pvSrc.ReadInt32 ();  	if (switchCount < 0 || switchCount > gump.m_Switches) {  		Utility.PushColor (ConsoleColor.DarkRed);  		state.WriteConsole ("Invalid gump response' disconnecting...");  		Utility.PopColor ();  		state.Dispose ();  		return;  	}  	var switches = new int[switchCount];  	for (int j = 0; j < switches.Length; ++j) {  		switches [j] = pvSrc.ReadInt32 ();  	}  	int textCount = pvSrc.ReadInt32 ();  	if (textCount < 0 || textCount > gump.m_TextEntries) {  		Utility.PushColor (ConsoleColor.DarkRed);  		state.WriteConsole ("Invalid gump response' disconnecting...");  		Utility.PopColor ();  		state.Dispose ();  		return;  	}  	var textEntries = new TextRelay[textCount];  	for (int j = 0; j < textEntries.Length; ++j) {  		int entryID = pvSrc.ReadUInt16 ();  		int textLength = pvSrc.ReadUInt16 ();  		if (textLength > 239) {  			Utility.PushColor (ConsoleColor.DarkRed);  			state.WriteConsole ("Invalid gump response' disconnecting...");  			Utility.PopColor ();  			state.Dispose ();  			return;  		}  		string text = pvSrc.ReadUnicodeStringSafe (textLength);  		textEntries [j] = new TextRelay (entryID' text);  	}  	state.RemoveGump (gump);  	GumpProfile prof = GumpProfile.Acquire (gump.GetType ());  	if (prof != null) {  		prof.Start ();  	}  	gump.OnResponse (state' new RelayInfo (buttonID' switches' textEntries));  	if (prof != null) {  		prof.Finish ();  	}  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DisplayGumpResponse,The following statement contains a magic number: for (int j = 0; j < textEntries.Length; ++j) {  	int entryID = pvSrc.ReadUInt16 ();  	int textLength = pvSrc.ReadUInt16 ();  	if (textLength > 239) {  		Utility.PushColor (ConsoleColor.DarkRed);  		state.WriteConsole ("Invalid gump response' disconnecting...");  		Utility.PopColor ();  		state.Dispose ();  		return;  	}  	string text = pvSrc.ReadUnicodeStringSafe (textLength);  	textEntries [j] = new TextRelay (entryID' text);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DisplayGumpResponse,The following statement contains a magic number: if (textLength > 239) {  	Utility.PushColor (ConsoleColor.DarkRed);  	state.WriteConsole ("Invalid gump response' disconnecting...");  	Utility.PopColor ();  	state.Dispose ();  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,DisplayGumpResponse,The following statement contains a magic number: if (typeID == 461) {  	// Virtue gump  	int switchCount = pvSrc.ReadInt32 ();  	if (buttonID == 1 && switchCount > 0) {  		Mobile beheld = World.FindMobile (pvSrc.ReadInt32 ());  		if (beheld != null) {  			EventSink.InvokeVirtueGumpRequest (new VirtueGumpRequestEventArgs (state.Mobile' beheld));  		}  	} else {  		Mobile beheld = World.FindMobile (serial);  		if (beheld != null) {  			EventSink.InvokeVirtueItemRequest (new VirtueItemRequestEventArgs (state.Mobile' beheld' buttonID));  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,AsciiSpeech,The following statement contains a magic number: if (text.Length <= 0 || text.Length > 128) {  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if (isEncoded) {  	int value = pvSrc.ReadInt16 ();  	int count = (value & 0xFFF0) >> 4;  	int hold = value & 0xF;  	if (count < 0 || count > 50) {  		return;  	}  	KeywordList keyList = m_KeywordList;  	for (int i = 0; i < count; ++i) {  		int speechID;  		if ((i & 1) == 0) {  			hold <<= 8;  			hold |= pvSrc.ReadByte ();  			speechID = hold;  			hold = 0;  		} else {  			value = pvSrc.ReadInt16 ();  			speechID = (value & 0xFFF0) >> 4;  			hold = value & 0xF;  		}  		if (!keyList.Contains (speechID)) {  			keyList.Add (speechID);  		}  	}  	text = pvSrc.ReadUTF8StringSafe ();  	keywords = keyList.ToArray ();  } else {  	text = pvSrc.ReadUnicodeStringSafe ();  	keywords = m_EmptyInts;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if (isEncoded) {  	int value = pvSrc.ReadInt16 ();  	int count = (value & 0xFFF0) >> 4;  	int hold = value & 0xF;  	if (count < 0 || count > 50) {  		return;  	}  	KeywordList keyList = m_KeywordList;  	for (int i = 0; i < count; ++i) {  		int speechID;  		if ((i & 1) == 0) {  			hold <<= 8;  			hold |= pvSrc.ReadByte ();  			speechID = hold;  			hold = 0;  		} else {  			value = pvSrc.ReadInt16 ();  			speechID = (value & 0xFFF0) >> 4;  			hold = value & 0xF;  		}  		if (!keyList.Contains (speechID)) {  			keyList.Add (speechID);  		}  	}  	text = pvSrc.ReadUTF8StringSafe ();  	keywords = keyList.ToArray ();  } else {  	text = pvSrc.ReadUnicodeStringSafe ();  	keywords = m_EmptyInts;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if (isEncoded) {  	int value = pvSrc.ReadInt16 ();  	int count = (value & 0xFFF0) >> 4;  	int hold = value & 0xF;  	if (count < 0 || count > 50) {  		return;  	}  	KeywordList keyList = m_KeywordList;  	for (int i = 0; i < count; ++i) {  		int speechID;  		if ((i & 1) == 0) {  			hold <<= 8;  			hold |= pvSrc.ReadByte ();  			speechID = hold;  			hold = 0;  		} else {  			value = pvSrc.ReadInt16 ();  			speechID = (value & 0xFFF0) >> 4;  			hold = value & 0xF;  		}  		if (!keyList.Contains (speechID)) {  			keyList.Add (speechID);  		}  	}  	text = pvSrc.ReadUTF8StringSafe ();  	keywords = keyList.ToArray ();  } else {  	text = pvSrc.ReadUnicodeStringSafe ();  	keywords = m_EmptyInts;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if (isEncoded) {  	int value = pvSrc.ReadInt16 ();  	int count = (value & 0xFFF0) >> 4;  	int hold = value & 0xF;  	if (count < 0 || count > 50) {  		return;  	}  	KeywordList keyList = m_KeywordList;  	for (int i = 0; i < count; ++i) {  		int speechID;  		if ((i & 1) == 0) {  			hold <<= 8;  			hold |= pvSrc.ReadByte ();  			speechID = hold;  			hold = 0;  		} else {  			value = pvSrc.ReadInt16 ();  			speechID = (value & 0xFFF0) >> 4;  			hold = value & 0xF;  		}  		if (!keyList.Contains (speechID)) {  			keyList.Add (speechID);  		}  	}  	text = pvSrc.ReadUTF8StringSafe ();  	keywords = keyList.ToArray ();  } else {  	text = pvSrc.ReadUnicodeStringSafe ();  	keywords = m_EmptyInts;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if (count < 0 || count > 50) {  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int speechID;  	if ((i & 1) == 0) {  		hold <<= 8;  		hold |= pvSrc.ReadByte ();  		speechID = hold;  		hold = 0;  	} else {  		value = pvSrc.ReadInt16 ();  		speechID = (value & 0xFFF0) >> 4;  		hold = value & 0xF;  	}  	if (!keyList.Contains (speechID)) {  		keyList.Add (speechID);  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	int speechID;  	if ((i & 1) == 0) {  		hold <<= 8;  		hold |= pvSrc.ReadByte ();  		speechID = hold;  		hold = 0;  	} else {  		value = pvSrc.ReadInt16 ();  		speechID = (value & 0xFFF0) >> 4;  		hold = value & 0xF;  	}  	if (!keyList.Contains (speechID)) {  		keyList.Add (speechID);  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if ((i & 1) == 0) {  	hold <<= 8;  	hold |= pvSrc.ReadByte ();  	speechID = hold;  	hold = 0;  } else {  	value = pvSrc.ReadInt16 ();  	speechID = (value & 0xFFF0) >> 4;  	hold = value & 0xF;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if ((i & 1) == 0) {  	hold <<= 8;  	hold |= pvSrc.ReadByte ();  	speechID = hold;  	hold = 0;  } else {  	value = pvSrc.ReadInt16 ();  	speechID = (value & 0xFFF0) >> 4;  	hold = value & 0xF;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: hold <<= 8;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: speechID = (value & 0xFFF0) >> 4;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,UnicodeSpeech,The following statement contains a magic number: if (text.Length <= 0 || text.Length > 128) {  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,SetUpdateRange,The following statement contains a magic number: state.Send (ChangeUpdateRange.Instantiate (18));  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,MovementReq,The following statement contains a magic number: if ((state.Sequence == 0 && seq != 0) || !m.Move (dir)) {  	state.Send (new MovementRej (seq' m));  	state.Sequence = 0;  	m.ClearFastwalkStack ();  } else {  	++seq;  	if (seq == 256) {  		seq = 1;  	}  	state.Sequence = seq;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,MovementReq,The following statement contains a magic number: if (seq == 256) {  	seq = 1;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,Animate,The following statement contains a magic number: if (from != null && ok && from.Alive && from.Body.IsHuman && !from.Mounted) {  	from.Animate (action' 7' 1' true' false' 0);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,Animate,The following statement contains a magic number: from.Animate (action' 7' 1' true' false' 0);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,BatchQueryProperties,The following statement contains a magic number: if (length < 0 || (length % 4) != 0) {  	return;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,StatLockChange,The following statement contains a magic number: if (lockValue > 2) {  	lockValue = 0;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,StatLockChange,The following statement contains a magic number: if (m != null) {  	switch (stat) {  	case 0:  		m.StrLock = (StatLockType)lockValue;  		break;  	case 1:  		m.DexLock = (StatLockType)lockValue;  		break;  	case 2:  		m.IntLock = (StatLockType)lockValue;  		break;  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,StatLockChange,The following statement contains a magic number: switch (stat) {  case 0:  	m.StrLock = (StatLockType)lockValue;  	break;  case 1:  	m.DexLock = (StatLockType)lockValue;  	break;  case 2:  	m.IntLock = (StatLockType)lockValue;  	break;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuResponse,The following statement contains a magic number: if (from != null) {  	ContextMenu menu = from.ContextMenu;  	from.ContextMenu = null;  	if (menu != null && from != null && from == menu.From) {  		IEntity entity = World.FindEntity (pvSrc.ReadInt32 ());  		if (entity != null && entity == menu.Target && from.CanSee (entity)) {  			Point3D p;  			if (entity is Mobile) {  				p = entity.Location;  			} else if (entity is Item) {  				p = ((Item)entity).GetWorldLocation ();  			} else {  				return;  			}  			int index = pvSrc.ReadUInt16 ();  			if (index >= 0 && index < menu.Entries.Length) {  				ContextMenuEntry e = menu.Entries [index];  				int range = e.Range;  				if (range == -1) {  					range = 18;  				}  				if (e.Enabled && from.InRange (p' range)) {  					e.OnClick ();  				}  			}  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuResponse,The following statement contains a magic number: if (menu != null && from != null && from == menu.From) {  	IEntity entity = World.FindEntity (pvSrc.ReadInt32 ());  	if (entity != null && entity == menu.Target && from.CanSee (entity)) {  		Point3D p;  		if (entity is Mobile) {  			p = entity.Location;  		} else if (entity is Item) {  			p = ((Item)entity).GetWorldLocation ();  		} else {  			return;  		}  		int index = pvSrc.ReadUInt16 ();  		if (index >= 0 && index < menu.Entries.Length) {  			ContextMenuEntry e = menu.Entries [index];  			int range = e.Range;  			if (range == -1) {  				range = 18;  			}  			if (e.Enabled && from.InRange (p' range)) {  				e.OnClick ();  			}  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuResponse,The following statement contains a magic number: if (entity != null && entity == menu.Target && from.CanSee (entity)) {  	Point3D p;  	if (entity is Mobile) {  		p = entity.Location;  	} else if (entity is Item) {  		p = ((Item)entity).GetWorldLocation ();  	} else {  		return;  	}  	int index = pvSrc.ReadUInt16 ();  	if (index >= 0 && index < menu.Entries.Length) {  		ContextMenuEntry e = menu.Entries [index];  		int range = e.Range;  		if (range == -1) {  			range = 18;  		}  		if (e.Enabled && from.InRange (p' range)) {  			e.OnClick ();  		}  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuResponse,The following statement contains a magic number: if (index >= 0 && index < menu.Entries.Length) {  	ContextMenuEntry e = menu.Entries [index];  	int range = e.Range;  	if (range == -1) {  		range = 18;  	}  	if (e.Enabled && from.InRange (p' range)) {  		e.OnClick ();  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuResponse,The following statement contains a magic number: if (range == -1) {  	range = 18;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ContextMenuResponse,The following statement contains a magic number: range = 18;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: pvSrc.Seek (2' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if (FeatureProtection.DisabledFeatures != 0 && ThirdPartyAuthCallback != null) {  	bool authOK = false;  	ulong razorFeatures = (((ulong)pvSrc.ReadUInt32 ()) << 32) | (pvSrc.ReadUInt32 ());  	if (razorFeatures == (ulong)FeatureProtection.DisabledFeatures) {  		bool match = true;  		for (int i = 0; match && i < m_ThirdPartyAuthKey.Length; i++) {  			match = match && pvSrc.ReadByte () == m_ThirdPartyAuthKey [i];  		}  		if (match) {  			authOK = true;  		}  	} else {  		pvSrc.Seek (16' SeekOrigin.Current);  	}  	ThirdPartyAuthCallback (state' authOK);  } else {  	pvSrc.Seek (24' SeekOrigin.Current);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if (FeatureProtection.DisabledFeatures != 0 && ThirdPartyAuthCallback != null) {  	bool authOK = false;  	ulong razorFeatures = (((ulong)pvSrc.ReadUInt32 ()) << 32) | (pvSrc.ReadUInt32 ());  	if (razorFeatures == (ulong)FeatureProtection.DisabledFeatures) {  		bool match = true;  		for (int i = 0; match && i < m_ThirdPartyAuthKey.Length; i++) {  			match = match && pvSrc.ReadByte () == m_ThirdPartyAuthKey [i];  		}  		if (match) {  			authOK = true;  		}  	} else {  		pvSrc.Seek (16' SeekOrigin.Current);  	}  	ThirdPartyAuthCallback (state' authOK);  } else {  	pvSrc.Seek (24' SeekOrigin.Current);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if (FeatureProtection.DisabledFeatures != 0 && ThirdPartyAuthCallback != null) {  	bool authOK = false;  	ulong razorFeatures = (((ulong)pvSrc.ReadUInt32 ()) << 32) | (pvSrc.ReadUInt32 ());  	if (razorFeatures == (ulong)FeatureProtection.DisabledFeatures) {  		bool match = true;  		for (int i = 0; match && i < m_ThirdPartyAuthKey.Length; i++) {  			match = match && pvSrc.ReadByte () == m_ThirdPartyAuthKey [i];  		}  		if (match) {  			authOK = true;  		}  	} else {  		pvSrc.Seek (16' SeekOrigin.Current);  	}  	ThirdPartyAuthCallback (state' authOK);  } else {  	pvSrc.Seek (24' SeekOrigin.Current);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if (razorFeatures == (ulong)FeatureProtection.DisabledFeatures) {  	bool match = true;  	for (int i = 0; match && i < m_ThirdPartyAuthKey.Length; i++) {  		match = match && pvSrc.ReadByte () == m_ThirdPartyAuthKey [i];  	}  	if (match) {  		authOK = true;  	}  } else {  	pvSrc.Seek (16' SeekOrigin.Current);  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: pvSrc.Seek (16' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: pvSrc.Seek (24' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: if (ThirdPartyHackedCallback != null) {  	pvSrc.Seek (-2' SeekOrigin.Current);  	if (pvSrc.ReadUInt16 () == 0xDEAD) {  		ThirdPartyHackedCallback (state' true);  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,PlayCharacter,The following statement contains a magic number: pvSrc.Seek (-2' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: pvSrc.Seek (2' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: pvSrc.Seek (8' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: pvSrc.Seek (15' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if (state.StygianAbyss) {  	var raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));  	race = Race.Races [raceID];  } else {  	race = Race.Races [(byte)(genderRace / 2)];  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if (state.StygianAbyss) {  	var raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));  	race = Race.Races [raceID];  } else {  	race = Race.Races [(byte)(genderRace / 2)];  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if (state.StygianAbyss) {  	var raceID = (byte)(genderRace < 4 ? 0 : ((genderRace / 2) - 1));  	race = Race.Races [raceID];  } else {  	race = Race.Races [(byte)(genderRace / 2)];  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: race = Race.Races [(byte)(genderRace / 2)];  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter,The following statement contains a magic number: if (info == null || a == null || cityIndex < 0 || cityIndex >= info.Length) {  	state.Dispose ();  } else {  	// Check if anyone is using this account  	for (int i = 0; i < a.Length; ++i) {  		Mobile check = a [i];  		if (check != null && check.Map != Map.Internal) {  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Login: {0}: Account in use"' state);  			Utility.PopColor ();  			state.Send (new PopupMessage (PMMessage.CharInWorld));  			return;  		}  	}  	state.Flags = (ClientFlags)flags;  	var args = new CharacterCreatedEventArgs (state' a' name' female' hue' str' dex' intl' info [cityIndex]' new SkillNameValue[3] {  		new SkillNameValue ((SkillName)is1' vs1)'  		new SkillNameValue ((SkillName)is2' vs2)'  		new SkillNameValue ((SkillName)is3' vs3)'  	}' shirtHue' pantsHue' hairVal' hairHue' hairValf' hairHuef' prof' race);  	state.Send (new ClientVersionReq ());  	state.BlockAllPackets = true;  	EventSink.InvokeCharacterCreated (args);  	Mobile m = args.Mobile;  	if (m != null) {  		state.Mobile = m;  		m.NetState = state;  		new LoginTimer (state' m).Start ();  	} else {  		state.BlockAllPackets = false;  		state.Dispose ();  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: pvSrc.Seek (2' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: pvSrc.Seek (8' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: pvSrc.Seek (15' SeekOrigin.Current);  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,CreateCharacter70160,The following statement contains a magic number: if (info == null || a == null || cityIndex < 0 || cityIndex >= info.Length) {  	state.Dispose ();  } else {  	// Check if anyone is using this account  	for (int i = 0; i < a.Length; ++i) {  		Mobile check = a [i];  		if (check != null && check.Map != Map.Internal) {  			Utility.PushColor (ConsoleColor.Red);  			Console.WriteLine ("Login: {0}: Account in use"' state);  			Utility.PopColor ();  			state.Send (new PopupMessage (PMMessage.CharInWorld));  			return;  		}  	}  	state.Flags = (ClientFlags)flags;  	var args = new CharacterCreatedEventArgs (state' a' name' female' hue' str' dex' intl' info [cityIndex]' new SkillNameValue[4] {  		new SkillNameValue ((SkillName)is1' vs1)'  		new SkillNameValue ((SkillName)is2' vs2)'  		new SkillNameValue ((SkillName)is3' vs3)'  		new SkillNameValue ((SkillName)is4' vs4)'  	}' shirtHue' pantsHue' hairVal' hairHue' hairValf' hairHuef' prof' race);  	state.Send (new ClientVersionReq ());  	state.BlockAllPackets = true;  	EventSink.InvokeCharacterCreated (args);  	Mobile m = args.Mobile;  	if (m != null) {  		state.Mobile = m;  		m.NetState = state;  		new LoginTimer (state' m).Start ();  	} else {  		state.BlockAllPackets = false;  		state.Dispose ();  	}  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,GenerateAuthID,The following statement contains a magic number: do {  	authID = Utility.Random (1' int.MaxValue - 1);  	if (Utility.RandomBool ()) {  		authID |= 1 << 31;  	}  } while (m_AuthIDWindow.ContainsKey (authID));  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,GenerateAuthID,The following statement contains a magic number: if (Utility.RandomBool ()) {  	authID |= 1 << 31;  }  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,GenerateAuthID,The following statement contains a magic number: authID |= 1 << 31;  
Magic Number,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,KRCreateCharacter,The following statement contains a magic number: if (info == null || a == null || cityIndex < 0 || cityIndex >= info.Length) {  	state.Dispose ();  } else {  	// Check if anyone is using this account  	for (int i = 0; i < a.Length; ++i) {  		Mobile check = a [i];  		if (check != null && check.Map != Map.Internal) {  			Console.WriteLine ("Login: {0}: Account in use"' state);  			state.Send (new PopupMessage (PMMessage.CharInWorld));  			return;  		}  	}  	state.Flags = (ClientFlags)flags;  	CharacterCreatedEventArgs args = new CharacterCreatedEventArgs (state' a' name' female' hue' str' dex' intel' info [cityIndex]' new SkillNameValue[4] {  		new SkillNameValue ((SkillName)is1' vs1)'  		new SkillNameValue ((SkillName)is2' vs2)'  		new SkillNameValue ((SkillName)is3' vs3)'  		new SkillNameValue ((SkillName)is4' vs4)'  	}' shirtHue' pantsHue' hairID' hairColor' beardID' beardColor' profession' race' faceID' faceColor);  	state.Send (new ClientVersionReq ());  	state.BlockAllPackets = true;  	EventSink.InvokeCharacterCreated (args);  	Mobile m = args.Mobile;  	if (m != null) {  		state.Mobile = m;  		m.NetState = state;  		state.BlockAllPackets = false;  		DoLogin (state' m);  	} else {  		state.BlockAllPackets = false;  		state.Dispose ();  	}  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,PacketReader,The following statement contains a magic number: m_Index = fixedSize ? 1 : 3;  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: if ((m_Index + 4) > m_Size) {  	return 0;  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: return (m_Data [m_Index++] << 24) | (m_Data [m_Index++] << 16) | (m_Data [m_Index++] << 8) | m_Data [m_Index++];  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: return (m_Data [m_Index++] << 24) | (m_Data [m_Index++] << 16) | (m_Data [m_Index++] << 8) | m_Data [m_Index++];  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadInt32,The following statement contains a magic number: return (m_Data [m_Index++] << 24) | (m_Data [m_Index++] << 16) | (m_Data [m_Index++] << 8) | m_Data [m_Index++];  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadInt16,The following statement contains a magic number: if ((m_Index + 2) > m_Size) {  	return 0;  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadInt16,The following statement contains a magic number: return (short)((m_Data [m_Index++] << 8) | m_Data [m_Index++]);  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: if ((m_Index + 4) > m_Size) {  	return 0;  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)((m_Data [m_Index++] << 24) | (m_Data [m_Index++] << 16) | (m_Data [m_Index++] << 8) | m_Data [m_Index++]);  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)((m_Data [m_Index++] << 24) | (m_Data [m_Index++] << 16) | (m_Data [m_Index++] << 8) | m_Data [m_Index++]);  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUInt32,The following statement contains a magic number: return (uint)((m_Data [m_Index++] << 24) | (m_Data [m_Index++] << 16) | (m_Data [m_Index++] << 8) | m_Data [m_Index++]);  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUInt16,The following statement contains a magic number: if ((m_Index + 2) > m_Size) {  	return 0;  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUInt16,The following statement contains a magic number: return (ushort)((m_Data [m_Index++] << 8) | m_Data [m_Index++]);  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUnicodeStringLE,The following statement contains a magic number: while ((m_Index + 1) < m_Size && (c = (m_Data [m_Index++] | (m_Data [m_Index++] << 8))) != 0) {  	sb.Append ((char)c);  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUnicodeStringLESafe,The following statement contains a magic number: while ((m_Index + 1) < bound && (c = (m_Data [m_Index++] | (m_Data [m_Index++] << 8))) != 0) {  	if (IsSafeChar (c)) {  		sb.Append ((char)c);  	}  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUnicodeStringLESafe,The following statement contains a magic number: while ((m_Index + 1) < m_Size && (c = (m_Data [m_Index++] | (m_Data [m_Index++] << 8))) != 0) {  	if (IsSafeChar (c)) {  		sb.Append ((char)c);  	}  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUnicodeStringSafe,The following statement contains a magic number: while ((m_Index + 1) < m_Size && (c = ((m_Data [m_Index++] << 8) | m_Data [m_Index++])) != 0) {  	if (IsSafeChar (c)) {  		sb.Append ((char)c);  	}  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUnicodeString,The following statement contains a magic number: while ((m_Index + 1) < m_Size && (c = ((m_Data [m_Index++] << 8) | m_Data [m_Index++])) != 0) {  	sb.Append ((char)c);  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUnicodeStringSafe,The following statement contains a magic number: while ((m_Index + 1) < bound && (c = ((m_Data [m_Index++] << 8) | m_Data [m_Index++])) != 0) {  	if (IsSafeChar (c)) {  		sb.Append ((char)c);  	}  }  
Magic Number,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,ReadUnicodeString,The following statement contains a magic number: while ((m_Index + 1) < bound && (c = ((m_Data [m_Index++] << 8) | m_Data [m_Index++])) != 0) {  	sb.Append ((char)c);  }  
Magic Number,Server.Network,DamagePacketOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DamagePacketOld,The following statement contains a magic number: EnsureCapacity (11);  
Magic Number,Server.Network,DamagePacketOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DamagePacketOld,The following statement contains a magic number: if (amount > 255) {  	amount = 255;  } else if (amount < 0) {  	amount = 0;  }  
Magic Number,Server.Network,DamagePacketOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DamagePacketOld,The following statement contains a magic number: if (amount > 255) {  	amount = 255;  } else if (amount < 0) {  	amount = 0;  }  
Magic Number,Server.Network,DamagePacketOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DamagePacketOld,The following statement contains a magic number: amount = 255;  
Magic Number,Server.Network,DisplaySecureTrade,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplaySecureTrade,The following statement contains a magic number: EnsureCapacity (18 + name.Length);  
Magic Number,Server.Network,DisplaySecureTrade,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplaySecureTrade,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,CloseSecureTrade,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CloseSecureTrade,The following statement contains a magic number: EnsureCapacity (8);  
Magic Number,Server.Network,UpdateSecureTrade,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UpdateSecureTrade,The following statement contains a magic number: EnsureCapacity (17);  
Magic Number,Server.Network,MapPatches,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: EnsureCapacity (9 + (3 * 8));  
Magic Number,Server.Network,MapPatches,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: EnsureCapacity (9 + (3 * 8));  
Magic Number,Server.Network,MapPatches,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: EnsureCapacity (9 + (3 * 8));  
Magic Number,Server.Network,MapPatches,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MapPatches,The following statement contains a magic number: m_Stream.Write (4);  
Magic Number,Server.Network,ObjectHelpResponse,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ObjectHelpResponse,The following statement contains a magic number: EnsureCapacity (9 + (text.Length * 2));  
Magic Number,Server.Network,ObjectHelpResponse,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ObjectHelpResponse,The following statement contains a magic number: EnsureCapacity (9 + (text.Length * 2));  
Magic Number,Server.Network,VendorBuyContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,VendorBuyContent,The following statement contains a magic number: EnsureCapacity (list.Count * 19 + 5);  
Magic Number,Server.Network,VendorBuyContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,VendorBuyContent,The following statement contains a magic number: EnsureCapacity (list.Count * 19 + 5);  
Magic Number,Server.Network,VendorBuyContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,VendorBuyContent6017,The following statement contains a magic number: EnsureCapacity (list.Count * 20 + 5);  
Magic Number,Server.Network,VendorBuyContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,VendorBuyContent6017,The following statement contains a magic number: EnsureCapacity (list.Count * 20 + 5);  
Magic Number,Server.Network,VendorBuyList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,VendorBuyList,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,VendorSellList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,VendorSellList,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,EndVendorSell,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,EndVendorSell,The following statement contains a magic number: m_Stream.Write ((ushort)8);  
Magic Number,Server.Network,EndVendorBuy,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,EndVendorBuy,The following statement contains a magic number: m_Stream.Write ((ushort)8);  
Magic Number,Server.Network,StatLockInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: EnsureCapacity (12);  
Magic Number,Server.Network,StatLockInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: m_Stream.Write ((byte)2);  
Magic Number,Server.Network,StatLockInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: lockBits |= (int)m.StrLock << 4;  
Magic Number,Server.Network,StatLockInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,StatLockInfo,The following statement contains a magic number: lockBits |= (int)m.DexLock << 2;  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: EnsureCapacity (17 + (info.Crafter == null ? 0 : 6 + info.Crafter.RawName == null ? 0 : info.Crafter.RawName.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6));  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: EnsureCapacity (17 + (info.Crafter == null ? 0 : 6 + info.Crafter.RawName == null ? 0 : info.Crafter.RawName.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6));  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: EnsureCapacity (17 + (info.Crafter == null ? 0 : 6 + info.Crafter.RawName == null ? 0 : info.Crafter.RawName.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6));  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: EnsureCapacity (17 + (info.Crafter == null ? 0 : 6 + info.Crafter.RawName == null ? 0 : info.Crafter.RawName.Length) + (info.Unidentified ? 4 : 0) + (attrs.Length * 6));  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: if (info.Crafter != null) {  	string name = info.Crafter.RawName;  	m_Stream.Write (-3);  	if (name == null) {  		m_Stream.Write ((ushort)0);  	} else {  		int length = name.Length;  		m_Stream.Write ((ushort)length);  		m_Stream.WriteAsciiFixed (name' length);  	}  }  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: m_Stream.Write (-3);  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: if (info.Unidentified) {  	m_Stream.Write (-4);  }  
Magic Number,Server.Network,DisplayEquipmentInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayEquipmentInfo,The following statement contains a magic number: m_Stream.Write (-4);  
Magic Number,Server.Network,UnicodePrompt,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnicodePrompt,The following statement contains a magic number: this.EnsureCapacity (21);  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: EnsureCapacity (305);  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: for (int i = 0; i < a.Length; ++i) {  	if (a [i] != null) {  		string name = a [i].Name;  		if (name == null) {  			name = "-null-";  		} else if ((name = name.Trim ()).Length == 0) {  			name = "-empty-";  		}  		m_Stream.WriteAsciiFixed (name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: for (int i = 0; i < a.Length; ++i) {  	if (a [i] != null) {  		string name = a [i].Name;  		if (name == null) {  			name = "-null-";  		} else if ((name = name.Trim ()).Length == 0) {  			name = "-empty-";  		}  		m_Stream.WriteAsciiFixed (name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: for (int i = 0; i < a.Length; ++i) {  	if (a [i] != null) {  		string name = a [i].Name;  		if (name == null) {  			name = "-null-";  		} else if ((name = name.Trim ()).Length == 0) {  			name = "-empty-";  		}  		m_Stream.WriteAsciiFixed (name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: if (a [i] != null) {  	string name = a [i].Name;  	if (name == null) {  		name = "-null-";  	} else if ((name = name.Trim ()).Length == 0) {  		name = "-empty-";  	}  	m_Stream.WriteAsciiFixed (name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: if (a [i] != null) {  	string name = a [i].Name;  	if (name == null) {  		name = "-null-";  	} else if ((name = name.Trim ()).Length == 0) {  		name = "-empty-";  	}  	m_Stream.WriteAsciiFixed (name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: if (a [i] != null) {  	string name = a [i].Name;  	if (name == null) {  		name = "-null-";  	} else if ((name = name.Trim ()).Length == 0) {  		name = "-empty-";  	}  	m_Stream.WriteAsciiFixed (name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: m_Stream.Fill (30);  
Magic Number,Server.Network,ChangeCharacter,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ChangeCharacter,The following statement contains a magic number: m_Stream.Fill (60);  
Magic Number,Server.Network,DeathStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DeathStatus,The following statement contains a magic number: m_Stream.Write ((byte)(dead ? 0 : 2));  
Magic Number,Server.Network,SpeedControl,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpeedControl,The following statement contains a magic number: EnsureCapacity (3);  
Magic Number,Server.Network,BondedStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,BondedStatus,The following statement contains a magic number: EnsureCapacity (11);  
Magic Number,Server.Network,ToggleSpecialAbility,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ToggleSpecialAbility,The following statement contains a magic number: EnsureCapacity (7);  
Magic Number,Server.Network,DisplayItemListMenu,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayItemListMenu,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,DisplayQuestionMenu,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayQuestionMenu,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,DisplayContextMenu,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenu,The following statement contains a magic number: EnsureCapacity (12 + (length * 8));  
Magic Number,Server.Network,DisplayContextMenu,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenu,The following statement contains a magic number: EnsureCapacity (12 + (length * 8));  
Magic Number,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: EnsureCapacity (12 + (length * 8));  
Magic Number,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: EnsureCapacity (12 + (length * 8));  
Magic Number,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: for (int i = 0; i < length; ++i) {  	ContextMenuEntry e = entries [i];  	#region Enhance Client  	if (e.Number <= 65535)  		m_Stream.Write ((uint)(e.Number + 3000000));  	else  		m_Stream.Write ((uint)e.Number);  	m_Stream.Write ((short)i);  	#endregion  	int range = e.Range;  	if (range == -1) {  		range = Core.GlobalUpdateRange;  		//18  	}  	CMEFlags flags = (e.Enabled && menu.From.InRange (p' range)) ? CMEFlags.None : CMEFlags.Disabled;  	int color = e.Color & 0xFFFF;  	if (color != 0xFFFF) {  		flags |= CMEFlags.Colored;  	}  	flags |= e.Flags;  	m_Stream.Write ((short)flags);  	if ((flags & CMEFlags.Colored) != 0) {  		m_Stream.Write ((short)color);  	}  }  
Magic Number,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: for (int i = 0; i < length; ++i) {  	ContextMenuEntry e = entries [i];  	#region Enhance Client  	if (e.Number <= 65535)  		m_Stream.Write ((uint)(e.Number + 3000000));  	else  		m_Stream.Write ((uint)e.Number);  	m_Stream.Write ((short)i);  	#endregion  	int range = e.Range;  	if (range == -1) {  		range = Core.GlobalUpdateRange;  		//18  	}  	CMEFlags flags = (e.Enabled && menu.From.InRange (p' range)) ? CMEFlags.None : CMEFlags.Disabled;  	int color = e.Color & 0xFFFF;  	if (color != 0xFFFF) {  		flags |= CMEFlags.Colored;  	}  	flags |= e.Flags;  	m_Stream.Write ((short)flags);  	if ((flags & CMEFlags.Colored) != 0) {  		m_Stream.Write ((short)color);  	}  }  
Magic Number,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: if (e.Number <= 65535)  	m_Stream.Write ((uint)(e.Number + 3000000));  else  	m_Stream.Write ((uint)e.Number);  
Magic Number,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: if (e.Number <= 65535)  	m_Stream.Write ((uint)(e.Number + 3000000));  else  	m_Stream.Write ((uint)e.Number);  
Magic Number,Server.Network,DisplayContextMenuOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayContextMenuOld,The following statement contains a magic number: m_Stream.Write ((uint)(e.Number + 3000000));  
Magic Number,Server.Network,DisplayProfile,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayProfile,The following statement contains a magic number: EnsureCapacity (12 + header.Length + (footer.Length * 2) + (body.Length * 2));  
Magic Number,Server.Network,DisplayProfile,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayProfile,The following statement contains a magic number: EnsureCapacity (12 + header.Length + (footer.Length * 2) + (body.Length * 2));  
Magic Number,Server.Network,DisplayProfile,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayProfile,The following statement contains a magic number: EnsureCapacity (12 + header.Length + (footer.Length * 2) + (body.Length * 2));  
Magic Number,Server.Network,CloseGump,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CloseGump,The following statement contains a magic number: EnsureCapacity (13);  
Magic Number,Server.Network,WorldItem,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WorldItem,The following statement contains a magic number: EnsureCapacity (20);  
Magic Number,Server.Network,UnkD3,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnkD3,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (2);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (3);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (4);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write ((short)6);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (7);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write ((short)2);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (8);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (9);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (10);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (11);  
Magic Number,Server.Network,GQRequest,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,GQRequest,The following statement contains a magic number: m_Stream.Write (12);  
Magic Number,Server.Network,ClientVersionReq,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ClientVersionReq,The following statement contains a magic number: EnsureCapacity (3);  
Magic Number,Server.Network,AssistVersionReq,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AssistVersionReq,The following statement contains a magic number: EnsureCapacity (7);  
Magic Number,Server.Network,ScreenEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ScreenEffect,The following statement contains a magic number: m_Stream.Fill (8);  
Magic Number,Server.Network,ScreenEffect,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ScreenEffect,The following statement contains a magic number: m_Stream.Fill (16);  
Magic Number,Server.Network,NewSpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,NewSpellbookContent,The following statement contains a magic number: EnsureCapacity (23);  
Magic Number,Server.Network,NewSpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,NewSpellbookContent,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_Stream.Write ((byte)(content >> (i * 8)));  }  
Magic Number,Server.Network,NewSpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,NewSpellbookContent,The following statement contains a magic number: for (int i = 0; i < 8; ++i) {  	m_Stream.Write ((byte)(content >> (i * 8)));  }  
Magic Number,Server.Network,NewSpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,NewSpellbookContent,The following statement contains a magic number: m_Stream.Write ((byte)(content >> (i * 8)));  
Magic Number,Server.Network,SpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: EnsureCapacity (5 + (count * 19));  
Magic Number,Server.Network,SpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: EnsureCapacity (5 + (count * 19));  
Magic Number,Server.Network,SpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: for (int i = 0; i < 64; ++i' mask <<= 1) {  	if ((content & mask) != 0) {  		m_Stream.Write ((0x7FFFFFFF - i));  		m_Stream.Write ((ushort)0);  		m_Stream.Write ((byte)0);  		m_Stream.Write ((ushort)(i + offset));  		m_Stream.Write ((short)0);  		m_Stream.Write ((short)0);  		m_Stream.Write (item.Serial);  		m_Stream.Write ((short)0);  		++written;  	}  }  
Magic Number,Server.Network,SpellbookContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent,The following statement contains a magic number: m_Stream.Seek (3' SeekOrigin.Begin);  
Magic Number,Server.Network,SpellbookContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: EnsureCapacity (5 + (count * 20));  
Magic Number,Server.Network,SpellbookContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: EnsureCapacity (5 + (count * 20));  
Magic Number,Server.Network,SpellbookContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: for (int i = 0; i < 64; ++i' mask <<= 1) {  	if ((content & mask) != 0) {  		m_Stream.Write ((0x7FFFFFFF - i));  		m_Stream.Write ((ushort)0);  		m_Stream.Write ((byte)0);  		m_Stream.Write ((ushort)(i + offset));  		m_Stream.Write ((short)0);  		m_Stream.Write ((short)0);  		m_Stream.Write ((byte)0);  		// Grid Location?  		m_Stream.Write (item.Serial);  		m_Stream.Write ((short)0);  		++written;  	}  }  
Magic Number,Server.Network,SpellbookContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SpellbookContent6017,The following statement contains a magic number: m_Stream.Seek (3' SeekOrigin.Begin);  
Magic Number,Server.Network,ContainerContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ContainerContent,The following statement contains a magic number: EnsureCapacity (5 + (count * 19));  
Magic Number,Server.Network,ContainerContent,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ContainerContent,The following statement contains a magic number: EnsureCapacity (5 + (count * 19));  
Magic Number,Server.Network,ContainerContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ContainerContent6017,The following statement contains a magic number: EnsureCapacity (5 + (count * 20));  
Magic Number,Server.Network,ContainerContent6017,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ContainerContent6017,The following statement contains a magic number: EnsureCapacity (5 + (count * 20));  
Magic Number,Server.Network,NullFastwalkStack,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,NullFastwalkStack,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,SkillUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SkillUpdate,The following statement contains a magic number: EnsureCapacity (6 + (skills.Length * 9));  
Magic Number,Server.Network,SkillUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SkillUpdate,The following statement contains a magic number: EnsureCapacity (6 + (skills.Length * 9));  
Magic Number,Server.Network,SkillUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SkillUpdate,The following statement contains a magic number: for (int i = 0; i < skills.Length; ++i) {  	Skill s = skills [i];  	double v = s.NonRacialValue;  	var uv = (int)(v * 10);  	if (uv < 0) {  		uv = 0;  	} else if (uv >= 0x10000) {  		uv = 0xFFFF;  	}  	m_Stream.Write ((ushort)(s.Info.SkillID + 1));  	m_Stream.Write ((ushort)uv);  	m_Stream.Write ((ushort)s.BaseFixedPoint);  	m_Stream.Write ((byte)s.Lock);  	m_Stream.Write ((ushort)s.CapFixedPoint);  }  
Magic Number,Server.Network,SkillChange,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SkillChange,The following statement contains a magic number: EnsureCapacity (13);  
Magic Number,Server.Network,LaunchBrowser,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,LaunchBrowser,The following statement contains a magic number: EnsureCapacity (4 + url.Length);  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 3000000) {  	cache = m_Cache_IntLoc;  	index = number - 3000000;  } else if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 3000000) {  	cache = m_Cache_IntLoc;  	index = number - 3000000;  } else if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 3000000) {  	cache = m_Cache_IntLoc;  	index = number - 3000000;  } else if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 3000000) {  	cache = m_Cache_IntLoc;  	index = number - 3000000;  } else if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 3000000) {  	cache = m_Cache_IntLoc;  	index = number - 3000000;  } else if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 3000000) {  	cache = m_Cache_IntLoc;  	index = number - 3000000;  } else if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: index = number - 3000000;  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 1000000) {  	cache = m_Cache_CliLoc;  	index = number - 1000000;  } else if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: index = number - 1000000;  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (number >= 500000) {  	cache = m_Cache_CliLocCmp;  	index = number - 500000;  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: index = number - 500000;  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (cache != null && index >= 0 && index < cache.Length) {  	p = cache [index];  	if (p == null) {  		cache [index] = p = new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "");  		p.SetStatic ();  	}  } else {  	p = new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "");  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (cache != null && index >= 0 && index < cache.Length) {  	p = cache [index];  	if (p == null) {  		cache [index] = p = new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "");  		p.SetStatic ();  	}  } else {  	p = new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "");  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: if (p == null) {  	cache [index] = p = new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "");  	p.SetStatic ();  }  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: cache [index] = p = new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "");  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,InstantiateGeneric,The following statement contains a magic number: p = new MessageLocalized (Serial.MinusOne' -1' MessageType.Regular' 0x3B2' 3' number' "System"' "");  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalized,The following statement contains a magic number: EnsureCapacity (50 + (args.Length * 2));  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalized,The following statement contains a magic number: EnsureCapacity (50 + (args.Length * 2));  
Magic Number,Server.Network,MessageLocalized,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalized,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,MultiTargetReqHS,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MultiTargetReqHS,The following statement contains a magic number: m_Stream.Seek (18' SeekOrigin.Begin);  
Magic Number,Server.Network,MultiTargetReq,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MultiTargetReq,The following statement contains a magic number: m_Stream.Seek (18' SeekOrigin.Begin);  
Magic Number,Server.Network,CancelTarget,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CancelTarget,The following statement contains a magic number: m_Stream.Write ((byte)3);  
Magic Number,Server.Network,DisplayGumpPacked,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayGumpPacked,The following statement contains a magic number: m_Layout = PacketWriter.CreateInstance (8192);  
Magic Number,Server.Network,DisplayGumpPacked,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayGumpPacked,The following statement contains a magic number: m_Strings = PacketWriter.CreateInstance (8192);  
Magic Number,Server.Network,DisplayGumpPacked,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,Flush,The following statement contains a magic number: EnsureCapacity (28 + (int)m_Layout.Length + (int)m_Strings.Length);  
Magic Number,Server.Network,DisplayGumpPacked,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: wantLength += 4095;  
Magic Number,Server.Network,DisplayGumpPacked,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: wantLength &= ~4095;  
Magic Number,Server.Network,DisplayGumpPacked,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WritePacked,The following statement contains a magic number: m_Stream.Write ((4 + packLength));  
Magic Number,Server.Network,DisplayGumpFast,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayGumpFast,The following statement contains a magic number: EnsureCapacity (4096);  
Magic Number,Server.Network,DisplayGumpFast,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,WriteStrings,The following statement contains a magic number: m_Stream.Seek (19' SeekOrigin.Begin);  
Magic Number,Server.Network,DisplayGump,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayGump,The following statement contains a magic number: EnsureCapacity (256);  
Magic Number,Server.Network,DisplayPaperdoll,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayPaperdoll,The following statement contains a magic number: m_Stream.WriteAsciiFixed (text' 60);  
Magic Number,Server.Network,ScrollMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ScrollMessage,The following statement contains a magic number: EnsureCapacity (10 + text.Length);  
Magic Number,Server.Network,MapChange,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MapChange,The following statement contains a magic number: EnsureCapacity (6);  
Magic Number,Server.Network,SupportedFeatures,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SupportedFeatures,The following statement contains a magic number: if (acct != null && acct.Limit >= 6) {  	flags |= FeatureFlags.LiveAccount;  	flags &= ~FeatureFlags.UOTD;  	if (acct.Limit > 6) {  		flags |= FeatureFlags.SeventhCharacterSlot;  	} else {  		flags |= FeatureFlags.SixthCharacterSlot;  	}  }  
Magic Number,Server.Network,SupportedFeatures,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SupportedFeatures,The following statement contains a magic number: if (acct != null && acct.Limit >= 6) {  	flags |= FeatureFlags.LiveAccount;  	flags &= ~FeatureFlags.UOTD;  	if (acct.Limit > 6) {  		flags |= FeatureFlags.SeventhCharacterSlot;  	} else {  		flags |= FeatureFlags.SixthCharacterSlot;  	}  }  
Magic Number,Server.Network,SupportedFeatures,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,SupportedFeatures,The following statement contains a magic number: if (acct.Limit > 6) {  	flags |= FeatureFlags.SeventhCharacterSlot;  } else {  	flags |= FeatureFlags.SixthCharacterSlot;  }  
Magic Number,Server.Network,MobileName,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileName,The following statement contains a magic number: EnsureCapacity (37);  
Magic Number,Server.Network,MobileName,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileName,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,MobileStatusCompact,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusCompact,The following statement contains a magic number: EnsureCapacity (43);  
Magic Number,Server.Network,MobileStatusCompact,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusCompact,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: type = 6;  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: EnsureCapacity (121);  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: type = 5;  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: EnsureCapacity (91);  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: type = Core.AOS ? 4 : 3;  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: type = Core.AOS ? 4 : 3;  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: EnsureCapacity (88);  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: m_Stream.Write ((short)(Core.AOS ? m.PhysicalResistance : (int)(m.ArmorRating + 0.5)));  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (type >= 5) {  	m_Stream.Write ((short)m.MaxWeight);  	m_Stream.Write ((byte)(m.Race.RaceID + 1));  	// Would be 0x00 if it's a non-ML enabled account but...  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (type >= 4) {  	m_Stream.Write ((short)m.FireResistance);  	// Fire  	m_Stream.Write ((short)m.ColdResistance);  	// Cold  	m_Stream.Write ((short)m.PoisonResistance);  	// Poison  	m_Stream.Write ((short)m.EnergyResistance);  	// Energy  	m_Stream.Write ((short)m.Luck);  	// Luck  	IWeapon weapon = m.Weapon;  	int min = 0' max = 0;  	if (weapon != null) {  		weapon.GetStatusDamage (m' out min' out max);  	}  	m_Stream.Write ((short)min);  	// Damage min  	m_Stream.Write ((short)max);  	// Damage max  	m_Stream.Write (m.TithingPoints);  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (type >= 6) {  	for (int i = 0; i < 15; ++i) {  		m_Stream.Write ((short)m.GetAosStatus (i));  	}  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: if (type >= 6) {  	for (int i = 0; i < 15; ++i) {  		m_Stream.Write ((short)m.GetAosStatus (i));  	}  }  
Magic Number,Server.Network,MobileStatusExtended,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatusExtended,The following statement contains a magic number: for (int i = 0; i < 15; ++i) {  	m_Stream.Write ((short)m.GetAosStatus (i));  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (beholder != beheld) {  	type = 0;  	EnsureCapacity (43);  } else if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: EnsureCapacity (43);  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (isEnhancedClient) {  	type = 7;  	EnsureCapacity (149);  } else if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: type = 7;  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: EnsureCapacity (149);  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.HS && ns != null && ns.ExtendedStatus) {  	type = 6;  	EnsureCapacity (121);  } else if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: type = 6;  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: EnsureCapacity (121);  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (Core.ML && ns != null && ns.SupportsExpansion (Expansion.ML)) {  	type = 5;  	EnsureCapacity (91);  } else {  	type = Core.AOS ? 4 : 3;  	EnsureCapacity (88);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: type = 5;  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: EnsureCapacity (91);  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: type = Core.AOS ? 4 : 3;  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: type = Core.AOS ? 4 : 3;  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: EnsureCapacity (88);  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type > 0) {  	m_Stream.Write (beheld.Female);  	m_Stream.Write ((short)beheld.Str);  	m_Stream.Write ((short)beheld.Dex);  	m_Stream.Write ((short)beheld.Int);  	WriteAttr (beheld.Stam' beheld.StamMax);  	WriteAttr (beheld.Mana' beheld.ManaMax);  	m_Stream.Write (beheld.TotalGold);  	m_Stream.Write ((short)(Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)));  	m_Stream.Write ((short)(Mobile.BodyWeight + beheld.TotalWeight));  	if (type >= 5) {  		m_Stream.Write ((short)beheld.MaxWeight);  		m_Stream.Write ((byte)(beheld.Race.RaceID + 1));  		// Would be 0x00 if it's a non-ML enabled account but...  	}  	m_Stream.Write ((short)beheld.StatCap);  	m_Stream.Write ((byte)beheld.Followers);  	m_Stream.Write ((byte)beheld.FollowersMax);  	if (type >= 4) {  		m_Stream.Write ((short)beheld.FireResistance);  		// Fire  		m_Stream.Write ((short)beheld.ColdResistance);  		// Cold  		m_Stream.Write ((short)beheld.PoisonResistance);  		// Poison  		m_Stream.Write ((short)beheld.EnergyResistance);  		// Energy  		m_Stream.Write ((short)beheld.Luck);  		// Luck  		IWeapon weapon = beheld.Weapon;  		int min = 0' max = 0;  		if (weapon != null) {  			weapon.GetStatusDamage (beheld' out min' out max);  		}  		m_Stream.Write ((short)min);  		// Damage min  		m_Stream.Write ((short)max);  		// Damage max  		m_Stream.Write (beheld.TithingPoints);  	}  	if (type >= 6) {  		for (int i = 0; i < 15; ++i) {  			m_Stream.Write ((short)beheld.GetAosStatus (i));  		}  		if (isEnhancedClient) {  			m_Stream.Write ((short)beheld.AttackChance);  			// Hit Chance Increase  			m_Stream.Write ((short)beheld.WeaponSpeed);  			// Swing Speed Increase  			m_Stream.Write ((short)beheld.WeaponDamage);  			// Damage Increase  			m_Stream.Write ((short)beheld.LowerRegCost);  			// Lower Reagent Cost  			m_Stream.Write ((short)beheld.RegenHits);  			// Hit Points Regeneration  			m_Stream.Write ((short)beheld.RegenStam);  			// Stamina Regeneration  			m_Stream.Write ((short)beheld.RegenMana);  			// Mana Regeneration  			m_Stream.Write ((short)beheld.ReflectPhysical);  			// Reflect Physical Damage  			m_Stream.Write ((short)beheld.EnhancePotions);  			// Enhance Potions  			m_Stream.Write ((short)beheld.DefendChance);  			// Defense Chance Increase  			m_Stream.Write ((short)beheld.SpellDamage);  			// Spell Damage Increase  			m_Stream.Write ((short)beheld.CastRecovery);  			// Faster Cast Recovery  			m_Stream.Write ((short)beheld.CastSpeed);  			// Faster Casting  			m_Stream.Write ((short)beheld.LowerManaCost);  			// Lower Mana Cost  			m_Stream.Write ((short)beheld.BonusStr);  			// Strength Increase  			m_Stream.Write ((short)beheld.BonusDex);  			// Dexterity Increase  			m_Stream.Write ((short)beheld.BonusInt);  			// Intelligence Increase  			m_Stream.Write ((short)beheld.BonusHits);  			// Hit Points Increase  			m_Stream.Write ((short)beheld.BonusStam);  			// Stamina Increase  			m_Stream.Write ((short)beheld.BonusMana);  			// Mana Increase  			m_Stream.Write ((short)beheld.MaxHitIncrease);  			// Maximum Hit Points Increase  			m_Stream.Write ((short)beheld.MaxStamIncrease);  			// Maximum Stamina Increase  			m_Stream.Write ((short)beheld.MaxManaIncrease);  			// Maximum Mana Increase  		}  	}  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type > 0) {  	m_Stream.Write (beheld.Female);  	m_Stream.Write ((short)beheld.Str);  	m_Stream.Write ((short)beheld.Dex);  	m_Stream.Write ((short)beheld.Int);  	WriteAttr (beheld.Stam' beheld.StamMax);  	WriteAttr (beheld.Mana' beheld.ManaMax);  	m_Stream.Write (beheld.TotalGold);  	m_Stream.Write ((short)(Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)));  	m_Stream.Write ((short)(Mobile.BodyWeight + beheld.TotalWeight));  	if (type >= 5) {  		m_Stream.Write ((short)beheld.MaxWeight);  		m_Stream.Write ((byte)(beheld.Race.RaceID + 1));  		// Would be 0x00 if it's a non-ML enabled account but...  	}  	m_Stream.Write ((short)beheld.StatCap);  	m_Stream.Write ((byte)beheld.Followers);  	m_Stream.Write ((byte)beheld.FollowersMax);  	if (type >= 4) {  		m_Stream.Write ((short)beheld.FireResistance);  		// Fire  		m_Stream.Write ((short)beheld.ColdResistance);  		// Cold  		m_Stream.Write ((short)beheld.PoisonResistance);  		// Poison  		m_Stream.Write ((short)beheld.EnergyResistance);  		// Energy  		m_Stream.Write ((short)beheld.Luck);  		// Luck  		IWeapon weapon = beheld.Weapon;  		int min = 0' max = 0;  		if (weapon != null) {  			weapon.GetStatusDamage (beheld' out min' out max);  		}  		m_Stream.Write ((short)min);  		// Damage min  		m_Stream.Write ((short)max);  		// Damage max  		m_Stream.Write (beheld.TithingPoints);  	}  	if (type >= 6) {  		for (int i = 0; i < 15; ++i) {  			m_Stream.Write ((short)beheld.GetAosStatus (i));  		}  		if (isEnhancedClient) {  			m_Stream.Write ((short)beheld.AttackChance);  			// Hit Chance Increase  			m_Stream.Write ((short)beheld.WeaponSpeed);  			// Swing Speed Increase  			m_Stream.Write ((short)beheld.WeaponDamage);  			// Damage Increase  			m_Stream.Write ((short)beheld.LowerRegCost);  			// Lower Reagent Cost  			m_Stream.Write ((short)beheld.RegenHits);  			// Hit Points Regeneration  			m_Stream.Write ((short)beheld.RegenStam);  			// Stamina Regeneration  			m_Stream.Write ((short)beheld.RegenMana);  			// Mana Regeneration  			m_Stream.Write ((short)beheld.ReflectPhysical);  			// Reflect Physical Damage  			m_Stream.Write ((short)beheld.EnhancePotions);  			// Enhance Potions  			m_Stream.Write ((short)beheld.DefendChance);  			// Defense Chance Increase  			m_Stream.Write ((short)beheld.SpellDamage);  			// Spell Damage Increase  			m_Stream.Write ((short)beheld.CastRecovery);  			// Faster Cast Recovery  			m_Stream.Write ((short)beheld.CastSpeed);  			// Faster Casting  			m_Stream.Write ((short)beheld.LowerManaCost);  			// Lower Mana Cost  			m_Stream.Write ((short)beheld.BonusStr);  			// Strength Increase  			m_Stream.Write ((short)beheld.BonusDex);  			// Dexterity Increase  			m_Stream.Write ((short)beheld.BonusInt);  			// Intelligence Increase  			m_Stream.Write ((short)beheld.BonusHits);  			// Hit Points Increase  			m_Stream.Write ((short)beheld.BonusStam);  			// Stamina Increase  			m_Stream.Write ((short)beheld.BonusMana);  			// Mana Increase  			m_Stream.Write ((short)beheld.MaxHitIncrease);  			// Maximum Hit Points Increase  			m_Stream.Write ((short)beheld.MaxStamIncrease);  			// Maximum Stamina Increase  			m_Stream.Write ((short)beheld.MaxManaIncrease);  			// Maximum Mana Increase  		}  	}  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type > 0) {  	m_Stream.Write (beheld.Female);  	m_Stream.Write ((short)beheld.Str);  	m_Stream.Write ((short)beheld.Dex);  	m_Stream.Write ((short)beheld.Int);  	WriteAttr (beheld.Stam' beheld.StamMax);  	WriteAttr (beheld.Mana' beheld.ManaMax);  	m_Stream.Write (beheld.TotalGold);  	m_Stream.Write ((short)(Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)));  	m_Stream.Write ((short)(Mobile.BodyWeight + beheld.TotalWeight));  	if (type >= 5) {  		m_Stream.Write ((short)beheld.MaxWeight);  		m_Stream.Write ((byte)(beheld.Race.RaceID + 1));  		// Would be 0x00 if it's a non-ML enabled account but...  	}  	m_Stream.Write ((short)beheld.StatCap);  	m_Stream.Write ((byte)beheld.Followers);  	m_Stream.Write ((byte)beheld.FollowersMax);  	if (type >= 4) {  		m_Stream.Write ((short)beheld.FireResistance);  		// Fire  		m_Stream.Write ((short)beheld.ColdResistance);  		// Cold  		m_Stream.Write ((short)beheld.PoisonResistance);  		// Poison  		m_Stream.Write ((short)beheld.EnergyResistance);  		// Energy  		m_Stream.Write ((short)beheld.Luck);  		// Luck  		IWeapon weapon = beheld.Weapon;  		int min = 0' max = 0;  		if (weapon != null) {  			weapon.GetStatusDamage (beheld' out min' out max);  		}  		m_Stream.Write ((short)min);  		// Damage min  		m_Stream.Write ((short)max);  		// Damage max  		m_Stream.Write (beheld.TithingPoints);  	}  	if (type >= 6) {  		for (int i = 0; i < 15; ++i) {  			m_Stream.Write ((short)beheld.GetAosStatus (i));  		}  		if (isEnhancedClient) {  			m_Stream.Write ((short)beheld.AttackChance);  			// Hit Chance Increase  			m_Stream.Write ((short)beheld.WeaponSpeed);  			// Swing Speed Increase  			m_Stream.Write ((short)beheld.WeaponDamage);  			// Damage Increase  			m_Stream.Write ((short)beheld.LowerRegCost);  			// Lower Reagent Cost  			m_Stream.Write ((short)beheld.RegenHits);  			// Hit Points Regeneration  			m_Stream.Write ((short)beheld.RegenStam);  			// Stamina Regeneration  			m_Stream.Write ((short)beheld.RegenMana);  			// Mana Regeneration  			m_Stream.Write ((short)beheld.ReflectPhysical);  			// Reflect Physical Damage  			m_Stream.Write ((short)beheld.EnhancePotions);  			// Enhance Potions  			m_Stream.Write ((short)beheld.DefendChance);  			// Defense Chance Increase  			m_Stream.Write ((short)beheld.SpellDamage);  			// Spell Damage Increase  			m_Stream.Write ((short)beheld.CastRecovery);  			// Faster Cast Recovery  			m_Stream.Write ((short)beheld.CastSpeed);  			// Faster Casting  			m_Stream.Write ((short)beheld.LowerManaCost);  			// Lower Mana Cost  			m_Stream.Write ((short)beheld.BonusStr);  			// Strength Increase  			m_Stream.Write ((short)beheld.BonusDex);  			// Dexterity Increase  			m_Stream.Write ((short)beheld.BonusInt);  			// Intelligence Increase  			m_Stream.Write ((short)beheld.BonusHits);  			// Hit Points Increase  			m_Stream.Write ((short)beheld.BonusStam);  			// Stamina Increase  			m_Stream.Write ((short)beheld.BonusMana);  			// Mana Increase  			m_Stream.Write ((short)beheld.MaxHitIncrease);  			// Maximum Hit Points Increase  			m_Stream.Write ((short)beheld.MaxStamIncrease);  			// Maximum Stamina Increase  			m_Stream.Write ((short)beheld.MaxManaIncrease);  			// Maximum Mana Increase  		}  	}  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type > 0) {  	m_Stream.Write (beheld.Female);  	m_Stream.Write ((short)beheld.Str);  	m_Stream.Write ((short)beheld.Dex);  	m_Stream.Write ((short)beheld.Int);  	WriteAttr (beheld.Stam' beheld.StamMax);  	WriteAttr (beheld.Mana' beheld.ManaMax);  	m_Stream.Write (beheld.TotalGold);  	m_Stream.Write ((short)(Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)));  	m_Stream.Write ((short)(Mobile.BodyWeight + beheld.TotalWeight));  	if (type >= 5) {  		m_Stream.Write ((short)beheld.MaxWeight);  		m_Stream.Write ((byte)(beheld.Race.RaceID + 1));  		// Would be 0x00 if it's a non-ML enabled account but...  	}  	m_Stream.Write ((short)beheld.StatCap);  	m_Stream.Write ((byte)beheld.Followers);  	m_Stream.Write ((byte)beheld.FollowersMax);  	if (type >= 4) {  		m_Stream.Write ((short)beheld.FireResistance);  		// Fire  		m_Stream.Write ((short)beheld.ColdResistance);  		// Cold  		m_Stream.Write ((short)beheld.PoisonResistance);  		// Poison  		m_Stream.Write ((short)beheld.EnergyResistance);  		// Energy  		m_Stream.Write ((short)beheld.Luck);  		// Luck  		IWeapon weapon = beheld.Weapon;  		int min = 0' max = 0;  		if (weapon != null) {  			weapon.GetStatusDamage (beheld' out min' out max);  		}  		m_Stream.Write ((short)min);  		// Damage min  		m_Stream.Write ((short)max);  		// Damage max  		m_Stream.Write (beheld.TithingPoints);  	}  	if (type >= 6) {  		for (int i = 0; i < 15; ++i) {  			m_Stream.Write ((short)beheld.GetAosStatus (i));  		}  		if (isEnhancedClient) {  			m_Stream.Write ((short)beheld.AttackChance);  			// Hit Chance Increase  			m_Stream.Write ((short)beheld.WeaponSpeed);  			// Swing Speed Increase  			m_Stream.Write ((short)beheld.WeaponDamage);  			// Damage Increase  			m_Stream.Write ((short)beheld.LowerRegCost);  			// Lower Reagent Cost  			m_Stream.Write ((short)beheld.RegenHits);  			// Hit Points Regeneration  			m_Stream.Write ((short)beheld.RegenStam);  			// Stamina Regeneration  			m_Stream.Write ((short)beheld.RegenMana);  			// Mana Regeneration  			m_Stream.Write ((short)beheld.ReflectPhysical);  			// Reflect Physical Damage  			m_Stream.Write ((short)beheld.EnhancePotions);  			// Enhance Potions  			m_Stream.Write ((short)beheld.DefendChance);  			// Defense Chance Increase  			m_Stream.Write ((short)beheld.SpellDamage);  			// Spell Damage Increase  			m_Stream.Write ((short)beheld.CastRecovery);  			// Faster Cast Recovery  			m_Stream.Write ((short)beheld.CastSpeed);  			// Faster Casting  			m_Stream.Write ((short)beheld.LowerManaCost);  			// Lower Mana Cost  			m_Stream.Write ((short)beheld.BonusStr);  			// Strength Increase  			m_Stream.Write ((short)beheld.BonusDex);  			// Dexterity Increase  			m_Stream.Write ((short)beheld.BonusInt);  			// Intelligence Increase  			m_Stream.Write ((short)beheld.BonusHits);  			// Hit Points Increase  			m_Stream.Write ((short)beheld.BonusStam);  			// Stamina Increase  			m_Stream.Write ((short)beheld.BonusMana);  			// Mana Increase  			m_Stream.Write ((short)beheld.MaxHitIncrease);  			// Maximum Hit Points Increase  			m_Stream.Write ((short)beheld.MaxStamIncrease);  			// Maximum Stamina Increase  			m_Stream.Write ((short)beheld.MaxManaIncrease);  			// Maximum Mana Increase  		}  	}  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type > 0) {  	m_Stream.Write (beheld.Female);  	m_Stream.Write ((short)beheld.Str);  	m_Stream.Write ((short)beheld.Dex);  	m_Stream.Write ((short)beheld.Int);  	WriteAttr (beheld.Stam' beheld.StamMax);  	WriteAttr (beheld.Mana' beheld.ManaMax);  	m_Stream.Write (beheld.TotalGold);  	m_Stream.Write ((short)(Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)));  	m_Stream.Write ((short)(Mobile.BodyWeight + beheld.TotalWeight));  	if (type >= 5) {  		m_Stream.Write ((short)beheld.MaxWeight);  		m_Stream.Write ((byte)(beheld.Race.RaceID + 1));  		// Would be 0x00 if it's a non-ML enabled account but...  	}  	m_Stream.Write ((short)beheld.StatCap);  	m_Stream.Write ((byte)beheld.Followers);  	m_Stream.Write ((byte)beheld.FollowersMax);  	if (type >= 4) {  		m_Stream.Write ((short)beheld.FireResistance);  		// Fire  		m_Stream.Write ((short)beheld.ColdResistance);  		// Cold  		m_Stream.Write ((short)beheld.PoisonResistance);  		// Poison  		m_Stream.Write ((short)beheld.EnergyResistance);  		// Energy  		m_Stream.Write ((short)beheld.Luck);  		// Luck  		IWeapon weapon = beheld.Weapon;  		int min = 0' max = 0;  		if (weapon != null) {  			weapon.GetStatusDamage (beheld' out min' out max);  		}  		m_Stream.Write ((short)min);  		// Damage min  		m_Stream.Write ((short)max);  		// Damage max  		m_Stream.Write (beheld.TithingPoints);  	}  	if (type >= 6) {  		for (int i = 0; i < 15; ++i) {  			m_Stream.Write ((short)beheld.GetAosStatus (i));  		}  		if (isEnhancedClient) {  			m_Stream.Write ((short)beheld.AttackChance);  			// Hit Chance Increase  			m_Stream.Write ((short)beheld.WeaponSpeed);  			// Swing Speed Increase  			m_Stream.Write ((short)beheld.WeaponDamage);  			// Damage Increase  			m_Stream.Write ((short)beheld.LowerRegCost);  			// Lower Reagent Cost  			m_Stream.Write ((short)beheld.RegenHits);  			// Hit Points Regeneration  			m_Stream.Write ((short)beheld.RegenStam);  			// Stamina Regeneration  			m_Stream.Write ((short)beheld.RegenMana);  			// Mana Regeneration  			m_Stream.Write ((short)beheld.ReflectPhysical);  			// Reflect Physical Damage  			m_Stream.Write ((short)beheld.EnhancePotions);  			// Enhance Potions  			m_Stream.Write ((short)beheld.DefendChance);  			// Defense Chance Increase  			m_Stream.Write ((short)beheld.SpellDamage);  			// Spell Damage Increase  			m_Stream.Write ((short)beheld.CastRecovery);  			// Faster Cast Recovery  			m_Stream.Write ((short)beheld.CastSpeed);  			// Faster Casting  			m_Stream.Write ((short)beheld.LowerManaCost);  			// Lower Mana Cost  			m_Stream.Write ((short)beheld.BonusStr);  			// Strength Increase  			m_Stream.Write ((short)beheld.BonusDex);  			// Dexterity Increase  			m_Stream.Write ((short)beheld.BonusInt);  			// Intelligence Increase  			m_Stream.Write ((short)beheld.BonusHits);  			// Hit Points Increase  			m_Stream.Write ((short)beheld.BonusStam);  			// Stamina Increase  			m_Stream.Write ((short)beheld.BonusMana);  			// Mana Increase  			m_Stream.Write ((short)beheld.MaxHitIncrease);  			// Maximum Hit Points Increase  			m_Stream.Write ((short)beheld.MaxStamIncrease);  			// Maximum Stamina Increase  			m_Stream.Write ((short)beheld.MaxManaIncrease);  			// Maximum Mana Increase  		}  	}  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: m_Stream.Write ((short)(Core.AOS ? beheld.PhysicalResistance : (int)(beheld.ArmorRating + 0.5)));  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type >= 5) {  	m_Stream.Write ((short)beheld.MaxWeight);  	m_Stream.Write ((byte)(beheld.Race.RaceID + 1));  	// Would be 0x00 if it's a non-ML enabled account but...  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type >= 4) {  	m_Stream.Write ((short)beheld.FireResistance);  	// Fire  	m_Stream.Write ((short)beheld.ColdResistance);  	// Cold  	m_Stream.Write ((short)beheld.PoisonResistance);  	// Poison  	m_Stream.Write ((short)beheld.EnergyResistance);  	// Energy  	m_Stream.Write ((short)beheld.Luck);  	// Luck  	IWeapon weapon = beheld.Weapon;  	int min = 0' max = 0;  	if (weapon != null) {  		weapon.GetStatusDamage (beheld' out min' out max);  	}  	m_Stream.Write ((short)min);  	// Damage min  	m_Stream.Write ((short)max);  	// Damage max  	m_Stream.Write (beheld.TithingPoints);  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type >= 6) {  	for (int i = 0; i < 15; ++i) {  		m_Stream.Write ((short)beheld.GetAosStatus (i));  	}  	if (isEnhancedClient) {  		m_Stream.Write ((short)beheld.AttackChance);  		// Hit Chance Increase  		m_Stream.Write ((short)beheld.WeaponSpeed);  		// Swing Speed Increase  		m_Stream.Write ((short)beheld.WeaponDamage);  		// Damage Increase  		m_Stream.Write ((short)beheld.LowerRegCost);  		// Lower Reagent Cost  		m_Stream.Write ((short)beheld.RegenHits);  		// Hit Points Regeneration  		m_Stream.Write ((short)beheld.RegenStam);  		// Stamina Regeneration  		m_Stream.Write ((short)beheld.RegenMana);  		// Mana Regeneration  		m_Stream.Write ((short)beheld.ReflectPhysical);  		// Reflect Physical Damage  		m_Stream.Write ((short)beheld.EnhancePotions);  		// Enhance Potions  		m_Stream.Write ((short)beheld.DefendChance);  		// Defense Chance Increase  		m_Stream.Write ((short)beheld.SpellDamage);  		// Spell Damage Increase  		m_Stream.Write ((short)beheld.CastRecovery);  		// Faster Cast Recovery  		m_Stream.Write ((short)beheld.CastSpeed);  		// Faster Casting  		m_Stream.Write ((short)beheld.LowerManaCost);  		// Lower Mana Cost  		m_Stream.Write ((short)beheld.BonusStr);  		// Strength Increase  		m_Stream.Write ((short)beheld.BonusDex);  		// Dexterity Increase  		m_Stream.Write ((short)beheld.BonusInt);  		// Intelligence Increase  		m_Stream.Write ((short)beheld.BonusHits);  		// Hit Points Increase  		m_Stream.Write ((short)beheld.BonusStam);  		// Stamina Increase  		m_Stream.Write ((short)beheld.BonusMana);  		// Mana Increase  		m_Stream.Write ((short)beheld.MaxHitIncrease);  		// Maximum Hit Points Increase  		m_Stream.Write ((short)beheld.MaxStamIncrease);  		// Maximum Stamina Increase  		m_Stream.Write ((short)beheld.MaxManaIncrease);  		// Maximum Mana Increase  	}  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: if (type >= 6) {  	for (int i = 0; i < 15; ++i) {  		m_Stream.Write ((short)beheld.GetAosStatus (i));  	}  	if (isEnhancedClient) {  		m_Stream.Write ((short)beheld.AttackChance);  		// Hit Chance Increase  		m_Stream.Write ((short)beheld.WeaponSpeed);  		// Swing Speed Increase  		m_Stream.Write ((short)beheld.WeaponDamage);  		// Damage Increase  		m_Stream.Write ((short)beheld.LowerRegCost);  		// Lower Reagent Cost  		m_Stream.Write ((short)beheld.RegenHits);  		// Hit Points Regeneration  		m_Stream.Write ((short)beheld.RegenStam);  		// Stamina Regeneration  		m_Stream.Write ((short)beheld.RegenMana);  		// Mana Regeneration  		m_Stream.Write ((short)beheld.ReflectPhysical);  		// Reflect Physical Damage  		m_Stream.Write ((short)beheld.EnhancePotions);  		// Enhance Potions  		m_Stream.Write ((short)beheld.DefendChance);  		// Defense Chance Increase  		m_Stream.Write ((short)beheld.SpellDamage);  		// Spell Damage Increase  		m_Stream.Write ((short)beheld.CastRecovery);  		// Faster Cast Recovery  		m_Stream.Write ((short)beheld.CastSpeed);  		// Faster Casting  		m_Stream.Write ((short)beheld.LowerManaCost);  		// Lower Mana Cost  		m_Stream.Write ((short)beheld.BonusStr);  		// Strength Increase  		m_Stream.Write ((short)beheld.BonusDex);  		// Dexterity Increase  		m_Stream.Write ((short)beheld.BonusInt);  		// Intelligence Increase  		m_Stream.Write ((short)beheld.BonusHits);  		// Hit Points Increase  		m_Stream.Write ((short)beheld.BonusStam);  		// Stamina Increase  		m_Stream.Write ((short)beheld.BonusMana);  		// Mana Increase  		m_Stream.Write ((short)beheld.MaxHitIncrease);  		// Maximum Hit Points Increase  		m_Stream.Write ((short)beheld.MaxStamIncrease);  		// Maximum Stamina Increase  		m_Stream.Write ((short)beheld.MaxManaIncrease);  		// Maximum Mana Increase  	}  }  
Magic Number,Server.Network,MobileStatus,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileStatus,The following statement contains a magic number: for (int i = 0; i < 15; ++i) {  	m_Stream.Write ((short)beheld.GetAosStatus (i));  }  
Magic Number,Server.Network,HealthbarPoison,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,HealthbarPoison,The following statement contains a magic number: EnsureCapacity (12);  
Magic Number,Server.Network,HealthbarYellow,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,HealthbarYellow,The following statement contains a magic number: EnsureCapacity (12);  
Magic Number,Server.Network,HealthbarYellow,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,HealthbarYellow,The following statement contains a magic number: m_Stream.Write ((short)2);  
Magic Number,Server.Network,MobileIncoming,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncoming,The following statement contains a magic number: EnsureCapacity (23 + (count * 9));  
Magic Number,Server.Network,MobileIncoming,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncoming,The following statement contains a magic number: EnsureCapacity (23 + (count * 9));  
Magic Number,Server.Network,MobileIncomingSA,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingSA,The following statement contains a magic number: EnsureCapacity (23 + (count * 9));  
Magic Number,Server.Network,MobileIncomingSA,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingSA,The following statement contains a magic number: EnsureCapacity (23 + (count * 9));  
Magic Number,Server.Network,MobileIncomingOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingOld,The following statement contains a magic number: EnsureCapacity (23 + (count * 9));  
Magic Number,Server.Network,MobileIncomingOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MobileIncomingOld,The following statement contains a magic number: EnsureCapacity (23 + (count * 9));  
Magic Number,Server.Network,AsciiMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AsciiMessage,The following statement contains a magic number: EnsureCapacity (45 + text.Length);  
Magic Number,Server.Network,AsciiMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AsciiMessage,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,UnicodeMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: EnsureCapacity (50 + (text.Length * 2));  
Magic Number,Server.Network,UnicodeMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: EnsureCapacity (50 + (text.Length * 2));  
Magic Number,Server.Network,UnicodeMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: m_Stream.WriteAsciiFixed (lang' 4);  
Magic Number,Server.Network,UnicodeMessage,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,UnicodeMessage,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,LoginConfirm,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,LoginConfirm,The following statement contains a magic number: m_Stream.Write ((short)(map == null ? 6144 : map.Width));  
Magic Number,Server.Network,LoginConfirm,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,LoginConfirm,The following statement contains a magic number: m_Stream.Write ((short)(map == null ? 4096 : map.Height));  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: EnsureCapacity (4 + (a.Length * 60));  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: EnsureCapacity (4 + (a.Length * 60));  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	Mobile m = a [i];  	if (m != null) {  		m_Stream.WriteAsciiFixed (m.Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	Mobile m = a [i];  	if (m != null) {  		m_Stream.WriteAsciiFixed (m.Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	Mobile m = a [i];  	if (m != null) {  		m_Stream.WriteAsciiFixed (m.Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: if (m != null) {  	m_Stream.WriteAsciiFixed (m.Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: if (m != null) {  	m_Stream.WriteAsciiFixed (m.Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: if (m != null) {  	m_Stream.WriteAsciiFixed (m.Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: m_Stream.WriteAsciiFixed (m.Name' 30);  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: m_Stream.Fill (30);  
Magic Number,Server.Network,CharacterListUpdate,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListUpdate,The following statement contains a magic number: m_Stream.Fill (60);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: EnsureCapacity (11 + (a.Length * 60) + (info.Length * 89));  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: EnsureCapacity (11 + (a.Length * 60) + (info.Length * 89));  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: EnsureCapacity (11 + (a.Length * 60) + (info.Length * 89));  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	if (a [i] != null) {  		m_Stream.WriteAsciiFixed (a [i].Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	if (a [i] != null) {  		m_Stream.WriteAsciiFixed (a [i].Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	if (a [i] != null) {  		m_Stream.WriteAsciiFixed (a [i].Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (a [i] != null) {  	m_Stream.WriteAsciiFixed (a [i].Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (a [i] != null) {  	m_Stream.WriteAsciiFixed (a [i].Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (a [i] != null) {  	m_Stream.WriteAsciiFixed (a [i].Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.WriteAsciiFixed (a [i].Name' 30);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.Fill (30);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.Fill (60);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for (int i = 0; i < info.Length; ++i) {  	CityInfo ci = info [i];  	m_Stream.Write ((byte)i);  	m_Stream.WriteAsciiFixed (ci.City' 32);  	m_Stream.WriteAsciiFixed (ci.Building' 32);  	m_Stream.Write (ci.X);  	m_Stream.Write (ci.Y);  	m_Stream.Write (ci.Z);  	m_Stream.Write (ci.Map.MapID);  	m_Stream.Write (ci.Description);  	m_Stream.Write (0);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for (int i = 0; i < info.Length; ++i) {  	CityInfo ci = info [i];  	m_Stream.Write ((byte)i);  	m_Stream.WriteAsciiFixed (ci.City' 32);  	m_Stream.WriteAsciiFixed (ci.Building' 32);  	m_Stream.Write (ci.X);  	m_Stream.Write (ci.Y);  	m_Stream.Write (ci.Z);  	m_Stream.Write (ci.Map.MapID);  	m_Stream.Write (ci.Description);  	m_Stream.Write (0);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.WriteAsciiFixed (ci.City' 32);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.WriteAsciiFixed (ci.Building' 32);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (count > 6) {  	flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot);  } else if (count == 6) {  	flags |= CharacterListFlags.SixthCharacterSlot;  	// 6th Character Slot  } else if (a.Limit == 1) {  	flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);  	// Limit Characters & One Character  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (count > 6) {  	flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot);  } else if (count == 6) {  	flags |= CharacterListFlags.SixthCharacterSlot;  	// 6th Character Slot  } else if (a.Limit == 1) {  	flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);  	// Limit Characters & One Character  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (count == 6) {  	flags |= CharacterListFlags.SixthCharacterSlot;  	// 6th Character Slot  } else if (a.Limit == 1) {  	flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);  	// Limit Characters & One Character  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	Utility.RandomBytes (buffer);  	m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  	m_Stream.Write (buffer' 0' buffer.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	Utility.RandomBytes (buffer);  	m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  	m_Stream.Write (buffer' 0' buffer.Length);  }  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.Seek (35' SeekOrigin.Begin);  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.Write ((int)((long)disabled >> 32));  
Magic Number,Server.Network,CharacterList,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterList,The following statement contains a magic number: m_Stream.Seek (95' SeekOrigin.Begin);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: EnsureCapacity (9 + (a.Length * 60) + (info.Length * 63));  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: EnsureCapacity (9 + (a.Length * 60) + (info.Length * 63));  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: EnsureCapacity (9 + (a.Length * 60) + (info.Length * 63));  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	if (a [i] != null) {  		m_Stream.WriteAsciiFixed (a [i].Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	if (a [i] != null) {  		m_Stream.WriteAsciiFixed (a [i].Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	if (a [i] != null) {  		m_Stream.WriteAsciiFixed (a [i].Name' 30);  		m_Stream.Fill (30);  		// password  	} else {  		m_Stream.Fill (60);  	}  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (a [i] != null) {  	m_Stream.WriteAsciiFixed (a [i].Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (a [i] != null) {  	m_Stream.WriteAsciiFixed (a [i].Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (a [i] != null) {  	m_Stream.WriteAsciiFixed (a [i].Name' 30);  	m_Stream.Fill (30);  	// password  } else {  	m_Stream.Fill (60);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.WriteAsciiFixed (a [i].Name' 30);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.Fill (30);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.Fill (60);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for (int i = 0; i < info.Length; ++i) {  	CityInfo ci = info [i];  	m_Stream.Write ((byte)i);  	m_Stream.WriteAsciiFixed (ci.City' 31);  	m_Stream.WriteAsciiFixed (ci.Building' 31);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for (int i = 0; i < info.Length; ++i) {  	CityInfo ci = info [i];  	m_Stream.Write ((byte)i);  	m_Stream.WriteAsciiFixed (ci.City' 31);  	m_Stream.WriteAsciiFixed (ci.Building' 31);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.WriteAsciiFixed (ci.City' 31);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.WriteAsciiFixed (ci.Building' 31);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (count > 6) {  	flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot);  } else if (count == 6) {  	flags |= CharacterListFlags.SixthCharacterSlot;  	// 6th Character Slot  } else if (a.Limit == 1) {  	flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);  	// Limit Characters & One Character  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (count > 6) {  	flags |= (CharacterListFlags.SeventhCharacterSlot | CharacterListFlags.SixthCharacterSlot);  } else if (count == 6) {  	flags |= CharacterListFlags.SixthCharacterSlot;  	// 6th Character Slot  } else if (a.Limit == 1) {  	flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);  	// Limit Characters & One Character  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (count == 6) {  	flags |= CharacterListFlags.SixthCharacterSlot;  	// 6th Character Slot  } else if (a.Limit == 1) {  	flags |= (CharacterListFlags.SlotLimit & CharacterListFlags.OneCharacterSlot);  	// Limit Characters & One Character  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: if (disabled != 0) {  	if (m_MD5Provider == null) {  		m_MD5Provider = new MD5CryptoServiceProvider ();  	}  	m_Stream.UnderlyingStream.Flush ();  	byte[] hashCode = m_MD5Provider.ComputeHash (m_Stream.UnderlyingStream.GetBuffer ()' 0' (int)m_Stream.UnderlyingStream.Length);  	var buffer = new byte[28];  	for (int i = 0; i < count; ++i) {  		Utility.RandomBytes (buffer);  		m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  		m_Stream.Write (buffer' 0' buffer.Length);  	}  	m_Stream.Seek (35' SeekOrigin.Begin);  	m_Stream.Write ((int)((long)disabled >> 32));  	m_Stream.Write ((int)disabled);  	m_Stream.Seek (95' SeekOrigin.Begin);  	m_Stream.Write (hashCode' 0' hashCode.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	Utility.RandomBytes (buffer);  	m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  	m_Stream.Write (buffer' 0' buffer.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: for (int i = 0; i < count; ++i) {  	Utility.RandomBytes (buffer);  	m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  	m_Stream.Write (buffer' 0' buffer.Length);  }  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.Seek (35 + (i * 60)' SeekOrigin.Begin);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.Seek (35' SeekOrigin.Begin);  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.Write ((int)((long)disabled >> 32));  
Magic Number,Server.Network,CharacterListOld,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CharacterListOld,The following statement contains a magic number: m_Stream.Seek (95' SeekOrigin.Begin);  
Magic Number,Server.Network,ClearWeaponAbility,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,ClearWeaponAbility,The following statement contains a magic number: EnsureCapacity (5);  
Magic Number,Server.Network,MessageLocalizedAffix,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalizedAffix,The following statement contains a magic number: EnsureCapacity (52 + affix.Length + (args.Length * 2));  
Magic Number,Server.Network,MessageLocalizedAffix,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalizedAffix,The following statement contains a magic number: EnsureCapacity (52 + affix.Length + (args.Length * 2));  
Magic Number,Server.Network,MessageLocalizedAffix,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,MessageLocalizedAffix,The following statement contains a magic number: m_Stream.WriteAsciiFixed (name' 30);  
Magic Number,Server.Network,AccountLoginAck,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AccountLoginAck,The following statement contains a magic number: EnsureCapacity (6 + (info.Length * 40));  
Magic Number,Server.Network,AccountLoginAck,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AccountLoginAck,The following statement contains a magic number: EnsureCapacity (6 + (info.Length * 40));  
Magic Number,Server.Network,AccountLoginAck,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AccountLoginAck,The following statement contains a magic number: for (int i = 0; i < info.Length; ++i) {  	ServerInfo si = info [i];  	m_Stream.Write ((ushort)i);  	m_Stream.WriteAsciiFixed (si.Name' 32);  	m_Stream.Write ((byte)si.FullPercent);  	m_Stream.Write ((sbyte)si.TimeZone);  	m_Stream.Write (Utility.GetAddressValue (si.Address.Address));  }  
Magic Number,Server.Network,AccountLoginAck,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,AccountLoginAck,The following statement contains a magic number: m_Stream.WriteAsciiFixed (si.Name' 32);  
Magic Number,Server.Network,DisplaySignGump,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplaySignGump,The following statement contains a magic number: EnsureCapacity (16 + unknown.Length + caption.Length);  
Magic Number,Server.Network,PlayServerAck,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,PlayServerAck,The following statement contains a magic number: m_Stream.Write ((byte)(addr >> 8));  
Magic Number,Server.Network,PlayServerAck,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,PlayServerAck,The following statement contains a magic number: m_Stream.Write ((byte)(addr >> 16));  
Magic Number,Server.Network,PlayServerAck,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,PlayServerAck,The following statement contains a magic number: m_Stream.Write ((byte)(addr >> 24));  
Magic Number,Server.Network,CooldownInfo,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,CooldownInfo,The following statement contains a magic number: this.EnsureCapacity (15);  
Magic Number,Server.Network,DisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayWaypoint,The following statement contains a magic number: this.EnsureCapacity (25);  
Magic Number,Server.Network,DisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayWaypoint,The following statement contains a magic number: if (type.Equals (1))  	m_Stream.Write ((int)1046414);  else  	m_Stream.Write ((int)1062613);  
Magic Number,Server.Network,DisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayWaypoint,The following statement contains a magic number: if (type.Equals (1))  	m_Stream.Write ((int)1046414);  else  	m_Stream.Write ((int)1062613);  
Magic Number,Server.Network,DisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayWaypoint,The following statement contains a magic number: m_Stream.Write ((int)1046414);  
Magic Number,Server.Network,DisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,DisplayWaypoint,The following statement contains a magic number: m_Stream.Write ((int)1062613);  
Magic Number,Server.Network,KRDisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,KRDisplayWaypoint,The following statement contains a magic number: EnsureCapacity (21 + (args.Length * 2));  
Magic Number,Server.Network,KRDisplayWaypoint,F:\newReposMay17\JustUO_JustUO\Server\Network\Packets.cs,KRDisplayWaypoint,The following statement contains a magic number: EnsureCapacity (21 + (args.Length * 2));  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,CreateInstance,The following statement contains a magic number: return CreateInstance (32);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [0] = (byte)(value >> 8);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write (m_Buffer' 0' 2);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [0] = (byte)(value >> 8);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write (m_Buffer' 0' 2);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [0] = (byte)(value >> 24);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [1] = (byte)(value >> 16);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [2] = (byte)(value >> 8);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [2] = (byte)(value >> 8);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [3] = (byte)value;  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write (m_Buffer' 0' 4);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [0] = (byte)(value >> 24);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [1] = (byte)(value >> 16);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [2] = (byte)(value >> 8);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [2] = (byte)(value >> 8);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Buffer [3] = (byte)value;  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,Write,The following statement contains a magic number: m_Stream.Write (m_Buffer' 0' 4);  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteLittleUniNull,The following statement contains a magic number: m_Stream.SetLength (m_Stream.Length + ((length + 1) * 2));  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteLittleUniNull,The following statement contains a magic number: m_Stream.Position += 2;  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteLittleUniFixed,The following statement contains a magic number: size *= 2;  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteLittleUniFixed,The following statement contains a magic number: if ((length * 2) >= size) {  	m_Stream.Position += Encoding.Unicode.GetBytes (value' 0' length' m_Stream.GetBuffer ()' (int)m_Stream.Position);  } else {  	Encoding.Unicode.GetBytes (value' 0' length' m_Stream.GetBuffer ()' (int)m_Stream.Position);  	m_Stream.Position += size;  }  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteBigUniNull,The following statement contains a magic number: m_Stream.SetLength (m_Stream.Length + ((length + 1) * 2));  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteBigUniNull,The following statement contains a magic number: m_Stream.Position += 2;  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteBigUniFixed,The following statement contains a magic number: size *= 2;  
Magic Number,Server.Network,PacketWriter,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketWriter.cs,WriteBigUniFixed,The following statement contains a magic number: if ((length * 2) >= size) {  	m_Stream.Position += Encoding.BigEndianUnicode.GetBytes (value' 0' length' m_Stream.GetBuffer ()' (int)m_Stream.Position);  } else {  	Encoding.BigEndianUnicode.GetBytes (value' 0' length' m_Stream.GetBuffer ()' (int)m_Stream.Position);  	m_Stream.Position += size;  }  
Magic Number,Server.Network,PromptExtensions,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,SendTo,The following statement contains a magic number: if (m.NetState != null && m.NetState.Version.Major >= 67) {  	m.Send (new PromptGumpStub (prompt' m).GetPacket ());  } else {  	if (prompt.MessageCliloc != 1042971 || prompt.MessageArgs != String.Empty)  		m.SendLocalizedMessage (prompt.MessageCliloc' prompt.MessageArgs' prompt.MessageHue);  	m.Send (new UnicodePrompt (prompt' m));  }  
Magic Number,Server.Network,PromptExtensions,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,SendTo,The following statement contains a magic number: if (m.NetState != null && m.NetState.Version.Major >= 67) {  	m.Send (new PromptGumpStub (prompt' m).GetPacket ());  } else {  	if (prompt.MessageCliloc != 1042971 || prompt.MessageArgs != String.Empty)  		m.SendLocalizedMessage (prompt.MessageCliloc' prompt.MessageArgs' prompt.MessageHue);  	m.Send (new UnicodePrompt (prompt' m));  }  
Magic Number,Server.Network,PromptExtensions,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,SendTo,The following statement contains a magic number: if (prompt.MessageCliloc != 1042971 || prompt.MessageArgs != String.Empty)  	m.SendLocalizedMessage (prompt.MessageCliloc' prompt.MessageArgs' prompt.MessageHue);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (50' 50' 540' 350' 0xA28);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (50' 50' 540' 350' 0xA28);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (50' 50' 540' 350' 0xA28);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (50' 50' 540' 350' 0xA28);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (264' 80' 200' 24' 1062524' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (264' 80' 200' 24' 1062524' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (264' 80' 200' 24' 1062524' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (264' 80' 200' 24' 1062524' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (264' 80' 200' 24' 1062524' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (120' 108' 420' 48' 1062638' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (120' 108' 420' 48' 1062638' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (120' 108' 420' 48' 1062638' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (120' 108' 420' 48' 1062638' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddHtmlLocalized (120' 108' 420' 48' 1062638' false' false);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (100' 148' 440' 200' 0xDAC);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (100' 148' 440' 200' 0xDAC);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (100' 148' 440' 200' 0xDAC);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddBackground (100' 148' 440' 200' 0xDAC);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddTextEntryIntern (120' 168' 400' 200' 0x0' 44' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddTextEntryIntern (120' 168' 400' 200' 0x0' 44' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddTextEntryIntern (120' 168' 400' 200' 0x0' 44' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddTextEntryIntern (120' 168' 400' 200' 0x0' 44' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddTextEntryIntern (120' 168' 400' 200' 0x0' 44' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddButton (175' 355' 0x81A' 0x81B' 1' GumpButtonType.Reply' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddButton (175' 355' 0x81A' 0x81B' 1' GumpButtonType.Reply' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddButton (405' 355' 0x819' 0x818' 0' GumpButtonType.Reply' 0);  
Magic Number,Server.Network,PromptGumpStub,F:\newReposMay17\JustUO_JustUO\Server\PromptExtensions.cs,PromptGumpStub,The following statement contains a magic number: AddButton (405' 355' 0x819' 0x818' 0' GumpButtonType.Reply' 0);  
Magic Number,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,OnTargetNotAccessible,The following statement contains a magic number: from.SendLocalizedMessage (500447);  
Magic Number,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,OnTargetInSecureTrade,The following statement contains a magic number: from.SendLocalizedMessage (500447);  
Magic Number,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,OnNonlocalTarget,The following statement contains a magic number: from.SendLocalizedMessage (500447);  
Magic Number,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,OnCantSeeTarget,The following statement contains a magic number: from.SendLocalizedMessage (500237);  
Magic Number,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,OnTargetOutOfLOS,The following statement contains a magic number: from.SendLocalizedMessage (500237);  
Magic Number,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,OnTargetOutOfRange,The following statement contains a magic number: from.SendLocalizedMessage (500446);  
Magic Number,Server.Targeting,Target,F:\newReposMay17\JustUO_JustUO\Server\Targeting\Target.cs,OnTargetUntargetable,The following statement contains a magic number: from.SendLocalizedMessage (500447);  
Duplicate Code,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The method contains a code clone-set at the following line numbers (starting from the method definition): ((55' 87)' (169' 201))
Duplicate Code,Server,Core,F:\newReposMay17\JustUO_JustUO\Server\Main.cs,VerifyType,The method contains a code clone-set at the following line numbers (starting from the method definition): ((14' 36)' (42' 64))
Missing Default,Server,LastEditedBy,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Custom Types\LastEditedBy.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 0: {  	_Mobile = reader.ReadMobile ();  	_Time = reader.ReadDateTime ();  	break;  }  }  
Missing Default,Server,Place,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Custom Types\Place.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 0: {  	_Map = reader.ReadMap ();  	_Location = reader.ReadPoint3D ();  	break;  }  }  
Missing Default,Server,Item,F:\newReposMay17\JustUO_JustUO\Server\Item.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 9:  case 8:  case 7:  case 6: {  	var flags = (SaveFlag)reader.ReadInt ();  	if (version < 7) {  		LastMoved = reader.ReadDeltaTime ();  	} else {  		int minutes = reader.ReadEncodedInt ();  		try {  			LastMoved = DateTime.UtcNow - TimeSpan.FromMinutes (minutes);  		} catch {  			LastMoved = DateTime.UtcNow;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	int x = 0' y = 0' z = 0;  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		x = reader.ReadEncodedInt ();  		y = reader.ReadEncodedInt ();  		z = reader.ReadEncodedInt ();  	} else {  		if (GetSaveFlag (flags' SaveFlag.LocationByteXY)) {  			x = reader.ReadByte ();  			y = reader.ReadByte ();  		} else if (GetSaveFlag (flags' SaveFlag.LocationShortXY)) {  			x = reader.ReadShort ();  			y = reader.ReadShort ();  		}  		if (GetSaveFlag (flags' SaveFlag.LocationSByteZ)) {  			z = reader.ReadSByte ();  		}  	}  	m_Location = new Point3D (x' y' z);  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadEncodedInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	if (version < 8 || !GetSaveFlag (flags' SaveFlag.NullWeight)) {  		double weight;  		if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  			weight = reader.ReadEncodedInt ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  			weight = reader.ReadDouble ();  		} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  			weight = 0.0;  		} else {  			weight = 1.0;  		}  		if (weight != DefaultWeight) {  			AcquireCompactInfo ().m_Weight = weight;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.GhostVisible)) {  		GhostVisible = reader.ReadBool ();  	} else {  		GhostVisible = true;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (GetSaveFlag (flags' SaveFlag.ImplFlags)) {  		m_Flags = (ImplFlag)reader.ReadEncodedInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.InsuredFor)) {  		/*m_InsuredFor = */reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.BlessedFor)) {  		AcquireCompactInfo ().m_BlessedFor = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.HeldBy)) {  		AcquireCompactInfo ().m_HeldBy = reader.ReadMobile ();  	}  	if (GetSaveFlag (flags' SaveFlag.SavedFlags)) {  		AcquireCompactInfo ().m_SavedFlags = reader.ReadEncodedInt ();  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 5: {  	var flags = (SaveFlag)reader.ReadInt ();  	LastMoved = reader.ReadDeltaTime ();  	if (GetSaveFlag (flags' SaveFlag.Direction)) {  		m_Direction = (Direction)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Bounce)) {  		AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	}  	if (GetSaveFlag (flags' SaveFlag.LootType)) {  		m_LootType = (LootType)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.LocationFull)) {  		m_Location = reader.ReadPoint3D ();  	}  	if (GetSaveFlag (flags' SaveFlag.ItemID)) {  		m_ItemID = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Hue)) {  		m_Hue = reader.ReadInt ();  	}  	if (GetSaveFlag (flags' SaveFlag.Amount)) {  		m_Amount = reader.ReadInt ();  	} else {  		m_Amount = 1;  	}  	if (GetSaveFlag (flags' SaveFlag.Layer)) {  		m_Layer = (Layer)reader.ReadByte ();  	}  	if (GetSaveFlag (flags' SaveFlag.Name)) {  		string name = reader.ReadString ();  		if (name != DefaultName) {  			AcquireCompactInfo ().m_Name = name;  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Parent)) {  		Serial parent = reader.ReadInt ();  		if (parent.IsMobile) {  			m_Parent = World.FindMobile (parent);  		} else if (parent.IsItem) {  			m_Parent = World.FindItem (parent);  		} else {  			m_Parent = null;  		}  		if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  			Delete ();  		}  	}  	if (GetSaveFlag (flags' SaveFlag.Items)) {  		List<Item> items = reader.ReadStrongItemList ();  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight;  	if (GetSaveFlag (flags' SaveFlag.IntWeight)) {  		weight = reader.ReadEncodedInt ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightNot1or0)) {  		weight = reader.ReadDouble ();  	} else if (GetSaveFlag (flags' SaveFlag.WeightIs0)) {  		weight = 0.0;  	} else {  		weight = 1.0;  	}  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (GetSaveFlag (flags' SaveFlag.Map)) {  		m_Map = reader.ReadMap ();  	} else {  		m_Map = Map.Internal;  	}  	if (GetSaveFlag (flags' SaveFlag.Visible)) {  		SetFlag (ImplFlag.Visible' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Visible' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Movable)) {  		SetFlag (ImplFlag.Movable' reader.ReadBool ());  	} else {  		SetFlag (ImplFlag.Movable' true);  	}  	if (GetSaveFlag (flags' SaveFlag.Stackable)) {  		SetFlag (ImplFlag.Stackable' reader.ReadBool ());  	}  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  case 4:  // Just removed variables  case 3: {  	m_Direction = (Direction)reader.ReadInt ();  	goto case 2;  }  case 2: {  	AcquireCompactInfo ().m_Bounce = BounceInfo.Deserialize (reader);  	LastMoved = reader.ReadDeltaTime ();  	goto case 1;  }  case 1: {  	m_LootType = (LootType)reader.ReadByte ();  	//m_Newbied = reader.ReadBool();  	goto case 0;  }  case 0: {  	m_Location = reader.ReadPoint3D ();  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	m_Amount = reader.ReadInt ();  	m_Layer = (Layer)reader.ReadByte ();  	string name = reader.ReadString ();  	if (name != DefaultName) {  		AcquireCompactInfo ().m_Name = name;  	}  	Serial parent = reader.ReadInt ();  	if (parent.IsMobile) {  		m_Parent = World.FindMobile (parent);  	} else if (parent.IsItem) {  		m_Parent = World.FindItem (parent);  	} else {  		m_Parent = null;  	}  	if (m_Parent == null && (parent.IsMobile || parent.IsItem)) {  		Delete ();  	}  	int count = reader.ReadInt ();  	if (count > 0) {  		var items = new List<Item> (count);  		for (int i = 0; i < count; ++i) {  			Item item = reader.ReadItem ();  			if (item != null) {  				items.Add (item);  			}  		}  		if (this is Container) {  			((Container)this).m_Items = items;  		} else {  			AcquireCompactInfo ().m_Items = items;  		}  	}  	double weight = reader.ReadDouble ();  	if (weight != DefaultWeight) {  		AcquireCompactInfo ().m_Weight = weight;  	}  	if (version <= 3) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	m_Map = reader.ReadMap ();  	SetFlag (ImplFlag.Visible' reader.ReadBool ());  	SetFlag (ImplFlag.Movable' reader.ReadBool ());  	if (version <= 3) {  		/*m_Deleted =*/reader.ReadBool ();  	}  	Stackable = reader.ReadBool ();  	if (m_Map != null && m_Parent == null) {  		m_Map.OnEnter (this);  	}  	break;  }  }  
Missing Default,Server,BaseHairInfo,F:\newReposMay17\JustUO_JustUO\Server\Items\VirtualHair.cs,BaseHairInfo,The following switch statement is missing a default case: switch (version) {  case 0: {  	m_ItemID = reader.ReadInt ();  	m_Hue = reader.ReadInt ();  	break;  }  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,GetTotal,The following switch statement is missing a default case: switch (type) {  case TotalType.Gold:  	return _TotalGold;  case TotalType.Items:  	return _TotalItems;  case TotalType.Weight:  	return _TotalWeight;  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,UpdateTotal,The following switch statement is missing a default case: switch (type) {  case TotalType.Gold:  	_TotalGold += delta;  	Delta (MobileDelta.Gold);  	break;  case TotalType.Items:  	_TotalItems += delta;  	break;  case TotalType.Weight:  	_TotalWeight += delta;  	Delta (MobileDelta.Weight);  	OnWeightChange (_TotalWeight - delta);  	break;  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Move,The following switch statement is missing a default case: switch (d & Direction.Mask) {  case Direction.North:  	--y;  	break;  case Direction.Right:  	++x;  	--y;  	break;  case Direction.East:  	++x;  	break;  case Direction.Down:  	++x;  	++y;  	break;  case Direction.South:  	++y;  	break;  case Direction.Left:  	--x;  	++y;  	break;  case Direction.West:  	--x;  	break;  case Direction.Up:  	--x;  	--y;  	break;  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Kill,The following switch statement is missing a default case: switch (res) {  case DeathMoveResult.MoveToCorpse: {  	content.Add (item);  	equip.Add (item);  	break;  }  case DeathMoveResult.MoveToBackpack: {  	moveToPack.Add (item);  	break;  }  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Damage,The following switch statement is missing a default case: switch (_VisibleDamageType) {  case VisibleDamageType.Related: {  	NetState ourState = _NetState' theirState = (from == null ? null : from._NetState);  	if (ourState == null) {  		Mobile master = GetDamageMaster (from);  		if (master != null) {  			ourState = master._NetState;  		}  	}  	if (theirState == null && from != null) {  		Mobile master = from.GetDamageMaster (this);  		if (master != null) {  			theirState = master._NetState;  		}  	}  	if (amount > 0 && (ourState != null || theirState != null)) {  		Packet p = null;  		// = new DamagePacket( this' amount );  		if (ourState != null) {  			if (ourState.DamagePacket) {  				p = Packet.Acquire (new DamagePacket (this' amount));  			} else {  				p = Packet.Acquire (new DamagePacketOld (this' amount));  			}  			ourState.Send (p);  		}  		if (theirState != null && theirState != ourState) {  			bool newPacket = theirState.DamagePacket;  			if (newPacket && (p == null || !(p is DamagePacket))) {  				Packet.Release (p);  				p = Packet.Acquire (new DamagePacket (this' amount));  			} else if (!newPacket && (p == null || !(p is DamagePacketOld))) {  				Packet.Release (p);  				p = Packet.Acquire (new DamagePacketOld (this' amount));  			}  			theirState.Send (p);  		}  		Packet.Release (p);  	}  	break;  }  case VisibleDamageType.Everyone: {  	SendDamageToAll (amount);  	break;  }  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 33: {  	_SpecialSlayerMechanics = reader.ReadBool ();  	if (reader.ReadBool ()) {  		int length = reader.ReadInt ();  		for (int i = 0; i < length; i++) {  			_SlayerVulnerabilities.Add (reader.ReadString ());  		}  	} else {  		_SlayerVulnerabilities = new List<string> ();  	}  	goto case 32;  }  case 32: {  	_IgnoreMobiles = reader.ReadBool ();  	goto case 31;  }  case 31: {  	_LastStrGain = reader.ReadDeltaTime ();  	_LastIntGain = reader.ReadDeltaTime ();  	_LastDexGain = reader.ReadDeltaTime ();  	goto case 30;  }  case 30: {  	byte hairflag = reader.ReadByte ();  	if ((hairflag & 0x01) != 0) {  		_Hair = new HairInfo (reader);  	}  	if ((hairflag & 0x02) != 0) {  		_FacialHair = new FacialHairInfo (reader);  	}  	#region Enhance Client  	if ((hairflag & 0x04) != 0) {  		_Face = new FaceInfo (reader);  	}  	#endregion  	goto case 29;  }  case 29: {  	_Race = reader.ReadRace ();  	goto case 28;  }  case 28: {  	if (version <= 30) {  		LastStatGain = reader.ReadDeltaTime ();  	}  	goto case 27;  }  case 27: {  	_TithingPoints = reader.ReadInt ();  	goto case 26;  }  case 26:  case 25:  case 24: {  	_Corpse = reader.ReadItem () as Container;  	goto case 23;  }  case 23: {  	_CreationTime = reader.ReadDateTime ();  	goto case 22;  }  case 22:  // Just removed followers  case 21: {  	_Stabled = reader.ReadStrongMobileList ();  	goto case 20;  }  case 20: {  	_CantWalk = reader.ReadBool ();  	goto case 19;  }  case 19:  // Just removed variables  case 18: {  	_Virtues = new VirtueInfo (reader);  	goto case 17;  }  case 17: {  	_Thirst = reader.ReadInt ();  	_BAC = reader.ReadInt ();  	goto case 16;  }  case 16: {  	_ShortTermMurders = reader.ReadInt ();  	if (version <= 24) {  		reader.ReadDateTime ();  		reader.ReadDateTime ();  	}  	goto case 15;  }  case 15: {  	if (version < 22) {  		reader.ReadInt ();  		// followers  	}  	_FollowersMax = reader.ReadInt ();  	goto case 14;  }  case 14: {  	_MagicDamageAbsorb = reader.ReadInt ();  	goto case 13;  }  case 13: {  	_GuildFealty = reader.ReadMobile ();  	goto case 12;  }  case 12: {  	_Guild = reader.ReadGuild ();  	goto case 11;  }  case 11: {  	_DisplayGuildTitle = reader.ReadBool ();  	goto case 10;  }  case 10: {  	_CanSwim = reader.ReadBool ();  	goto case 9;  }  case 9: {  	_Squelched = reader.ReadBool ();  	goto case 8;  }  case 8: {  	_Holding = reader.ReadItem ();  	goto case 7;  }  case 7: {  	_VirtualArmor = reader.ReadInt ();  	goto case 6;  }  case 6: {  	_BaseSoundId = reader.ReadInt ();  	goto case 5;  }  case 5: {  	_DisarmReady = reader.ReadBool ();  	_StunReady = reader.ReadBool ();  	goto case 4;  }  case 4: {  	if (version <= 25) {  		Poison.Deserialize (reader);  	}  	goto case 3;  }  case 3: {  	_StatCap = reader.ReadInt ();  	goto case 2;  }  case 2: {  	_NameHue = reader.ReadInt ();  	goto case 1;  }  case 1: {  	_Hunger = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 21) {  		_Stabled = new List<Mobile> ();  	}  	if (version < 18) {  		_Virtues = new VirtueInfo ();  	}  	if (version < 11) {  		_DisplayGuildTitle = true;  	}  	if (version < 3) {  		_StatCap = 225;  	}  	if (version < 15) {  		_Followers = 0;  		_FollowersMax = 5;  	}  	_Location = reader.ReadPoint3D ();  	_Body = new Body (reader.ReadInt ());  	_Name = reader.ReadString ();  	_GuildTitle = reader.ReadString ();  	_Criminal = reader.ReadBool ();  	_Kills = reader.ReadInt ();  	_SpeechHue = reader.ReadInt ();  	_EmoteHue = reader.ReadInt ();  	_WhisperHue = reader.ReadInt ();  	_YellHue = reader.ReadInt ();  	_Language = reader.ReadString ();  	_Female = reader.ReadBool ();  	_Warmode = reader.ReadBool ();  	_Hidden = reader.ReadBool ();  	_Direction = (Direction)reader.ReadByte ();  	_Hue = reader.ReadInt ();  	_Str = reader.ReadInt ();  	_Dex = reader.ReadInt ();  	_Int = reader.ReadInt ();  	_Hits = reader.ReadInt ();  	_Stam = reader.ReadInt ();  	_Mana = reader.ReadInt ();  	_Map = reader.ReadMap ();  	_Blessed = reader.ReadBool ();  	_Fame = reader.ReadInt ();  	_Karma = reader.ReadInt ();  	_AccessLevel = (AccessLevel)reader.ReadByte ();  	_Skills = new Skills (this' reader);  	_Items = reader.ReadStrongItemList ();  	_Player = reader.ReadBool ();  	_Title = reader.ReadString ();  	_Profile = reader.ReadString ();  	_ProfileLocked = reader.ReadBool ();  	if (version <= 18) {  		reader.ReadInt ();  		reader.ReadInt ();  		reader.ReadInt ();  	}  	_AutoPageNotify = reader.ReadBool ();  	_LogoutLocation = reader.ReadPoint3D ();  	_LogoutMap = reader.ReadMap ();  	_StrLock = (StatLockType)reader.ReadByte ();  	_DexLock = (StatLockType)reader.ReadByte ();  	_IntLock = (StatLockType)reader.ReadByte ();  	_StatMods = new List<StatMod> ();  	_SkillMods = new List<SkillMod> ();  	if (reader.ReadBool ()) {  		_StuckMenuUses = new DateTime[reader.ReadInt ()];  		for (int i = 0; i < _StuckMenuUses.Length; ++i) {  			_StuckMenuUses [i] = reader.ReadDateTime ();  		}  	} else {  		_StuckMenuUses = null;  	}  	if (_Player && _Map != Map.Internal) {  		_LogoutLocation = _Location;  		_LogoutMap = _Map;  		_Map = Map.Internal;  	}  	if (_Map != null) {  		_Map.OnEnter (this);  	}  	if (_Criminal) {  		if (_ExpireCriminal == null) {  			_ExpireCriminal = new ExpireCriminalTimer (this);  		}  		_ExpireCriminal.Start ();  	}  	if (ShouldCheckStatTimers) {  		CheckStatTimers ();  	}  	if (!_Player && _Dex <= 100 && _CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.FiftyMS;  	} else if (_CombatTimer != null) {  		_CombatTimer.Priority = TimerPriority.EveryTick;  	}  	UpdateRegion ();  	UpdateResistances ();  	break;  }  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following switch statement is missing a default case: switch (action) {  case 9:  case 10:  case 11:  	action = 71;  	break;  case 12:  case 13:  case 14:  	action = 72;  	break;  case 18:  case 19:  	action = 71;  	break;  case 20:  	action = 77;  	break;  case 31:  	action = 71;  	break;  case 34:  	action = 78;  	break;  }  
Missing Default,Server,Mobile,F:\newReposMay17\JustUO_JustUO\Server\Mobile.cs,Animate,The following switch statement is missing a default case: switch (action) {  case 9:  	action = 13;  	break;  case 10:  	action = 14;  	break;  case 11:  	action = 13;  	break;  case 12:  case 13:  case 14:  	action = 12;  	break;  case 18:  case 19:  	action = 9;  	break;  }  
Missing Default,Server,Poison,F:\newReposMay17\JustUO_JustUO\Server\Poison.cs,Deserialize,The following switch statement is missing a default case: switch (reader.ReadByte ()) {  case 1:  	return GetPoison (reader.ReadByte ());  case 2:  	//no longer used' safe to remove?  	reader.ReadInt ();  	reader.ReadDouble ();  	reader.ReadInt ();  	reader.ReadTimeSpan ();  	break;  }  
Missing Default,Server,Skills,F:\newReposMay17\JustUO_JustUO\Server\Skills.cs,Skills,The following switch statement is missing a default case: switch (version) {  case 3:  case 2: {  	Cap = reader.ReadInt ();  	goto case 1;  }  case 1: {  	if (version < 2) {  		Cap = 7000;  	}  	if (version < 3) {  		/*m_Total =*/reader.ReadInt ();  	}  	SkillInfo[] info = SkillInfo.Table;  	m_Skills = new Skill[info.Length];  	int count = reader.ReadInt ();  	for (int i = 0; i < count; ++i) {  		if (i < info.Length) {  			var sk = new Skill (this' info [i]' reader);  			if (sk.BaseFixedPoint != 0 || sk.CapFixedPoint != 1000 || sk.Lock != SkillLock.Up) {  				m_Skills [i] = sk;  				Total += sk.BaseFixedPoint;  			}  		} else {  			new Skill (this' null' reader);  		}  	}  	//for ( int i = count; i < info.Length; ++i )  	//	m_Skills[i] = new Skill( this' info[i]' 0' 1000' SkillLock.Up );  	break;  }  case 0: {  	reader.ReadInt ();  	goto case 1;  }  }  
Missing Default,Server,Utility,F:\newReposMay17\JustUO_JustUO\Server\Utility.cs,RandomNondyedHue,The following switch statement is missing a default case: switch (Random (6)) {  case 0:  	return RandomPinkHue ();  case 1:  	return RandomBlueHue ();  case 2:  	return RandomGreenHue ();  case 3:  	return RandomOrangeHue ();  case 4:  	return RandomRedHue ();  case 5:  	return RandomYellowHue ();  }  
Missing Default,Server,VirtueInfo,F:\newReposMay17\JustUO_JustUO\Server\VirtueInfo.cs,VirtueInfo,The following switch statement is missing a default case: switch (version) {  case 1:  //Changed the values throughout the virtue system  case 0: {  	int mask = reader.ReadByte ();  	if (mask != 0) {  		m_Values = new int[8];  		for (int i = 0; i < 8; ++i) {  			if ((mask & (1 << i)) != 0) {  				m_Values [i] = reader.ReadInt ();  			}  		}  	}  	break;  }  }  
Missing Default,CustomsFramework,BaseCore,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Central Core\Base Types\BaseCore.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 0: {  	_Enabled = reader.ReadBool ();  	break;  }  }  
Missing Default,CustomsFramework,BaseModule,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Central Core\Base Types\BaseModule.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 0: {  	LinkedMobile = reader.ReadMobile ();  	LinkedItem = reader.ReadItem ();  	_CreatedTime = reader.ReadDateTime ();  	_LastEditedTime = reader.ReadDateTime ();  	break;  }  }  
Missing Default,CustomsFramework,BaseService,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Central Core\Base Types\BaseService.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 0: {  	break;  }  }  
Missing Default,CustomsFramework,SaveData,F:\newReposMay17\JustUO_JustUO\Server\Customs Framework\Central Core\Base Types\SaveData.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 0: {  	_Deleted = reader.ReadBool ();  	break;  }  }  
Missing Default,Server.Gumps,GumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\GumpHtmlLocalized.cs,AppendTo,The following switch statement is missing a default case: switch (m_Type) {  case GumpHtmlLocalizedType.Plain: {  	disp.AppendLayout (m_LayoutNamePlain);  	disp.AppendLayout (m_X);  	disp.AppendLayout (m_Y);  	disp.AppendLayout (m_Width);  	disp.AppendLayout (m_Height);  	disp.AppendLayout (m_Number);  	disp.AppendLayout (m_Background);  	disp.AppendLayout (m_Scrollbar);  	break;  }  case GumpHtmlLocalizedType.Color: {  	disp.AppendLayout (m_LayoutNameColor);  	disp.AppendLayout (m_X);  	disp.AppendLayout (m_Y);  	disp.AppendLayout (m_Width);  	disp.AppendLayout (m_Height);  	disp.AppendLayout (m_Number);  	disp.AppendLayout (m_Background);  	disp.AppendLayout (m_Scrollbar);  	disp.AppendLayout (m_Color);  	break;  }  case GumpHtmlLocalizedType.Args: {  	disp.AppendLayout (m_LayoutNameArgs);  	disp.AppendLayout (m_X);  	disp.AppendLayout (m_Y);  	disp.AppendLayout (m_Width);  	disp.AppendLayout (m_Height);  	disp.AppendLayout (m_Background);  	disp.AppendLayout (m_Scrollbar);  	disp.AppendLayout (m_Color);  	disp.AppendLayout (m_Number);  	disp.AppendLayout (m_Args);  	break;  }  }  
Missing Default,Server.Gumps,KRGumpHtmlLocalized,F:\newReposMay17\JustUO_JustUO\Server\Gumps\KRGumpHtmlLocalized.cs,AppendTo,The following switch statement is missing a default case: switch (m_Type) {  case KRGumpHtmlLocalizedType.Plain: {  	disp.AppendLayout (m_LayoutNamePlain);  	disp.AppendLayout (m_X);  	disp.AppendLayout (m_Y);  	disp.AppendLayout (m_Width);  	disp.AppendLayout (m_Height);  	disp.AppendLayout (m_Number);  	disp.AppendLayout (m_Background);  	disp.AppendLayout (m_Scrollbar);  	break;  }  case KRGumpHtmlLocalizedType.Color: {  	disp.AppendLayout (m_LayoutNameColor);  	disp.AppendLayout (m_X);  	disp.AppendLayout (m_Y);  	disp.AppendLayout (m_Width);  	disp.AppendLayout (m_Height);  	disp.AppendLayout (m_Number);  	disp.AppendLayout (m_Background);  	disp.AppendLayout (m_Scrollbar);  	disp.AppendLayout (m_Color);  	break;  }  }  
Missing Default,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 2: {  	var flags = (SaveFlag)reader.ReadByte ();  	if (GetSaveFlag (flags' SaveFlag.MaxItems)) {  		m_MaxItems = reader.ReadEncodedInt ();  	} else {  		m_MaxItems = -1;  	}  	if (GetSaveFlag (flags' SaveFlag.GumpID)) {  		m_GumpID = reader.ReadEncodedInt ();  	} else {  		m_GumpID = -1;  	}  	if (GetSaveFlag (flags' SaveFlag.DropSound)) {  		m_DropSound = reader.ReadEncodedInt ();  	} else {  		m_DropSound = -1;  	}  	m_LiftOverride = GetSaveFlag (flags' SaveFlag.LiftOverride);  	break;  }  case 1: {  	m_MaxItems = reader.ReadInt ();  	goto case 0;  }  case 0: {  	if (version < 1) {  		m_MaxItems = m_GlobalMaxItems;  	}  	m_GumpID = reader.ReadInt ();  	m_DropSound = reader.ReadInt ();  	if (m_GumpID == DefaultGumpID) {  		m_GumpID = -1;  	}  	if (m_DropSound == DefaultDropSound) {  		m_DropSound = -1;  	}  	if (m_MaxItems == DefaultMaxItems) {  		m_MaxItems = -1;  	}  	//m_Bounds = new Rectangle2D( reader.ReadPoint2D()' reader.ReadPoint2D() );  	reader.ReadPoint2D ();  	reader.ReadPoint2D ();  	break;  }  }  
Missing Default,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,GetTotal,The following switch statement is missing a default case: switch (type) {  case TotalType.Gold:  	return m_TotalGold;  case TotalType.Items:  	return m_TotalItems;  case TotalType.Weight:  	return m_TotalWeight;  }  
Missing Default,Server.Items,Container,F:\newReposMay17\JustUO_JustUO\Server\Items\Container.cs,UpdateTotal,The following switch statement is missing a default case: switch (type) {  case TotalType.Gold:  	m_TotalGold += delta;  	break;  case TotalType.Items:  	m_TotalItems += delta;  	InvalidateProperties ();  	break;  case TotalType.Weight:  	m_TotalWeight += delta;  	InvalidateProperties ();  	break;  }  
Missing Default,Server.Items,BankBox,F:\newReposMay17\JustUO_JustUO\Server\Items\Containers.cs,Deserialize,The following switch statement is missing a default case: switch (version) {  case 0: {  	m_Owner = reader.ReadMobile ();  	m_Open = reader.ReadBool ();  	if (m_Owner == null) {  		Delete ();  	}  	break;  }  }  
Missing Default,Server.Movement,Movement,F:\newReposMay17\JustUO_JustUO\Server\Movement.cs,Offset,The following switch statement is missing a default case: switch (d & Direction.Mask) {  case Direction.North:  	--y;  	break;  case Direction.South:  	++y;  	break;  case Direction.West:  	--x;  	break;  case Direction.East:  	++x;  	break;  case Direction.Right:  	++x;  	--y;  	break;  case Direction.Left:  	--x;  	++y;  	break;  case Direction.Down:  	++x;  	++y;  	break;  case Direction.Up:  	--x;  	--y;  	break;  }  
Missing Default,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,SecureTrade,The following switch statement is missing a default case: switch (pvSrc.ReadByte ()) {  case 1:  	// Cancel  	{  		Serial serial = pvSrc.ReadInt32 ();  		SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  		if (cont != null) {  			SecureTrade trade = cont.Trade;  			if (trade != null) {  				if (trade.From.Mobile == state.Mobile || trade.To.Mobile == state.Mobile) {  					trade.Cancel ();  				}  			}  		}  	}  	break;  case 2:  	// Check  	{  		Serial serial = pvSrc.ReadInt32 ();  		SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  		if (cont != null) {  			SecureTrade trade = cont.Trade;  			bool value = pvSrc.ReadInt32 () != 0;  			if (trade != null) {  				if (trade.From.Mobile == state.Mobile) {  					trade.From.Accepted = value;  					trade.Update ();  				} else if (trade.To.Mobile == state.Mobile) {  					trade.To.Accepted = value;  					trade.Update ();  				}  			}  		}  	}  	break;  case 3:  	// Update Gold  	{  		if (Core.TOL) {  			Serial serial = pvSrc.ReadInt32 ();  			SecureTradeContainer cont = World.FindItem (serial) as SecureTradeContainer;  			if (cont != null) {  				int gold = pvSrc.ReadInt32 ();  				int plat = pvSrc.ReadInt32 ();  				SecureTrade trade = cont.Trade;  				if (trade != null) {  					if (trade.From.Mobile == state.Mobile) {  						trade.From.Gold = gold;  						trade.From.Plat = plat;  						trade.UpdateFromCurrency ();  					} else if (trade.To.Mobile == state.Mobile) {  						trade.To.Gold = gold;  						trade.To.Plat = plat;  						trade.UpdateToCurrency ();  					}  				}  			}  		}  	}  	break;  }  
Missing Default,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,ProfileReq,The following switch statement is missing a default case: switch (type) {  case 0x00:// display request   {  	EventSink.InvokeProfileRequest (new ProfileRequestEventArgs (beholder' beheld));  	break;  }  case 0x01:// edit request   {  	pvSrc.ReadInt16 ();  	// Skip  	int length = pvSrc.ReadUInt16 ();  	if (length > 511) {  		return;  	}  	string text = pvSrc.ReadUnicodeString (length);  	EventSink.InvokeChangeProfileRequest (new ChangeProfileRequestEventArgs (beholder' beheld' text));  	break;  }  }  
Missing Default,Server.Network,PacketHandlers,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketHandlers.cs,StatLockChange,The following switch statement is missing a default case: switch (stat) {  case 0:  	m.StrLock = (StatLockType)lockValue;  	break;  case 1:  	m.DexLock = (StatLockType)lockValue;  	break;  case 2:  	m.IntLock = (StatLockType)lockValue;  	break;  }  
Missing Default,Server.Network,PacketReader,F:\newReposMay17\JustUO_JustUO\Server\Network\PacketReader.cs,Seek,The following switch statement is missing a default case: switch (origin) {  case SeekOrigin.Begin:  	m_Index = offset;  	break;  case SeekOrigin.Current:  	m_Index += offset;  	break;  case SeekOrigin.End:  	m_Index = m_Size - offset;  	break;  }  
