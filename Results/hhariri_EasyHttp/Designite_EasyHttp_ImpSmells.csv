Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EasyHttp.Codecs.JsonFXExtensions,RegExBasedDataWriterProvider,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Codecs\JsonFXExtensions\RegExBasedDataWriterProvider.cs,RegExBasedDataWriterProvider,Cyclomatic complexity of the method is 8
Complex Method,EasyHttp.Codecs.JsonFXExtensions,UrlEncoderTextFormatter,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Codecs\JsonFXExtensions\UrlEncoderTextFormatter.cs,Format,Cyclomatic complexity of the method is 23
Complex Method,EasyHttp.Http,HttpRequest,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpRequest.cs,SetupHeader,Cyclomatic complexity of the method is 10
Complex Method,EasyHttp.Http,HttpResponse,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpResponse.cs,GetResponse,Cyclomatic complexity of the method is 10
Long Statement,EasyHttp.Configuration,DefaultEncoderDecoderConfiguration,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Configuration\DefaultEncoderDecoderConfiguration.cs,GetDecoder,The length of the statement  "	var jsonReader = new JsonReader (new DataReaderSettings (CombinedResolverStrategy ()' new Iso8601DateFilter ())' new[] { " is 120.
Long Statement,EasyHttp.Configuration,DefaultEncoderDecoderConfiguration,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Configuration\DefaultEncoderDecoderConfiguration.cs,CombinedResolverStrategy,The length of the statement  "	return new CombinedResolverStrategy (new JsonResolverStrategy ()' new DataContractResolverStrategy ()' new XmlResolverStrategy ()' new ConventionResolverStrategy (ConventionResolverStrategy.WordCasing.PascalCase)' new ConventionResolverStrategy (ConventionResolverStrategy.WordCasing.CamelCase)' new ConventionResolverStrategy (ConventionResolverStrategy.WordCasing.NoChange)' new ConventionResolverStrategy (ConventionResolverStrategy.WordCasing.NoChange' "_")' new ConventionResolverStrategy (ConventionResolverStrategy.WordCasing.NoChange' "-")' new ConventionResolverStrategy (ConventionResolverStrategy.WordCasing.Lowercase' "-")' new ConventionResolverStrategy (ConventionResolverStrategy.WordCasing.Uppercase' "_")); " is 723.
Long Statement,EasyHttp.Http,HttpClient,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpClient.cs,ProcessRequest,The length of the statement  "	var httpWebRequest = matchingInterceptor != null ? new StubbedHttpWebRequest (matchingInterceptor) : Request.PrepareRequest (); " is 127.
Long Statement,EasyHttp.Http,HttpRequest,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpRequest.cs,SetupHeader,The length of the statement  "	httpWebRequest.AutomaticDecompression = DisableAutomaticCompression ? DecompressionMethods.None : DecompressionMethods.Deflate | DecompressionMethods.GZip | DecompressionMethods.None; " is 183.
Long Statement,EasyHttp.Http,MultiPartStreamer,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\MultipartStreamer.cs,CreateFileBoundaryHeader,The length of the statement  "	return string.Format ("\r\nContent-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\n" + "Content-Type: {2}\r\n" + "Content-Transfer-Encoding: {3}\r\n\r\n"' fileData.FieldName' Path.GetFileName (fileData.Filename)' fileData.ContentType' fileData.ContentTransferEncoding); " is 279.
Magic Number,EasyHttp.Http,HttpClient,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpClient.cs,IsHttpError,The following statement contains a magic number: return (num == 4 || num == 5);  
Magic Number,EasyHttp.Http,HttpClient,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpClient.cs,IsHttpError,The following statement contains a magic number: return (num == 4 || num == 5);  
Magic Number,EasyHttp.Http,HttpRequest,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpRequest.cs,HttpRequest,The following statement contains a magic number: Timeout = 100000;  
Magic Number,EasyHttp.Http,HttpRequest,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpRequest.cs,SetupPutFilename,The following statement contains a magic number: using (var fileStream = new FileStream (PutFilename' FileMode.Open)) {  	httpWebRequest.ContentLength = fileStream.Length;  	var requestStream = httpWebRequest.GetRequestStream ();  	var buffer = new byte[81982];  	int bytesRead = fileStream.Read (buffer' 0' buffer.Length);  	while (bytesRead > 0) {  		requestStream.Write (buffer' 0' bytesRead);  		bytesRead = fileStream.Read (buffer' 0' buffer.Length);  	}  	requestStream.Close ();  }  
Magic Number,EasyHttp.Http,HttpResponse,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpResponse.cs,GetResponse,The following statement contains a magic number: using (var stream = _response.GetResponseStream ()) {  	if (stream == null)  		return;  	if (!string.IsNullOrEmpty (filename)) {  		using (var filestream = new FileStream (filename' FileMode.CreateNew)) {  			int count;  			var buffer = new byte[8192];  			while ((count = stream.Read (buffer' 0' buffer.Length)) > 0) {  				filestream.Write (buffer' 0' count);  			}  		}  	} else {  		var encoding = string.IsNullOrEmpty (CharacterSet) ? Encoding.UTF8 : Encoding.GetEncoding (CharacterSet);  		using (var reader = new StreamReader (stream' encoding)) {  			RawText = reader.ReadToEnd ();  		}  	}  }  
Magic Number,EasyHttp.Http,HttpResponse,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpResponse.cs,GetResponse,The following statement contains a magic number: if (!string.IsNullOrEmpty (filename)) {  	using (var filestream = new FileStream (filename' FileMode.CreateNew)) {  		int count;  		var buffer = new byte[8192];  		while ((count = stream.Read (buffer' 0' buffer.Length)) > 0) {  			filestream.Write (buffer' 0' count);  		}  	}  } else {  	var encoding = string.IsNullOrEmpty (CharacterSet) ? Encoding.UTF8 : Encoding.GetEncoding (CharacterSet);  	using (var reader = new StreamReader (stream' encoding)) {  		RawText = reader.ReadToEnd ();  	}  }  
Magic Number,EasyHttp.Http,HttpResponse,F:\newReposMay17\hhariri_EasyHttp\src\EasyHttp\Http\HttpResponse.cs,GetResponse,The following statement contains a magic number: using (var filestream = new FileStream (filename' FileMode.CreateNew)) {  	int count;  	var buffer = new byte[8192];  	while ((count = stream.Read (buffer' 0' buffer.Length)) > 0) {  		filestream.Write (buffer' 0' count);  	}  }  
