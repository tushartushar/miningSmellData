Implementation smell,Namespace,Class,File,Method,Description
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The method has 343 lines of code.
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The method has 351 lines of code.
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The method has 202 lines of code.
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The method has 202 lines of code.
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The method has 106 lines of code.
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The method has 130 lines of code.
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The method has 155 lines of code.
Long Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The method has 179 lines of code.
Complex Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,Cyclomatic complexity of the method is 9
Complex Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,Cyclomatic complexity of the method is 9
Complex Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,Cyclomatic complexity of the method is 11
Complex Method,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,Cyclomatic complexity of the method is 11
Complex Method,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,Cyclomatic complexity of the method is 12
Long Parameter List,cadencii.java.awt,BasicStroke,C:\repos\cadencii_cadencii\src\cadencii.core\awt.cs,BasicStroke,The method has 6 parameters. Parameters: width' cap' join' miterlimit' dash' dash_phase
Long Parameter List,cadencii.java.awt.geom,BasicStroke,C:\repos\cadencii_cadencii\src\cadencii.core\awt.cs,BasicStroke,The method has 6 parameters. Parameters: width' cap' join' miterlimit' dash' dash_phase
Long Parameter List,cadencii.java,AffineTransform,C:\repos\cadencii_cadencii\src\cadencii.core\awt.geom.cs,AffineTransform,The method has 6 parameters. Parameters: m00' m10' m01' m11' m02' m12
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cdft,The method has 5 parameters. Parameters: n' isgn' a' ip' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The method has 5 parameters. Parameters: n' isgn' a' ip' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The method has 5 parameters. Parameters: n' isgn' a' ip' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The method has 5 parameters. Parameters: n' isgn' a' ip' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The method has 5 parameters. Parameters: n' a' t' ip' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The method has 5 parameters. Parameters: n' a' t' ip' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The method has 5 parameters. Parameters: n' a' ip' nw' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The method has 5 parameters. Parameters: n' a' ip' nw' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The method has 6 parameters. Parameters: n' j' k' a' nw' w
Long Parameter List,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The method has 5 parameters. Parameters: n' isplt' a' nw' w
Long Parameter List,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,drawBezier,The method has 9 parameters. Parameters: g' x1' y1' ctrlx1' ctrly1' ctrlx2' ctrly2' x2' y2
Long Parameter List,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,drawStringEx,The method has 6 parameters. Parameters: g1' s' font' rect' align' valign
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,__midiInOpen,The method has 5 parameters. Parameters: lphMidiIn' uDeviceID' dwCallback' dwCallbackInstance' dwFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,__so_midiInOpen,The method has 5 parameters. Parameters: lphMidiIn' uDeviceID' dwCallback' dwCallbackInstance' dwFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,midiInOpen,The method has 5 parameters. Parameters: lphMidiIn' uDeviceID' dwCallback' dwCallbackInstance' dwFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,__midiOutOpen,The method has 5 parameters. Parameters: lphMidiOut' uDeviceID' dwCallback' dwInstance' dwFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,__so_midiOutOpen,The method has 5 parameters. Parameters: lphMidiOut' uDeviceID' dwCallback' dwInstance' dwFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,midiOutOpen,The method has 5 parameters. Parameters: lphMidiOut' uDeviceID' dwCallback' dwInstance' dwFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,waveOutOpen,The method has 6 parameters. Parameters: hWaveOut' uDeviceID' lpFormat' dwCallback' dwInstance' dwFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,RegOpenKeyExW,The method has 5 parameters. Parameters: hKey' pSubKey' ulOptions' samDesired' phkResult
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,RegEnumKeyExW,The method has 8 parameters. Parameters: hKey' dwIndex' pName' pcbName' pReserved' pClass' pcbClass' pftLastWrite
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,RegQueryValueExW,The method has 6 parameters. Parameters: hKey' pValueName' pReserved' pType' pData' pcbData
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,CreateFileW,The method has 7 parameters. Parameters: lpFileName' dwDesiredAccess' dwShareMode' lpSecurityAttributes' dwCreationDisposition' dwFlagsAndAttributes' hTemplateFile
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,DeviceIoControl,The method has 8 parameters. Parameters: hDevice' dwIoControlCode' lpInBuffer' nInBufferSize' lpOutBuffer' nOutBufferSize' lpBytesReturned' lpOverlapped
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,GetProfileString,The method has 5 parameters. Parameters: lpAppName' lpKeyName' lpDefault' lpReturnedString' nSize
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbSizeFileInfo' uFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,CreateWindowEx,The method has 12 parameters. Parameters: dwExStyle' lpClassName' lpWindowName' dwStyle' x' y' nWidth' nHeight' hWndParent' hMenu' hInstance' lpParam
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' X' Y' nWidth' nHeight' bRepaint
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,PeekMessage,The method has 5 parameters. Parameters: msg' hWnd' wFilterMin' wFilterMax' wFlag
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,TrackPopupMenu,The method has 7 parameters. Parameters: hMenu' uFlags' x' y' nReserved' hWnd' prcRect
Long Parameter List,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,ImageList_Create,The method has 5 parameters. Parameters: cx' cy' flags' cInitial' cGrow
Long Parameter List,cadencii.javax.sound.midi,MidiDeviceInfoImpl,C:\repos\cadencii_cadencii\src\cadencii.core\sound.midi.cs,MidiDeviceInfoImpl,The method has 6 parameters. Parameters: name' vendor' description' version' is_midi_in' index
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter LOAD_LIBRARY_AS_IMAGE_RESOURCE is 30.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE is 34.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter MAXIMUM_REPARSE_DATA_BUFFER_SIZE is 32.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter REG_RESOURCE_REQUIREMENTS_LIST is 30.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_NUMBEROF_DIRECTORY_ENTRIES is 32.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_RESOURCE is 30.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_EXCEPTION is 31.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_SECURITY is 30.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_BASERELOC is 31.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_COPYRIGHT is 31.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_ARCHITECTURE is 34.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_GLOBALPTR is 31.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG is 33.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT is 34.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT is 34.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR is 36.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_FILE_LOCAL_SYMS_STRIPPED is 30.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_FILE_LARGE_ADDRESS_AWARE is 30.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP is 34.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter FILE_ATTRIBUTE_NOT_CONTENT_INDEXED is 34.
Long Identifier,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,,The length of the parameter FILE_ATTRIBUTE_VALID_SET_FLAGS is 30.
Long Statement,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The length of the statement  "            return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]); " is 260.
Long Statement,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The length of the statement  "            return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]); " is 260.
Long Statement,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_le,The length of the statement  "            return (long)((long)((long)((long)(((0xff & buf[index + 3]) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index]); " is 154.
Long Statement,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_be,The length of the statement  "            return (long)((long)((long)((long)(((0xff & buf[index]) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 3]); " is 154.
Long Statement,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,drawStringEx,The length of the statement  "            g1.nativeGraphics.DrawString( s' font.font' g1.brush' new System.Drawing.RectangleF( rect.x' rect.y' rect.width' rect.height )' mStringFormat ); " is 144.
Long Statement,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,splitStringCorA,The length of the statement  "            return s.Split( separator' count' (ignore_empty_entries ? StringSplitOptions.RemoveEmptyEntries : StringSplitOptions.None) ); " is 125.
Long Statement,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,ToString,The length of the statement  "            return "{biSize=" + biSize + "' biWidth=" + biWidth + "' biHeight=" + biHeight + "' biPlanes=" + biPlanes + "' biBitCount=" + biBitCount + " is 138.
Long Statement,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,ToString,The length of the statement  "                   "' biCompression=" + biCompression + "' biSizeImage=" + biSizeImage + "' biXPelsPerMeter=" + biXPelsPerMeter + "' biYPelsPerMeter=" + biYPelsPerMeter + " is 151.
Empty Catch Block,cadencii,debug,C:\repos\cadencii_cadencii\src\cadencii.core\Misc.cs,force_logfile_path,The method has an empty catch block.
Empty Catch Block,cadencii.java.io,File,C:\repos\cadencii_cadencii\src\cadencii.core\io.cs,canRead,The method has an empty catch block.
Empty Catch Block,cadencii.java.io,File,C:\repos\cadencii_cadencii\src\cadencii.core\io.cs,canWrite,The method has an empty catch block.
Empty Catch Block,cadencii.java.io,File,C:\repos\cadencii_cadencii\src\cadencii.core\io.cs,delete,The method has an empty catch block.
Empty Catch Block,cadencii.java.io,File,C:\repos\cadencii_cadencii\src\cadencii.core\io.cs,mkdir,The method has an empty catch block.
Empty Catch Block,cadencii.java.io,File,C:\repos\cadencii_cadencii\src\cadencii.core\io.cs,renameTo,The method has an empty catch block.
Empty Catch Block,cadencii.java.io,File,C:\repos\cadencii_cadencii\src\cadencii.core\io.cs,setLastModified,The method has an empty catch block.
Magic Number,cadencii.java.awt,BasicStroke,C:\repos\cadencii_cadencii\src\cadencii.core\awt.cs,BasicStroke,The following statement contains a magic number: if ( cap == 1 ) {                  linecap = System.Drawing.Drawing2D.LineCap.Round;              } else if ( cap == 2 ) {                  linecap = System.Drawing.Drawing2D.LineCap.Square;              }
Magic Number,cadencii.java.awt,BasicStroke,C:\repos\cadencii_cadencii\src\cadencii.core\awt.cs,BasicStroke,The following statement contains a magic number: if ( join == 1 ) {                  linejoin = System.Drawing.Drawing2D.LineJoin.Round;              } else if ( join == 2 ) {                  linejoin = System.Drawing.Drawing2D.LineJoin.Bevel;              }
Magic Number,cadencii.java.awt.geom,BasicStroke,C:\repos\cadencii_cadencii\src\cadencii.core\awt.cs,BasicStroke,The following statement contains a magic number: if ( cap == 1 ) {                  linecap = System.Drawing.Drawing2D.LineCap.Round;              } else if ( cap == 2 ) {                  linecap = System.Drawing.Drawing2D.LineCap.Square;              }
Magic Number,cadencii.java.awt.geom,BasicStroke,C:\repos\cadencii_cadencii\src\cadencii.core\awt.cs,BasicStroke,The following statement contains a magic number: if ( join == 1 ) {                  linejoin = System.Drawing.Drawing2D.LineJoin.Round;              } else if ( join == 2 ) {                  linejoin = System.Drawing.Drawing2D.LineJoin.Bevel;              }
Magic Number,cadencii,cp932,C:\repos\cadencii_cadencii\src\cadencii.core\cp932.cs,init,The following statement contains a magic number: try {                  m_cp932 = Encoding.GetEncoding( 932 );                  m_cp932_available = true;              } catch {                  m_cp932_available = false;              }
Magic Number,cadencii,cp932,C:\repos\cadencii_cadencii\src\cadencii.core\cp932.cs,convert,The following statement contains a magic number: if ( m_cp932_available ) {                  return m_cp932.GetBytes( str );              } else {                  char[] arr = str.ToCharArray();                  List<byte> list = new List<byte>();                  for ( int i = 0; i < arr.Length; i++ ) {  #if DEBUG                      System.Diagnostics.Debug.WriteLine( "arr[i]=" + arr[i] );  #endif                      if ( _DICT.ContainsKey( (int)arr[i] ) ) {                          int t = _DICT[(int)arr[i]];                          if ( t > 0xff ) {                              byte b1 = (byte)(t >> 8);                              byte b2 = (byte)(t - (b1 << 8));                              list.Add( b1 );                              list.Add( b2 );                          } else {                              list.Add( (byte)t );                          }                      } else {                          list.Add( 0x63 );                      }                  }                  return list.ToArray();              }
Magic Number,cadencii,cp932,C:\repos\cadencii_cadencii\src\cadencii.core\cp932.cs,convert,The following statement contains a magic number: if ( m_cp932_available ) {                  return m_cp932.GetBytes( str );              } else {                  char[] arr = str.ToCharArray();                  List<byte> list = new List<byte>();                  for ( int i = 0; i < arr.Length; i++ ) {  #if DEBUG                      System.Diagnostics.Debug.WriteLine( "arr[i]=" + arr[i] );  #endif                      if ( _DICT.ContainsKey( (int)arr[i] ) ) {                          int t = _DICT[(int)arr[i]];                          if ( t > 0xff ) {                              byte b1 = (byte)(t >> 8);                              byte b2 = (byte)(t - (b1 << 8));                              list.Add( b1 );                              list.Add( b2 );                          } else {                              list.Add( (byte)t );                          }                      } else {                          list.Add( 0x63 );                      }                  }                  return list.ToArray();              }
Magic Number,cadencii,cp932,C:\repos\cadencii_cadencii\src\cadencii.core\cp932.cs,convert,The following statement contains a magic number: if ( m_cp932_available ) {                  char[] res = m_cp932.GetChars( dat );                  return new string( res );              } else {                  StringBuilder sb = new StringBuilder();                  int i = 0;                  while ( i < dat.Length ) {                      int b1 = dat[i];                      bool found = false;                      foreach ( int key in _DICT.Keys ) {                          int test = _DICT[key];                          if ( b1 == test ) {                              found = true;                              sb.Append( ((char)key).ToString() );                              break;                          }                      }                      i++;                      if ( !found && i < dat.Length ) {                          int b2 = (dat[i - 1] << 8) + dat[i];                          foreach ( int key in _DICT.Keys ) {                              int test = _DICT[key];                              if ( test == b2 ) {                                  sb.Append( ((char)key).ToString() );                                  break;                              }                          }                          i++;                      }                  }                  return sb.ToString();              }
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,RND,The following statement contains a magic number: seed = (seed * 7141 + 54773) % 259200;
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,RND,The following statement contains a magic number: seed = (seed * 7141 + 54773) % 259200;
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,RND,The following statement contains a magic number: seed = (seed * 7141 + 54773) % 259200;
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,RND,The following statement contains a magic number: return seed * (1.0 / 259200.0);
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: int[] ip_ = new int[NMAXSQRT + 2];
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: double[] w_ = new double[NMAX * 5 / 4];
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: double[] w_ = new double[NMAX * 5 / 4];
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: double[] t_ = new double[NMAX / 2 + 1];
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: fixed ( int* ip = &ip_[0] )              fixed ( double* a = &a_[0] )              fixed ( double* w = &w_[0] )              fixed ( double* t = &t_[0] ) {                    Console.WriteLine( "data length n=? (must be 2^m)" );                  string ret = Console.ReadLine();                  n = int.Parse( ret );                  ip[0] = 0;                    int np = 100;                    using ( System.IO.StreamWriter sw = new System.IO.StreamWriter( @"c:\rdft_data.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          double x = (double)i / (double)n;                          a_[i] = Math.Sin( x * np * Math.PI ) + Math.Sin( x * np * 2 * Math.PI ) + Math.Sin( x * np * 3 * Math.PI );                          sw.WriteLine( a_[i] );                      }                  }                    /* check of CDFT                  putdata( 0' n - 1' a );                  fft.cdft( n' 1' a' ip' w );                  fft.cdft( n' -1' a' ip' w );                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "cdft err= {0}"' err );*/                    /* check of RDFT */                  //putdata( 0' n - 1' a );                  fft.rdft( n' 1' a' ip' w );                  using ( System.IO.StreamWriter sw_a = new System.IO.StreamWriter( @"c:\rdft_a.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          sw_a.WriteLine( a[i] );                      }                  }                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "rdft err= {0}"' err );                    /* check of DDCT                   putdata( 0' n - 1' a );                  fft.ddct( n' 1' a' ip' w );                  fft.ddct( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddct err= {0}"' err );*/                    /* check of DDST                   putdata( 0' n - 1' a );                  fft.ddst( n' 1' a' ip' w );                  fft.ddst( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddst err= {0} \n"' err );*/                    /* check of DFCT                  putdata( 0' n' a );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  err = errorcheck( 0' n' 2.0 / n' a );                  Console.WriteLine( "dfct err= {0}"' err );*/                    /* check of DFST                   putdata( 1' n - 1' a );                  fft.dfst( n' a' t' ip' w );                  fft.dfst( n' a' t' ip' w );                  err = errorcheck( 1' n - 1' 2.0 / n' a );                  Console.WriteLine( "dfst err= {0}"' err );*/              }
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: fixed ( int* ip = &ip_[0] )              fixed ( double* a = &a_[0] )              fixed ( double* w = &w_[0] )              fixed ( double* t = &t_[0] ) {                    Console.WriteLine( "data length n=? (must be 2^m)" );                  string ret = Console.ReadLine();                  n = int.Parse( ret );                  ip[0] = 0;                    int np = 100;                    using ( System.IO.StreamWriter sw = new System.IO.StreamWriter( @"c:\rdft_data.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          double x = (double)i / (double)n;                          a_[i] = Math.Sin( x * np * Math.PI ) + Math.Sin( x * np * 2 * Math.PI ) + Math.Sin( x * np * 3 * Math.PI );                          sw.WriteLine( a_[i] );                      }                  }                    /* check of CDFT                  putdata( 0' n - 1' a );                  fft.cdft( n' 1' a' ip' w );                  fft.cdft( n' -1' a' ip' w );                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "cdft err= {0}"' err );*/                    /* check of RDFT */                  //putdata( 0' n - 1' a );                  fft.rdft( n' 1' a' ip' w );                  using ( System.IO.StreamWriter sw_a = new System.IO.StreamWriter( @"c:\rdft_a.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          sw_a.WriteLine( a[i] );                      }                  }                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "rdft err= {0}"' err );                    /* check of DDCT                   putdata( 0' n - 1' a );                  fft.ddct( n' 1' a' ip' w );                  fft.ddct( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddct err= {0}"' err );*/                    /* check of DDST                   putdata( 0' n - 1' a );                  fft.ddst( n' 1' a' ip' w );                  fft.ddst( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddst err= {0} \n"' err );*/                    /* check of DFCT                  putdata( 0' n' a );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  err = errorcheck( 0' n' 2.0 / n' a );                  Console.WriteLine( "dfct err= {0}"' err );*/                    /* check of DFST                   putdata( 1' n - 1' a );                  fft.dfst( n' a' t' ip' w );                  fft.dfst( n' a' t' ip' w );                  err = errorcheck( 1' n - 1' 2.0 / n' a );                  Console.WriteLine( "dfst err= {0}"' err );*/              }
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: fixed ( int* ip = &ip_[0] )              fixed ( double* a = &a_[0] )              fixed ( double* w = &w_[0] )              fixed ( double* t = &t_[0] ) {                    Console.WriteLine( "data length n=? (must be 2^m)" );                  string ret = Console.ReadLine();                  n = int.Parse( ret );                  ip[0] = 0;                    int np = 100;                    using ( System.IO.StreamWriter sw = new System.IO.StreamWriter( @"c:\rdft_data.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          double x = (double)i / (double)n;                          a_[i] = Math.Sin( x * np * Math.PI ) + Math.Sin( x * np * 2 * Math.PI ) + Math.Sin( x * np * 3 * Math.PI );                          sw.WriteLine( a_[i] );                      }                  }                    /* check of CDFT                  putdata( 0' n - 1' a );                  fft.cdft( n' 1' a' ip' w );                  fft.cdft( n' -1' a' ip' w );                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "cdft err= {0}"' err );*/                    /* check of RDFT */                  //putdata( 0' n - 1' a );                  fft.rdft( n' 1' a' ip' w );                  using ( System.IO.StreamWriter sw_a = new System.IO.StreamWriter( @"c:\rdft_a.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          sw_a.WriteLine( a[i] );                      }                  }                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "rdft err= {0}"' err );                    /* check of DDCT                   putdata( 0' n - 1' a );                  fft.ddct( n' 1' a' ip' w );                  fft.ddct( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddct err= {0}"' err );*/                    /* check of DDST                   putdata( 0' n - 1' a );                  fft.ddst( n' 1' a' ip' w );                  fft.ddst( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddst err= {0} \n"' err );*/                    /* check of DFCT                  putdata( 0' n' a );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  err = errorcheck( 0' n' 2.0 / n' a );                  Console.WriteLine( "dfct err= {0}"' err );*/                    /* check of DFST                   putdata( 1' n - 1' a );                  fft.dfst( n' a' t' ip' w );                  fft.dfst( n' a' t' ip' w );                  err = errorcheck( 1' n - 1' 2.0 / n' a );                  Console.WriteLine( "dfst err= {0}"' err );*/              }
Magic Number,cadencii,fft_test,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,test,The following statement contains a magic number: fixed ( int* ip = &ip_[0] )              fixed ( double* a = &a_[0] )              fixed ( double* w = &w_[0] )              fixed ( double* t = &t_[0] ) {                    Console.WriteLine( "data length n=? (must be 2^m)" );                  string ret = Console.ReadLine();                  n = int.Parse( ret );                  ip[0] = 0;                    int np = 100;                    using ( System.IO.StreamWriter sw = new System.IO.StreamWriter( @"c:\rdft_data.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          double x = (double)i / (double)n;                          a_[i] = Math.Sin( x * np * Math.PI ) + Math.Sin( x * np * 2 * Math.PI ) + Math.Sin( x * np * 3 * Math.PI );                          sw.WriteLine( a_[i] );                      }                  }                    /* check of CDFT                  putdata( 0' n - 1' a );                  fft.cdft( n' 1' a' ip' w );                  fft.cdft( n' -1' a' ip' w );                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "cdft err= {0}"' err );*/                    /* check of RDFT */                  //putdata( 0' n - 1' a );                  fft.rdft( n' 1' a' ip' w );                  using ( System.IO.StreamWriter sw_a = new System.IO.StreamWriter( @"c:\rdft_a.txt" ) ) {                      for ( int i = 0; i < n; i++ ) {                          sw_a.WriteLine( a[i] );                      }                  }                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "rdft err= {0}"' err );                    /* check of DDCT                   putdata( 0' n - 1' a );                  fft.ddct( n' 1' a' ip' w );                  fft.ddct( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddct err= {0}"' err );*/                    /* check of DDST                   putdata( 0' n - 1' a );                  fft.ddst( n' 1' a' ip' w );                  fft.ddst( n' -1' a' ip' w );                  a[0] *= 0.5;                  err = errorcheck( 0' n - 1' 2.0 / n' a );                  Console.WriteLine( "ddst err= {0} \n"' err );*/                    /* check of DFCT                  putdata( 0' n' a );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  a[0] *= 0.5;                  a[n] *= 0.5;                  fft.dfct( n' a' t' ip' w );                  err = errorcheck( 0' n' 2.0 / n' a );                  Console.WriteLine( "dfct err= {0}"' err );*/                    /* check of DFST                   putdata( 1' n - 1' a );                  fft.dfst( n' a' t' ip' w );                  fft.dfst( n' a' t' ip' w );                  err = errorcheck( 1' n - 1' 2.0 / n' a );                  Console.WriteLine( "dfst err= {0}"' err );*/              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cdft,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cdft,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( n > (nc << 2) ) {                  nc = n >> 2;                  makect( nc' ip' w + nw );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( n > (nc << 2) ) {                  nc = n >> 2;                  makect( nc' ip' w + nw );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xi = a[0] - a[1];                  a[0] += a[1];                  a[1] = xi;              } else {                  a[1] = 0.5 * (a[0] - a[1]);                  a[0] -= a[1];                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xi = a[0] - a[1];                  a[0] += a[1];                  a[1] = xi;              } else {                  a[1] = 0.5 * (a[0] - a[1]);                  a[0] -= a[1];                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xi = a[0] - a[1];                  a[0] += a[1];                  a[1] = xi;              } else {                  a[1] = 0.5 * (a[0] - a[1]);                  a[0] -= a[1];                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xi = a[0] - a[1];                  a[0] += a[1];                  a[1] = xi;              } else {                  a[1] = 0.5 * (a[0] - a[1]);                  a[0] -= a[1];                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rdft,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xi = a[0] - a[1];                  a[0] += a[1];                  a[1] = xi;              } else {                  a[1] = 0.5 * (a[0] - a[1]);                  a[0] -= a[1];                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = a[j] - a[j - 1];                      a[j] += a[j - 1];                  }                  a[1] = a[0] - xr;                  a[0] += xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = a[j] - a[j - 1];                      a[j] += a[j - 1];                  }                  a[1] = a[0] - xr;                  a[0] += xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = a[j] - a[j - 1];                      a[j] += a[j - 1];                  }                  a[1] = a[0] - xr;                  a[0] += xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = a[j] - a[j - 1];                      a[j] += a[j - 1];                  }                  a[1] = a[0] - xr;                  a[0] += xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = a[j] - a[j - 1];                      a[j] += a[j - 1];                  }                  a[1] = a[0] - xr;                  a[0] += xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = a[j] - a[j + 1];                      a[j] += a[j + 1];                  }                  a[n - 1] = xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = a[j] - a[j + 1];                      a[j] += a[j + 1];                  }                  a[n - 1] = xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = a[j] - a[j + 1];                      a[j] += a[j + 1];                  }                  a[n - 1] = xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddct,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = a[j] - a[j + 1];                      a[j] += a[j + 1];                  }                  a[n - 1] = xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( n > (nw << 2) ) {                  nw = n >> 2;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = -a[j] - a[j - 1];                      a[j] -= a[j - 1];                  }                  a[1] = a[0] + xr;                  a[0] -= xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = -a[j] - a[j - 1];                      a[j] -= a[j - 1];                  }                  a[1] = a[0] + xr;                  a[0] -= xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = -a[j] - a[j - 1];                      a[j] -= a[j - 1];                  }                  a[1] = a[0] + xr;                  a[0] -= xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = -a[j] - a[j - 1];                      a[j] -= a[j - 1];                  }                  a[1] = a[0] + xr;                  a[0] -= xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn < 0 ) {                  xr = a[n - 1];                  for ( j = n - 2; j >= 2; j -= 2 ) {                      a[j + 1] = -a[j] - a[j - 1];                      a[j] -= a[j - 1];                  }                  a[1] = a[0] + xr;                  a[0] -= xr;                  if ( n > 4 ) {                      rftbsub( n' a' nc' w + nw );                      cftbsub( n' a' ip' nw' w );                  } else if ( n == 4 ) {                      cftbsub( n' a' ip' nw' w );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = -a[j] - a[j + 1];                      a[j] -= a[j + 1];                  }                  a[n - 1] = -xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = -a[j] - a[j + 1];                      a[j] -= a[j + 1];                  }                  a[n - 1] = -xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = -a[j] - a[j + 1];                      a[j] -= a[j + 1];                  }                  a[n - 1] = -xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,ddst,The following statement contains a magic number: if ( isgn >= 0 ) {                  if ( n > 4 ) {                      cftfsub( n' a' ip' nw' w );                      rftfsub( n' a' nc' w + nw );                  } else if ( n == 4 ) {                      cftfsub( n' a' ip' nw' w );                  }                  xr = a[0] - a[1];                  a[0] += a[1];                  for ( j = 2; j < n; j += 2 ) {                      a[j - 1] = -a[j] - a[j + 1];                      a[j] -= a[j + 1];                  }                  a[n - 1] = -xr;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > (nw << 3) ) {                  nw = n >> 3;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > (nw << 3) ) {                  nw = n >> 3;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfct,The following statement contains a magic number: if ( n > 2 ) {                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] - a[n - j];                      xi = a[j] + a[n - j];                      yr = a[k] - a[n - k];                      yi = a[k] + a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi - yi;                      t[k] = xi + yi;                  }                  t[mh] = a[mh] + a[n - mh];                  a[mh] -= a[n - mh];                  dctsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[0] - a[1];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] + a[j + 1];                      a[2 * j - 1] = a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dctsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[0] - t[1];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = t[j] - t[j + 1];                          a[k + l] = t[j] + t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 0; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] - t[m + j];                          t[k] = t[m + k] + t[m + j];                      }                      t[mh] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];                  a[n] = t[2] - t[1];                  a[0] = t[2] + t[1];              } else {                  a[1] = a[0];                  a[2] = t[0];                  a[0] = t[1];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > (nw << 3) ) {                  nw = n >> 3;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > (nw << 3) ) {                  nw = n >> 3;                  makewt( nw' ip' w );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,dfst,The following statement contains a magic number: if ( n > 2 ) {                  m = n >> 1;                  mh = m >> 1;                  for ( j = 1; j < mh; j++ ) {                      k = m - j;                      xr = a[j] + a[n - j];                      xi = a[j] - a[n - j];                      yr = a[k] + a[n - k];                      yi = a[k] - a[n - k];                      a[j] = xr;                      a[k] = yr;                      t[j] = xi + yi;                      t[k] = xi - yi;                  }                  t[0] = a[mh] - a[n - mh];                  a[mh] += a[n - mh];                  a[0] = a[m];                  dstsub( m' a' nc' w + nw );                  if ( m > 4 ) {                      cftfsub( m' a' ip' nw' w );                      rftfsub( m' a' nc' w + nw );                  } else if ( m == 4 ) {                      cftfsub( m' a' ip' nw' w );                  }                  a[n - 1] = a[1] - a[0];                  a[1] = a[0] + a[1];                  for ( j = m - 2; j >= 2; j -= 2 ) {                      a[2 * j + 1] = a[j] - a[j + 1];                      a[2 * j - 1] = -a[j] - a[j + 1];                  }                  l = 2;                  m = mh;                  while ( m >= 2 ) {                      dstsub( m' t' nc' w + nw );                      if ( m > 4 ) {                          cftfsub( m' t' ip' nw' w );                          rftfsub( m' t' nc' w + nw );                      } else if ( m == 4 ) {                          cftfsub( m' t' ip' nw' w );                      }                      a[n - l] = t[1] - t[0];                      a[l] = t[0] + t[1];                      k = 0;                      for ( j = 2; j < m; j += 2 ) {                          k += l << 2;                          a[k - l] = -t[j] - t[j + 1];                          a[k + l] = t[j] - t[j + 1];                      }                      l <<= 1;                      mh = m >> 1;                      for ( j = 1; j < mh; j++ ) {                          k = m - j;                          t[j] = t[m + k] + t[m + j];                          t[k] = t[m + k] - t[m + j];                      }                      t[0] = t[m + mh];                      m = mh;                  }                  a[l] = t[0];              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makewt,The following statement contains a magic number: if ( nw > 2 ) {                  nwh = nw >> 1;                  delta = atan( 1.0 ) / nwh;                  wn4r = cos( delta * nwh );                  w[0] = 1;                  w[1] = wn4r;                  if ( nwh == 4 ) {                      w[2] = cos( delta * 2 );                      w[3] = sin( delta * 2 );                  } else if ( nwh > 4 ) {                      makeipt( nw' ip );                      w[2] = 0.5 / cos( delta * 2 );                      w[3] = 0.5 / cos( delta * 6 );                      for ( j = 4; j < nwh; j += 4 ) {                          w[j] = cos( delta * j );                          w[j + 1] = sin( delta * j );                          w[j + 2] = cos( 3 * delta * j );                          w[j + 3] = -sin( 3 * delta * j );                      }                  }                  nw0 = 0;                  while ( nwh > 2 ) {                      nw1 = nw0 + nwh;                      nwh >>= 1;                      w[nw1] = 1;                      w[nw1 + 1] = wn4r;                      if ( nwh == 4 ) {                          wk1r = w[nw0 + 4];                          wk1i = w[nw0 + 5];                          w[nw1 + 2] = wk1r;                          w[nw1 + 3] = wk1i;                      } else if ( nwh > 4 ) {                          wk1r = w[nw0 + 4];                          wk3r = w[nw0 + 6];                          w[nw1 + 2] = 0.5 / wk1r;                          w[nw1 + 3] = 0.5 / wk3r;                          for ( j = 4; j < nwh; j += 4 ) {                              wk1r = w[nw0 + 2 * j];                              wk1i = w[nw0 + 2 * j + 1];                              wk3r = w[nw0 + 2 * j + 2];                              wk3i = w[nw0 + 2 * j + 3];                              w[nw1 + j] = wk1r;                              w[nw1 + j + 1] = wk1i;                              w[nw1 + j + 2] = wk3r;                              w[nw1 + j + 3] = wk3i;                          }                      }                      nw0 = nw1;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: ip[2] = 0;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: ip[3] = 16;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: ip[3] = 16;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: m = 2;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: for ( l = nw; l > 32; l >>= 2 ) {                  m2 = m << 1;                  q = m2 << 3;                  for ( j = m; j < m2; j++ ) {                      p = ip[j] << 2;                      ip[m + j] = p;                      ip[m2 + j] = p + q;                  }                  m = m2;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: for ( l = nw; l > 32; l >>= 2 ) {                  m2 = m << 1;                  q = m2 << 3;                  for ( j = m; j < m2; j++ ) {                      p = ip[j] << 2;                      ip[m + j] = p;                      ip[m2 + j] = p + q;                  }                  m = m2;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: for ( l = nw; l > 32; l >>= 2 ) {                  m2 = m << 1;                  q = m2 << 3;                  for ( j = m; j < m2; j++ ) {                      p = ip[j] << 2;                      ip[m + j] = p;                      ip[m2 + j] = p + q;                  }                  m = m2;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makeipt,The following statement contains a magic number: for ( l = nw; l > 32; l >>= 2 ) {                  m2 = m << 1;                  q = m2 << 3;                  for ( j = m; j < m2; j++ ) {                      p = ip[j] << 2;                      ip[m + j] = p;                      ip[m2 + j] = p + q;                  }                  m = m2;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makect,The following statement contains a magic number: if ( nc > 1 ) {                  nch = nc >> 1;                  delta = atan( 1.0 ) / nch;                  c[0] = cos( delta * nch );                  c[nch] = 0.5 * c[0];                  for ( j = 1; j < nch; j++ ) {                      c[j] = 0.5 * cos( delta * j );                      c[nc - j] = 0.5 * sin( delta * j );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makect,The following statement contains a magic number: if ( nc > 1 ) {                  nch = nc >> 1;                  delta = atan( 1.0 ) / nch;                  c[0] = cos( delta * nch );                  c[nch] = 0.5 * c[0];                  for ( j = 1; j < nch; j++ ) {                      c[j] = 0.5 * cos( delta * j );                      c[nc - j] = 0.5 * sin( delta * j );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,makect,The following statement contains a magic number: if ( nc > 1 ) {                  nch = nc >> 1;                  delta = atan( 1.0 ) / nch;                  c[0] = cos( delta * nch );                  c[nch] = 0.5 * c[0];                  for ( j = 1; j < nch; j++ ) {                      c[j] = 0.5 * cos( delta * j );                      c[nc - j] = 0.5 * sin( delta * j );                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftf1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216( a );                  } else {                      cftf081( a' w );                      bitrv208( a );                  }              } else if ( n == 8 ) {                  cftf040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftbsub,The following statement contains a magic number: if ( n > 8 ) {                  if ( n > 32 ) {                      cftb1st( n' a' &w[nw - (n >> 2)] );                      if ( n > 512 ) {                          cftrec4( n' a' nw' w );                      } else if ( n > 128 ) {                          cftleaf( n' 1' a' nw' w );                      } else {                          cftfx41( n' a' nw' w );                      }                      bitrv2conj( n' ip' a );                  } else if ( n == 32 ) {                      cftf161( a' &w[nw - 8] );                      bitrv216neg( a );                  } else {                      cftf081( a' w );                      bitrv208neg( a );                  }              } else if ( n == 8 ) {                  cftb040( a );              } else if ( n == 4 ) {                  cftx020( a );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: for ( l = n >> 2; l > 8; l >>= 2 ) {                  m <<= 1;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: for ( l = n >> 2; l > 8; l >>= 2 ) {                  m <<= 1;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: for ( l = n >> 2; l > 8; l >>= 2 ) {                  m <<= 1;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: nm = 4 * m;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = a[j1 + 1];                          yr = a[k1];                          yi = a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 += nm;                      xr = a[j1];                      xi = a[j1 + 1];                      yr = a[k1];                      yi = a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: for ( l = n >> 2; l > 8; l >>= 2 ) {                  m <<= 1;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: for ( l = n >> 2; l > 8; l >>= 2 ) {                  m <<= 1;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: for ( l = n >> 2; l > 8; l >>= 2 ) {                  m <<= 1;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: nm = 4 * m;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The following statement contains a magic number: if ( l == 8 ) {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + 2 * ip[m + k];                          k1 = 4 * k + 2 * ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= 2 * nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + 2 * ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += 2 * nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nm;                      k1 -= nm;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= 2;                      k1 -= nh;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 += nh + 2;                      k1 += nh + 2;                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      j1 -= nh - nm;                      k1 += 2 * nm - 2;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              } else {                  for ( k = 0; k < m; k++ ) {                      for ( j = 0; j < k; j++ ) {                          j1 = 4 * j + ip[m + k];                          k1 = 4 * k + ip[m + j];                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nh;                          k1 += 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += 2;                          k1 += nh;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 += nm;                          k1 += nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nh;                          k1 -= 2;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                          j1 -= nm;                          k1 -= nm;                          xr = a[j1];                          xi = -a[j1 + 1];                          yr = a[k1];                          yi = -a[k1 + 1];                          a[j1] = yr;                          a[j1 + 1] = yi;                          a[k1] = xr;                          a[k1 + 1] = xi;                      }                      k1 = 4 * k + ip[m + k];                      j1 = k1 + 2;                      k1 += nh;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                      j1 += nm;                      k1 += nm;                      a[j1 - 1] = -a[j1 - 1];                      xr = a[j1];                      xi = -a[j1 + 1];                      yr = a[k1];                      yi = -a[k1 + 1];                      a[j1] = yr;                      a[j1 + 1] = yi;                      a[k1] = xr;                      a[k1 + 1] = xi;                      a[k1 + 3] = -a[k1 + 3];                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x1r = a[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x1i = a[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x2r = a[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x2i = a[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x3r = a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x3i = a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x4r = a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x4i = a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x5r = a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x5i = a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x7r = a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x7i = a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x8r = a[16];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x8i = a[17];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x10r = a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x10i = a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x11r = a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x11i = a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x12r = a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x12i = a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x13r = a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x13i = a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x14r = a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: x14i = a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[2] = x8r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[3] = x8i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[4] = x4r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[5] = x4i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[6] = x12r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[7] = x12i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[8] = x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[9] = x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[10] = x10r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[11] = x10i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[14] = x14r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[15] = x14i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[16] = x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[17] = x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[20] = x5r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[21] = x5i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[22] = x13r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[23] = x13i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[24] = x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[25] = x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[26] = x11r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[27] = x11i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[28] = x7r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216,The following statement contains a magic number: a[29] = x7i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x1r = a[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x1i = a[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x2r = a[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x2i = a[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x3r = a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x3i = a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x4r = a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x4i = a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x5r = a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x5i = a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x6r = a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x6i = a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x7r = a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x7i = a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x8r = a[16];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x8i = a[17];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x9r = a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x9i = a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x10r = a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x10i = a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x11r = a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x11i = a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x12r = a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x12i = a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x13r = a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x13i = a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x14r = a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x14i = a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x15r = a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: x15i = a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[2] = x15r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[3] = x15i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[4] = x7r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[5] = x7i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[6] = x11r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[7] = x11i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[8] = x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[9] = x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[10] = x13r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[11] = x13i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[12] = x5r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[13] = x5i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[14] = x9r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[15] = x9i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[16] = x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[17] = x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[18] = x14r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[19] = x14i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[20] = x6r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[21] = x6i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[22] = x10r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[23] = x10i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[24] = x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[25] = x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[26] = x12r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[27] = x12i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[28] = x4r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[29] = x4i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[30] = x8r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv216neg,The following statement contains a magic number: a[31] = x8i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x1r = a[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x1i = a[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x3r = a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x3i = a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x4r = a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x4i = a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x6r = a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: x6i = a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[2] = x4r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[3] = x4i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[6] = x6r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[7] = x6i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[8] = x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[9] = x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[12] = x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208,The following statement contains a magic number: a[13] = x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x1r = a[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x1i = a[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x2r = a[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x2i = a[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x3r = a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x3i = a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x4r = a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x4i = a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x5r = a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x5i = a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x6r = a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x6i = a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x7r = a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: x7i = a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[2] = x7r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[3] = x7i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[4] = x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[5] = x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[6] = x5r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[7] = x5i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[8] = x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[9] = x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[10] = x6r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[11] = x6i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[12] = x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[13] = x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[14] = x4r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv208neg,The following statement contains a magic number: a[15] = x4i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: mh = n >> 3;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: m = 2 * mh;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: csc1 = w[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: csc3 = w[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = a[j + 3] + a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = a[j + 3] - a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = a[j0 - 1] + a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = a[j0 - 1] - a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i + y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i - y2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r - y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r + y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x0r = a[j0 - 2] + a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x0r = a[j0 - 2] + a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x1r = a[j0 - 2] - a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x1r = a[j0 - 2] - a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x2r = a[j1 - 2] + a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x2r = a[j1 - 2] + a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x3r = a[j1 - 2] - a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x3r = a[j1 - 2] - a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j0 - 2] = x0r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j1 - 2] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j2 - 2] = wk1r * x0r - wk1i * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j3 - 2] = wk3r * x0r + wk3i * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x0r = a[j0 + 2] + a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x0r = a[j0 + 2] + a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x0i = a[j0 + 3] + a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x0i = a[j0 + 3] + a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x1r = a[j0 + 2] - a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x1r = a[j0 + 2] - a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x1i = a[j0 + 3] - a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x1i = a[j0 + 3] - a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x2r = a[j1 + 2] + a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x2r = a[j1 + 2] + a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x2i = a[j1 + 3] + a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x2i = a[j1 + 3] + a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x3r = a[j1 + 2] - a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x3r = a[j1 + 2] - a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x3i = a[j1 + 3] - a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: x3i = a[j1 + 3] - a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j0 + 2] = x0r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j0 + 3] = x0i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j1 + 2] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j1 + 3] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j2 + 2] = wk1i * x0r - wk1r * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j2 + 3] = wk1i * x0i + wk1r * x0r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j3 + 2] = wk3i * x0r + wk3r * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf1st,The following statement contains a magic number: a[j3 + 3] = wk3i * x0i - wk3r * x0r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: mh = n >> 3;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: m = 2 * mh;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: csc1 = w[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: csc3 = w[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: for ( j = 2; j < mh - 2; j += 4 ) {                  k += 4;                  wk1r = csc1 * (wd1r + w[k]);                  wk1i = csc1 * (wd1i + w[k + 1]);                  wk3r = csc3 * (wd3r + w[k + 2]);                  wk3i = csc3 * (wd3i + w[k + 3]);                  wd1r = w[k];                  wd1i = w[k + 1];                  wd3r = w[k + 2];                  wd3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = -a[j + 1] - a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = -a[j + 1] + a[j2 + 1];                  y0r = a[j + 2] + a[j2 + 2];                  y0i = -a[j + 3] - a[j2 + 3];                  y1r = a[j + 2] - a[j2 + 2];                  y1i = -a[j + 3] + a[j2 + 3];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 + 2] + a[j3 + 2];                  y2i = a[j1 + 3] + a[j3 + 3];                  y3r = a[j1 + 2] - a[j3 + 2];                  y3i = a[j1 + 3] - a[j3 + 3];                  a[j] = x0r + x2r;                  a[j + 1] = x0i - x2i;                  a[j + 2] = y0r + y2r;                  a[j + 3] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 + 2] = y0r - y2r;                  a[j1 + 3] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 + 2] = wd1r * x0r - wd1i * x0i;                  a[j2 + 3] = wd1r * x0i + wd1i * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 + 2] = wd3r * x0r + wd3i * x0i;                  a[j3 + 3] = wd3r * x0i - wd3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = -a[j0 + 1] - a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = -a[j0 + 1] + a[j2 + 1];                  y0r = a[j0 - 2] + a[j2 - 2];                  y0i = -a[j0 - 1] - a[j2 - 1];                  y1r = a[j0 - 2] - a[j2 - 2];                  y1i = -a[j0 - 1] + a[j2 - 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  y2r = a[j1 - 2] + a[j3 - 2];                  y2i = a[j1 - 1] + a[j3 - 1];                  y3r = a[j1 - 2] - a[j3 - 2];                  y3i = a[j1 - 1] - a[j3 - 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i - x2i;                  a[j0 - 2] = y0r + y2r;                  a[j0 - 1] = y0i - y2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i + x2i;                  a[j1 - 2] = y0r - y2r;                  a[j1 - 1] = y0i + y2i;                  x0r = x1r + x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = y1r + y3i;                  x0i = y1i + y3r;                  a[j2 - 2] = wd1i * x0r - wd1r * x0i;                  a[j2 - 1] = wd1i * x0i + wd1r * x0r;                  x0r = x1r - x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;                  x0r = y1r - y3i;                  x0i = y1i - y3r;                  a[j3 - 2] = wd3i * x0r + wd3r * x0i;                  a[j3 - 1] = wd3i * x0i - wd3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x0r = a[j0 - 2] + a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x0r = a[j0 - 2] + a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x1r = a[j0 - 2] - a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x1r = a[j0 - 2] - a[j2 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x2r = a[j1 - 2] + a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x2r = a[j1 - 2] + a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x3r = a[j1 - 2] - a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x3r = a[j1 - 2] - a[j3 - 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j0 - 2] = x0r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j1 - 2] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j2 - 2] = wk1r * x0r - wk1i * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j3 - 2] = wk3r * x0r + wk3i * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x0r = a[j0 + 2] + a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x0r = a[j0 + 2] + a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x0i = -a[j0 + 3] - a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x0i = -a[j0 + 3] - a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x1r = a[j0 + 2] - a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x1r = a[j0 + 2] - a[j2 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x1i = -a[j0 + 3] + a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x1i = -a[j0 + 3] + a[j2 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x2r = a[j1 + 2] + a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x2r = a[j1 + 2] + a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x2i = a[j1 + 3] + a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x2i = a[j1 + 3] + a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x3r = a[j1 + 2] - a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x3r = a[j1 + 2] - a[j3 + 2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x3i = a[j1 + 3] - a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: x3i = a[j1 + 3] - a[j3 + 3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j0 + 2] = x0r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j0 + 3] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j1 + 2] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j1 + 3] = x0i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j2 + 2] = wk1i * x0r - wk1r * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j2 + 3] = wk1i * x0i + wk1r * x0r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j3 + 2] = wk3i * x0r + wk3r * x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb1st,The following statement contains a magic number: a[j3 + 3] = wk3i * x0i - wk3r * x0r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftrec4,The following statement contains a magic number: while ( m > 512 ) {                  m >>= 2;                  cftmdl1( m' &a[n - m]' &w[nw - (m >> 1)] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftrec4,The following statement contains a magic number: while ( m > 512 ) {                  m >>= 2;                  cftmdl1( m' &a[n - m]' &w[nw - (m >> 1)] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cfttree,The following statement contains a magic number: if ( (k & 3) != 0 ) {                  isplt = k & 1;                  if ( isplt != 0 ) {                      cftmdl1( n' &a[j - n]' &w[nw - (n >> 1)] );                  } else {                      cftmdl2( n' &a[j - n]' &w[nw - n] );                  }              } else {                  m = n;                  for ( i = k; (i & 3) == 0; i >>= 2 ) {                      m <<= 2;                  }                  isplt = i & 1;                  if ( isplt != 0 ) {                      while ( m > 128 ) {                          cftmdl1( m' &a[j - m]' &w[nw - (m >> 1)] );                          m >>= 2;                      }                  } else {                      while ( m > 128 ) {                          cftmdl2( m' &a[j - m]' &w[nw - m] );                          m >>= 2;                      }                  }              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftleaf,The following statement contains a magic number: if ( n == 512 ) {                  cftmdl1( 128' a' &w[nw - 64] );                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );                  cftmdl2( 128' &a[128]' &w[nw - 128] );                  cftf161( &a[128]' &w[nw - 8] );                  cftf162( &a[160]' &w[nw - 32] );                  cftf161( &a[192]' &w[nw - 8] );                  cftf162( &a[224]' &w[nw - 32] );                  cftmdl1( 128' &a[256]' &w[nw - 64] );                  cftf161( &a[256]' &w[nw - 8] );                  cftf162( &a[288]' &w[nw - 32] );                  cftf161( &a[320]' &w[nw - 8] );                  cftf161( &a[352]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 128' &a[384]' &w[nw - 64] );                      cftf161( &a[480]' &w[nw - 8] );                  } else {                      cftmdl2( 128' &a[384]' &w[nw - 128] );                      cftf162( &a[480]' &w[nw - 32] );                  }                  cftf161( &a[384]' &w[nw - 8] );                  cftf162( &a[416]' &w[nw - 32] );                  cftf161( &a[448]' &w[nw - 8] );              } else {                  cftmdl1( 64' a' &w[nw - 32] );                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );                  cftmdl2( 64' &a[64]' &w[nw - 64] );                  cftf081( &a[64]' &w[nw - 8] );                  cftf082( &a[80]' &w[nw - 8] );                  cftf081( &a[96]' &w[nw - 8] );                  cftf082( &a[112]' &w[nw - 8] );                  cftmdl1( 64' &a[128]' &w[nw - 32] );                  cftf081( &a[128]' &w[nw - 8] );                  cftf082( &a[144]' &w[nw - 8] );                  cftf081( &a[160]' &w[nw - 8] );                  cftf081( &a[176]' &w[nw - 8] );                  if ( isplt != 0 ) {                      cftmdl1( 64' &a[192]' &w[nw - 32] );                      cftf081( &a[240]' &w[nw - 8] );                  } else {                      cftmdl2( 64' &a[192]' &w[nw - 64] );                      cftf082( &a[240]' &w[nw - 8] );                  }                  cftf081( &a[192]' &w[nw - 8] );                  cftf082( &a[208]' &w[nw - 8] );                  cftf081( &a[224]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The following statement contains a magic number: mh = n >> 3;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The following statement contains a magic number: m = 2 * mh;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl1,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] + a[j2];                  x0i = a[j + 1] + a[j2 + 1];                  x1r = a[j] - a[j2];                  x1i = a[j + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j] = x0r + x2r;                  a[j + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1r * x0r - wk1i * x0i;                  a[j2 + 1] = wk1r * x0i + wk1i * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3r * x0r + wk3i * x0i;                  a[j3 + 1] = wk3r * x0i - wk3i * x0r;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] + a[j2];                  x0i = a[j0 + 1] + a[j2 + 1];                  x1r = a[j0] - a[j2];                  x1i = a[j0 + 1] - a[j2 + 1];                  x2r = a[j1] + a[j3];                  x2i = a[j1 + 1] + a[j3 + 1];                  x3r = a[j1] - a[j3];                  x3i = a[j1 + 1] - a[j3 + 1];                  a[j0] = x0r + x2r;                  a[j0 + 1] = x0i + x2i;                  a[j1] = x0r - x2r;                  a[j1 + 1] = x0i - x2i;                  x0r = x1r - x3i;                  x0i = x1i + x3r;                  a[j2] = wk1i * x0r - wk1r * x0i;                  a[j2 + 1] = wk1i * x0i + wk1r * x0r;                  x0r = x1r + x3i;                  x0i = x1i - x3r;                  a[j3] = wk3i * x0r + wk3r * x0i;                  a[j3 + 1] = wk3i * x0i - wk3r * x0r;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: mh = n >> 3;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: m = 2 * mh;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: kr = 2 * m;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftmdl2,The following statement contains a magic number: for ( j = 2; j < mh; j += 2 ) {                  k += 4;                  wk1r = w[k];                  wk1i = w[k + 1];                  wk3r = w[k + 2];                  wk3i = w[k + 3];                  kr -= 4;                  wd1i = w[kr];                  wd1r = w[kr + 1];                  wd3i = w[kr + 2];                  wd3r = w[kr + 3];                  j1 = j + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j] - a[j2 + 1];                  x0i = a[j + 1] + a[j2];                  x1r = a[j] + a[j2 + 1];                  x1i = a[j + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wk1r * x0r - wk1i * x0i;                  y0i = wk1r * x0i + wk1i * x0r;                  y2r = wd1r * x2r - wd1i * x2i;                  y2i = wd1r * x2i + wd1i * x2r;                  a[j] = y0r + y2r;                  a[j + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wk3r * x1r + wk3i * x1i;                  y0i = wk3r * x1i - wk3i * x1r;                  y2r = wd3r * x3r + wd3i * x3i;                  y2i = wd3r * x3i - wd3i * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;                  j0 = m - j;                  j1 = j0 + m;                  j2 = j1 + m;                  j3 = j2 + m;                  x0r = a[j0] - a[j2 + 1];                  x0i = a[j0 + 1] + a[j2];                  x1r = a[j0] + a[j2 + 1];                  x1i = a[j0 + 1] - a[j2];                  x2r = a[j1] - a[j3 + 1];                  x2i = a[j1 + 1] + a[j3];                  x3r = a[j1] + a[j3 + 1];                  x3i = a[j1 + 1] - a[j3];                  y0r = wd1i * x0r - wd1r * x0i;                  y0i = wd1i * x0i + wd1r * x0r;                  y2r = wk1i * x2r - wk1r * x2i;                  y2i = wk1i * x2i + wk1r * x2r;                  a[j0] = y0r + y2r;                  a[j0 + 1] = y0i + y2i;                  a[j1] = y0r - y2r;                  a[j1 + 1] = y0i - y2i;                  y0r = wd3i * x1r + wd3r * x1i;                  y0i = wd3i * x1i - wd3r * x1r;                  y2r = wk3i * x3r + wk3r * x3i;                  y2i = wk3i * x3i - wk3r * x3r;                  a[j2] = y0r + y2r;                  a[j2 + 1] = y0i + y2i;                  a[j3] = y0r - y2r;                  a[j3 + 1] = y0i - y2i;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftfx41,The following statement contains a magic number: if ( n == 128 ) {                  cftf161( a' &w[nw - 8] );                  cftf162( &a[32]' &w[nw - 32] );                  cftf161( &a[64]' &w[nw - 8] );                  cftf161( &a[96]' &w[nw - 8] );              } else {                  cftf081( a' &w[nw - 8] );                  cftf082( &a[16]' &w[nw - 8] );                  cftf081( &a[32]' &w[nw - 8] );                  cftf081( &a[48]' &w[nw - 8] );              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: wk1r = w[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: wk1i = w[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0r = a[0] + a[16];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0i = a[1] + a[17];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1r = a[0] - a[16];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1i = a[1] - a[17];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[8] + a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[8] + a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[9] + a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[9] + a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[8] - a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[8] - a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[9] - a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[9] - a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0r = a[2] + a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0r = a[2] + a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0i = a[3] + a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0i = a[3] + a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1r = a[2] - a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1r = a[2] - a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1i = a[3] - a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1i = a[3] - a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[10] + a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[10] + a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[11] + a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[11] + a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[10] - a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[10] - a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[11] - a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[11] - a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0r = a[4] + a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0r = a[4] + a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0i = a[5] + a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0i = a[5] + a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1r = a[4] - a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1r = a[4] - a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1i = a[5] - a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1i = a[5] - a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[12] + a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[12] + a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[13] + a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[13] + a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[12] - a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[12] - a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[13] - a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[13] - a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0r = a[6] + a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0r = a[6] + a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0i = a[7] + a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x0i = a[7] + a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1r = a[6] - a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1r = a[6] - a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1i = a[7] - a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x1i = a[7] - a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[14] + a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2r = a[14] + a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[15] + a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x2i = a[15] + a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[14] - a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3r = a[14] - a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[15] - a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: x3i = a[15] - a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[24] = x0r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[25] = x0i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[26] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[27] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[28] = x1r - x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[29] = x1i + x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[30] = x1r + x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[31] = x1i - x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[16] = x0r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[17] = x0i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[18] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[19] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[20] = x1r - x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[21] = x1i + x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[22] = x1r + x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[23] = x1i - x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[8] = x0r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[9] = x0i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[10] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[11] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[12] = x1r - x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[13] = x1i + x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[14] = x1r + x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[15] = x1i - x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[2] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[3] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[4] = x1r - x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[5] = x1i + x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[6] = x1r + x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf161,The following statement contains a magic number: a[7] = x1i - x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: wk1r = w[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: wk1i = w[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: wk3r = w[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: wk3i = -w[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: wk2r = w[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: wk2i = w[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x1r = a[0] - a[17];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x1i = a[1] + a[16];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[8] - a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[8] - a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[9] + a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[9] + a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x1r = a[0] + a[17];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x1i = a[1] - a[16];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[8] + a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[8] + a[25];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[9] - a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[9] - a[24];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[2] - a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[2] - a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[3] + a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[3] + a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[10] - a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[10] - a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[11] + a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[11] + a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[2] + a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[2] + a[19];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[3] - a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[3] - a[18];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[10] + a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[10] + a[27];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[11] - a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[11] - a[26];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[4] - a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[4] - a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[5] + a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[5] + a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[12] - a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[12] - a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[13] + a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[13] + a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[4] + a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[4] + a[21];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[5] - a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[5] - a[20];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[12] + a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[12] + a[29];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[13] - a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[13] - a[28];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[6] - a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[6] - a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[7] + a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[7] + a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[14] - a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[14] - a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[15] + a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[15] + a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[6] + a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[6] + a[23];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[7] - a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[7] - a[22];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[14] + a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0r = a[14] + a[31];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[15] - a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: x0i = a[15] - a[30];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[2] = x1r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[3] = x1i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[4] = x1r - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[5] = x1i + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[6] = x1r + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[7] = x1i - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[8] = x1r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[9] = x1i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[10] = x1r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[11] = x1i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[12] = x1r - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[13] = x1i + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[14] = x1r + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[15] = x1i - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[16] = x1r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[17] = x1i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[18] = x1r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[19] = x1i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[20] = x1r - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[21] = x1i + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[22] = x1r + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[23] = x1i - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[24] = x1r + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[25] = x1i + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[26] = x1r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[27] = x1i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[28] = x1r - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[29] = x1i + x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[30] = x1r + x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf162,The following statement contains a magic number: a[31] = x1i - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x0r = a[0] + a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x0i = a[1] + a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x1r = a[0] - a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x1i = a[1] - a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2r = a[4] + a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2r = a[4] + a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2i = a[5] + a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2i = a[5] + a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3r = a[4] - a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3r = a[4] - a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3i = a[5] - a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3i = a[5] - a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x0r = a[2] + a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x0r = a[2] + a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x0i = a[3] + a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x0i = a[3] + a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x1r = a[2] - a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x1r = a[2] - a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x1i = a[3] - a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x1i = a[3] - a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2r = a[6] + a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2r = a[6] + a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2i = a[7] + a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x2i = a[7] + a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3r = a[6] - a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3r = a[6] - a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3i = a[7] - a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: x3i = a[7] - a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[8] = y1r + y5r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[9] = y1i + y5i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[10] = y1r - y5r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[11] = y1i - y5i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[12] = y3r - y7i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[13] = y3i + y7r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[14] = y3r + y7i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[15] = y3i - y7r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[2] = y0r - y4r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[3] = y0i - y4i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[4] = y2r - y6i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[5] = y2i + y6r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[6] = y2r + y6i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf081,The following statement contains a magic number: a[7] = y2i - y6r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: wk1r = w[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: wk1i = w[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: y0r = a[0] - a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: y0i = a[1] + a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: y1r = a[0] + a[9];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: y1i = a[1] - a[8];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[4] - a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[4] - a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[5] + a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[5] + a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[4] + a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[4] + a[13];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[5] - a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[5] - a[12];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[2] - a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[2] - a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[3] + a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[3] + a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[2] + a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[2] + a[11];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[3] - a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[3] - a[10];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[6] - a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[6] - a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[7] + a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[7] + a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[6] + a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0r = a[6] + a[15];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[7] - a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: x0i = a[7] - a[14];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[2] = x0r - x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[3] = x0i - x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[4] = x0r - x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[5] = x0i + x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[6] = x0r + x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[7] = x0i - x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[8] = x0r + x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[9] = x0i + x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[10] = x0r - x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[11] = x0i - x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[12] = x0r - x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[13] = x0i + x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[14] = x0r + x1i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf082,The following statement contains a magic number: a[15] = x0i - x1r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x0r = a[0] + a[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x0i = a[1] + a[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x1r = a[0] - a[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x1i = a[1] - a[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x2r = a[2] + a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x2r = a[2] + a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x2i = a[3] + a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x2i = a[3] + a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x3r = a[2] - a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x3r = a[2] - a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x3i = a[3] - a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: x3i = a[3] - a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: a[2] = x1r - x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: a[3] = x1i + x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: a[4] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: a[5] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: a[6] = x1r + x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftf040,The following statement contains a magic number: a[7] = x1i - x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x0r = a[0] + a[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x0i = a[1] + a[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x1r = a[0] - a[4];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x1i = a[1] - a[5];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x2r = a[2] + a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x2r = a[2] + a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x2i = a[3] + a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x2i = a[3] + a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x3r = a[2] - a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x3r = a[2] - a[6];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x3i = a[3] - a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: x3i = a[3] - a[7];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: a[2] = x1r + x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: a[3] = x1i - x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: a[4] = x0r - x2r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: a[5] = x0i - x2i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: a[6] = x1r - x3i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftb040,The following statement contains a magic number: a[7] = x1i + x3r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftx020,The following statement contains a magic number: x0r = a[0] - a[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftx020,The following statement contains a magic number: x0i = a[1] - a[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftx020,The following statement contains a magic number: a[0] += a[2];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftx020,The following statement contains a magic number: a[1] += a[3];
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftx020,The following statement contains a magic number: a[2] = x0r;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,cftx020,The following statement contains a magic number: a[3] = x0i;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftfsub,The following statement contains a magic number: ks = 2 * nc / m;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftfsub,The following statement contains a magic number: for ( j = 2; j < m; j += 2 ) {                  k = n - j;                  kk += ks;                  wkr = 0.5 - c[nc - kk];                  wki = c[kk];                  xr = a[j] - a[k];                  xi = a[j + 1] + a[k + 1];                  yr = wkr * xr - wki * xi;                  yi = wkr * xi + wki * xr;                  a[j] -= yr;                  a[j + 1] -= yi;                  a[k] += yr;                  a[k + 1] -= yi;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftfsub,The following statement contains a magic number: for ( j = 2; j < m; j += 2 ) {                  k = n - j;                  kk += ks;                  wkr = 0.5 - c[nc - kk];                  wki = c[kk];                  xr = a[j] - a[k];                  xi = a[j + 1] + a[k + 1];                  yr = wkr * xr - wki * xi;                  yi = wkr * xi + wki * xr;                  a[j] -= yr;                  a[j + 1] -= yi;                  a[k] += yr;                  a[k + 1] -= yi;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftfsub,The following statement contains a magic number: for ( j = 2; j < m; j += 2 ) {                  k = n - j;                  kk += ks;                  wkr = 0.5 - c[nc - kk];                  wki = c[kk];                  xr = a[j] - a[k];                  xi = a[j + 1] + a[k + 1];                  yr = wkr * xr - wki * xi;                  yi = wkr * xi + wki * xr;                  a[j] -= yr;                  a[j + 1] -= yi;                  a[k] += yr;                  a[k + 1] -= yi;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftbsub,The following statement contains a magic number: ks = 2 * nc / m;
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftbsub,The following statement contains a magic number: for ( j = 2; j < m; j += 2 ) {                  k = n - j;                  kk += ks;                  wkr = 0.5 - c[nc - kk];                  wki = c[kk];                  xr = a[j] - a[k];                  xi = a[j + 1] + a[k + 1];                  yr = wkr * xr + wki * xi;                  yi = wkr * xi - wki * xr;                  a[j] -= yr;                  a[j + 1] -= yi;                  a[k] += yr;                  a[k + 1] -= yi;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftbsub,The following statement contains a magic number: for ( j = 2; j < m; j += 2 ) {                  k = n - j;                  kk += ks;                  wkr = 0.5 - c[nc - kk];                  wki = c[kk];                  xr = a[j] - a[k];                  xi = a[j + 1] + a[k + 1];                  yr = wkr * xr + wki * xi;                  yi = wkr * xi - wki * xr;                  a[j] -= yr;                  a[j + 1] -= yi;                  a[k] += yr;                  a[k + 1] -= yi;              }
Magic Number,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,rftbsub,The following statement contains a magic number: for ( j = 2; j < m; j += 2 ) {                  k = n - j;                  kk += ks;                  wkr = 0.5 - c[nc - kk];                  wki = c[kk];                  xr = a[j] - a[k];                  xi = a[j + 1] + a[k + 1];                  yr = wkr * xr + wki * xi;                  yi = wkr * xi - wki * xr;                  a[j] -= yr;                  a[j + 1] -= yi;                  a[k] += yr;                  a[k + 1] -= yi;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_kaiser,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  double t = 2.0 * x - 1.0;                  return besi0( Math.PI * alpha * Math.Sqrt( 1.0 - t * t ) ) / besi0( Math.PI * alpha );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_welch,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 4.0 * x * (1.0 - x);              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_akaike,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.625 - 0.5 * Math.Cos( _PI2 * x )                               - 0.125 * Math.Cos( _PI4 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_akaike,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.625 - 0.5 * Math.Cos( _PI2 * x )                               - 0.125 * Math.Cos( _PI4 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_akaike,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.625 - 0.5 * Math.Cos( _PI2 * x )                               - 0.125 * Math.Cos( _PI4 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_parzen,The following statement contains a magic number: if ( x0 <= 1.0 ) {                  return (0.75 * x0 - 1.5) * x0 * x0 + 1.0;              } else {                  x0 = 2.0 - x0;                  return 0.25 * x0 * x0 * x0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_parzen,The following statement contains a magic number: if ( x0 <= 1.0 ) {                  return (0.75 * x0 - 1.5) * x0 * x0 + 1.0;              } else {                  x0 = 2.0 - x0;                  return 0.25 * x0 * x0 * x0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_parzen,The following statement contains a magic number: if ( x0 <= 1.0 ) {                  return (0.75 * x0 - 1.5) * x0 * x0 + 1.0;              } else {                  x0 = 2.0 - x0;                  return 0.25 * x0 * x0 * x0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_parzen,The following statement contains a magic number: if ( x0 <= 1.0 ) {                  return (0.75 * x0 - 1.5) * x0 * x0 + 1.0;              } else {                  x0 = 2.0 - x0;                  return 0.25 * x0 * x0 * x0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_flap_top,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 1.0 - 1.93 * Math.Cos( _PI2 * x )                             + 1.29 * Math.Cos( _PI4 * x )                             - 0.388 * Math.Cos( _PI6 * x )                             + 0.032 * Math.Cos( _PI8 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_flap_top,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 1.0 - 1.93 * Math.Cos( _PI2 * x )                             + 1.29 * Math.Cos( _PI4 * x )                             - 0.388 * Math.Cos( _PI6 * x )                             + 0.032 * Math.Cos( _PI8 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_flap_top,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 1.0 - 1.93 * Math.Cos( _PI2 * x )                             + 1.29 * Math.Cos( _PI4 * x )                             - 0.388 * Math.Cos( _PI6 * x )                             + 0.032 * Math.Cos( _PI8 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_flap_top,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 1.0 - 1.93 * Math.Cos( _PI2 * x )                             + 1.29 * Math.Cos( _PI4 * x )                             - 0.388 * Math.Cos( _PI6 * x )                             + 0.032 * Math.Cos( _PI8 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_nattall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.3635819 - 0.4891775 * Math.Cos( _PI2 * x )                                   + 0.1365995 * Math.Cos( _PI4 * x )                                   - 0.0106411 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_nattall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.3635819 - 0.4891775 * Math.Cos( _PI2 * x )                                   + 0.1365995 * Math.Cos( _PI4 * x )                                   - 0.0106411 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_nattall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.3635819 - 0.4891775 * Math.Cos( _PI2 * x )                                   + 0.1365995 * Math.Cos( _PI4 * x )                                   - 0.0106411 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_nattall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.3635819 - 0.4891775 * Math.Cos( _PI2 * x )                                   + 0.1365995 * Math.Cos( _PI4 * x )                                   - 0.0106411 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_harris,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.35875 - 0.48829 * Math.Cos( _PI2 * x )                                 + 0.14128 * Math.Cos( _PI4 * x )                                 - 0.01168 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_harris,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.35875 - 0.48829 * Math.Cos( _PI2 * x )                                 + 0.14128 * Math.Cos( _PI4 * x )                                 - 0.01168 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_harris,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.35875 - 0.48829 * Math.Cos( _PI2 * x )                                 + 0.14128 * Math.Cos( _PI4 * x )                                 - 0.01168 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman_harris,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.35875 - 0.48829 * Math.Cos( _PI2 * x )                                 + 0.14128 * Math.Cos( _PI4 * x )                                 - 0.01168 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_nuttall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.355768 - 0.487396 * Math.Cos( _PI2 * x )                                  + 0.144232 * Math.Cos( _PI4 * x )                                  - 0.012604 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_nuttall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.355768 - 0.487396 * Math.Cos( _PI2 * x )                                  + 0.144232 * Math.Cos( _PI4 * x )                                  - 0.012604 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_nuttall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.355768 - 0.487396 * Math.Cos( _PI2 * x )                                  + 0.144232 * Math.Cos( _PI4 * x )                                  - 0.012604 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_nuttall,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.355768 - 0.487396 * Math.Cos( _PI2 * x )                                  + 0.144232 * Math.Cos( _PI4 * x )                                  - 0.012604 * Math.Cos( _PI6 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_bartlett,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 1.0 - 2.0 * Math.Abs( x - 0.5 );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_bartlett,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 1.0 - 2.0 * Math.Abs( x - 0.5 );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.42 - 0.5 * Math.Cos( _PI2 * x ) + 0.08 * Math.Cos( _PI4 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.42 - 0.5 * Math.Cos( _PI2 * x ) + 0.08 * Math.Cos( _PI4 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_blackman,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.42 - 0.5 * Math.Cos( _PI2 * x ) + 0.08 * Math.Cos( _PI4 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_hann,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.5 - 0.5 * Math.Cos( _PI2 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_hann,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.5 - 0.5 * Math.Cos( _PI2 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_hamming,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.54 - 0.46 * Math.Cos( _PI2 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,wnd_hamming,The following statement contains a magic number: if ( 0.0 <= x && x <= 1.0 ) {                  return 0.54 - 0.46 * Math.Cos( _PI2 * x );              } else {                  return 0.0;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] a = { 1.0'        3.5156229'  3.0899424'                             1.2067492'  0.2659732'  0.0360768};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] a = { 1.0'        3.5156229'  3.0899424'                             1.2067492'  0.2659732'  0.0360768};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] a = { 1.0'        3.5156229'  3.0899424'                             1.2067492'  0.2659732'  0.0360768};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] a = { 1.0'        3.5156229'  3.0899424'                             1.2067492'  0.2659732'  0.0360768};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] a = { 1.0'        3.5156229'  3.0899424'                             1.2067492'  0.2659732'  0.0360768};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: double[] b = { 0.39894228'   0.013285917'  0.002253187'                            -0.001575649'  0.009162808' -0.020577063'                             0.026355372' -0.016476329};
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: if ( x <= 3.75 ) {                  wx375 = x * x / 14.0625;                  w = 0.0045813;                  for ( i = 5; i >= 0; i-- ) {                      w = w * wx375 + a[i];                  }                  return w;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: if ( x <= 3.75 ) {                  wx375 = x * x / 14.0625;                  w = 0.0045813;                  for ( i = 5; i >= 0; i-- ) {                      w = w * wx375 + a[i];                  }                  return w;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: if ( x <= 3.75 ) {                  wx375 = x * x / 14.0625;                  w = 0.0045813;                  for ( i = 5; i >= 0; i-- ) {                      w = w * wx375 + a[i];                  }                  return w;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: if ( x <= 3.75 ) {                  wx375 = x * x / 14.0625;                  w = 0.0045813;                  for ( i = 5; i >= 0; i-- ) {                      w = w * wx375 + a[i];                  }                  return w;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: wx375 = 3.75 / x;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: w = 0.003923767;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,besi0,The following statement contains a magic number: for ( i = 7; i >= 0; i-- ) {                  w = w * wx375 + b[i];              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: t = 1.0 / (1.0 + 0.5 * z);
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: res = t * Math.Exp( -z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196                 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807                 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223                 + t * 0.17087277)))))))) );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfc,The following statement contains a magic number: if ( x < 0.0 ) {                  res = 2.0 - res;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: if ( y > 1 ) {                  z = 2 - y;              }
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: w = 0.916461398268964 - Math.Log( z );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (Math.Log( u ) + 0.488826640273108) / w;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: t = 1 / (u + 0.231729200323405);
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: x = u * (1 - s * (s * 0.124610454613712 + 0.5)) -                  ((((-0.0728846765585675 * t + 0.269999308670029) * t +                  0.150689047360223) * t + 0.116065025341614) * t +                  0.499999303439796) * t;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: x = u * (1 - s * (s * 0.124610454613712 + 0.5)) -                  ((((-0.0728846765585675 * t + 0.269999308670029) * t +                  0.150689047360223) * t + 0.116065025341614) * t +                  0.499999303439796) * t;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: x = u * (1 - s * (s * 0.124610454613712 + 0.5)) -                  ((((-0.0728846765585675 * t + 0.269999308670029) * t +                  0.150689047360223) * t + 0.116065025341614) * t +                  0.499999303439796) * t;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: x = u * (1 - s * (s * 0.124610454613712 + 0.5)) -                  ((((-0.0728846765585675 * t + 0.269999308670029) * t +                  0.150689047360223) * t + 0.116065025341614) * t +                  0.499999303439796) * t;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: x = u * (1 - s * (s * 0.124610454613712 + 0.5)) -                  ((((-0.0728846765585675 * t + 0.269999308670029) * t +                  0.150689047360223) * t + 0.116065025341614) * t +                  0.499999303439796) * t;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: x = u * (1 - s * (s * 0.124610454613712 + 0.5)) -                  ((((-0.0728846765585675 * t + 0.269999308670029) * t +                  0.150689047360223) * t + 0.116065025341614) * t +                  0.499999303439796) * t;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: x = u * (1 - s * (s * 0.124610454613712 + 0.5)) -                  ((((-0.0728846765585675 * t + 0.269999308670029) * t +                  0.150689047360223) * t + 0.116065025341614) * t +                  0.499999303439796) * t;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: t = 3.97886080735226 / (x + 3.97886080735226);
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: t = 3.97886080735226 / (x + 3.97886080735226);
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: u = t - 0.5;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = (((((((((0.00112648096188977922 * u +                  1.05739299623423047e-4) * u - 0.00351287146129100025) * u -                  7.71708358954120939e-4) * u + 0.00685649426074558612) * u +                  0.00339721910367775861) * u - 0.011274916933250487) * u -                  0.0118598117047771104) * u + 0.0142961988697898018) * u +                  0.0346494207789099922) * u + 0.00220995927012179067;
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,math,C:\repos\cadencii_cadencii\src\cadencii.core\math.cs,erfcinv,The following statement contains a magic number: s = ((((((((((((s * u - 0.0743424357241784861) * u -                  0.105872177941595488) * u + 0.0147297938331485121) * u +                  0.316847638520135944) * u + 0.713657635868730364) * u +                  1.05375024970847138) * u + 1.21448730779995237) * u +                  1.16374581931560831) * u + 0.956464974744799006) * u +                  0.686265948274097816) * u + 0.434397492331430115) * u +                  0.244044510593190935) * t -                  z * Math.Exp( x * x - 0.120782237635245222 );
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getCurrentTime,The following statement contains a magic number: return DateTime.Now.Ticks * 100.0 / 1e9;
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getCurrentTime,The following statement contains a magic number: return DateTime.Now.Ticks * 100.0 / 1e9;
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: byte[] dat = new byte[8];
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: dat[2] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: dat[3] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: dat[4] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: dat[5] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: dat[6] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_le,The following statement contains a magic number: dat[7] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_le,The following statement contains a magic number: byte[] dat = new byte[4];
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_le,The following statement contains a magic number: dat[2] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_le,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_le,The following statement contains a magic number: dat[3] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: byte[] dat = new byte[8];
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: dat[7] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: dat[6] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: dat[5] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: dat[4] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: dat[3] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: dat[2] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int64_be,The following statement contains a magic number: data = (data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_be,The following statement contains a magic number: byte[] dat = new byte[4];
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_be,The following statement contains a magic number: dat[3] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_be,The following statement contains a magic number: data = data >> 8;
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_be,The following statement contains a magic number: dat[2] = (byte)(data & (byte)0xff);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_be,The following statement contains a magic number: data = data >> 8;
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint32_be,The following statement contains a magic number: data = data >> 8;
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_int16_le,The following statement contains a magic number: if ( i < 0 ) {                  i += 65536;              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint16_le,The following statement contains a magic number: byte[] dat = new byte[2];
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint16_le,The following statement contains a magic number: data = (byte)(data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint16_be,The following statement contains a magic number: byte[] dat = new byte[2];
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_uint16_be,The following statement contains a magic number: data = (byte)(data >> 8);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_le,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[7]) << 8) | (0xff & buf[6])) << 8) | (0xff & buf[5])) << 8) | (0xff & buf[4])) << 8) | (0xff & buf[3])) << 8 | (0xff & buf[2])) << 8) | (0xff & buf[1])) << 8 | (0xff & buf[0]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int64_be,The following statement contains a magic number: return (long)((long)((long)((long)((long)((long)((long)((long)((long)((((0xff & buf[0]) << 8) | (0xff & buf[1])) << 8) | (0xff & buf[2])) << 8) | (0xff & buf[3])) << 8) | (0xff & buf[4])) << 8 | (0xff & buf[5])) << 8) | (0xff & buf[6])) << 8 | (0xff & buf[7]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_le,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index + 3]) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_le,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index + 3]) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_le,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index + 3]) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_le,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index + 3]) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_le,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index + 3]) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_be,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index]) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 3]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_be,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index]) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 3]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_be,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index]) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 3]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_be,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index]) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 3]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint32_be,The following statement contains a magic number: return (long)((long)((long)((long)(((0xff & buf[index]) << 8) | (0xff & buf[index + 1])) << 8) | (0xff & buf[index + 2])) << 8) | (0xff & buf[index + 3]);
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint16_le,The following statement contains a magic number: return (int)((int)((0xff & buf[index + 1]) << 8) | (0xff & buf[index]));
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_uint16_be,The following statement contains a magic number: return (int)((int)((0xff & buf[index]) << 8) | (0xff & buf[index + 1]));
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int16_le,The following statement contains a magic number: if ( i >= 32768 ) {                  i = i - 65536;              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_int16_le,The following statement contains a magic number: if ( i >= 32768 ) {                  i = i - 65536;              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_double_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = buf[i];                      buf[i] = buf[7 - i];                      buf[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_double_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = buf[i];                      buf[i] = buf[7 - i];                      buf[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_double_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = buf[i];                      buf[i] = buf[7 - i];                      buf[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_double_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = buf[i];                      buf[i] = buf[7 - i];                      buf[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_double_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = buf[i];                      buf[i] = buf[7 - i];                      buf[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_double_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = buf[i];                      buf[i] = buf[7 - i];                      buf[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_float_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = buf[i];                      buf[i] = buf[3 - i];                      buf[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_float_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = buf[i];                      buf[i] = buf[3 - i];                      buf[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_float_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = buf[i];                      buf[i] = buf[3 - i];                      buf[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_float_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = buf[i];                      buf[i] = buf[3 - i];                      buf[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_float_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = buf[i];                      buf[i] = buf[3 - i];                      buf[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,make_float_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = buf[i];                      buf[i] = buf[3 - i];                      buf[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_double_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = ret[i];                      ret[i] = ret[7 - i];                      ret[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_double_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = ret[i];                      ret[i] = ret[7 - i];                      ret[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_double_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = ret[i];                      ret[i] = ret[7 - i];                      ret[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_double_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = ret[i];                      ret[i] = ret[7 - i];                      ret[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_double_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = ret[i];                      ret[i] = ret[7 - i];                      ret[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_double_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 4; i++ ) {                      byte d = ret[i];                      ret[i] = ret[7 - i];                      ret[7 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_float_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = ret[i];                      ret[i] = ret[3 - i];                      ret[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_float_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = ret[i];                      ret[i] = ret[3 - i];                      ret[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_float_le,The following statement contains a magic number: if ( !BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = ret[i];                      ret[i] = ret[3 - i];                      ret[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_float_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = ret[i];                      ret[i] = ret[3 - i];                      ret[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_float_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = ret[i];                      ret[i] = ret[3 - i];                      ret[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getbytes_float_be,The following statement contains a magic number: if ( BitConverter.IsLittleEndian ) {                  for ( int i = 0; i < 2; i++ ) {                      byte d = ret[i];                      ret[i] = ret[3 - i];                      ret[3 - i] = d;                  }              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getFileLastModified,The following statement contains a magic number: if ( File.Exists( path ) ) {                  return new FileInfo( path ).LastWriteTimeUtc.Ticks * 100.0 / 1e9;              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,getFileLastModified,The following statement contains a magic number: if ( File.Exists( path ) ) {                  return new FileInfo( path ).LastWriteTimeUtc.Ticks * 100.0 / 1e9;              }
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,toHexString,The following statement contains a magic number: return Convert.ToString( value' 16 );
Magic Number,cadencii,PortUtil,C:\repos\cadencii_cadencii\src\cadencii.core\PortUtil.cs,fromHexString,The following statement contains a magic number: return Convert.ToInt64( s' 16 );
Magic Number,cadencii,win32,C:\repos\cadencii_cadencii\src\cadencii.core\winmm.cs,MAKELONG,The following statement contains a magic number: return 0xffff & a | ((0xffff & b) << 16);
Magic Number,cadencii,COLORREF,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,COLORREF,The following statement contains a magic number: _ColorDWORD = ((uint)color.R) +                  (uint)(color.G << 8) +                  (uint)(color.B << 16);
Magic Number,cadencii,COLORREF,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,COLORREF,The following statement contains a magic number: _ColorDWORD = ((uint)color.R) +                  (uint)(color.G << 8) +                  (uint)(color.B << 16);
Magic Number,cadencii,COLORREF,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,GetColor,The following statement contains a magic number: return Color.FromArgb( (int)(0x000000FFU | _ColorDWORD)'                  (int)((0x0000FF00 | _ColorDWORD) >> 2)'                  (int)((0x00FF0000 | _ColorDWORD) >> 4) );
Magic Number,cadencii,COLORREF,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,GetColor,The following statement contains a magic number: return Color.FromArgb( (int)(0x000000FFU | _ColorDWORD)'                  (int)((0x0000FF00 | _ColorDWORD) >> 2)'                  (int)((0x00FF0000 | _ColorDWORD) >> 4) );
Magic Number,cadencii,COLORREF,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,SetColor,The following statement contains a magic number: _ColorDWORD = ((uint)color.R) +                  (uint)(color.G << 8) +                  (uint)(color.B << 16);
Magic Number,cadencii,COLORREF,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,SetColor,The following statement contains a magic number: _ColorDWORD = ((uint)color.R) +                  (uint)(color.G << 8) +                  (uint)(color.B << 16);
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,IMAGE_OPTIONAL_HEADER,C:\repos\cadencii_cadencii\src\cadencii.core\windows.cs,getDataDirectory,The following statement contains a magic number: switch ( index ) {                  case 0:                      return dataDirectory00;                  case 1:                      return dataDirectory01;                  case 2:                      return dataDirectory02;                  case 3:                      return dataDirectory03;                  case 4:                      return dataDirectory04;                  case 5:                      return dataDirectory05;                  case 6:                      return dataDirectory06;                  case 7:                      return dataDirectory07;                  case 8:                      return dataDirectory08;                  case 9:                      return dataDirectory09;                  case 10:                      return dataDirectory10;                  case 11:                      return dataDirectory11;                  case 12:                      return dataDirectory12;                  case 13:                      return dataDirectory13;                  case 14:                      return dataDirectory14;                  case 15:                      return dataDirectory15;                  default:                      return new IMAGE_DATA_DIRECTORY();              }
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Read,The following statement contains a magic number: byte[] buf = new byte[4];
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readUInt32,The following statement contains a magic number: byte[] buf = new byte[4];
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readUInt32,The following statement contains a magic number: fs.Read( buf' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readInt32,The following statement contains a magic number: byte[] buf = new byte[4];
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readInt32,The following statement contains a magic number: fs.Read( buf' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readUInt16,The following statement contains a magic number: byte[] buf = new byte[2];
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readUInt16,The following statement contains a magic number: fs.Read( buf' 0' 2 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readInt16,The following statement contains a magic number: byte[] buf = new byte[2];
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,readInt16,The following statement contains a magic number: fs.Read( buf' 0' 2 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 2 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 2 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Magic Number,cadencii,BITMAPINFOHEADER,C:\repos\cadencii_cadencii\src\cadencii.core\wingdi.cs,Write,The following statement contains a magic number: s.Write( b' 0' 4 );
Duplicate Code,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 53)' (96' 133))
Duplicate Code,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 43)' (178' 205)' (96' 123))
Duplicate Code,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((56' 93)' (136' 173))
Duplicate Code,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((95' 114)' (177' 196))
Duplicate Code,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 53)' (96' 133))
Duplicate Code,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 43)' (188' 207)' (104' 123))
Duplicate Code,cadencii,fft,C:\repos\cadencii_cadencii\src\cadencii.core\fft.cs,bitrv2conj,The method contains a code clone-set at the following line numbers (starting from the method definition): ((56' 93)' (136' 173))
