Implementation smell,Namespace,Class,File,Method,Description
Long Method,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The method has 127 lines of code.
Complex Method,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,edit,Cyclomatic complexity of the method is 15
Long Statement,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The length of the statement  "            this.lblLength.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 142.
Long Statement,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The length of the statement  "            this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The length of the statement  "            this.btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The length of the statement  "            this.lblModifierKey.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 147.
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,edit,The following statement contains a magic number: try {                  int divide_threshold = Numerator * 480 * 4 / Denominator;                  Console.WriteLine( "s_divide_threshold=" + divide_threshold );                  Keys modifier = Control.ModifierKeys;                  bool middle_mode = button == MouseButtons.Middle;                  if ( getModifier().Equals( "Alt" ) ) {                      if ( (modifier & Keys.Alt) == Keys.Alt ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Control" ) ) {                      if ( (modifier & Keys.Control) == Keys.Control ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Shift" ) ) {                      if ( (modifier & Keys.Shift) == Keys.Shift ) {                          middle_mode = true;                      }                  }                  Console.WriteLine( "DivideNote#edit; (event_internal_ids==null)=" + (event_internal_ids == null) );                  foreach ( int id in event_internal_ids ) {                      Console.WriteLine( "DivideNote#edit; (track==null)=" + (track == null) );                      for ( Iterator<VsqEvent> itr = track.getNoteEventIterator(); itr.hasNext(); ) {                          VsqEvent ve = itr.next();                          Console.WriteLine( "DivideNote#edit; (ve==null)=" + (ve == null) );                          if ( ve.InternalID == id ) {                              Console.WriteLine( "DivideNote#edit; (ve.ID==null)=" + (ve.ID == null) );                              if ( ve.ID.Length >= divide_threshold * 2 ) {                                  Console.WriteLine( "before; clock=" + ve.Clock + "; length=" + ve.ID.Length );                                  VsqEvent add = (VsqEvent)ve.clone();                                  int length = ve.ID.Length;                                  List<string> symbol = ve.ID.LyricHandle.L0.getPhoneticSymbolList();                                  for ( int i = 0; i < symbol.Count; i++ ) {                                      Console.WriteLine( "symbol[" + i + "]=" + symbol[i] );                                  }                                  ve.ID.Length = divide_threshold;                                  add.Clock = ve.Clock + divide_threshold;                                  add.ID.Length = length - divide_threshold;                                  if ( add.ID.VibratoHandle != null ) {                                      if ( add.ID.VibratoDelay >= add.ID.Length ) {                                          add.ID.VibratoHandle = null;                                      }                                  }                                  if ( ve.ID.VibratoHandle != null ) {                                      if ( ve.ID.VibratoDelay >= ve.ID.Length ) {                                          ve.ID.VibratoHandle = null;                                      }                                  }                                  if ( symbol.Count >= 2 ) {                                      if ( middle_mode && !VsqPhoneticSymbol.isConsonant( symbol[1] ) ) {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] + " " + symbol[1] );                                      } else {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] );                                      }                                      string symbol2 = "";                                      for ( int i = 1; i < symbol.Count; i++ ) {                                          symbol2 += ((i == 1) ? "" : " ") + symbol[i];                                      }                                      Console.WriteLine( "symbol2=" + symbol2 );                                      add.ID.LyricHandle.L0.setPhoneticSymbol( symbol2 );                                  }                                  track.addEvent( add );                                  edited = true;                              }                              break;                          }                      }                  }              } catch ( Exception ex ) {                  Console.WriteLine( "DivideNote#edit; ex=" + ex );              }
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,edit,The following statement contains a magic number: try {                  int divide_threshold = Numerator * 480 * 4 / Denominator;                  Console.WriteLine( "s_divide_threshold=" + divide_threshold );                  Keys modifier = Control.ModifierKeys;                  bool middle_mode = button == MouseButtons.Middle;                  if ( getModifier().Equals( "Alt" ) ) {                      if ( (modifier & Keys.Alt) == Keys.Alt ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Control" ) ) {                      if ( (modifier & Keys.Control) == Keys.Control ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Shift" ) ) {                      if ( (modifier & Keys.Shift) == Keys.Shift ) {                          middle_mode = true;                      }                  }                  Console.WriteLine( "DivideNote#edit; (event_internal_ids==null)=" + (event_internal_ids == null) );                  foreach ( int id in event_internal_ids ) {                      Console.WriteLine( "DivideNote#edit; (track==null)=" + (track == null) );                      for ( Iterator<VsqEvent> itr = track.getNoteEventIterator(); itr.hasNext(); ) {                          VsqEvent ve = itr.next();                          Console.WriteLine( "DivideNote#edit; (ve==null)=" + (ve == null) );                          if ( ve.InternalID == id ) {                              Console.WriteLine( "DivideNote#edit; (ve.ID==null)=" + (ve.ID == null) );                              if ( ve.ID.Length >= divide_threshold * 2 ) {                                  Console.WriteLine( "before; clock=" + ve.Clock + "; length=" + ve.ID.Length );                                  VsqEvent add = (VsqEvent)ve.clone();                                  int length = ve.ID.Length;                                  List<string> symbol = ve.ID.LyricHandle.L0.getPhoneticSymbolList();                                  for ( int i = 0; i < symbol.Count; i++ ) {                                      Console.WriteLine( "symbol[" + i + "]=" + symbol[i] );                                  }                                  ve.ID.Length = divide_threshold;                                  add.Clock = ve.Clock + divide_threshold;                                  add.ID.Length = length - divide_threshold;                                  if ( add.ID.VibratoHandle != null ) {                                      if ( add.ID.VibratoDelay >= add.ID.Length ) {                                          add.ID.VibratoHandle = null;                                      }                                  }                                  if ( ve.ID.VibratoHandle != null ) {                                      if ( ve.ID.VibratoDelay >= ve.ID.Length ) {                                          ve.ID.VibratoHandle = null;                                      }                                  }                                  if ( symbol.Count >= 2 ) {                                      if ( middle_mode && !VsqPhoneticSymbol.isConsonant( symbol[1] ) ) {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] + " " + symbol[1] );                                      } else {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] );                                      }                                      string symbol2 = "";                                      for ( int i = 1; i < symbol.Count; i++ ) {                                          symbol2 += ((i == 1) ? "" : " ") + symbol[i];                                      }                                      Console.WriteLine( "symbol2=" + symbol2 );                                      add.ID.LyricHandle.L0.setPhoneticSymbol( symbol2 );                                  }                                  track.addEvent( add );                                  edited = true;                              }                              break;                          }                      }                  }              } catch ( Exception ex ) {                  Console.WriteLine( "DivideNote#edit; ex=" + ex );              }
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,edit,The following statement contains a magic number: try {                  int divide_threshold = Numerator * 480 * 4 / Denominator;                  Console.WriteLine( "s_divide_threshold=" + divide_threshold );                  Keys modifier = Control.ModifierKeys;                  bool middle_mode = button == MouseButtons.Middle;                  if ( getModifier().Equals( "Alt" ) ) {                      if ( (modifier & Keys.Alt) == Keys.Alt ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Control" ) ) {                      if ( (modifier & Keys.Control) == Keys.Control ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Shift" ) ) {                      if ( (modifier & Keys.Shift) == Keys.Shift ) {                          middle_mode = true;                      }                  }                  Console.WriteLine( "DivideNote#edit; (event_internal_ids==null)=" + (event_internal_ids == null) );                  foreach ( int id in event_internal_ids ) {                      Console.WriteLine( "DivideNote#edit; (track==null)=" + (track == null) );                      for ( Iterator<VsqEvent> itr = track.getNoteEventIterator(); itr.hasNext(); ) {                          VsqEvent ve = itr.next();                          Console.WriteLine( "DivideNote#edit; (ve==null)=" + (ve == null) );                          if ( ve.InternalID == id ) {                              Console.WriteLine( "DivideNote#edit; (ve.ID==null)=" + (ve.ID == null) );                              if ( ve.ID.Length >= divide_threshold * 2 ) {                                  Console.WriteLine( "before; clock=" + ve.Clock + "; length=" + ve.ID.Length );                                  VsqEvent add = (VsqEvent)ve.clone();                                  int length = ve.ID.Length;                                  List<string> symbol = ve.ID.LyricHandle.L0.getPhoneticSymbolList();                                  for ( int i = 0; i < symbol.Count; i++ ) {                                      Console.WriteLine( "symbol[" + i + "]=" + symbol[i] );                                  }                                  ve.ID.Length = divide_threshold;                                  add.Clock = ve.Clock + divide_threshold;                                  add.ID.Length = length - divide_threshold;                                  if ( add.ID.VibratoHandle != null ) {                                      if ( add.ID.VibratoDelay >= add.ID.Length ) {                                          add.ID.VibratoHandle = null;                                      }                                  }                                  if ( ve.ID.VibratoHandle != null ) {                                      if ( ve.ID.VibratoDelay >= ve.ID.Length ) {                                          ve.ID.VibratoHandle = null;                                      }                                  }                                  if ( symbol.Count >= 2 ) {                                      if ( middle_mode && !VsqPhoneticSymbol.isConsonant( symbol[1] ) ) {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] + " " + symbol[1] );                                      } else {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] );                                      }                                      string symbol2 = "";                                      for ( int i = 1; i < symbol.Count; i++ ) {                                          symbol2 += ((i == 1) ? "" : " ") + symbol[i];                                      }                                      Console.WriteLine( "symbol2=" + symbol2 );                                      add.ID.LyricHandle.L0.setPhoneticSymbol( symbol2 );                                  }                                  track.addEvent( add );                                  edited = true;                              }                              break;                          }                      }                  }              } catch ( Exception ex ) {                  Console.WriteLine( "DivideNote#edit; ex=" + ex );              }
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,edit,The following statement contains a magic number: try {                  int divide_threshold = Numerator * 480 * 4 / Denominator;                  Console.WriteLine( "s_divide_threshold=" + divide_threshold );                  Keys modifier = Control.ModifierKeys;                  bool middle_mode = button == MouseButtons.Middle;                  if ( getModifier().Equals( "Alt" ) ) {                      if ( (modifier & Keys.Alt) == Keys.Alt ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Control" ) ) {                      if ( (modifier & Keys.Control) == Keys.Control ) {                          middle_mode = true;                      }                  } else if ( getModifier().Equals( "Shift" ) ) {                      if ( (modifier & Keys.Shift) == Keys.Shift ) {                          middle_mode = true;                      }                  }                  Console.WriteLine( "DivideNote#edit; (event_internal_ids==null)=" + (event_internal_ids == null) );                  foreach ( int id in event_internal_ids ) {                      Console.WriteLine( "DivideNote#edit; (track==null)=" + (track == null) );                      for ( Iterator<VsqEvent> itr = track.getNoteEventIterator(); itr.hasNext(); ) {                          VsqEvent ve = itr.next();                          Console.WriteLine( "DivideNote#edit; (ve==null)=" + (ve == null) );                          if ( ve.InternalID == id ) {                              Console.WriteLine( "DivideNote#edit; (ve.ID==null)=" + (ve.ID == null) );                              if ( ve.ID.Length >= divide_threshold * 2 ) {                                  Console.WriteLine( "before; clock=" + ve.Clock + "; length=" + ve.ID.Length );                                  VsqEvent add = (VsqEvent)ve.clone();                                  int length = ve.ID.Length;                                  List<string> symbol = ve.ID.LyricHandle.L0.getPhoneticSymbolList();                                  for ( int i = 0; i < symbol.Count; i++ ) {                                      Console.WriteLine( "symbol[" + i + "]=" + symbol[i] );                                  }                                  ve.ID.Length = divide_threshold;                                  add.Clock = ve.Clock + divide_threshold;                                  add.ID.Length = length - divide_threshold;                                  if ( add.ID.VibratoHandle != null ) {                                      if ( add.ID.VibratoDelay >= add.ID.Length ) {                                          add.ID.VibratoHandle = null;                                      }                                  }                                  if ( ve.ID.VibratoHandle != null ) {                                      if ( ve.ID.VibratoDelay >= ve.ID.Length ) {                                          ve.ID.VibratoHandle = null;                                      }                                  }                                  if ( symbol.Count >= 2 ) {                                      if ( middle_mode && !VsqPhoneticSymbol.isConsonant( symbol[1] ) ) {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] + " " + symbol[1] );                                      } else {                                          ve.ID.LyricHandle.L0.setPhoneticSymbol( symbol[0] );                                      }                                      string symbol2 = "";                                      for ( int i = 1; i < symbol.Count; i++ ) {                                          symbol2 += ((i == 1) ? "" : " ") + symbol[i];                                      }                                      Console.WriteLine( "symbol2=" + symbol2 );                                      add.ID.LyricHandle.L0.setPhoneticSymbol( symbol2 );                                  }                                  track.addEvent( add );                                  edited = true;                              }                              break;                          }                      }                  }              } catch ( Exception ex ) {                  Console.WriteLine( "DivideNote#edit; ex=" + ex );              }
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblLength.Location = new System.Drawing.Point( 12' 18 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblLength.Location = new System.Drawing.Point( 12' 18 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblLength.Size = new System.Drawing.Size( 282' 19 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblLength.Size = new System.Drawing.Size( 282' 19 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point( 112' 165 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point( 112' 165 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size( 88' 23 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size( 88' 23 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 3;
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point( 206' 165 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point( 206' 165 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size( 88' 23 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size( 88' 23 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 4;
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboDenominator.Location = new System.Drawing.Point( 101' 67 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboDenominator.Location = new System.Drawing.Point( 101' 67 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboDenominator.Size = new System.Drawing.Size( 108' 20 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboDenominator.Size = new System.Drawing.Size( 108' 20 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboDenominator.TabIndex = 2;
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblNumerator.Location = new System.Drawing.Point( 26' 43 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblNumerator.Location = new System.Drawing.Point( 26' 43 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblNumerator.Size = new System.Drawing.Size( 58' 12 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblNumerator.Size = new System.Drawing.Size( 58' 12 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblNumerator.TabIndex = 29;
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblDenominator.Location = new System.Drawing.Point( 26' 70 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblDenominator.Location = new System.Drawing.Point( 26' 70 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblDenominator.Size = new System.Drawing.Size( 69' 12 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblDenominator.Size = new System.Drawing.Size( 69' 12 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblDenominator.TabIndex = 30;
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.txtNumerator.Location = new System.Drawing.Point( 101' 40 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.txtNumerator.Location = new System.Drawing.Point( 101' 40 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.txtNumerator.Size = new System.Drawing.Size( 108' 19 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.txtNumerator.Size = new System.Drawing.Size( 108' 19 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblModifierKey.Location = new System.Drawing.Point( 12' 103 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblModifierKey.Location = new System.Drawing.Point( 12' 103 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblModifierKey.Size = new System.Drawing.Size( 282' 23 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblModifierKey.Size = new System.Drawing.Size( 282' 23 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.lblModifierKey.TabIndex = 31;
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboKeys.Location = new System.Drawing.Point( 28' 125 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboKeys.Location = new System.Drawing.Point( 28' 125 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboKeys.Size = new System.Drawing.Size( 108' 20 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboKeys.Size = new System.Drawing.Size( 108' 20 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.comboKeys.TabIndex = 32;
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size( 306' 200 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size( 306' 200 );
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,comboLength_SelectedIndexChanged,The following statement contains a magic number: if ( comboDenominator.SelectedIndex < 0 ) {                  Denominator = 32;                  for ( int i = 0; i < _DENOMI.Length; i++ ) {                      if ( _DENOMI[i] == 32 ) {                          comboDenominator.SelectedIndex = i;                          break;                      }                  }              } else {                  Denominator = _DENOMI[comboDenominator.SelectedIndex];              }
Magic Number,cadencii,DivideNote,C:\repos\cadencii_cadencii\src\ScriptImplement\DivideNote.cs,comboLength_SelectedIndexChanged,The following statement contains a magic number: if ( comboDenominator.SelectedIndex < 0 ) {                  Denominator = 32;                  for ( int i = 0; i < _DENOMI.Length; i++ ) {                      if ( _DENOMI[i] == 32 ) {                          comboDenominator.SelectedIndex = i;                          break;                      }                  }              } else {                  Denominator = _DENOMI[comboDenominator.SelectedIndex];              }
