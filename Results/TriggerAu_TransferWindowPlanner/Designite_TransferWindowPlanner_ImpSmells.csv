Implementation smell,Namespace,Class,File,Method,Description
Long Method,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The method has 105 lines of code.
Long Method,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The method has 137 lines of code.
Long Method,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The method has 128 lines of code.
Long Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The method has 111 lines of code.
Long Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The method has 132 lines of code.
Long Method,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The method has 356 lines of code.
Long Method,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The method has 179 lines of code.
Complex Method,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawButton,Cyclomatic complexity of the method is 8
Complex Method,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,Cyclomatic complexity of the method is 9
Complex Method,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,DrawGUI,Cyclomatic complexity of the method is 10
Complex Method,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,ToDateTimeString,Cyclomatic complexity of the method is 8
Complex Method,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,Cyclomatic complexity of the method is 8
Complex Method,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,Awake,Cyclomatic complexity of the method is 9
Complex Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,Cyclomatic complexity of the method is 16
Complex Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,Cyclomatic complexity of the method is 20
Complex Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,Cyclomatic complexity of the method is 11
Complex Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,Cyclomatic complexity of the method is 10
Complex Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GeneratePorkchop,Cyclomatic complexity of the method is 9
Complex Method,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,Cyclomatic complexity of the method is 10
Complex Method,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_General,Cyclomatic complexity of the method is 10
Complex Method,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_About,Cyclomatic complexity of the method is 9
Long Parameter List,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,KSPDateTime,The method has 5 parameters. Parameters: year' day' hour' minute' second
Long Parameter List,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,KSPDateTime,The method has 5 parameters. Parameters: year' day' hour' minute' second
Long Parameter List,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,KSPDateTime,The method has 6 parameters. Parameters: year' day' hour' minute' second' millisecond
Long Parameter List,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetCustomCalendar,The method has 6 parameters. Parameters: CustomEpochYear' CustomEpochDayOfYear' CustomDaysPerYear' CustomHoursPerDay' CustomMinutesPerHour' CustomSecondsPerMinute
Long Parameter List,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,KSPTimeSpan,The method has 5 parameters. Parameters: days' hours' minutes' seconds' milliseconds
Long Parameter List,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,InitLine,The method has 5 parameters. Parameters: objToAttach' lineColor' VertexCount' InitialWidth' linesMaterial
Long Parameter List,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawArc,The method has 5 parameters. Parameters: line' vectStart' Angle' StartLength' EndLength
Long Parameter List,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The method has 6 parameters. Parameters: line1' line2' pointStart' pointEnd' vectPlaneNormal' ArrowArmLength
Long Parameter List,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,InitLine,The method has 5 parameters. Parameters: objToAttach' lineColor' VertexCount' InitialWidth' linesMaterial
Long Parameter List,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawArc,The method has 5 parameters. Parameters: line' vectStart' Angle' StartLength' EndLength
Long Parameter List,TransferWindowPlanner,Utilities,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\Utilities.cs,timeOfEjectionAngle,The method has 5 parameters. Parameters: oObject' timeInitial' targetAngle' numDivisions' closestAngle
Long Parameter List,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTextField,The method has 7 parameters. Parameters: Value' RegexValidator' RegexFailOnMatch' LabelText' FieldWidth' LabelWidth' Locked
Long Parameter List,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,timeOfLeastDVBurn,The method has 5 parameters. Parameters: oObject' timeInitial' vectTransferInitial' numDivisions' bestBurnEject
Long Identifier,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,,The length of the parameter _isBecomingVisible_VesselVectDone is 33.
Long Identifier,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,,The length of the parameter _isBecomingVisible_TargetArcDone is 32.
Long Identifier,TransferWindowPlanner,Settings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Settings.cs,,The length of the parameter VersionCheckDate_AttemptStored is 30.
Long Identifier,TransferWindowPlanner,Settings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Settings.cs,,The length of the parameter VersionCheckDate_SuccessStored is 30.
Long Statement,KSPPluginFramework,EnumExtensions,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\Extensions.cs,Description,The length of the statement  "            DescriptionAttribute[] desc = (DescriptionAttribute[])e.GetType().GetMember(e.ToString())[0].GetCustomAttributes(typeof(System.ComponentModel.DescriptionAttribute)' false); " is 172.
Long Statement,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawBlockingSelector,The length of the statement  "                            SelectedIndex = (Int32)Math.Floor((Event.current.mousePosition.y - rectListBox.y) / (rectListBox.height / Items.Count)); " is 120.
Long Statement,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawBlockingSelector,The length of the statement  "                            Int32 SelectedRow = (Int32)Math.Floor((Event.current.mousePosition.y - rectListBox.y) / (rectListBox.height / (ListPageLength+1))); " is 131.
Long Statement,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawBlockingSelector,The length of the statement  "                            //LogFormatted("{0}-{1}-{2}-{3}-{4}"' Event.current.mousePosition.y' rectListBox.y' rectListBox.height' ListPageLength' SelectedRow); " is 133.
Long Statement,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawButton,The length of the statement  "                        Rect rectDropSep = new Rect(rectDropIcon) { x = (rectDropIcon.x - DropDownSeparator.CalcWidth)' width = DropDownSeparator.CalcWidth }; " is 134.
Long Statement,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The length of the statement  "                        GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager); " is 206.
Long Statement,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The length of the statement  "                        GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev"); " is 160.
Long Statement,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The length of the statement  "                        GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next"); " is 160.
Long Statement,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,DrawToolTip,The length of the statement  "            if (TooltipsEnabled && Visible && (strToolTipText != "") && ((TooltipDisplayForSecs == 0) || (fltTooltipTime < (Single)TooltipDisplayForSecs))) " is 143.
Long Statement,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,DrawToolTip,The length of the statement  "                    SkinsLibrary.CurrentTooltip.CalcMinMaxWidth(contTooltip' out minwidth' out maxwidth); // figure out how wide one line would be " is 126.
Long Statement,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,DrawToolTip,The length of the statement  "                    _TooltipPosition.width = Math.Min(TooltipMaxWidth - SkinsLibrary.CurrentTooltip.padding.horizontal' maxwidth); //then work out the height with a max width " is 154.
Long Statement,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,DrawToolTip,The length of the statement  "                    _TooltipPosition.height = SkinsLibrary.CurrentTooltip.CalcHeight(contTooltip' TooltipPosition.width); // heres the result " is 121.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "				return ToString(System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + " " + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern); " is 185.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "                                format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + format.Substring(mIndex + mLength); " is 170.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "                                    format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month].ToString().Substring(0' 3) + format.Substring(mIndex + mLength); " is 134.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "                                format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Month) + format.Substring(mIndex + mLength); " is 159.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "								HalfDayTime = (Hour - (KSPDateStructure.HoursPerDay / 2)).ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length)); " is 145.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "						format = format.Substring(0' mIndex) + Hour.ToString("D" + mLength.Clamp(1'KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength); " is 161.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "						format = format.Substring(0' mIndex) + Minute.ToString("D" + mLength.Clamp(1'KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength); " is 166.
Long Statement,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The length of the statement  "						format = format.Substring(0' mIndex) + Second.ToString("D" + mLength.Clamp(1'KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength); " is 168.
Long Statement,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,ToString,The length of the statement  "                        format = format.Substring(0' mIndex) + Math.Abs(Hours).ToString("D" + mLength.Clamp(1' KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength); " is 173.
Long Statement,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,ToString,The length of the statement  "                        format = format.Substring(0' mIndex) + Math.Abs(Minutes).ToString("D" + mLength.Clamp(1' KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength); " is 178.
Long Statement,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,ToString,The length of the statement  "                        format = format.Substring(0' mIndex) + Math.Abs(Seconds).ToString("D" + mLength.Clamp(1' KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength); " is 180.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5; " is 140.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized; " is 137.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone)); " is 275.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone)); " is 152.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)); " is 156.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone))); " is 205.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                        vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized; " is 241.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                        vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking; " is 163.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                        DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3)); " is 159.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                        DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag); " is 122.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                        Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone))); " is 205.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3)); " is 159.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag); " is 122.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3; " is 155.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The length of the statement  "                    DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3)); " is 158.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The length of the statement  "                GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd); " is 367.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The length of the statement  "                GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget); " is 288.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The length of the statement  "                    //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget); " is 318.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawArc,The length of the statement  "                Vector3d vectArc = Quaternion.AngleAxis((Single)Angle / (ArcPoints - 1) * i' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart; " is 128.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLine,The length of the statement  "            //line.SetWidth((Single)StartWidth / 1000 * (Single)(cam.transform.position - pointStart).magnitude' (Single)EndWidth / 1000 * (Single)(cam.transform.position - pointEnd).magnitude); " is 182.
Long Statement,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The length of the statement  "            //line.SetWidth((Single)StartWidth / 1000 * (Single)(cam.transform.position - pointStart).magnitude' (Single)EndWidth / 1000 * (Single)(cam.transform.position - pointEnd).magnitude); " is 182.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart; " is 120.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                    Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart; " is 121.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                    vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized; " is 137.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                    DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone)); " is 157.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                    DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone)); " is 152.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                    DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone)); " is 162.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                        DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone)); " is 158.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                        DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone)); " is 180.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                        vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized; " is 137.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                        vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking; " is 163.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                            vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9; " is 165.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The length of the statement  "                    DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag); " is 128.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The length of the statement  "                GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd); " is 309.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The length of the statement  "                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget); " is 316.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawArc,The length of the statement  "                Vector3d vectArc = Quaternion.AngleAxis(-(Single)Angle / (ArcPoints - 1) * i' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart; " is 129.
Long Statement,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawLine,The length of the statement  "            //line.SetWidth((Single)StartWidth / 1000 * (Single)(cam.transform.position - pointStart).magnitude' (Single)EndWidth / 1000 * (Single)(cam.transform.position - pointEnd).magnitude); " is 182.
Long Statement,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,SetToolbarIcon,The length of the statement  "            String strToolbarIcon = Resources.PathPluginToolbarIcons.Substring(Resources.PathPluginToolbarIcons.ToLower().IndexOf("/gamedata/")+10) + "/TWPIcon"; " is 149.
Long Statement,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,DrawGUI,The length of the statement  "                        case GameScenes.SPACECENTER: AddLock = settings.ClickThroughProtect_KSC && !(InputLockManager.GetControlLock("TWPControlLock") != ControlTypes.None); break; " is 156.
Long Statement,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,DrawGUI,The length of the statement  "                        case GameScenes.EDITOR: AddLock = settings.ClickThroughProtect_Editor && !(InputLockManager.GetControlLock("TWPControlLock") != ControlTypes.None); break; " is 154.
Long Statement,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,DrawGUI,The length of the statement  "                        case GameScenes.FLIGHT: AddLock = settings.ClickThroughProtect_Flight && !(InputLockManager.GetControlLock("TWPControlLock") != ControlTypes.None); break; " is 154.
Long Statement,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,DrawGUI,The length of the statement  "                            case GameScenes.EDITOR: InputLockManager.SetControlLock((ControlTypes.EDITOR_LOCK | ControlTypes.EDITOR_GIZMO_TOOLS)' "TWPControlLock"); break; " is 143.
Long Statement,TransferWindowPlanner,Utilities,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\Utilities.cs,getEjectionAngleAtUT,The length of the statement  "            double returnEjectAngle = ((Math.Atan2(bodyPrograde.y' bodyPrograde.x) - Math.Atan2(vesselPosition.y' vesselPosition.x)) * 180.0 / Math.PI); " is 140.
Long Statement,TransferWindowPlanner,Utilities,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\Utilities.cs,timeOfEjectionAngle,The length of the statement  "            //work out iterations for precision - we only really need to within a second - so how many iterations do we actually need " is 121.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTextField,The length of the statement  "            else if ((RegexFailOnMatch && System.Text.RegularExpressions.Regex.IsMatch(Value' RegexValidator' System.Text.RegularExpressions.RegexOptions.IgnoreCase)) || " is 157.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTextField,The length of the statement  "                (!RegexFailOnMatch && !System.Text.RegularExpressions.Regex.IsMatch(Value' RegexValidator' System.Text.RegularExpressions.RegexOptions.IgnoreCase))) " is 148.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The length of the statement  "                if (GUI.Button(new Rect(WindowRect.width - 122' 2' 30' 20)' new GUIContent(Resources.btnCalendar' "Toggle Calendar")' "ButtonSettings")) " is 136.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The length of the statement  "            GUIContent contSettings = new GUIContent(Resources.GetSettingsButtonIcon(TransferWindowPlanner.settings.VersionAttentionFlag)' "Settings..."); " is 142.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The length of the statement  "            mbTWP.windowSettings.Visible = GUI.Toggle(new Rect(WindowRect.width - 92' 2' 30' 20)' mbTWP.windowSettings.Visible' contSettings' "ButtonSettings"); " is 148.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The length of the statement  "            mbTWP.windowSettingsBlockout.Visible = mbTWP.windowSettingsBlockoutExtra.Visible = mbTWP.windowSettings.Visible && !ShowMinimized; " is 130.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The length of the statement  "            GUILayout.Label(String.Format("{0} (@{1:0}km)"' TransferSpecs.OriginName' TransferSpecs.InitialOrbitAltitude / 1000)' Styles.styleTextYellow); " is 142.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The length of the statement  "            GUILayout.Label(String.Format("{0} (@{1:0}km)"' TransferSpecs.DestinationName' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellow); " is 145.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The length of the statement  "            //GUILayout.Label(String.Format("{0:0}"' KSPTime.PrintDate(new KSPTime(TransferSelected.DepartureTime)' KSPTime.PrintTimeFormat.DateTimeString))' Styles.styleTextYellow); " is 170.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The length of the statement  "            GUILayout.Label(new KSPDateTime(TransferSelected.DepartureTime).ToStringStandard(DateStringFormatsEnum.DateTimeFormat)' Styles.styleTextYellow); " is 144.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The length of the statement  "            //GUILayout.Label(String.Format("{0:0}"' new KSPTime(TransferSelected.TravelTime).IntervalStringLongTrimYears())' Styles.styleTextYellow); " is 138.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The length of the statement  "            GUILayout.Label(new KSPTimeSpan(TransferSelected.TravelTime).ToStringStandard(TimeSpanStringFormatsEnum.IntervalLongTrimYears)' Styles.styleTextYellow); " is 152.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellow); " is 232.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            //GUILayout.Label(String.Format("{0:0}"' KSPTime.PrintDate(new KSPTime(TransferSelected.DepartureTime)' KSPTime.PrintTimeFormat.DateTimeString))' Styles.styleTextYellow); " is 170.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            GUILayout.Label(new KSPDateTime(TransferSelected.DepartureTime).ToStringStandard(DateStringFormatsEnum.DateTimeFormat)' Styles.styleTextYellow); " is 144.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            GUILayout.Label(String.Format("{0:0.00}°"' TransferSelected.PhaseAngle * LambertSolver.Rad2Deg)' Styles.styleTextYellow); " is 121.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "                GUILayout.Label(""); GUILayout.Label(String.Format("{0:0.00}°"' TransferSelected.EjectionHeading * LambertSolver.Rad2Deg)' Styles.styleTextYellow); " is 147.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "                        String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)' " is 135.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "                if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy))) " is 121.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "                if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy))) " is 124.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            //GUILayout.Label(String.Format("{0:0}"' KSPTime.PrintDate(new KSPTime(TransferSelected.DepartureTime + TransferSelected.TravelTime)' KSPTime.PrintTimeFormat.DateTimeString))' Styles.styleTextYellow); " is 200.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            GUILayout.Label(new KSPDateTime(TransferSelected.DepartureTime + TransferSelected.TravelTime).ToStringStandard(DateStringFormatsEnum.DateTimeFormat)' Styles.styleTextYellow); " is 174.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            //GUILayout.Label(String.Format("{0:0.00}°"' TransferSelected.EjectionAngle * LambertSolver.Rad2Deg)' Styles.styleTextYellow); " is 126.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            GUILayout.Label(String.Format("{0:0.00}°"' TransferSelected.EjectionInclination * LambertSolver.Rad2Deg)' Styles.styleTextYellow); " is 130.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "                GUILayout.Label(String.Format("{0:0.00}°"' TransferSelected.InsertionInclination * LambertSolver.Rad2Deg)' Styles.styleTextYellow); " is 131.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "            GUILayout.Label(String.Format("{0:0}"' new KSPTimeSpan(TransferSelected.TravelTime).ToStringStandard(TimeSpanStringFormatsEnum.IntervalLongTrimYears))' Styles.styleTextYellow); " is 176.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The length of the statement  "                if (GUI.Button(new Rect(DVEjectionRect.x + DVEjectionRect.width-20' DVEjectionRect.y' 16' 16)' new GUIContent(Resources.btnInfo' "Toggle Details...")' new GUIStyle())) " is 167.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            String Message = String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000); " is 208.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            //Message = Message.AppendLine("Depart at:      {0}"' KSPTime.PrintDate(new KSPTime(TransferSelected.DepartureTime)' KSPTime.PrintTimeFormat.DateTimeString)); " is 158.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            Message = Message.AppendLine("Depart at:      {0}"' new KSPDateTime(TransferSelected.DepartureTime).ToStringStandard(DateStringFormatsEnum.DateTimeFormat)); " is 156.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            //Message = Message.AppendLine("   Travel:      {0}"' new KSPTime(TransferSelected.TravelTime).IntervalStringLongTrimYears()); " is 126.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            Message = Message.AppendLine("   Travel:      {0}"' new KSPTimeSpan(TransferSelected.TravelTime).ToStringStandard(TimeSpanStringFormatsEnum.IntervalLongTrimYears)); " is 164.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            //Message = Message.AppendLine("Arrive at:      {0}"' KSPTime.PrintDate(new KSPTime(TransferSelected.DepartureTime + TransferSelected.TravelTime)' KSPTime.PrintTimeFormat.DateTimeString)); " is 188.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            Message = Message.AppendLine("Arrive at:      {0}"' new KSPDateTime(TransferSelected.DepartureTime + TransferSelected.TravelTime).ToStringStandard(DateStringFormatsEnum.DateTimeFormat)); " is 186.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            Message = Message.AppendLine("Ejection Inc.:  {0:0.00}°"' TransferSelected.EjectionInclination * LambertSolver.Rad2Deg); " is 120.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The length of the statement  "            Message = Message.AppendLine("Insertion Inc.: {0:0.00}°"' TransferSelected.InsertionInclination * LambertSolver.Rad2Deg); " is 121.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' " is 207.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent); " is 126.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold); " is 236.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle()); " is 128.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel); " is 132.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText); " is 261.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel); " is 147.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText); " is 267.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText); " is 195.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip); " is 129.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip); " is 138.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))]; " is 126.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The length of the statement  "                    GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV); " is 155.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawInstructions,The length of the statement  "            DrawSingleInstruction("2."'"Enter the altitude of your parking orbit around that body. This is assumed to be a circular' equatorial orbit."); " is 141.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawInstructions,The length of the statement  "            DrawSingleInstruction("4."' "Enter the altitude of the orbit you wish to establish around your destination body. You can enter 0 if you intend to perform a fly-by or aerobraking maneuver."); " is 190.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawInstructions,The length of the statement  "            //DrawSingleInstruction("4."' "Enter the altitude of the orbit you wish to establish around your destination body. You may check the \"No insertion burn\" checkbox instead if you intend to perform a fly-by or aerobraking maneuver."); " is 233.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawInstructions,The length of the statement  "            DrawSingleInstruction("5."' "Enter the earliest departure date to include in the plot. Generally this should be your current game time' which you can find in the tracking station in the game."); " is 194.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawInstructions,The length of the statement  "            DrawSingleInstruction("6."'"Click the \"Plot it!\" button. After a few seconds a plot will appear showing how much Δv is required to reach your destination for different departure dates and times of flight. Click on any point on this plot to see full details of the selected transfer."); " is 287.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The length of the statement  "                            mbTWP.EjectAngle.DrawAngle(cbOrigin'TransferSelected.EjectionAngle * LambertSolver.Rad2Deg'TransferSelected.EjectionAngleIsRetrograde); " is 135.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetWorkerVariables,The length of the statement  "            DepartureMin = dateMinDeparture.UT; // new KSPDateTime(strDepartureMinYear' strDepartureMinDay).UT; // new KSPDateTime(strDepartureMinYear' strDepartureMinDay' "0"' "0"' "0").UT - KSPDateStructure.SecondsPerYear - KSPDateStructure.SecondsPerDay; " is 245.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetWorkerVariables,The length of the statement  "            DepartureMax = dateMaxDeparture.UT; // new KSPDateTime(strDepartureMaxYear' strDepartureMaxDay).UT; // new KSPDateTime(strDepartureMaxYear' strDepartureMaxDay' "0"' "0"' "0").UT - KSPDateStructure.SecondsPerYear - KSPDateStructure.SecondsPerDay; " is 245.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GeneratePorkchop,The length of the statement  "                    if (System.IO.File.Exists(String.Format("{0}/DeltaVWorking-{1}-{2}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName))) " is 139.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GeneratePorkchop,The length of the statement  "                        System.IO.File.Delete(String.Format("{0}/DeltaVWorking-{1}-{2}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName)); " is 135.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GeneratePorkchop,The length of the statement  "                        System.IO.File.AppendAllText(String.Format("{0}/DeltaVWorking.csv"' Resources.PathPlugin)' strCSVLine.TrimEnd(''') + "\r\n"); " is 125.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GeneratePorkchop,The length of the statement  "                        Int32 ColorIndex = Math.Min((Int32)(Math.Floor(relativeDeltaV * DeltaVColorPalette.Count))' DeltaVColorPalette.Count - 1); " is 122.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetTransferDetails,The length of the statement  "            LambertSolver.TransferDeltaV(cbOrigin' cbDestination' DepartureSelected' TravelSelected' InitialOrbitAltitude' FinalOrbitAltitude' out TransferSelected); " is 153.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawPlotTexture,The length of the statement  "                //LogFormatted("Value:{0} - ColIndex:{1} - Length:{2} - Line:{3}"' iCurrent' ColorIndex' DeltaVsColorIndex.Length' Line); " is 121.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,StartLongWorker,The length of the statement  "            Double TravelRange = (new KSPTimeSpan(strTravelMaxDays' "0"' "0"' "0") - new KSPTimeSpan(strTravelMinDays' "0"' "0"' "0")).UT; " is 126.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchopCompleted,The length of the statement  "            LogFormatted("Completed a LongWorker: {0}->{1}' Depart:Year {2}=>Year {3}' Travel:{4}=>{5}"' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear' lstPlots[CurrentPlot].DepMaxYear' lstPlots[CurrentPlot].TravelMin' lstPlots[CurrentPlot].TravelMax); " is 270.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                    if (System.IO.File.Exists(String.Format("{0}/DeltaVWorking-{1}-{2}-{3}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear))) " is 177.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                        System.IO.File.Delete(String.Format("{0}/DeltaVWorking-{1}-{2}-{3}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear)); " is 173.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                    if (System.IO.File.Exists(String.Format("{0}/DeltaVTravelWorking-{1}-{2}-{3}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear))) " is 183.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                        System.IO.File.Delete(String.Format("{0}/DeltaVTravelWorking-{1}-{2}-{3}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear)); " is 179.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                    if (System.IO.File.Exists(String.Format("{0}/DeltaVDaily-{1}-{2}-{3}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear))) " is 175.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                        System.IO.File.Delete(String.Format("{0}/DeltaVDaily-{1}-{2}-{3}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear)); " is 171.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                        //System.IO.File.AppendAllText(String.Format("{0}/DeltaVWorking-{1}-{2}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName)' strCSVLine.TrimEnd(''') + "\r\n"); " is 178.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                            //System.IO.File.AppendAllText(String.Format("{0}/DeltaVTravelWorking-{1}-{2}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName)' strCSVLine2.TrimEnd(''') + "\r\n"); " is 185.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                        System.IO.File.AppendAllText(String.Format("{0}/DeltaVDaily-{1}-{2}-{3}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName' lstPlots[CurrentPlot].DepMinYear)' " is 177.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                            //String.Format("{0:0.00}'{1:0.00}'{2:0.00}\r\n"' transferDailyBest.DepartureTime' transferDailyBest.DVTotal' transferDailyBest.TravelTime)); " is 141.
Long Statement,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The length of the statement  "                            String.Format("{0:0.00}'{1:0.00}'{2:0.00}'\"{3}\"'\"{4}\"\r\n"' transferDailyBest.DepartureTime' transferDailyBest.DVTotal' transferDailyBest.TravelTime' new KSPDateTime(transferDailyBest.DepartureTime).ToStringStandard(DateStringFormatsEnum.KSPFormat)' new KSPTimeSpan(transferDailyBest.TravelTime).ToStringStandard(TimeSpanStringFormatsEnum.IntervalLong))); " is 359.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,OnGUIEvery,The length of the statement  "            //    GUI.Label(new Rect(cam.camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectAngle)).x' Screen.height - cam.camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectAngle)).y' 100' 30)' String.Format("{0:0.00}°"' this.intTest2)); " is 246.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    //DrawLabel("cam:{0} - {1}"' PhaseAngle.cam.Distance' (ScaledSpace.LocalToScaledSpace(PhaseAngle.cam.transform.position) - ScaledSpace.LocalToScaledSpace(PhaseAngle.vectPosWorldOrigin)).magnitude); " is 203.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    //DrawLabel("cam2:{0} - {1} - {2}"' PhaseAngle.cam.transform.position' PhaseAngle.cam.target.transform.position' ScaledSpace.LocalToScaledSpace(PhaseAngle.vectPosWorldOrigin)); " is 182.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    //DrawLabel("cam3:{0} - {1} "' PhaseAngle.cam.camera.WorldToScreenPoint(PhaseAngle.vectPosWorldOrigin)' PhaseAngle.cam.camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(PhaseAngle.vectPosWorldOrigin))); " is 215.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //Double TravelRange = (new KSPTimeSpan(mbTWP.windowMain.strTravelMaxDays' "0"' "0"' "0") - new KSPTimeSpan(mbTWP.windowMain.strTravelMinDays' "0"' "0"' "0")).UT; " is 162.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //DrawLabel("Dep:{0}  ({1})"' new KSPTimeSpan(DepartureRange).ToStringStandard(TimeSpanStringFormatsEnum.IntervalLong)' DepartureRange); " is 136.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //DrawLabel("Dep:{0}  ({1})"' new KSPTimeSpan(TravelRange).ToStringStandard(TimeSpanStringFormatsEnum.IntervalLong)' TravelRange); " is 130.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //        String.Format("{0} -> {1}"'mbTWP.windowMain.TransferSelected.Origin.bodyName'mbTWP.windowMain.TransferSelected.Destination.bodyName)'  " is 143.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                DrawLabel("Plot:{0}"' new Rect(mbTWP.windowMain.PlotPosition.x' mbTWP.windowMain.PlotPosition.y' mbTWP.windowMain.PlotWidth' mbTWP.windowMain.PlotHeight)); " is 155.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                DrawLabel("Departure:{0:0}' Travel:{1:0}"' mbTWP.windowMain.DepartureSelected / KSPDateStructure.SecondsPerDay' mbTWP.windowMain.TravelSelected / KSPDateStructure.SecondsPerDay); " is 178.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //        dblEjectAt = Utilities.timeOfEjectionAngle(FlightGlobals.ActiveVessel.orbit' mbTWP.windowMain.TransferSelected.DepartureTime' mbTWP.windowMain.TransferSelected.EjectionAngle * LambertSolver.Rad2Deg'intTest1 ' out dblOutAngle); " is 236.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    DrawLabel("Scan: {0:0}->{1:0}"' mbTWP.windowMain.TransferSelected.DepartureTime - FlightGlobals.ActiveVessel.orbit.period / 2' mbTWP.windowMain.TransferSelected.DepartureTime + FlightGlobals.ActiveVessel.orbit.period / 2); " is 228.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //        LambertSolver.TransferDeltaV(mbTWP.windowMain.TransferSelected.Origin' mbTWP.windowMain.TransferSelected.Destination' " is 127.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //            intTest5' mbTWP.windowMain.TransferSelected.TravelTime' mbTWP.windowMain.TransferSpecs.InitialOrbitAltitude' mbTWP.windowMain.TransferSpecs.FinalOrbitAltitude' out transTemp); " is 189.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //        LogFormatted("VesselOrbit: {0}"' FlightGlobals.ActiveVessel.orbit.getOrbitalVelocityAtUT(transTemp.DepartureTime)); " is 125.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //        dblEjectAt2 = timeOfLeastDVBurn(FlightGlobals.ActiveVessel.orbit' dblEjectAt' mbTWP.windowMain.TransferSelected.TransferInitalVelocity' 8' out vectEject); " is 164.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //        //LogFormatted("OrbVelocity:{0}"' FlightGlobals.ActiveVessel.orbit.getOrbitalVelocityAtUT(transTemp.DepartureTime)); " is 126.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //        DrawLabel("TransferInit:{0} - {1}"' transTemp.TransferInitalVelocity.magnitude' transTemp.TransferInitalVelocity); " is 124.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //            ManeuverNode mNode = FlightGlobals.ActiveVessel.patchedConicSolver.AddManeuverNode(transTemp.DepartureTime); " is 122.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    DrawLabel("D:{0:0} T:{0:0}"' mbTWP.windowMain.TransferSelected.DepartureTime' mbTWP.windowMain.TransferSelected.TravelTime); " is 130.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("Next UT:{0}->{1}: {2}"'cbO.bodyName'cbD.bodyName'LambertSolver.NextLaunchWindowUT(cbO'cbD)); " is 122.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("DV:{0}->{1}: {2}"' cbO.bodyName' cbD.bodyName' LambertSolver.TransferDeltaV(cbO' cbD' 5030208' 5718672' 100000' 100000)); " is 151.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("DV:{0}->{1}: {2}"' cbO.bodyName' cbD.bodyName' LambertSolver.Solve(cbO.referenceBody.gravParameter' originPositionAtDeparture' destinationPositionAtArrival' 5718672' longWay)); " is 206.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("OVat5030208:{0}: {1}"' cbO.bodyName' cbO.orbit.getOrbitalVelocityAtUT(5030208).magnitude); " is 120.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("OVat5030208:{0}: {1}"' cbD.bodyName' cbD.orbit.getOrbitalVelocityAtUT(5030208).magnitude); " is 120.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("RPat5030208:{0}: X:{1}'Y:{2}'Z:{3}"' cbO.bodyName' cbO.orbit.getRelativePositionAtUT(5030208).x' cbO.orbit.getRelativePositionAtUT(5030208).y' cbO.orbit.getRelativePositionAtUT(5030208).z); " is 219.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("RPat5030208:{0}: X:{1}'Y:{2}'Z:{3}"' cbD.bodyName' cbD.orbit.getRelativePositionAtUT(5030208).x' cbD.orbit.getRelativePositionAtUT(5030208).y' cbD.orbit.getRelativePositionAtUT(5030208).z); " is 219.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("RPat5030208:{0}: X:{1}'Y:{2}'Z:{3}"' cbO.bodyName' cbO.orbit.getRelativePositionAtUT(5030208 - Planetarium.GetUniversalTime()).x' cbO.orbit.getRelativePositionAtUT(5030208 - Planetarium.GetUniversalTime()).y' cbO.orbit.getRelativePositionAtUT(5030208 - Planetarium.GetUniversalTime()).z); " is 318.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    LogFormatted_DebugOnly("RPat5030208:{0}: X:{1}'Y:{2}'Z:{3}"' cbD.bodyName' cbD.orbit.getRelativePositionAtUT(5030208 - Planetarium.GetUniversalTime()).x' cbD.orbit.getRelativePositionAtUT(5030208 - Planetarium.GetUniversalTime()).y' cbD.orbit.getRelativePositionAtUT(5030208 - Planetarium.GetUniversalTime()).z); " is 318.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    //LogFormatted_DebugOnly("SwapRPat5030208:{0}: X:{1}'Y:{2}'Z:{3}"' cbO.bodyName' cbO.orbit.SwappedRelativePositionAtUT(5030208).x' cbO.orbit.SwappedRelativePositionAtUT(5030208).y' cbO.orbit.SwappedRelativePositionAtUT(5030208).z); " is 237.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,DrawWindow,The length of the statement  "                //    //LogFormatted_DebugOnly("SwapRPat5030208:{0}: X:{1}'Y:{2}'Z:{3}"' cbD.bodyName' cbD.orbit.SwappedRelativePositionAtUT(5030208).x' cbD.orbit.SwappedRelativePositionAtUT(5030208).y' cbD.orbit.SwappedRelativePositionAtUT(5030208).z); " is 237.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,timeOfLeastDVBurn,The length of the statement  "            //work out iterations for precision - we only really need to within a second - so how many iterations do we actually need " is 121.
Long Statement,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,timeOfLeastDVBurn,The length of the statement  "                    System.IO.File.AppendAllText(Resources.PathPlugin + "/DVTest.csv"' String.Format("{0}'{1}'{2}\r\n"'t'Eject.magnitude'Eject)); " is 125.
Long Statement,TransferWindowPlanner,Resources,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Resources.cs,LoadImageFromFile,The length of the statement  "                        MonoBehaviourExtended.LogFormatted("Failed to load the texture:{0} ({1})"' String.Format("{0}/{1}"' FolderPath' FileName)' ex.Message); " is 135.
Long Statement,TransferWindowPlanner,Resources,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Resources.cs,LoadImageFromFile,The length of the statement  "                MonoBehaviourExtended.LogFormatted("Failed to load (are you missing a file):{0} ({1})"' String.Format("{0}/{1}"' FolderPath' FileName)' ex.Message); " is 148.
Long Statement,TransferWindowPlanner,Settings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Settings.cs,OnDecodeFromConfigNode,The length of the statement  "            DateTime.TryParseExact(VersionCheckDate_AttemptStored' "yyyy-MM-dd"' null' System.Globalization.DateTimeStyles.None' out VersionCheckDate_Attempt); " is 147.
Long Statement,TransferWindowPlanner,Settings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Settings.cs,OnDecodeFromConfigNode,The length of the statement  "            DateTime.TryParseExact(VersionCheckDate_SuccessStored' "yyyy-MM-dd"' null' System.Globalization.DateTimeStyles.None' out VersionCheckDate_Success); " is 147.
Long Statement,TransferWindowPlanner,Settings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Settings.cs,bwVersionCheck_RunWorkerCompleted,The length of the statement  "                matchVersion = Regex.Match(strFile' "(?<=\\|LATESTVERSION\\|).+(?=\\|LATESTVERSION\\|)"' System.Text.RegularExpressions.RegexOptions.Singleline); " is 145.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,Awake,The length of the statement  "            //WindowRect = new Rect(mbTWP.windowMain.WindowRect.x + mbTWP.windowMain.WindowRect.width' mbTWP.windowMain.WindowRect.y' 300' 200); " is 132.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,Awake,The length of the statement  "            ddlSettingsSkin = new DropDownList(EnumExtensions.ToEnumDescriptions<Settings.DisplaySkin>()' (Int32)settings.SelectedSkin' this); " is 130.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,Awake,The length of the statement  "            ddlSettingsButtonStyle = new DropDownList(EnumExtensions.ToEnumDescriptions<Settings.ButtonStyleEnum>()' (Int32)settings.ButtonStyleChosen' this); " is 146.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_General,The length of the statement  "                    if (GUILayout.Button(new GUIContent("Not Installed. Click for Toolbar Info"' "Click to open your browser and find out more about the Common Toolbar")' Styles.styleTextCenterGreen)) " is 180.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_General,The length of the statement  "                //if (DrawToggle(ref settings.UseBlizzyToolbarIfAvailable' new GUIContent("Use Common Toolbar"' "Choose to use the Common  Toolbar or the native KSP ARP button")' Styles.styleToggle)) " is 183.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The length of the statement  "                if (GUILayout.Button(new GUIContent("Not Installed. Click for Alarm Clock Info"' "Click to open your browser and find out more about the Kerbal Alarm Clock")' Styles.styleTextCenterGreen)) " is 188.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The length of the statement  "                if (GUILayout.Button(new GUIContent("You need a newer version of KAC"' "Click to open your browser and download a newer Kerbal Alarm Clock")' Styles.styleTextCenterGreen)) " is 171.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_About,The length of the statement  "                    GUILayout.Label(String.Format("{0} @ {1}"' settings.VersionWeb' settings.VersionCheckDate_SuccessString)' Styles.styleTextYellowBold); " is 134.
Long Statement,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_About,The length of the statement  "                    GUILayout.Label(String.Format("{0} @ {1}"' settings.VersionWeb' settings.VersionCheckDate_SuccessString)' Styles.styleTextGreen); " is 129.
Long Statement,TransferWindowPlanner,TWPWindowSettingsBlockout,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettingsBlockout.cs,DrawWindow,The length of the statement  "            WindowRect = new Rect(mbTWP.windowSettings.WindowRect.x' mbTWP.windowSettings.WindowRect.y' mbTWP.windowSettings.WindowWidth' mbTWP.windowSettings.WindowHeight); " is 161.
Long Statement,TWP_KACWrapper,KACAPI,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\KACWrapper.cs,DrawAlarmActionChoice,The length of the statement  "                Int32 OutValue = (Int32)DrawAlarmActionChoiceMethod.Invoke(actualKAC' new System.Object[] { InValue' LabelText' LabelWidth' ButtonWidth }); " is 139.
Complex Conditional,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,OnGUIEvery,The conditional expression  "Visible && blnFlightUIVisible && !(HighLogic.LoadedScene == GameScenes.FLIGHT && PauseMenu.isOpen)"  is complex.
Complex Conditional,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,DrawToolTip,The conditional expression  "TooltipsEnabled && Visible && (strToolTipText != "") && ((TooltipDisplayForSecs == 0) || (fltTooltipTime < (Single)TooltipDisplayForSecs))"  is complex.
Complex Conditional,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The conditional expression  "MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding"  is complex.
Complex Conditional,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The conditional expression  "MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding"  is complex.
Complex Conditional,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTextField,The conditional expression  "(RegexFailOnMatch && System.Text.RegularExpressions.Regex.IsMatch(Value' RegexValidator' System.Text.RegularExpressions.RegexOptions.IgnoreCase)) ||                  (!RegexFailOnMatch && !System.Text.RegularExpressions.Regex.IsMatch(Value' RegexValidator' System.Text.RegularExpressions.RegexOptions.IgnoreCase))"  is complex.
Empty Catch Block,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GeneratePorkchop,The method has an empty catch block.
Empty Catch Block,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The method has an empty catch block.
Empty Catch Block,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The method has an empty catch block.
Empty Catch Block,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GenerateDataPorkchop,The method has an empty catch block.
Empty Catch Block,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,timeOfLeastDVBurn,The method has an empty catch block.
Empty Catch Block,TWP_KACWrapper,KACAPI,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\KACWrapper.cs,ExtractAlarmList,The method has an empty catch block.
Magic Number,KSPPluginFramework,EnumExtensions,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\Extensions.cs,NormalizeAngle360,The following statement contains a magic number: val %= 360;
Magic Number,KSPPluginFramework,EnumExtensions,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\Extensions.cs,NormalizeAngle360,The following statement contains a magic number: if (val < 0)                  val += 360;
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawBlockingSelector,The following statement contains a magic number: if (ListVisible)                  {                      //This will collect the click event before any other controls under the listrect                      if (GUI.Button(rectListBox' ""' styleListBlocker))                      {                          Int32 oldIndex = SelectedIndex;                            if (!ListPageOverflow)                              SelectedIndex = (Int32)Math.Floor((Event.current.mousePosition.y - rectListBox.y) / (rectListBox.height / Items.Count));                          else {                              //do some maths to work out the actual index - Page Length + 1 for the pager row                              Int32 SelectedRow = (Int32)Math.Floor((Event.current.mousePosition.y - rectListBox.y) / (rectListBox.height / (ListPageLength+1)));                                //LogFormatted("{0}-{1}-{2}-{3}-{4}"' Event.current.mousePosition.y' rectListBox.y' rectListBox.height' ListPageLength' SelectedRow);                                if (SelectedRow==0) {                                  //this is the paging row...                                  if (Event.current.mousePosition.x > (rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right))                                      ListPageNum++;                                  else if (Event.current.mousePosition.x > (rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right))                                      ListPageNum--;                                  if (ListPageNum < 0) ListPageNum = (Int32)Math.Floor((Single)Items.Count / ListPageLength);                                  if (ListPageNum*ListPageLength>Items.Count) ListPageNum = 0;                                  return;                              }                              else                              {                                  SelectedIndex = (ListPageNum * ListPageLength) + (SelectedRow - 1);                              }                              if (SelectedIndex >= Items.Count) {                                  SelectedIndex = oldIndex;                                  return;                              }                          }                          //Throw an event or some such from here                          if ((oldIndex!= SelectedIndex) && (OnSelectionChanged != null))                              OnSelectionChanged(this'oldIndex' SelectedIndex);                          ListVisible = false;                      }                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawBlockingSelector,The following statement contains a magic number: if (ListVisible)                  {                      //This will collect the click event before any other controls under the listrect                      if (GUI.Button(rectListBox' ""' styleListBlocker))                      {                          Int32 oldIndex = SelectedIndex;                            if (!ListPageOverflow)                              SelectedIndex = (Int32)Math.Floor((Event.current.mousePosition.y - rectListBox.y) / (rectListBox.height / Items.Count));                          else {                              //do some maths to work out the actual index - Page Length + 1 for the pager row                              Int32 SelectedRow = (Int32)Math.Floor((Event.current.mousePosition.y - rectListBox.y) / (rectListBox.height / (ListPageLength+1)));                                //LogFormatted("{0}-{1}-{2}-{3}-{4}"' Event.current.mousePosition.y' rectListBox.y' rectListBox.height' ListPageLength' SelectedRow);                                if (SelectedRow==0) {                                  //this is the paging row...                                  if (Event.current.mousePosition.x > (rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right))                                      ListPageNum++;                                  else if (Event.current.mousePosition.x > (rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right))                                      ListPageNum--;                                  if (ListPageNum < 0) ListPageNum = (Int32)Math.Floor((Single)Items.Count / ListPageLength);                                  if (ListPageNum*ListPageLength>Items.Count) ListPageNum = 0;                                  return;                              }                              else                              {                                  SelectedIndex = (ListPageNum * ListPageLength) + (SelectedRow - 1);                              }                              if (SelectedIndex >= Items.Count) {                                  SelectedIndex = oldIndex;                                  return;                              }                          }                          //Throw an event or some such from here                          if ((oldIndex!= SelectedIndex) && (OnSelectionChanged != null))                              OnSelectionChanged(this'oldIndex' SelectedIndex);                          ListVisible = false;                      }                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawButton,The following statement contains a magic number: if (DropDownGlyph != null)                  {                      Rect rectDropIcon = new Rect(rectButton) { x = (rectButton.x + rectButton.width - 20)' width = 20 };                      if (DropDownSeparator != null)                      {                          Rect rectDropSep = new Rect(rectDropIcon) { x = (rectDropIcon.x - DropDownSeparator.CalcWidth)' width = DropDownSeparator.CalcWidth };                          if (DropDownSeparator.Style == null){                              GUI.Box(rectDropSep' DropDownSeparator.Content);                          } else {                              GUI.Box(rectDropSep' DropDownSeparator.Content' DropDownSeparator.Style);                          }                      }                      if (DropDownGlyph.Style == null) {                          GUI.Box(rectDropIcon' DropDownGlyph.Content);                       } else {                          GUI.Box(rectDropIcon' DropDownGlyph.Content' DropDownGlyph.Style);                      }                                        }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawButton,The following statement contains a magic number: if (DropDownGlyph != null)                  {                      Rect rectDropIcon = new Rect(rectButton) { x = (rectButton.x + rectButton.width - 20)' width = 20 };                      if (DropDownSeparator != null)                      {                          Rect rectDropSep = new Rect(rectDropIcon) { x = (rectDropIcon.x - DropDownSeparator.CalcWidth)' width = DropDownSeparator.CalcWidth };                          if (DropDownSeparator.Style == null){                              GUI.Box(rectDropSep' DropDownSeparator.Content);                          } else {                              GUI.Box(rectDropSep' DropDownSeparator.Content' DropDownSeparator.Style);                          }                      }                      if (DropDownGlyph.Style == null) {                          GUI.Box(rectDropIcon' DropDownGlyph.Content);                       } else {                          GUI.Box(rectDropIcon' DropDownGlyph.Content' DropDownGlyph.Style);                      }                                        }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,CalcPagesAndSizes,The following statement contains a magic number: if ((rectListBox.y+rectListBox.height)>Window.WindowRect.height) {                      if (rectListBox.height < Window.WindowRect.height - 8)                      {                          //move the top up so that the full list is visible                          ListPageOverflow = false;                          rectListBox.y = Window.WindowRect.height - rectListBox.height - 4;                      }                      else                      {                          //Need multipages for this list                          ListPageOverflow = true;                          rectListBox.y = 4;                          rectListBox.height = (Single)(ListItemHeight * Math.Floor((Window.WindowRect.height - 8) / ListItemHeight));                          ListPageLength = (Int32)(Math.Floor((Window.WindowRect.height - 8) / ListItemHeight) - 1);                          ListPageNum = (Int32)Math.Floor((Double)SelectedIndex / ListPageLength);                      }                  } else {                       ListPageOverflow = false;                   }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,CalcPagesAndSizes,The following statement contains a magic number: if ((rectListBox.y+rectListBox.height)>Window.WindowRect.height) {                      if (rectListBox.height < Window.WindowRect.height - 8)                      {                          //move the top up so that the full list is visible                          ListPageOverflow = false;                          rectListBox.y = Window.WindowRect.height - rectListBox.height - 4;                      }                      else                      {                          //Need multipages for this list                          ListPageOverflow = true;                          rectListBox.y = 4;                          rectListBox.height = (Single)(ListItemHeight * Math.Floor((Window.WindowRect.height - 8) / ListItemHeight));                          ListPageLength = (Int32)(Math.Floor((Window.WindowRect.height - 8) / ListItemHeight) - 1);                          ListPageNum = (Int32)Math.Floor((Double)SelectedIndex / ListPageLength);                      }                  } else {                       ListPageOverflow = false;                   }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,CalcPagesAndSizes,The following statement contains a magic number: if ((rectListBox.y+rectListBox.height)>Window.WindowRect.height) {                      if (rectListBox.height < Window.WindowRect.height - 8)                      {                          //move the top up so that the full list is visible                          ListPageOverflow = false;                          rectListBox.y = Window.WindowRect.height - rectListBox.height - 4;                      }                      else                      {                          //Need multipages for this list                          ListPageOverflow = true;                          rectListBox.y = 4;                          rectListBox.height = (Single)(ListItemHeight * Math.Floor((Window.WindowRect.height - 8) / ListItemHeight));                          ListPageLength = (Int32)(Math.Floor((Window.WindowRect.height - 8) / ListItemHeight) - 1);                          ListPageNum = (Int32)Math.Floor((Double)SelectedIndex / ListPageLength);                      }                  } else {                       ListPageOverflow = false;                   }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,CalcPagesAndSizes,The following statement contains a magic number: if ((rectListBox.y+rectListBox.height)>Window.WindowRect.height) {                      if (rectListBox.height < Window.WindowRect.height - 8)                      {                          //move the top up so that the full list is visible                          ListPageOverflow = false;                          rectListBox.y = Window.WindowRect.height - rectListBox.height - 4;                      }                      else                      {                          //Need multipages for this list                          ListPageOverflow = true;                          rectListBox.y = 4;                          rectListBox.height = (Single)(ListItemHeight * Math.Floor((Window.WindowRect.height - 8) / ListItemHeight));                          ListPageLength = (Int32)(Math.Floor((Window.WindowRect.height - 8) / ListItemHeight) - 1);                          ListPageNum = (Int32)Math.Floor((Double)SelectedIndex / ListPageLength);                      }                  } else {                       ListPageOverflow = false;                   }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,CalcPagesAndSizes,The following statement contains a magic number: if ((rectListBox.y+rectListBox.height)>Window.WindowRect.height) {                      if (rectListBox.height < Window.WindowRect.height - 8)                      {                          //move the top up so that the full list is visible                          ListPageOverflow = false;                          rectListBox.y = Window.WindowRect.height - rectListBox.height - 4;                      }                      else                      {                          //Need multipages for this list                          ListPageOverflow = true;                          rectListBox.y = 4;                          rectListBox.height = (Single)(ListItemHeight * Math.Floor((Window.WindowRect.height - 8) / ListItemHeight));                          ListPageLength = (Int32)(Math.Floor((Window.WindowRect.height - 8) / ListItemHeight) - 1);                          ListPageNum = (Int32)Math.Floor((Double)SelectedIndex / ListPageLength);                      }                  } else {                       ListPageOverflow = false;                   }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,DropDownList,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\MonoBehaviourWindowPlus.cs,DrawDropDownList,The following statement contains a magic number: if (ListVisible)                  {                      if (styleListBoxToDraw == null) styleListBoxToDraw = GUI.skin.box;                      if (styleListItemToDraw == null) styleListItemToDraw = GUI.skin.label;                        //and draw it                      GUI.Box(rectListBox' ""' styleListBoxToDraw);                        Int32 iStart = 0'iEnd = Items.Count'iPad=0;                      if (ListPageOverflow)                      {                          //calc the size of each page                          iStart = ListPageLength * ListPageNum;                                                    if (ListPageLength * (ListPageNum + 1) < Items.Count)                              iEnd = ListPageLength * (ListPageNum + 1);                             //this moves us down a row to fit the paging buttons in the main loop                          iPad = 1;                            //Draw paging buttons                          GUI.Label(new Rect(rectListBox) { x = rectListBox.x + ListBoxPadding.left' height = 20 }' String.Format("Page {0}/{1:0}"' ListPageNum + 1' Math.Floor((Single)Items.Count / ListPageLength) + 1)' stylePager);                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 80 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Prev");                          GUI.Button(new Rect(rectListBox) { x = rectListBox.x + rectListBox.width - 40 - ListBoxPadding.right' y = rectListBox.y + 2' width = 40' height = 16 }' "Next");                      }                        //now draw each listitem                      for (int i = iStart; i < iEnd; i++)                      {                          Rect ListButtonRect = new Rect(rectListBox) {                              x = rectListBox.x + ListBoxPadding.left'                              width = rectListBox.width - ListBoxPadding.left-ListBoxPadding.right'                              y = rectListBox.y + ((i-iStart+iPad) * ListItemHeight) + ListBoxPadding.top'                              height = 20                          };                            if (GUI.Button(ListButtonRect' Items[i]' styleListItemToDraw)) {                              ListVisible = false;                              SelectedIndex = i;                          }                          if (i == SelectedIndex)                              GUI.Label(new Rect(ListButtonRect) { x = ListButtonRect.x + ListButtonRect.width - 20 }' "✔");                      }                      CloseOnOutsideClick();                  }
Magic Number,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,MonoBehaviourWindow,The following statement contains a magic number: this.WindowID = UnityEngine.Random.Range(1000' 2000000) + _AssemblyName.GetHashCode();
Magic Number,KSPPluginFramework,MonoBehaviourWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\MonoBehaviourWindow.cs,MonoBehaviourWindow,The following statement contains a magic number: this.WindowID = UnityEngine.Random.Range(1000' 2000000) + _AssemblyName.GetHashCode();
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.normal.textColor = new Color32(224' 224' 224' 255);
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.normal.textColor = new Color32(224' 224' 224' 255);
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.normal.textColor = new Color32(224' 224' 224' 255);
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.normal.textColor = new Color32(224' 224' 224' 255);
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.padding = new RectOffset(3' 3' 3' 3);
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.padding = new RectOffset(3' 3' 3' 3);
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.padding = new RectOffset(3' 3' 3' 3);
Magic Number,KSPPluginFramework,SkinsLibrary,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Framework\SkinsLibrary.cs,GenDefKSPTooltip,The following statement contains a magic number: retStyle.padding = new RectOffset(3' 3' 3' 3);
Magic Number,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The following statement contains a magic number: for (int i = matches.Count-1; i >=0; i--)  			{  				Match m = matches[i];  				Int32 mIndex = m.Index'mLength = m.Length;    				if (mIndex>0 && format[m.Index - 1] == '\\')  				{  					if (m.Length == 1)  						continue;  					else {  						mIndex++;  						mLength--;  					}  				}  				switch (m.Value[0])  				{  					case 'y':   						format = format.Substring(0' mIndex) + Year.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'M':                          if (mLength < 3)                          {                              String input2 = Month.ToString("D" + mLength);                              format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                          }                          else if (mLength == 3)                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount < 1)                                  {                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  }                                  else                                  {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month].ToString().Substring(0' 3) + format.Substring(mIndex + mLength);                                  }                          }                          else                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount<1){                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  } else {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month] + format.Substring(mIndex + mLength);                                  }                          }  						break;  					case 'd':  						format = format.Substring(0' mIndex) + Day.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'h':  						//how to do this one AM/PM Hours  						String HalfDayTime="";  						switch (AMPM)  						{  							case AMPMEnum.AM:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.PM:  								HalfDayTime = (Hour - (KSPDateStructure.HoursPerDay / 2)).ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.OddHoursPerDay:  							default:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' KSPDateStructure.HoursPerDay.ToString().Length));  								break;  						}    						format = format.Substring(0' mIndex) + HalfDayTime + format.Substring(mIndex + mLength);  						break;  					case 't':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToLower() + format.Substring(mIndex + mLength);  						break;  					case 'T':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToUpper() + format.Substring(mIndex + mLength);  						break;  					case 'H':  						format = format.Substring(0' mIndex) + Hour.ToString("D" + mLength.Clamp(1'KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 'm':  						format = format.Substring(0' mIndex) + Minute.ToString("D" + mLength.Clamp(1'KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 's':  						format = format.Substring(0' mIndex) + Second.ToString("D" + mLength.Clamp(1'KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength);  						break;    					default:  						break;  				}  			}
Magic Number,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The following statement contains a magic number: for (int i = matches.Count-1; i >=0; i--)  			{  				Match m = matches[i];  				Int32 mIndex = m.Index'mLength = m.Length;    				if (mIndex>0 && format[m.Index - 1] == '\\')  				{  					if (m.Length == 1)  						continue;  					else {  						mIndex++;  						mLength--;  					}  				}  				switch (m.Value[0])  				{  					case 'y':   						format = format.Substring(0' mIndex) + Year.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'M':                          if (mLength < 3)                          {                              String input2 = Month.ToString("D" + mLength);                              format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                          }                          else if (mLength == 3)                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount < 1)                                  {                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  }                                  else                                  {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month].ToString().Substring(0' 3) + format.Substring(mIndex + mLength);                                  }                          }                          else                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount<1){                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  } else {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month] + format.Substring(mIndex + mLength);                                  }                          }  						break;  					case 'd':  						format = format.Substring(0' mIndex) + Day.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'h':  						//how to do this one AM/PM Hours  						String HalfDayTime="";  						switch (AMPM)  						{  							case AMPMEnum.AM:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.PM:  								HalfDayTime = (Hour - (KSPDateStructure.HoursPerDay / 2)).ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.OddHoursPerDay:  							default:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' KSPDateStructure.HoursPerDay.ToString().Length));  								break;  						}    						format = format.Substring(0' mIndex) + HalfDayTime + format.Substring(mIndex + mLength);  						break;  					case 't':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToLower() + format.Substring(mIndex + mLength);  						break;  					case 'T':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToUpper() + format.Substring(mIndex + mLength);  						break;  					case 'H':  						format = format.Substring(0' mIndex) + Hour.ToString("D" + mLength.Clamp(1'KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 'm':  						format = format.Substring(0' mIndex) + Minute.ToString("D" + mLength.Clamp(1'KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 's':  						format = format.Substring(0' mIndex) + Second.ToString("D" + mLength.Clamp(1'KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength);  						break;    					default:  						break;  				}  			}
Magic Number,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The following statement contains a magic number: for (int i = matches.Count-1; i >=0; i--)  			{  				Match m = matches[i];  				Int32 mIndex = m.Index'mLength = m.Length;    				if (mIndex>0 && format[m.Index - 1] == '\\')  				{  					if (m.Length == 1)  						continue;  					else {  						mIndex++;  						mLength--;  					}  				}  				switch (m.Value[0])  				{  					case 'y':   						format = format.Substring(0' mIndex) + Year.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'M':                          if (mLength < 3)                          {                              String input2 = Month.ToString("D" + mLength);                              format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                          }                          else if (mLength == 3)                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount < 1)                                  {                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  }                                  else                                  {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month].ToString().Substring(0' 3) + format.Substring(mIndex + mLength);                                  }                          }                          else                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount<1){                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  } else {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month] + format.Substring(mIndex + mLength);                                  }                          }  						break;  					case 'd':  						format = format.Substring(0' mIndex) + Day.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'h':  						//how to do this one AM/PM Hours  						String HalfDayTime="";  						switch (AMPM)  						{  							case AMPMEnum.AM:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.PM:  								HalfDayTime = (Hour - (KSPDateStructure.HoursPerDay / 2)).ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.OddHoursPerDay:  							default:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' KSPDateStructure.HoursPerDay.ToString().Length));  								break;  						}    						format = format.Substring(0' mIndex) + HalfDayTime + format.Substring(mIndex + mLength);  						break;  					case 't':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToLower() + format.Substring(mIndex + mLength);  						break;  					case 'T':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToUpper() + format.Substring(mIndex + mLength);  						break;  					case 'H':  						format = format.Substring(0' mIndex) + Hour.ToString("D" + mLength.Clamp(1'KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 'm':  						format = format.Substring(0' mIndex) + Minute.ToString("D" + mLength.Clamp(1'KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 's':  						format = format.Substring(0' mIndex) + Second.ToString("D" + mLength.Clamp(1'KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength);  						break;    					default:  						break;  				}  			}
Magic Number,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The following statement contains a magic number: for (int i = matches.Count-1; i >=0; i--)  			{  				Match m = matches[i];  				Int32 mIndex = m.Index'mLength = m.Length;    				if (mIndex>0 && format[m.Index - 1] == '\\')  				{  					if (m.Length == 1)  						continue;  					else {  						mIndex++;  						mLength--;  					}  				}  				switch (m.Value[0])  				{  					case 'y':   						format = format.Substring(0' mIndex) + Year.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'M':                          if (mLength < 3)                          {                              String input2 = Month.ToString("D" + mLength);                              format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                          }                          else if (mLength == 3)                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount < 1)                                  {                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  }                                  else                                  {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month].ToString().Substring(0' 3) + format.Substring(mIndex + mLength);                                  }                          }                          else                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount<1){                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  } else {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month] + format.Substring(mIndex + mLength);                                  }                          }  						break;  					case 'd':  						format = format.Substring(0' mIndex) + Day.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'h':  						//how to do this one AM/PM Hours  						String HalfDayTime="";  						switch (AMPM)  						{  							case AMPMEnum.AM:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.PM:  								HalfDayTime = (Hour - (KSPDateStructure.HoursPerDay / 2)).ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.OddHoursPerDay:  							default:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' KSPDateStructure.HoursPerDay.ToString().Length));  								break;  						}    						format = format.Substring(0' mIndex) + HalfDayTime + format.Substring(mIndex + mLength);  						break;  					case 't':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToLower() + format.Substring(mIndex + mLength);  						break;  					case 'T':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToUpper() + format.Substring(mIndex + mLength);  						break;  					case 'H':  						format = format.Substring(0' mIndex) + Hour.ToString("D" + mLength.Clamp(1'KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 'm':  						format = format.Substring(0' mIndex) + Minute.ToString("D" + mLength.Clamp(1'KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 's':  						format = format.Substring(0' mIndex) + Second.ToString("D" + mLength.Clamp(1'KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength);  						break;    					default:  						break;  				}  			}
Magic Number,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The following statement contains a magic number: for (int i = matches.Count-1; i >=0; i--)  			{  				Match m = matches[i];  				Int32 mIndex = m.Index'mLength = m.Length;    				if (mIndex>0 && format[m.Index - 1] == '\\')  				{  					if (m.Length == 1)  						continue;  					else {  						mIndex++;  						mLength--;  					}  				}  				switch (m.Value[0])  				{  					case 'y':   						format = format.Substring(0' mIndex) + Year.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'M':                          if (mLength < 3)                          {                              String input2 = Month.ToString("D" + mLength);                              format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                          }                          else if (mLength == 3)                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount < 1)                                  {                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  }                                  else                                  {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month].ToString().Substring(0' 3) + format.Substring(mIndex + mLength);                                  }                          }                          else                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount<1){                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  } else {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month] + format.Substring(mIndex + mLength);                                  }                          }  						break;  					case 'd':  						format = format.Substring(0' mIndex) + Day.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'h':  						//how to do this one AM/PM Hours  						String HalfDayTime="";  						switch (AMPM)  						{  							case AMPMEnum.AM:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.PM:  								HalfDayTime = (Hour - (KSPDateStructure.HoursPerDay / 2)).ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.OddHoursPerDay:  							default:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' KSPDateStructure.HoursPerDay.ToString().Length));  								break;  						}    						format = format.Substring(0' mIndex) + HalfDayTime + format.Substring(mIndex + mLength);  						break;  					case 't':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToLower() + format.Substring(mIndex + mLength);  						break;  					case 'T':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToUpper() + format.Substring(mIndex + mLength);  						break;  					case 'H':  						format = format.Substring(0' mIndex) + Hour.ToString("D" + mLength.Clamp(1'KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 'm':  						format = format.Substring(0' mIndex) + Minute.ToString("D" + mLength.Clamp(1'KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 's':  						format = format.Substring(0' mIndex) + Second.ToString("D" + mLength.Clamp(1'KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength);  						break;    					default:  						break;  				}  			}
Magic Number,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,ToString,The following statement contains a magic number: for (int i = matches.Count-1; i >=0; i--)  			{  				Match m = matches[i];  				Int32 mIndex = m.Index'mLength = m.Length;    				if (mIndex>0 && format[m.Index - 1] == '\\')  				{  					if (m.Length == 1)  						continue;  					else {  						mIndex++;  						mLength--;  					}  				}  				switch (m.Value[0])  				{  					case 'y':   						format = format.Substring(0' mIndex) + Year.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'M':                          if (mLength < 3)                          {                              String input2 = Month.ToString("D" + mLength);                              format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                          }                          else if (mLength == 3)                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount < 1)                                  {                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  }                                  else                                  {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month].ToString().Substring(0' 3) + format.Substring(mIndex + mLength);                                  }                          }                          else                          {                              if (KSPDateStructure.CalendarType== CalendarTypeEnum.Earth)                                  format = format.Substring(0' mIndex) + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Month) + format.Substring(mIndex + mLength);                              else                                  if (KSPDateStructure.MonthCount<1){                                      String input2 = Month.ToString("D" + mLength);                                      format = format.Substring(0' mIndex) + input2 + format.Substring(mIndex + mLength);                                  } else {                                      format = format.Substring(0' mIndex) + KSPDateStructure.Months[Month] + format.Substring(mIndex + mLength);                                  }                          }  						break;  					case 'd':  						format = format.Substring(0' mIndex) + Day.ToString("D" + mLength) + format.Substring(mIndex + mLength);  						break;  					case 'h':  						//how to do this one AM/PM Hours  						String HalfDayTime="";  						switch (AMPM)  						{  							case AMPMEnum.AM:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.PM:  								HalfDayTime = (Hour - (KSPDateStructure.HoursPerDay / 2)).ToString("D" + mLength.Clamp(1' (KSPDateStructure.HoursPerDay / 2).ToString().Length));  								break;  							case AMPMEnum.OddHoursPerDay:  							default:  								HalfDayTime = Hour.ToString("D" + mLength.Clamp(1' KSPDateStructure.HoursPerDay.ToString().Length));  								break;  						}    						format = format.Substring(0' mIndex) + HalfDayTime + format.Substring(mIndex + mLength);  						break;  					case 't':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToLower() + format.Substring(mIndex + mLength);  						break;  					case 'T':  						if (AMPM != AMPMEnum.OddHoursPerDay)  							format = format.Substring(0' mIndex) + AMPM.ToString().ToUpper() + format.Substring(mIndex + mLength);  						break;  					case 'H':  						format = format.Substring(0' mIndex) + Hour.ToString("D" + mLength.Clamp(1'KSPDateStructure.HoursPerDay.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 'm':  						format = format.Substring(0' mIndex) + Minute.ToString("D" + mLength.Clamp(1'KSPDateStructure.MinutesPerHour.ToString().Length)) + format.Substring(mIndex + mLength);  						break;  					case 's':  						format = format.Substring(0' mIndex) + Second.ToString("D" + mLength.Clamp(1'KSPDateStructure.SecondsPerMinute.ToString().Length)) + format.Substring(mIndex + mLength);  						break;    					default:  						break;  				}  			}
Magic Number,KSPPluginFramework,KSPDateTime,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateTime.cs,AddMilliSeconds,The following statement contains a magic number: return new KSPDateTime(UT + value / 1000);
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetKSPStockCalendar,The following statement contains a magic number: SecondsPerMinute = 60;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetKSPStockCalendar,The following statement contains a magic number: MinutesPerHour = 60;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetKSPStockCalendar,The following statement contains a magic number: HoursPerDay = GameSettings.KERBIN_TIME ? 6 : 24;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetKSPStockCalendar,The following statement contains a magic number: HoursPerDay = GameSettings.KERBIN_TIME ? 6 : 24;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetKSPStockCalendar,The following statement contains a magic number: DaysPerYear = GameSettings.KERBIN_TIME ? 426 : 365;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetKSPStockCalendar,The following statement contains a magic number: DaysPerYear = GameSettings.KERBIN_TIME ? 426 : 365;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetEarthCalendar,The following statement contains a magic number: KSPDateStructure.SetEarthCalendar(EpochString.Split('-')[0].ToInt32()'                                                      EpochString.Split('-')[1].ToInt32()'                                                      EpochString.Split('-')[2].ToInt32());
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetEarthCalendar,The following statement contains a magic number: SetEarthCalendar(1951' 1' 1);
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetEarthCalendar,The following statement contains a magic number: SecondsPerMinute = 60;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetEarthCalendar,The following statement contains a magic number: MinutesPerHour = 60;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetEarthCalendar,The following statement contains a magic number: HoursPerDay = 24;
Magic Number,KSPPluginFramework,KSPDateStructure,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPDateStructure.cs,SetEarthCalendar,The following statement contains a magic number: DaysPerYear = 365;
Magic Number,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,KSPTimeSpan,The following statement contains a magic number: UT = (Double)days * KSPDateStructure.SecondsPerDay +                   (Double)hours * KSPDateStructure.SecondsPerHour +                   (Double)minutes * KSPDateStructure.SecondsPerMinute +                   (Double)seconds +                  (Double)milliseconds / 1000;
Magic Number,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,ToString,The following statement contains a magic number: return ToString(3);
Magic Number,KSPPluginFramework,KSPTimeSpan,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\FrameworkExt\KSPTimeSpan.cs,FromMilliseconds,The following statement contains a magic number: return new KSPTimeSpan(value / 1000);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineStart = InitLine(objLineStart' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineStart = InitLine(objLineStart' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineStartArrow1 = InitLine(objLineStartArrow1' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineStartArrow1 = InitLine(objLineStartArrow1' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineStartArrow2 = InitLine(objLineStartArrow2' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineStartArrow2 = InitLine(objLineStartArrow2' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineEnd = InitLine(objLineEnd' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineEnd = InitLine(objLineEnd' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineArc = InitLine(objLineArc' Color.blue' ArcPoints' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineVesselVect = InitLine(objLineVesselVect' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineVesselVect = InitLine(objLineVesselVect' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineVesselVectArrow1 = InitLine(objLineVesselVectArrow1' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineVesselVectArrow1 = InitLine(objLineVesselVectArrow1' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineVesselVectArrow2 = InitLine(objLineVesselVectArrow2' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,Start,The following statement contains a magic number: lineVesselVectArrow2 = InitLine(objLineVesselVectArrow2' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,InitLine,The following statement contains a magic number: objToAttach.layer = 9;
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,ClampDegrees360,The following statement contains a magic number: angle = angle % 360.0;
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,ClampDegrees360,The following statement contains a magic number: if (angle < 0) return angle + 360.0;              else return angle;
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,ClampDegrees180,The following statement contains a magic number: if (angle > 180) angle -= 360;
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,ClampDegrees180,The following statement contains a magic number: if (angle > 180) angle -= 360;
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Planets Velocity Vector                  Vector3d vectOrbitPrograde = bodyOrigin.orbit.getOrbitalVelocityAtUT(Planetarium.GetUniversalTime()).xzy.normalized * bodyOrigin.Radius * 5;                  Vector3d vectStart;                    if (DrawToRetrograde)                      vectStart = -vectOrbitPrograde;                  else                      vectStart = vectOrbitPrograde;                    //Get the Vector of the Origin body from the ref point and its distance                  //Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                    //Work out the Eject Angle Vector                  Vector3d vectEnd = Quaternion.AngleAxis((Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                  Double vectEndMag = vectEnd.magnitude;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position + vectStart;                  vectPosWorldEnd = bodyOrigin.transform.position + vectEnd;                    Vector3d vectPosWorldOrbitArrow = bodyOrigin.transform.position + vectOrbitPrograde;                  vectPosWorldOrbitLabel = bodyOrigin.transform.position + (vectOrbitPrograde * 3 / 4);                    if (this.VesselOrbit != null)                  {                      //now work out the angle                      //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                      //_PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                      //if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                      //{                      //    _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                      //}                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding)                  {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone) : new Vector3d())' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag' 0' pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone)' Mathf.Lerp((Single)bodyOrigin.Radius * 3' 0' pctDone));                        Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp((Single)bodyOrigin.Radius * 3f' 0' Mathf.Clamp01(pctDone)));                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        lineStartArrow1.enabled = false;                      lineStartArrow2.enabled = false;                      lineVesselVectArrow1.enabled = false;                      lineVesselVectArrow2.enabled = false;                  }                  else if (isBecomingVisible)                  {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde.normalized * Mathf.Lerp(0' (Single)vectStartMag' pctDone) : new Vector3d()) + Mathf.Lerp((Single)vectStartMag' 0' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double AngleTargetWorking = ClampDegrees180(Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone)));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis((Single)AngleTargetWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' AngleTargetWorking' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);                      }                      else if (!_isBecomingVisible_VesselVectDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_VesselVectDone = true;                              _isBecomingVisible = false;                          }                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                          //Arrow heads                          DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                            DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                          DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                            Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                          Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * (Mathf.Lerp(0' (Single)bodyOrigin.Radius * 3f' Mathf.Clamp01(pctDone)));                          vectVesselEnd += vectVesselStart;                          DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                        }                  }                  else                  {                      DrawLine(lineStart' vectPosWorldPivot + (DrawToRetrograde ? vectOrbitPrograde : new Vector3d())' vectPosWorldOrigin);                      //Arrow heads                      DrawLineArrow(lineStartArrow1' lineStartArrow2' vectPosWorldPivot' vectPosWorldOrbitArrow' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                        DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                      DrawArc(lineArc' vectStart' AngleTargetValue' bodyOrigin.Radius * 3' bodyOrigin.Radius * 3);//  vectStartMag' vectEndMag);                          Vector3d vectVesselStart = bodyOrigin.transform.position + (vectEnd * 3 / 4);                      Vector3d vectVesselEnd = (Vector3d)(Quaternion.AngleAxis(-(Single)90' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectEnd).normalized * bodyOrigin.Radius * 3;                      vectVesselEnd += vectVesselStart;                      DrawLine(lineVesselVect' vectVesselStart' vectVesselEnd);                      DrawLineArrow(lineVesselVectArrow1' lineVesselVectArrow2' vectVesselStart' vectVesselEnd' bodyOrigin.orbit.GetOrbitNormal().xzy' (bodyOrigin.Radius * 2 / 3));                  }              }              else              {                  lineStart.enabled = false;                  lineStartArrow1.enabled = false;                  lineStartArrow2.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineVesselVect.enabled = false;                  lineVesselVectArrow1.enabled = false;                  lineVesselVectArrow2.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°\r\n{1}"' AngleTargetValue' DrawToRetrograde ? "to retrograde" : "to prograde")' styleLabelEnd);                    GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldOrbitLabel)).y - 15' 100' 30)' "Orbit"' styleLabelTarget);                    if (VesselOrbit != null)                  {                      //GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);                  }              }
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: Vector3d vectArrow1 = Quaternion.AngleAxis((Single)30' vectPlaneNormal) * vectArrow;
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: Vector3d vectArrow2 = Quaternion.AngleAxis(-(Single)30' vectPlaneNormal) * vectArrow;
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line1.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line1.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line1.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line1.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line2.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line2.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line2.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderEject,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderEject.cs,DrawLineArrow,The following statement contains a magic number: line2.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineStart = InitLine(objLineStart' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineStart = InitLine(objLineStart' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineEnd = InitLine(objLineEnd' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineEnd = InitLine(objLineEnd' Color.blue' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineArc = InitLine(objLineArc' Color.blue' ArcPoints' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineTarget = InitLine(objLineTarget' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineTarget = InitLine(objLineTarget' Color.green' 2' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,Start,The following statement contains a magic number: lineTargetArc = InitLine(objLineTargetArc' Color.green' ArcPoints' 10' orbitLines);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,InitLine,The following statement contains a magic number: objToAttach.layer = 9;
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,ClampDegrees360,The following statement contains a magic number: angle = angle % 360.0;
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,ClampDegrees360,The following statement contains a magic number: if (angle < 0) return angle + 360.0;              else return angle;
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,ClampDegrees180,The following statement contains a magic number: if (angle > 180) angle -= 360;
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,ClampDegrees180,The following statement contains a magic number: if (angle > 180) angle -= 360;
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnPreCull,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing)              {                  //Get the Vector of the Origin body from the ref point and its distance                  Vector3d vectStart = bodyOrigin.transform.position - bodyOrigin.referenceBody.transform.position;                  Double vectStartMag = vectStart.magnitude;                                    //now work out the angle                  //Double _PhaseAngleCurrent = ClampDegrees180(LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit'bodyTarget.orbit));                  _PhaseAngleCurrent = LambertSolver.CurrentPhaseAngle(bodyOrigin.orbit' bodyTarget.orbit);                  if (bodyTarget.orbit.semiMajorAxis < bodyOrigin.orbit.semiMajorAxis)                  {                      _PhaseAngleCurrent = _PhaseAngleCurrent - 360;                  }                      //And therefore the 2nd arm of the angle                  Vector3d vectEnd = Quaternion.AngleAxis(-(Single)_PhaseAngleCurrent' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                    //make it 120% of the target bodies orbit                  vectEnd = vectEnd.normalized * bodyTarget.orbit.ApR * 1.2;                  Double vectEndMag = vectEnd.magnitude;                    Vector3d vectPointEnd = bodyOrigin.referenceBody.transform.position + vectEnd;                    //and heres the three points                  vectPosWorldPivot = bodyOrigin.referenceBody.transform.position;                  vectPosWorldOrigin = bodyOrigin.transform.position;                  vectPosWorldEnd = vectPointEnd;                    if (ShowTargetAngle) {                      Vector3d vectTarget = Quaternion.AngleAxis(-(Single)AngleTargetValue' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart;                      vectPosWorldTarget = vectTarget.normalized * vectEndMag * 0.9;                      vectPosWorldTarget += bodyOrigin.referenceBody.transform.position;                  }                    //Are we Showing' Hiding or Static State                  if (_isHiding) {                      Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.25f;                      if (pctDone >= 1)                      {                          _isHiding = false;                          isDrawing = false;                      }                      vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                        DrawLine(lineStart' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldOrigin - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectStartMag'0'pctDone));                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldEnd - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' Mathf.Lerp((Single)bodyOrigin.orbit.radius' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius' 0' pctDone));                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldPivot + (vectPosWorldTarget - vectPosWorldPivot).normalized * Mathf.Lerp((Single)vectEndMag' 0' pctDone));                          DrawArc(lineTargetArc' vectStart' AngleTargetValue' Mathf.Lerp((Single)bodyOrigin.orbit.radius * 0.9f' 0' pctDone)' Mathf.Lerp((Single)bodyTarget.orbit.radius * 0.9f' 0' pctDone));                      }                    } else if (isBecomingVisible) {                      if (!_isBecomingVisible_LinesDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1)                          {                              _isBecomingVisible_LinesDone = true;                              StartDrawing = DateTime.Now;                          }                            vectPosPivotWorking = bodyOrigin.transform.position - Mathf.Lerp(0' (Single)vectStartMag' Mathf.Clamp01(pctDone)) * vectStart.normalized;                            DrawLine(lineStart' vectPosPivotWorking' vectPosWorldOrigin);                      }                      else if (!_isBecomingVisible_ArcDone)                      {                          Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                          if (pctDone >= 1) {                               _isBecomingVisible_ArcDone = true;                              StartDrawing = DateTime.Now;                          }                            Double vectEndMagWorking = Mathf.Lerp((Single)vectStartMag' (Single)vectEndMag' Mathf.Clamp01(pctDone));                          Double PhaseAngleWorking = Mathf.Lerp(0' (Single)_PhaseAngleCurrent' Mathf.Clamp01(pctDone));                          vectPosEndWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMagWorking;                          vectPosEndWorking += bodyOrigin.referenceBody.transform.position;                            //draw the origin and end lines                          DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                          DrawLine(lineEnd' vectPosWorldPivot' vectPosEndWorking);                          DrawArc(lineArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                      }                      else if(!_isBecomingVisible_TargetArcDone)                      {                          if (!ShowTargetAngle)                          {                              _isBecomingVisible_TargetArcDone = true;                              _isBecomingVisible = false;                                                        } else                          {                              Single pctDone = (Single)(DateTime.Now - StartDrawing).TotalSeconds / 0.5f;                              if (pctDone >= 1)                              {                                  _isBecomingVisible_TargetArcDone = true;                                  _isBecomingVisible = false;                              }                                Double PhaseAngleWorking = Mathf.Lerp(0' (Single)AngleTargetValue' Mathf.Clamp01(pctDone));                              vectPosTargetWorking = (Vector3d)(Quaternion.AngleAxis(-(Single)PhaseAngleWorking' bodyOrigin.orbit.GetOrbitNormal().xzy) * vectStart).normalized * vectEndMag * 0.9;                              vectPosTargetWorking += bodyOrigin.referenceBody.transform.position;                                DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                              DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                              DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);                              DrawLine(lineTarget' vectPosWorldPivot' vectPosTargetWorking );                              DrawArc(lineTargetArc' vectStart' PhaseAngleWorking' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                          }                        }                        } else                  {                      DrawLine(lineStart' vectPosWorldPivot' vectPosWorldOrigin);                      DrawLine(lineEnd' vectPosWorldPivot' vectPosWorldEnd);                        DrawArc(lineArc' vectStart' _PhaseAngleCurrent' bodyOrigin.orbit.radius' bodyTarget.orbit.radius);//  vectStartMag' vectEndMag);                        if (ShowTargetAngle)                      {                          DrawLine(lineTarget' vectPosWorldPivot' vectPosWorldTarget);                          DrawArc(lineTargetArc' vectStart ' AngleTargetValue ' bodyOrigin.orbit.radius * 0.9' bodyTarget.orbit.radius * 0.9);                      }                  }              }              else              {                  lineStart.enabled = false;                  lineEnd.enabled = false;                  lineArc.enabled = false;                  lineTarget.enabled = false;                  lineTargetArc.enabled = false;              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,OnGUIEvery,The following statement contains a magic number: if (MapView.MapIsEnabled && isDrawing && !_isBecomingVisible && !_isHiding)              {                  GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldEnd)).y - 15' 100' 30)' String.Format("{0:0.00}°"' _PhaseAngleCurrent)'styleLabelEnd);                    if(ShowTargetAngle)                      GUI.Label(new Rect(PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).x - 50' Screen.height - PlanetariumCamera.Camera.WorldToScreenPoint(ScaledSpace.LocalToScaledSpace(vectPosWorldTarget)).y - 15' 100' 30)' String.Format("{0:0.00}°"' AngleTargetValue)'styleLabelTarget);              }
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawArc,The following statement contains a magic number: Double ArcRadius = Math.Min(StartLength' EndLength) * 0.9;
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawArc,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,AngleRenderPhase,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AngleRenderPhase.cs,DrawLine,The following statement contains a magic number: line.SetWidth((float)10 / 1000 * cam.Distance' (float)10 / 1000 * cam.Distance);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitWindows,The following statement contains a magic number: windowMain.WindowRect = new Rect(100' 200' 750' 400);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitWindows,The following statement contains a magic number: windowMain.WindowRect = new Rect(100' 200' 750' 400);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitWindows,The following statement contains a magic number: windowMain.WindowRect = new Rect(100' 200' 750' 400);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitWindows,The following statement contains a magic number: windowMain.WindowRect = new Rect(100' 200' 750' 400);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,SetToolbarIcon,The following statement contains a magic number: String strToolbarIcon = Resources.PathPluginToolbarIcons.Substring(Resources.PathPluginToolbarIcons.ToLower().IndexOf("/gamedata/")+10) + "/TWPIcon";
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitDebugWindow,The following statement contains a magic number: windowDebug.WindowRect = new Rect(Screen.width-300' 50' 300' 200);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitDebugWindow,The following statement contains a magic number: windowDebug.WindowRect = new Rect(Screen.width-300' 50' 300' 200);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitDebugWindow,The following statement contains a magic number: windowDebug.WindowRect = new Rect(Screen.width-300' 50' 300' 200);
Magic Number,TransferWindowPlanner,TransferWindowPlanner,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\AppLauncher.cs,InitDebugWindow,The following statement contains a magic number: windowDebug.WindowRect = new Rect(Screen.width-300' 50' 300' 200);
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,CalcEjectionValues,The following statement contains a magic number: Double v1 = Math.Sqrt(vsoi * vsoi + 2 * OriginVesselOrbitalSpeed * OriginVesselOrbitalSpeed - 2 * mu / rsoi);
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,CalcEjectionValues,The following statement contains a magic number: Double v1 = Math.Sqrt(vsoi * vsoi + 2 * OriginVesselOrbitalSpeed * OriginVesselOrbitalSpeed - 2 * mu / rsoi);
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,CalcEjectionValues,The following statement contains a magic number: if (Destination.orbit.semiMajorAxis < Origin.orbit.semiMajorAxis)              {                  EjectionAngleIsRetrograde = true;                  EjectionAngle -= Math.PI;                  if (EjectionAngle < 0)                      EjectionAngle += 2 * Math.PI;              }              else              {                  EjectionAngleIsRetrograde = false;              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,EjectionAngleCalc,The following statement contains a magic number: b = 2 * g * cosTheta / ay;
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,EjectionAngleCalc,The following statement contains a magic number: if (b < 0)              {                  q = -0.5 * (b - Math.Sqrt(b * b - 4 * a * c));              }              else              {                  q = -0.5 * (b + Math.Sqrt(b * b - 4 * a * c));              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,EjectionAngleCalc,The following statement contains a magic number: if (b < 0)              {                  q = -0.5 * (b - Math.Sqrt(b * b - 4 * a * c));              }              else              {                  q = -0.5 * (b + Math.Sqrt(b * b - 4 * a * c));              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,EjectionAngleCalc,The following statement contains a magic number: if (b < 0)              {                  q = -0.5 * (b - Math.Sqrt(b * b - 4 * a * c));              }              else              {                  q = -0.5 * (b + Math.Sqrt(b * b - 4 * a * c));              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,EjectionAngleCalc,The following statement contains a magic number: if (b < 0)              {                  q = -0.5 * (b - Math.Sqrt(b * b - 4 * a * c));              }              else              {                  q = -0.5 * (b + Math.Sqrt(b * b - 4 * a * c));              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,EjectionAngleCalc,The following statement contains a magic number: if (Math.Sign(Vector3d.Cross(new Vector3d(vx' vy' 0)' new Vector3d(ax' ay' az))[2]) != Math.Sign(Math.PI - theta))              {                  vx = c / q;                  vy = g * vx + cosTheta / ay;              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,PhaseAngleCalc,The following statement contains a magic number: if (Vector3d.Angle(Quaternion.AngleAxis(90' Vector3d.forward) * p1' p2) > 90)              {                  phaseAngle = 360 - phaseAngle;              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,PhaseAngleCalc,The following statement contains a magic number: if (Vector3d.Angle(Quaternion.AngleAxis(90' Vector3d.forward) * p1' p2) > 90)              {                  phaseAngle = 360 - phaseAngle;              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,PhaseAngleCalc,The following statement contains a magic number: if (Vector3d.Angle(Quaternion.AngleAxis(90' Vector3d.forward) * p1' p2) > 90)              {                  phaseAngle = 360 - phaseAngle;              }
Magic Number,TransferWindowPlanner,TransferDetails,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\LambertSolverHelpers.cs,PhaseAngleCalc,The following statement contains a magic number: if (o2.semiMajorAxis < o1.semiMajorAxis)              {                  phaseAngle = phaseAngle - 360;              }
Magic Number,TransferWindowPlanner,Utilities,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\Utilities.cs,getEjectionAngleAtUT,The following statement contains a magic number: double returnEjectAngle = ((Math.Atan2(bodyPrograde.y' bodyPrograde.x) - Math.Atan2(vesselPosition.y' vesselPosition.x)) * 180.0 / Math.PI);
Magic Number,TransferWindowPlanner,Utilities,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\Utilities.cs,timeOfEjectionAngle,The following statement contains a magic number: double timeStart = timeInitial - oObject.period/2;
Magic Number,TransferWindowPlanner,Utilities,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\Utilities.cs,timeOfEjectionAngle,The following statement contains a magic number: for (int iter = 0; iter < 8; iter++) {                  double dt = (maxTime - minTime) / numDivisions;                  for (int i = 0; i < numDivisions; i++) {                      double t = minTime + i * dt;                      double angle = oObject.getEjectionAngleAtUT(t);                      if (Math.Abs(angle - targetAngle) < closestAngleValue) {                          closestAngleValue = Math.Abs(angle - targetAngle);                          closestAngleTime = t;                      }                  }                  minTime = (closestAngleTime - dt).Clamp(timeStart' timeStart + periodtoscan);                  maxTime = (closestAngleTime + dt).Clamp(timeStart' timeStart + periodtoscan);               }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,Awake,The following statement contains a magic number: ddlOrigin = new DropDownList(lstPlanets.Select(x => x.NameFormatted)' 2' this);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strYear' "[^\\d\\.]+"' true' "Year:"' 50'40);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strYear' "[^\\d\\.]+"' true' "Year:"' 50'40);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strDay' "[^\\d\\.]+"' true' "Day:"'  50'40);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strDay' "[^\\d\\.]+"' true' "Day:"'  50'40);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearMonthDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strYear' "[^\\d\\.]+"' true' "Y:"' 40' 20);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearMonthDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strYear' "[^\\d\\.]+"' true' "Y:"' 40' 20);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearMonthDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strMonth' "[^\\d\\.]+"' true' "M:"' 30' 20);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearMonthDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strMonth' "[^\\d\\.]+"' true' "M:"' 30' 20);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearMonthDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strDay' "[^\\d\\.]+"' true' "D:"' 30' 20);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawYearMonthDay,The following statement contains a magic number: blnReturn = blnReturn || DrawTextField(ref strDay' "[^\\d\\.]+"' true' "D:"' 30' 20);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (settings.ShowCalendarToggle)              {                  if (GUI.Button(new Rect(WindowRect.width - 122' 2' 30' 20)' new GUIContent(Resources.btnCalendar' "Toggle Calendar")' "ButtonSettings"))                  {                      if (settings.SelectedCalendar == CalendarTypeEnum.Earth)                      {                          settings.SelectedCalendar = CalendarTypeEnum.KSPStock;                          KSPDateStructure.SetKSPStockCalendar();                      }                      else                      {                          settings.SelectedCalendar = CalendarTypeEnum.Earth;                          KSPDateStructure.SetEarthCalendar(settings.EarthEpoch);                      }                      settings.Save();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (settings.ShowCalendarToggle)              {                  if (GUI.Button(new Rect(WindowRect.width - 122' 2' 30' 20)' new GUIContent(Resources.btnCalendar' "Toggle Calendar")' "ButtonSettings"))                  {                      if (settings.SelectedCalendar == CalendarTypeEnum.Earth)                      {                          settings.SelectedCalendar = CalendarTypeEnum.KSPStock;                          KSPDateStructure.SetKSPStockCalendar();                      }                      else                      {                          settings.SelectedCalendar = CalendarTypeEnum.Earth;                          KSPDateStructure.SetEarthCalendar(settings.EarthEpoch);                      }                      settings.Save();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (settings.ShowCalendarToggle)              {                  if (GUI.Button(new Rect(WindowRect.width - 122' 2' 30' 20)' new GUIContent(Resources.btnCalendar' "Toggle Calendar")' "ButtonSettings"))                  {                      if (settings.SelectedCalendar == CalendarTypeEnum.Earth)                      {                          settings.SelectedCalendar = CalendarTypeEnum.KSPStock;                          KSPDateStructure.SetKSPStockCalendar();                      }                      else                      {                          settings.SelectedCalendar = CalendarTypeEnum.Earth;                          KSPDateStructure.SetEarthCalendar(settings.EarthEpoch);                      }                      settings.Save();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (settings.ShowCalendarToggle)              {                  if (GUI.Button(new Rect(WindowRect.width - 122' 2' 30' 20)' new GUIContent(Resources.btnCalendar' "Toggle Calendar")' "ButtonSettings"))                  {                      if (settings.SelectedCalendar == CalendarTypeEnum.Earth)                      {                          settings.SelectedCalendar = CalendarTypeEnum.KSPStock;                          KSPDateStructure.SetKSPStockCalendar();                      }                      else                      {                          settings.SelectedCalendar = CalendarTypeEnum.Earth;                          KSPDateStructure.SetEarthCalendar(settings.EarthEpoch);                      }                      settings.Save();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: mbTWP.windowSettings.Visible = GUI.Toggle(new Rect(WindowRect.width - 92' 2' 30' 20)' mbTWP.windowSettings.Visible' contSettings' "ButtonSettings");
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: mbTWP.windowSettings.Visible = GUI.Toggle(new Rect(WindowRect.width - 92' 2' 30' 20)' mbTWP.windowSettings.Visible' contSettings' "ButtonSettings");
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: mbTWP.windowSettings.Visible = GUI.Toggle(new Rect(WindowRect.width - 92' 2' 30' 20)' mbTWP.windowSettings.Visible' contSettings' "ButtonSettings");
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: mbTWP.windowSettings.Visible = GUI.Toggle(new Rect(WindowRect.width - 92' 2' 30' 20)' mbTWP.windowSettings.Visible' contSettings' "ButtonSettings");
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 62' 2' 30' 20)' contMaxMin' "ButtonSettings"))              {                  ShowMinimized = !ShowMinimized;                  //if its changed then affect the window size                  if (ShowMinimized)                  {                      WindowRect.x = WindowRect.x + WindowRect.width - 320;                        WindowRect.width = 350;                      WindowRect.height = 0;                  }                  else                  {                      WindowRect.x = WindowRect.x + 320 - 750;                        WindowRect.width = 750;                      WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  //Visible = false;                  if(TransferWindowPlanner.settings.ButtonStyleToDisplay== Settings.ButtonStyleEnum.Launcher)                  {                      mbTWP.btnAppLauncher.SetFalse();                  }                  else                      Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  //Visible = false;                  if(TransferWindowPlanner.settings.ButtonStyleToDisplay== Settings.ButtonStyleEnum.Launcher)                  {                      mbTWP.btnAppLauncher.SetFalse();                  }                  else                      Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  //Visible = false;                  if(TransferWindowPlanner.settings.ButtonStyleToDisplay== Settings.ButtonStyleEnum.Launcher)                  {                      mbTWP.btnAppLauncher.SetFalse();                  }                  else                      Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  //Visible = false;                  if(TransferWindowPlanner.settings.ButtonStyleToDisplay== Settings.ButtonStyleEnum.Launcher)                  {                      mbTWP.btnAppLauncher.SetFalse();                  }                  else                      Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (ShowMinimized)               {                  if (!Done) {                      GUILayout.Label("No Selected Transfer to be able to display info"'Styles.styleTextInstruction);                      GUILayout.Space(10);                      GUILayout.Label("Go back to restored mode and plot a transfer first"' Styles.styleTextInstruction);                      //GUILayout.Label("You need to have run a plot and selected a transfer to get this");                  }                  else                  {                      DrawTransferDetailsMinimal();                  }              }               else               {                   GUILayout.BeginHorizontal();                  GUILayout.BeginVertical(GUILayout.Width(300));                  DrawTransferEntry();                  GUILayout.EndVertical();                    GUILayout.BeginVertical(GUILayout.Width(10));                  GUILayout.Box(Resources.texSeparatorV' Styles.styleSeparatorV' GUILayout.Height(335));                  GUILayout.EndVertical();                    GUILayout.BeginVertical();                  DrawTransferPlot();                  GUILayout.EndVertical();                  GUILayout.EndHorizontal();                    if (DepartureSelected >= 0 && TransferSelected != null)                  {                      DrawTransferDetails();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (ShowMinimized)               {                  if (!Done) {                      GUILayout.Label("No Selected Transfer to be able to display info"'Styles.styleTextInstruction);                      GUILayout.Space(10);                      GUILayout.Label("Go back to restored mode and plot a transfer first"' Styles.styleTextInstruction);                      //GUILayout.Label("You need to have run a plot and selected a transfer to get this");                  }                  else                  {                      DrawTransferDetailsMinimal();                  }              }               else               {                   GUILayout.BeginHorizontal();                  GUILayout.BeginVertical(GUILayout.Width(300));                  DrawTransferEntry();                  GUILayout.EndVertical();                    GUILayout.BeginVertical(GUILayout.Width(10));                  GUILayout.Box(Resources.texSeparatorV' Styles.styleSeparatorV' GUILayout.Height(335));                  GUILayout.EndVertical();                    GUILayout.BeginVertical();                  DrawTransferPlot();                  GUILayout.EndVertical();                  GUILayout.EndHorizontal();                    if (DepartureSelected >= 0 && TransferSelected != null)                  {                      DrawTransferDetails();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (ShowMinimized)               {                  if (!Done) {                      GUILayout.Label("No Selected Transfer to be able to display info"'Styles.styleTextInstruction);                      GUILayout.Space(10);                      GUILayout.Label("Go back to restored mode and plot a transfer first"' Styles.styleTextInstruction);                      //GUILayout.Label("You need to have run a plot and selected a transfer to get this");                  }                  else                  {                      DrawTransferDetailsMinimal();                  }              }               else               {                   GUILayout.BeginHorizontal();                  GUILayout.BeginVertical(GUILayout.Width(300));                  DrawTransferEntry();                  GUILayout.EndVertical();                    GUILayout.BeginVertical(GUILayout.Width(10));                  GUILayout.Box(Resources.texSeparatorV' Styles.styleSeparatorV' GUILayout.Height(335));                  GUILayout.EndVertical();                    GUILayout.BeginVertical();                  DrawTransferPlot();                  GUILayout.EndVertical();                  GUILayout.EndHorizontal();                    if (DepartureSelected >= 0 && TransferSelected != null)                  {                      DrawTransferDetails();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawWindow,The following statement contains a magic number: if (ShowMinimized)               {                  if (!Done) {                      GUILayout.Label("No Selected Transfer to be able to display info"'Styles.styleTextInstruction);                      GUILayout.Space(10);                      GUILayout.Label("Go back to restored mode and plot a transfer first"' Styles.styleTextInstruction);                      //GUILayout.Label("You need to have run a plot and selected a transfer to get this");                  }                  else                  {                      DrawTransferDetailsMinimal();                  }              }               else               {                   GUILayout.BeginHorizontal();                  GUILayout.BeginVertical(GUILayout.Width(300));                  DrawTransferEntry();                  GUILayout.EndVertical();                    GUILayout.BeginVertical(GUILayout.Width(10));                  GUILayout.Box(Resources.texSeparatorV' Styles.styleSeparatorV' GUILayout.Height(335));                  GUILayout.EndVertical();                    GUILayout.BeginVertical();                  DrawTransferPlot();                  GUILayout.EndVertical();                  GUILayout.EndHorizontal();                    if (DepartureSelected >= 0 && TransferSelected != null)                  {                      DrawTransferDetails();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The following statement contains a magic number: GUILayout.Label(String.Format("{0} (@{1:0}km)"' TransferSpecs.OriginName' TransferSpecs.InitialOrbitAltitude / 1000)' Styles.styleTextYellow);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetailsMinimal,The following statement contains a magic number: GUILayout.Label(String.Format("{0} (@{1:0}km)"' TransferSpecs.DestinationName' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellow);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (ShowEjectionDetails) {                  GUI.Box(new Rect(10'EjectionDetailsYOffset'WindowRect.width - 20' 23)'"");                  //Styles.styleSettingsArea if needed              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (ShowEjectionDetails) {                  GUI.Box(new Rect(10'EjectionDetailsYOffset'WindowRect.width - 20' 23)'"");                  //Styles.styleSettingsArea if needed              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (ShowEjectionDetails) {                  GUI.Box(new Rect(10'EjectionDetailsYOffset'WindowRect.width - 20' 23)'"");                  //Styles.styleSettingsArea if needed              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: GUILayout.Label("Selected Transfer Details"' GUILayout.Width(150));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellow);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellow);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: styleCopyButton.fixedHeight = 18;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (KACWrapper.APIReady)              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 132' 20)' new GUIContent("  Add KAC Alarm"' Resources.btnKAC)))                  {                      String tmpID = KACWrapper.KAC.CreateAlarm(KACWrapper.KACAPI.AlarmTypeEnum.TransferModelled'                          String.Format("{0} -> {1}"' mbTWP.windowMain.TransferSelected.Origin.bodyName' mbTWP.windowMain.TransferSelected.Destination.bodyName)'                          (mbTWP.windowMain.TransferSelected.DepartureTime - settings.KACMargin * 60 * 60));                          KACWrapper.KACAPI.KACAlarm alarmNew = KACWrapper.KAC.Alarms.First(a => a.ID == tmpID);                      alarmNew.Notes = mbTWP.windowMain.GenerateTransferDetailsText();                      alarmNew.AlarmMargin = settings.KACMargin * 60 * 60;                      alarmNew.AlarmAction = settings.KACAlarmAction;                      alarmNew.XferOriginBodyName = mbTWP.windowMain.TransferSelected.Origin.bodyName;                      alarmNew.XferTargetBodyName = mbTWP.windowMain.TransferSelected.Destination.bodyName;                    }                    if (GUI.Button(new Rect(132 + 15' WindowRect.height - 30' 120' 20)' new GUIContent("  Copy Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }              else              {                  if (GUI.Button(new Rect(10' WindowRect.height - 30' 250' 20)' new GUIContent("  Copy Transfer Details"' Resources.btnCopy)))                  {                      CopyAllDetailsToClipboard();                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (Event.current.type == EventType.Repaint){                  DVEjectionRect = GUILayoutUtility.GetLastRect();                  EjectionDetailsYOffset = DVEjectionRect.y + 20;              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (DVEjectionRect!=null){                  if (GUI.Button(new Rect(DVEjectionRect.x + DVEjectionRect.width-20' DVEjectionRect.y' 16' 16)' new GUIContent(Resources.btnInfo' "Toggle Details...")' new GUIStyle()))                  {                      ShowEjectionDetails = !ShowEjectionDetails;                      if (!ShowEjectionDetails) WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (DVEjectionRect!=null){                  if (GUI.Button(new Rect(DVEjectionRect.x + DVEjectionRect.width-20' DVEjectionRect.y' 16' 16)' new GUIContent(Resources.btnInfo' "Toggle Details...")' new GUIStyle()))                  {                      ShowEjectionDetails = !ShowEjectionDetails;                      if (!ShowEjectionDetails) WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (DVEjectionRect!=null){                  if (GUI.Button(new Rect(DVEjectionRect.x + DVEjectionRect.width-20' DVEjectionRect.y' 16' 16)' new GUIContent(Resources.btnInfo' "Toggle Details...")' new GUIStyle()))                  {                      ShowEjectionDetails = !ShowEjectionDetails;                      if (!ShowEjectionDetails) WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferDetails,The following statement contains a magic number: if (DVEjectionRect!=null){                  if (GUI.Button(new Rect(DVEjectionRect.x + DVEjectionRect.width-20' DVEjectionRect.y' 16' 16)' new GUIContent(Resources.btnInfo' "Toggle Details...")' new GUIStyle()))                  {                      ShowEjectionDetails = !ShowEjectionDetails;                      if (!ShowEjectionDetails) WindowRect.height = 400;                  }              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The following statement contains a magic number: String Message = String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateTransferDetailsText,The following statement contains a magic number: String Message = String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Running) {                  GUI.Label(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 30' PlotWidth + 45' 20)'                      String.Format("Calculating: {0} (@{2:0}km) -> {1} (@{3:0}km)..."' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)'                      Styles.styleTextYellowBold);                  //DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + PlotHeight / 2 - 10' PlotWidth + 45' 20)' (Single)workingpercent);                  DrawResourceBar(new Rect(PlotPosition.x' PlotPosition.y + 292 / 2 - 10' 292 + 45' 20)' (Single)workingpercent);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferPlot,The following statement contains a magic number: if (Done) {                  GUILayout.Label(String.Format("{0} (@{2:0}km) -> {1} (@{3:0}km)"' TransferSpecs.OriginName' TransferSpecs.DestinationName' TransferSpecs.InitialOrbitAltitude / 1000' TransferSpecs.FinalOrbitAltitude / 1000)' Styles.styleTextYellowBold);                    if (TextureReadyToDraw)                  {                      TextureReadyToDraw = false;                      //Need to move this texure stuff back on to the main thread - set a flag so we know whats done                      DrawPlotTexture(sumlogDeltaV' sumSqLogDeltaV' maxDeltaV);                  }                    //GUI.Box(new Rect(340' 50' 306' 305)' Resources.texPorkChopAxis);                  //GUI.Box(new Rect(346' 50' 300' 300)' texPlotArea);                  GUI.Box(new Rect(PlotPosition.x - 6' PlotPosition.y' PlotWidth + 6' PlotHeight + 6)' Resources.texPorkChopAxis' new GUIStyle());                  GUI.Box(new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight)' texPlotArea' new GUIStyle());                      //Draw the axis labels                    //have to rotate the GUI for the y labels                  Matrix4x4 matrixBackup = GUI.matrix;                  //rotate the GUI Frame of reference                  GUIUtility.RotateAroundPivot(-90' new Vector2(450' 177));                  //draw the axis label                  GUI.Label(new Rect((Single)(PlotPosition.x - 80)' (Single)(PlotPosition.y)' PlotHeight' 15)' "Travel Days"' Styles.stylePlotYLabel);                  //reset rotation                  GUI.matrix = matrixBackup;                  //Y Axis                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x - 50)' (Single)(PlotPosition.y + (i * (PlotHeight - 3)) - 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.TravelMin + (1 - i) * TransferSpecs.TravelRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotYText);                  }                    //XAxis                  GUI.Label(new Rect((Single)(PlotPosition.x)' (Single)(PlotPosition.y + PlotHeight + 20)' PlotWidth' 15)' "Departure Date"' Styles.stylePlotXLabel);                  for (Double i = 0; i <= 1; i += 0.25) {                      GUI.Label(new Rect((Single)(PlotPosition.x + (i * PlotWidth) - 22)' (Single)(PlotPosition.y + PlotHeight + 5)' 40' 15)' String.Format("{0:0}"' (TransferSpecs.DepartureMin + i * TransferSpecs.DepartureRange) / (KSPDateStructure.SecondsPerDay))' Styles.stylePlotXText);                  }                    //Draw the DeltaV Legend                  //Δv                  GUI.Box(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y' 20' PlotHeight)' ""' Styles.stylePlotLegendImage);                  GUI.Label(new Rect(PlotPosition.x + PlotWidth + 25' PlotPosition.y - 15' 40' 15)' "Δv (m/s)"' Styles.stylePlotXLabel);                  //m/s values based on min max                  for (Double i = 0; i <= 1; i += 0.25) {                      Double tmpDeltaV = Math.Exp(i * (logMaxDeltaV - logMinDeltaV) + logMinDeltaV);                      GUI.Label(new Rect((Single)(PlotPosition.x + PlotWidth + 50)' (Single)(PlotPosition.y + (1.0 - i) * (PlotHeight - 5) - 5)' 40' 15)' String.Format("{0:0}"' tmpDeltaV)' Styles.stylePlotLegendText);                  }                    vectMouse = Event.current.mousePosition;                  //Draw the hover over cross                  if (new Rect(PlotPosition.x' PlotPosition.y' PlotWidth' PlotHeight).Contains(vectMouse)) {                      GUI.Box(new Rect(vectMouse.x' PlotPosition.y' 1' PlotHeight)' ""' Styles.stylePlotCrossHair);                      GUI.Box(new Rect(PlotPosition.x' vectMouse.y' PlotWidth' 1)' ""' Styles.stylePlotCrossHair);                        //GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"'                       //    DeltaVs[(int)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x))])' SkinsLibrary.CurrentTooltip);                        Int32 iCurrent = (Int32)((vectMouse.y - PlotPosition.y) * PlotWidth + (vectMouse.x - PlotPosition.x));                        GUI.Label(new Rect(vectMouse.x + 5' vectMouse.y - 20' 80' 15)' String.Format("{0:0}m/s"' DeltaVs[iCurrent])' SkinsLibrary.CurrentTooltip);                        if (Event.current.type == EventType.MouseDown && Event.current.button == 0) {                          vectSelected = new Vector2(vectMouse.x' vectMouse.y);                          SetTransferDetails();                      }                    }                    //Draw the selected position indicators                  if (Done && DepartureSelected >= 0) {                      GUI.Box(new Rect(vectSelected.x - 8' vectSelected.y - 8' 16' 16)' Resources.texSelectedPoint' new GUIStyle());                      GUI.Box(new Rect(PlotPosition.x - 9' vectSelected.y - 5' 9' 9)' Resources.texSelectedYAxis' new GUIStyle());                      GUI.Box(new Rect(vectSelected.x - 5' PlotPosition.y + PlotHeight' 9' 9)' Resources.texSelectedXAxis' new GUIStyle());                          ColorIndex = DeltaVsColorIndex[(Int32)(((vectSelected.y - PlotPosition.y)) * PlotHeight + (vectSelected.x - PlotPosition.x))];                      Percent = (Double)ColorIndex / DeltaVColorPalette.Count;                      GUI.Box(new Rect(PlotPosition.x + PlotWidth + 20' PlotPosition.y + (PlotHeight * (1 - (Single)Percent)) - 5' 30' 9)' ""' Styles.stylePlotTransferMarkerDV);                  }                }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawSingleInstruction,The following statement contains a magic number: GUILayout.Label(Num' Styles.styleTextInstructionNum' GUILayout.Width(16));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(100));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.Space(2);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: DrawTextField(ref strDepartureAltitude' "[^\\d\\.]+"' true' FieldWidth: 172);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.Label("km"' GUILayout.Width(20));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: DrawTextField(ref strArrivalAltitude' "[^\\d\\.]+"' true' FieldWidth: 172' Locked:blnFlyby);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.Label("km"' GUILayout.Width(20));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.Space(8);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: DrawTextField(ref strTravelMinDays' "[^\\d\\.]+"' true' FieldWidth: 60);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.Label("to"' GUILayout.Width(15));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: DrawTextField(ref strTravelMaxDays' "[^\\d\\.]+"' true' FieldWidth: 60);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.Label("days"' GUILayout.Width(30));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: if (GUILayout.Button("Plot It!"))              {                  mbTWP.windowSettings.Visible = false;                  StartWorker();                  WindowRect.height = 400;                  ShowEjectionDetails = false;              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawTransferEntry,The following statement contains a magic number: GUILayout.Space(50);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,ResetWindow,The following statement contains a magic number: WindowRect.height = 400;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,DrawBarScaled,The following statement contains a magic number: if (rectTemp.width <= 2) Style = StyleNarrow;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetupTransferParams,The following statement contains a magic number: DepartureRange = Math.Min(2 * synodicPeriod' 2 * cbOrigin.orbit.period);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetupTransferParams,The following statement contains a magic number: DepartureRange = Math.Min(2 * synodicPeriod' 2 * cbOrigin.orbit.period);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetupTransferParams,The following statement contains a magic number: TravelMin = Math.Max(hohmannTransferTime - cbDestination.orbit.period' hohmannTransferTime / 2);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetupTransferParams,The following statement contains a magic number: TravelMax = TravelMin + Math.Min(2 * cbDestination.orbit.period' hohmannTransferTime);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetWindowStrings,The following statement contains a magic number: strArrivalAltitude = (InitialOrbitAltitude / 1000).ToString();
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetWindowStrings,The following statement contains a magic number: strDepartureAltitude = (FinalOrbitAltitude / 1000).ToString();
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetWorkerVariables,The following statement contains a magic number: InitialOrbitAltitude = Convert.ToDouble(strDepartureAltitude) * 1000;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,SetWorkerVariables,The following statement contains a magic number: if (blnFlyby)                  FinalOrbitAltitude = 0;              else                  FinalOrbitAltitude = Convert.ToDouble(strArrivalAltitude) * 1000;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,StartWorker,The following statement contains a magic number: PlotHeight = 292;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,StartWorker,The following statement contains a magic number: PlotWidth = 292;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,bw_GeneratePorkchop,The following statement contains a magic number: try              {                  sumlogDeltaV = 0; sumSqLogDeltaV = 0;                  maxDeltaV = 0; minDeltaV = Double.MaxValue;                    //Loop through getting the DeltaV's and assigning em all to an array                  Int32 iCurrent = 0;    #if DEBUG                  ////////need to make sure this bombing out cause file is locked doesnt stop process :)                  String strCSVLine = "";                  try                  {                      if (System.IO.File.Exists(String.Format("{0}/DeltaVWorking-{1}-{2}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName)))                          System.IO.File.Delete(String.Format("{0}/DeltaVWorking-{1}-{2}.csv"' Resources.PathPlugin' cbOrigin.bodyName' cbDestination.bodyName));                  }                  catch (Exception ex) { LogFormatted("Unable to delete file:{0}"' ex.Message); }  #endif                  LogFormatted("Generating DeltaV Values");                  for (int x = 0; x < PlotWidth; x++)                  {  #if DEBUG                      strCSVLine = "";  #endif                      //LogFormatted("{0:0.000}-{1}"' workingpercent' iCurrent);                      for (int y = 0; y < PlotHeight; y++)                      {                          //have to keep this this way so the texture draws the right way around                          iCurrent = (int)(y * PlotWidth + x);                            //Set the Value for this position to be the DeltaV of this Transfer                          DeltaVs[iCurrent] = LambertSolver.TransferDeltaV(cbOrigin' cbDestination'                              DepartureMin + ((Double)x * xResolution)' TravelMax - ((Double)y * yResolution)'                              InitialOrbitAltitude' FinalOrbitAltitude);                            //LogFormatted("dt: {0}  TT:{1}"' TravelMax - ((Double)y * yResolution)' transferTemp.TravelTime);  #if DEBUG                          strCSVLine += String.Format("{0:0.00}'"' DeltaVs[iCurrent]);  #endif                          /////////////// Long Running ////////////////////////////                          //LogFormatted("{0}x{1} ({3}) = {2:0}"' x' y' DeltaVs[iCurrent]'iCurrent);                            if (DeltaVs[iCurrent] > maxDeltaV)                              maxDeltaV = DeltaVs[iCurrent];                          if (DeltaVs[iCurrent] < minDeltaV)                          {                              minDeltaV = DeltaVs[iCurrent];                              minDeltaVPoint = new Vector2(x' y);                          }                            logDeltaV = Math.Log(DeltaVs[iCurrent]);                          sumlogDeltaV += logDeltaV;                          sumSqLogDeltaV += logDeltaV * logDeltaV;                            workingpercent = (x * PlotHeight + y) / (Double)(PlotHeight * PlotWidth);                      }    #if DEBUG                      try                      {                          System.IO.File.AppendAllText(String.Format("{0}/DeltaVWorking.csv"' Resources.PathPlugin)' strCSVLine.TrimEnd(''') + "\r\n");                      }                      catch (Exception) { }  #endif                  }                    Double mean' stddev;                    //Calculate the ColorIndex for the plot - BUT DONT AFFECT TEXTURES ON THE BW THREAD                  LogFormatted("Working out Log Values to determine DeltaV->Color Mapping");                    logMinDeltaV = Math.Log(DeltaVs.Min());                  mean = sumlogDeltaV / DeltaVs.Length;                  stddev = Math.Sqrt(sumSqLogDeltaV / DeltaVs.Length - mean * mean);                  logMaxDeltaV = Math.Min(Math.Log(maxDeltaV)' mean + 2 * stddev);                    if (DeltaVColorPalette == null)                      GenerateDeltaVPalette();                    LogFormatted("Placing ColorIndexes in array");                  for (int y = 0; y < PlotHeight; y++)                  {                      for (int x = 0; x < PlotWidth; x++)                      {                          iCurrent = (Int32)(y * PlotWidth + x);                          logDeltaV = Math.Log(DeltaVs[iCurrent]);                          double relativeDeltaV = (logDeltaV - logMinDeltaV) / (logMaxDeltaV - logMinDeltaV);                          Int32 ColorIndex = Math.Min((Int32)(Math.Floor(relativeDeltaV * DeltaVColorPalette.Count))' DeltaVColorPalette.Count - 1);                            DeltaVsColorIndex[iCurrent] = ColorIndex;                      }                  }                    //Set the Best Transfer                  vectSelected = new Vector2(PlotPosition.x + minDeltaVPoint.x' PlotPosition.y + minDeltaVPoint.y);                  SetTransferDetails();              }              catch (Exception ex)              {                  LogFormatted("ERROR: Background Worker Failed\r\n{0}\r\n{1}"' ex.Message' ex.StackTrace);              }
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 64; i <= 68; i++)                  DeltaVColorPalette.Add(new Color32(64' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 64; i <= 68; i++)                  DeltaVColorPalette.Add(new Color32(64' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 64; i <= 68; i++)                  DeltaVColorPalette.Add(new Color32(64' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 64; i <= 68; i++)                  DeltaVColorPalette.Add(new Color32(64' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 64; i <= 68; i++)                  DeltaVColorPalette.Add(new Color32(64' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 133; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32(128' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 133; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32(128' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 133; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32(128' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 133; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32(128' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 133; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32(128' (byte)i' 255' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(128' 255' (byte)i' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(128' 255' (byte)i' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(128' 255' (byte)i' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(128' 255' (byte)i' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(128' 255' (byte)i' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 128; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32((byte)i' 255' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 128; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32((byte)i' 255' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 128; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32((byte)i' 255' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 128; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32((byte)i' 255' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 128; i <= 255; i++)                  DeltaVColorPalette.Add(new Color32((byte)i' 255' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(255' (byte)i' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(255' (byte)i' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(255' (byte)i' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(255' (byte)i' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVPalette,The following statement contains a magic number: for (int i = 255; i >= 128; i--)                  DeltaVColorPalette.Add(new Color32(255' (byte)i' 128' 255));
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,GenerateDeltaVTexture,The following statement contains a magic number: texDeltaVPalette = new Texture2D(1' 512);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,RunPlots,The following statement contains a magic number: WindowRect.height = 400;
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,StartLongWorker,The following statement contains a magic number: dateMinDeparture = new KSPDateTime(lstPlots[CurrentPlot].DepMinYear' 1'3'0'0'0);
Magic Number,TransferWindowPlanner,TWPWindow,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindow.cs,StartLongWorker,The following statement contains a magic number: dateMaxDeparture = new KSPDateTime(lstPlots[CurrentPlot].DepMaxYear' 1'3'0'0'0).AddDays(-1);
Magic Number,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,timeOfLeastDVBurn,The following statement contains a magic number: double periodtoscan = oObject.period * 2;
Magic Number,TransferWindowPlanner,TWPWindowDebug,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowDebug.cs,timeOfLeastDVBurn,The following statement contains a magic number: for (int iter = 0; iter < 10; iter++)              {                  LogFormatted("Start:{0} - Stop:{1}"' minTime' maxTime);                    double dt = (maxTime - minTime) / numDivisions;                  for (int i = 0; i < numDivisions; i++)                  {                      double t = minTime + i * dt;                        //get the vessels velocity at the right time                      Vector3d vel = oObject.getOrbitalVelocityAtUT(t);                      Vector3d velPlanet = oObject.referenceBody.orbit.getOrbitalVelocityAtUT(t);                        Vector3d velall = vel+velPlanet;                        Vector3d Eject = vectTransferInitial - velall;                        System.IO.File.AppendAllText(Resources.PathPlugin + "/DVTest.csv"' String.Format("{0}'{1}'{2}\r\n"'t'Eject.magnitude'Eject));                        if (Math.Abs(Eject.magnitude) < bestBurnDV)                      {                          bestBurnDV = Math.Abs(Eject.magnitude);                          bestBurnTime = t;                          bestBurnEject = Eject;                          LogFormatted("{0}-{1}-{2}"' velall.magnitude' bestBurnEject.magnitude' t);                      }                  }                  minTime = (bestBurnTime - dt).Clamp(timeStart' timeStart + periodtoscan);                  maxTime = (bestBurnTime + dt).Clamp(timeStart' timeStart + periodtoscan);              }
Magic Number,TransferWindowPlanner,Resources,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Resources.cs,GetSettingsButtonIcon,The following statement contains a magic number: if (AttentionRequired && DateTime.Now.Millisecond < 500)                  textureReturn = btnSettingsAttention;              else                  textureReturn = btnSettings;
Magic Number,TransferWindowPlanner,Settings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Settings.cs,ConvertVersionCheckDateToString,The following statement contains a magic number: if (Date < DateTime.Now.AddYears(-10))                  return "No Date Recorded";              else                  return String.Format("{0:yyyy-MM-dd}"' Date);
Magic Number,TransferWindowPlanner,Settings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\Settings.cs,VersionCheck,The following statement contains a magic number: try              {                  if (ForceCheck)                  {                      blnDoCheck = true;                      MonoBehaviourExtended.LogFormatted("Starting Version Check-Forced");                  }                  //else if (this.VersionWeb == "")                  //{                  //    blnDoCheck = true;                  //    MonoBehaviourExtended.LogFormatted("Starting Version Check-No current web version stored");                  //}                  else if (this.VersionCheckDate_Attempt < DateTime.Now.AddYears(-9))                  {                      blnDoCheck = true;                      MonoBehaviourExtended.LogFormatted("Starting Version Check-No current date stored");                  }                  else if (this.VersionCheckDate_Attempt.Date != DateTime.Now.Date)                  {                      blnDoCheck = true;                      MonoBehaviourExtended.LogFormatted("Starting Version Check-stored date is not today");                  }                  else                      MonoBehaviourExtended.LogFormatted("Skipping version check");                      if (blnDoCheck)                  {                      //prep the background thread                      bwVersionCheck = new BackgroundWorker();                      bwVersionCheck.DoWork += bwVersionCheck_DoWork;                      bwVersionCheck.RunWorkerCompleted += bwVersionCheck_RunWorkerCompleted;                        //fire the worker                      bwVersionCheck.RunWorkerAsync();                  }                  blnReturn = true;              }              catch (Exception ex)              {                  MonoBehaviourExtended.LogFormatted("Failed to run the update test");                  MonoBehaviourExtended.LogFormatted(ex.Message);              }
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePanel.border = new RectOffset(6' 6' 6' 6);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePanel.border = new RectOffset(6' 6' 6' 6);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePanel.border = new RectOffset(6' 6' 6' 6);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePanel.border = new RectOffset(6' 6' 6' 6);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePanel.padding = new RectOffset(8' 3' 7' 0);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePanel.padding = new RectOffset(8' 3' 7' 0);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePanel.padding = new RectOffset(8' 3' 7' 0);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButton.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButton.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButton.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButton.fixedHeight = 20;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButton.padding.top = 2;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButtonMain.fixedHeight = 20;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButtonSettings.normal.textColor = new Color32(177' 193' 205' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButtonSettings.normal.textColor = new Color32(177' 193' 205' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButtonSettings.normal.textColor = new Color32(177' 193' 205' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleButtonSettings.normal.textColor = new Color32(177' 193' 205' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.fontSize = 12;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.normal.textColor = new Color32(207' 207' 207' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.padding = new RectOffset(4' 4' 6' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.padding = new RectOffset(4' 4' 6' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.padding = new RectOffset(4' 4' 6' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTooltipStyle.padding = new RectOffset(4' 4' 6' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownButton.padding.right = 20;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownButtonUnity.padding.right = 20;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBox.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBox.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBox.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBox.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBoxUnity.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBoxUnity.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBoxUnity.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListBoxUnity.border = new RectOffset(3' 3' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListItem.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListItem.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListItem.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: Texture2D texBack = Styles.CreateColorPixel(new Color(207' 207' 207));
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: Texture2D texBack = Styles.CreateColorPixel(new Color(207' 207' 207));
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: Texture2D texBack = Styles.CreateColorPixel(new Color(207' 207' 207));
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListItem.padding = new RectOffset(4' 4' 3' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListItem.padding = new RectOffset(4' 4' 3' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListItem.padding = new RectOffset(4' 4' 3' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleDropDownListItem.padding = new RectOffset(4' 4' 3' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleBarName = new GUIStyle() { fixedHeight = 16' fixedWidth = 32 };
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleBarName = new GUIStyle() { fixedHeight = 16' fixedWidth = 32 };
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleBarDef.border = new RectOffset(2' 2' 2' 2);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleBarDef.border = new RectOffset(2' 2' 2' 2);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleBarDef.border = new RectOffset(2' 2' 2' 2);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleBarDef.border = new RectOffset(2' 2' 2' 2);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleBarDef.fixedHeight = 15;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleText.fontSize = 12;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleText.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleText.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleText.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextDetails.padding.top = 2;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextGreen.normal.textColor = new Color32(183' 254' 0' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextGreen.normal.textColor = new Color32(183' 254' 0' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextGreen.normal.textColor = new Color32(183' 254' 0' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextCenterGreen.normal.textColor = new Color32(183' 254' 0' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextCenterGreen.normal.textColor = new Color32(183' 254' 0' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextCenterGreen.normal.textColor = new Color32(183' 254' 0' 255);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleTextFieldLabel.padding.top = 4;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotText.fontSize = 10;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotCrossHair.normal.background = CreateColorPixel(new Color32(255' 25' 255' 192));
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotCrossHair.normal.background = CreateColorPixel(new Color32(255' 25' 255' 192));
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotCrossHair.normal.background = CreateColorPixel(new Color32(255' 25' 255' 192));
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotCrossHair.normal.background = CreateColorPixel(new Color32(255' 25' 255' 192));
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotTransferMarkerDV.border = new RectOffset(8' 8' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotTransferMarkerDV.border = new RectOffset(8' 8' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotTransferMarkerDV.border = new RectOffset(8' 8' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: stylePlotTransferMarkerDV.border = new RectOffset(8' 8' 3' 3);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleSettingsArea.padding = new RectOffset(0' 0' 0' 4);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleToggle.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleToggle.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleToggle.normal.textColor = new Color(207' 207' 207);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleToggle.fixedHeight = 20;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleToggle.padding = new RectOffset(6' 0' -2' 0);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleToggle.padding = new RectOffset(6' 0' -2' 0);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleSeparatorV.border = new RectOffset(0' 0' 6' 6);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleSeparatorV.border = new RectOffset(0' 0' 6' 6);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleSeparatorV.fixedWidth = 2;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleSeparatorH.border = new RectOffset(6' 6' 0' 0);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleSeparatorH.border = new RectOffset(6' 6' 0' 0);
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitStyles,The following statement contains a magic number: styleSeparatorH.fixedHeight = 2;
Magic Number,TransferWindowPlanner,Styles,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\StylesAndSkins.cs,InitSkins,The following statement contains a magic number: DefUnity.horizontalSlider.margin.top = 8;
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,Awake,The following statement contains a magic number: TooltipMouseOffset = new Vector2d(-10' 10);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,Awake,The following statement contains a magic number: TooltipMouseOffset = new Vector2d(-10' 10);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: if (GUI.Button(new Rect(WindowRect.width - 32' 2' 30' 20)' "X"' "ButtonSettings"))              {                  Visible = false;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: if (SkinsLibrary.CurrentSkin.name != "Default")                  GUILayout.Space(5);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: GUILayout.Label("Settings Section"' Styles.styleTextHeading' GUILayout.Width(120));
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: GUILayout.Space(5);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: switch ((SettingsTabs)ddlSettingsTab.SelectedIndex)              {                  case SettingsTabs.General:                      DrawWindow_General();                      WindowHeight = 206;                      break;                  case SettingsTabs.AlarmIntegration:                      DrawWindow_Alarm();                      WindowHeight = 206;                      break;                  case SettingsTabs.Calendar:                      DrawWindow_Calendar();                      WindowHeight = 206;                      break;                  case SettingsTabs.About:                      DrawWindow_About();                      WindowHeight = 285;                      break;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: switch ((SettingsTabs)ddlSettingsTab.SelectedIndex)              {                  case SettingsTabs.General:                      DrawWindow_General();                      WindowHeight = 206;                      break;                  case SettingsTabs.AlarmIntegration:                      DrawWindow_Alarm();                      WindowHeight = 206;                      break;                  case SettingsTabs.Calendar:                      DrawWindow_Calendar();                      WindowHeight = 206;                      break;                  case SettingsTabs.About:                      DrawWindow_About();                      WindowHeight = 285;                      break;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: switch ((SettingsTabs)ddlSettingsTab.SelectedIndex)              {                  case SettingsTabs.General:                      DrawWindow_General();                      WindowHeight = 206;                      break;                  case SettingsTabs.AlarmIntegration:                      DrawWindow_Alarm();                      WindowHeight = 206;                      break;                  case SettingsTabs.Calendar:                      DrawWindow_Calendar();                      WindowHeight = 206;                      break;                  case SettingsTabs.About:                      DrawWindow_About();                      WindowHeight = 285;                      break;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following statement contains a magic number: switch ((SettingsTabs)ddlSettingsTab.SelectedIndex)              {                  case SettingsTabs.General:                      DrawWindow_General();                      WindowHeight = 206;                      break;                  case SettingsTabs.AlarmIntegration:                      DrawWindow_Alarm();                      WindowHeight = 206;                      break;                  case SettingsTabs.Calendar:                      DrawWindow_Calendar();                      WindowHeight = 206;                      break;                  case SettingsTabs.About:                      DrawWindow_About();                      WindowHeight = 285;                      break;              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_General,The following statement contains a magic number: GUILayout.BeginHorizontal(Styles.styleSettingsArea' GUILayout.Height(54));
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_General,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(60));
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_General,The following statement contains a magic number: GUILayout.Space(2);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The following statement contains a magic number: if (!TWP_KACWrapper.KACWrapper.AssemblyExists)              {                  //draw something with a link for the KAC                  if (GUILayout.Button(new GUIContent("Not Installed. Click for Alarm Clock Info"' "Click to open your browser and find out more about the Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (TWP_KACWrapper.KACWrapper.NeedUpgrade)              {                  if (GUILayout.Button(new GUIContent("You need a newer version of KAC"' "Click to open your browser and download a newer Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (!TWP_KACWrapper.KACWrapper.InstanceExists)              {                  GUILayout.Label("KAC is not loaded in this scene' so we can't configure"' Styles.styleTextGreen);                  GUILayout.Label("the integration options"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("You can access these in scenes where KAC is visible"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("Go on... Move along... Nothing to see..."' Styles.styleTextGreen);                }              else              {                  //Alarm Area                  GUILayout.BeginVertical(Styles.styleSettingsArea);                  //if (KACWrapper.KAC.DrawAlarmActionChoice(ref KACAlarmAction' "On Alarm:"' 108' 61))                  if (KACWrapper.KAC.DrawAlarmActionChoice(ref settings.KACAlarmAction' "Action:"' 90 ' 38))                      {                      settings.Save();                  }                    GUILayout.BeginHorizontal();                  GUILayout.Label("Margin"' Styles.styleText'GUILayout.Width(85));                  if (DrawTextBox(ref settings.KACMargin))                      settings.Save();                  GUILayout.Label("(hours)"' Styles.styleTextYellow' GUILayout.Width(50));                    GUILayout.EndHorizontal();                    GUILayout.EndVertical();              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The following statement contains a magic number: if (!TWP_KACWrapper.KACWrapper.AssemblyExists)              {                  //draw something with a link for the KAC                  if (GUILayout.Button(new GUIContent("Not Installed. Click for Alarm Clock Info"' "Click to open your browser and find out more about the Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (TWP_KACWrapper.KACWrapper.NeedUpgrade)              {                  if (GUILayout.Button(new GUIContent("You need a newer version of KAC"' "Click to open your browser and download a newer Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (!TWP_KACWrapper.KACWrapper.InstanceExists)              {                  GUILayout.Label("KAC is not loaded in this scene' so we can't configure"' Styles.styleTextGreen);                  GUILayout.Label("the integration options"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("You can access these in scenes where KAC is visible"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("Go on... Move along... Nothing to see..."' Styles.styleTextGreen);                }              else              {                  //Alarm Area                  GUILayout.BeginVertical(Styles.styleSettingsArea);                  //if (KACWrapper.KAC.DrawAlarmActionChoice(ref KACAlarmAction' "On Alarm:"' 108' 61))                  if (KACWrapper.KAC.DrawAlarmActionChoice(ref settings.KACAlarmAction' "Action:"' 90 ' 38))                      {                      settings.Save();                  }                    GUILayout.BeginHorizontal();                  GUILayout.Label("Margin"' Styles.styleText'GUILayout.Width(85));                  if (DrawTextBox(ref settings.KACMargin))                      settings.Save();                  GUILayout.Label("(hours)"' Styles.styleTextYellow' GUILayout.Width(50));                    GUILayout.EndHorizontal();                    GUILayout.EndVertical();              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The following statement contains a magic number: if (!TWP_KACWrapper.KACWrapper.AssemblyExists)              {                  //draw something with a link for the KAC                  if (GUILayout.Button(new GUIContent("Not Installed. Click for Alarm Clock Info"' "Click to open your browser and find out more about the Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (TWP_KACWrapper.KACWrapper.NeedUpgrade)              {                  if (GUILayout.Button(new GUIContent("You need a newer version of KAC"' "Click to open your browser and download a newer Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (!TWP_KACWrapper.KACWrapper.InstanceExists)              {                  GUILayout.Label("KAC is not loaded in this scene' so we can't configure"' Styles.styleTextGreen);                  GUILayout.Label("the integration options"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("You can access these in scenes where KAC is visible"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("Go on... Move along... Nothing to see..."' Styles.styleTextGreen);                }              else              {                  //Alarm Area                  GUILayout.BeginVertical(Styles.styleSettingsArea);                  //if (KACWrapper.KAC.DrawAlarmActionChoice(ref KACAlarmAction' "On Alarm:"' 108' 61))                  if (KACWrapper.KAC.DrawAlarmActionChoice(ref settings.KACAlarmAction' "Action:"' 90 ' 38))                      {                      settings.Save();                  }                    GUILayout.BeginHorizontal();                  GUILayout.Label("Margin"' Styles.styleText'GUILayout.Width(85));                  if (DrawTextBox(ref settings.KACMargin))                      settings.Save();                  GUILayout.Label("(hours)"' Styles.styleTextYellow' GUILayout.Width(50));                    GUILayout.EndHorizontal();                    GUILayout.EndVertical();              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The following statement contains a magic number: if (!TWP_KACWrapper.KACWrapper.AssemblyExists)              {                  //draw something with a link for the KAC                  if (GUILayout.Button(new GUIContent("Not Installed. Click for Alarm Clock Info"' "Click to open your browser and find out more about the Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (TWP_KACWrapper.KACWrapper.NeedUpgrade)              {                  if (GUILayout.Button(new GUIContent("You need a newer version of KAC"' "Click to open your browser and download a newer Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (!TWP_KACWrapper.KACWrapper.InstanceExists)              {                  GUILayout.Label("KAC is not loaded in this scene' so we can't configure"' Styles.styleTextGreen);                  GUILayout.Label("the integration options"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("You can access these in scenes where KAC is visible"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("Go on... Move along... Nothing to see..."' Styles.styleTextGreen);                }              else              {                  //Alarm Area                  GUILayout.BeginVertical(Styles.styleSettingsArea);                  //if (KACWrapper.KAC.DrawAlarmActionChoice(ref KACAlarmAction' "On Alarm:"' 108' 61))                  if (KACWrapper.KAC.DrawAlarmActionChoice(ref settings.KACAlarmAction' "Action:"' 90 ' 38))                      {                      settings.Save();                  }                    GUILayout.BeginHorizontal();                  GUILayout.Label("Margin"' Styles.styleText'GUILayout.Width(85));                  if (DrawTextBox(ref settings.KACMargin))                      settings.Save();                  GUILayout.Label("(hours)"' Styles.styleTextYellow' GUILayout.Width(50));                    GUILayout.EndHorizontal();                    GUILayout.EndVertical();              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The following statement contains a magic number: if (!TWP_KACWrapper.KACWrapper.AssemblyExists)              {                  //draw something with a link for the KAC                  if (GUILayout.Button(new GUIContent("Not Installed. Click for Alarm Clock Info"' "Click to open your browser and find out more about the Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (TWP_KACWrapper.KACWrapper.NeedUpgrade)              {                  if (GUILayout.Button(new GUIContent("You need a newer version of KAC"' "Click to open your browser and download a newer Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (!TWP_KACWrapper.KACWrapper.InstanceExists)              {                  GUILayout.Label("KAC is not loaded in this scene' so we can't configure"' Styles.styleTextGreen);                  GUILayout.Label("the integration options"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("You can access these in scenes where KAC is visible"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("Go on... Move along... Nothing to see..."' Styles.styleTextGreen);                }              else              {                  //Alarm Area                  GUILayout.BeginVertical(Styles.styleSettingsArea);                  //if (KACWrapper.KAC.DrawAlarmActionChoice(ref KACAlarmAction' "On Alarm:"' 108' 61))                  if (KACWrapper.KAC.DrawAlarmActionChoice(ref settings.KACAlarmAction' "Action:"' 90 ' 38))                      {                      settings.Save();                  }                    GUILayout.BeginHorizontal();                  GUILayout.Label("Margin"' Styles.styleText'GUILayout.Width(85));                  if (DrawTextBox(ref settings.KACMargin))                      settings.Save();                  GUILayout.Label("(hours)"' Styles.styleTextYellow' GUILayout.Width(50));                    GUILayout.EndHorizontal();                    GUILayout.EndVertical();              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Alarm,The following statement contains a magic number: if (!TWP_KACWrapper.KACWrapper.AssemblyExists)              {                  //draw something with a link for the KAC                  if (GUILayout.Button(new GUIContent("Not Installed. Click for Alarm Clock Info"' "Click to open your browser and find out more about the Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (TWP_KACWrapper.KACWrapper.NeedUpgrade)              {                  if (GUILayout.Button(new GUIContent("You need a newer version of KAC"' "Click to open your browser and download a newer Kerbal Alarm Clock")' Styles.styleTextCenterGreen))                      Application.OpenURL("http://forum.kerbalspaceprogram.com/threads/24786");                }              else if (!TWP_KACWrapper.KACWrapper.InstanceExists)              {                  GUILayout.Label("KAC is not loaded in this scene' so we can't configure"' Styles.styleTextGreen);                  GUILayout.Label("the integration options"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("You can access these in scenes where KAC is visible"' Styles.styleTextGreen);                  GUILayout.Space(10);                  GUILayout.Label("Go on... Move along... Nothing to see..."' Styles.styleTextGreen);                }              else              {                  //Alarm Area                  GUILayout.BeginVertical(Styles.styleSettingsArea);                  //if (KACWrapper.KAC.DrawAlarmActionChoice(ref KACAlarmAction' "On Alarm:"' 108' 61))                  if (KACWrapper.KAC.DrawAlarmActionChoice(ref settings.KACAlarmAction' "Action:"' 90 ' 38))                      {                      settings.Save();                  }                    GUILayout.BeginHorizontal();                  GUILayout.Label("Margin"' Styles.styleText'GUILayout.Width(85));                  if (DrawTextBox(ref settings.KACMargin))                      settings.Save();                  GUILayout.Label("(hours)"' Styles.styleTextYellow' GUILayout.Width(50));                    GUILayout.EndHorizontal();                    GUILayout.EndVertical();              }
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Calendar,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(60));
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_Calendar,The following statement contains a magic number: GUILayout.Space(2);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_About,The following statement contains a magic number: GUILayout.Space(3);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_About,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(200));
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_About,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow_About,The following statement contains a magic number: if (settings.VersionAvailable)              {                  GUILayout.BeginHorizontal();                  GUILayout.Space(80);                  if (GUILayout.Button("Updated Version Available - Click Here"' Styles.styleTextYellowBold))                      Application.OpenURL("https://github.com/TriggerAu/TransferWindowPlanner/releases");                  GUILayout.EndHorizontal();              }
Magic Number,TransferWindowPlanner,TWPWindowSettingsBlockout,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettingsBlockout.cs,DrawWindow,The following statement contains a magic number: GUILayout.Box(""' new GUIStyle()' GUILayout.Width(100)' GUILayout.Height(100));
Magic Number,TransferWindowPlanner,TWPWindowSettingsBlockout,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettingsBlockout.cs,DrawWindow,The following statement contains a magic number: GUILayout.Box(""' new GUIStyle()' GUILayout.Width(100)' GUILayout.Height(100));
Magic Number,TWP_KACWrapper,KACWrapper,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\KACWrapper.cs,InitKACWrapper,The following statement contains a magic number: if (KACType.Assembly.GetName().Version.CompareTo(new System.Version(3' 0' 0' 5)) < 0)              {                  //No TimeEntry or alarmchoice options = need a newer version                  NeedUpgrade = true;              }
Magic Number,TWP_KACWrapper,KACWrapper,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\SharedStuff\KACWrapper.cs,InitKACWrapper,The following statement contains a magic number: if (KACType.Assembly.GetName().Version.CompareTo(new System.Version(3' 0' 0' 5)) < 0)              {                  //No TimeEntry or alarmchoice options = need a newer version                  NeedUpgrade = true;              }
Missing Default,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,ddlSettingsButtonStyle_OnSelectionChanged,The following switch statement is missing a default case: switch ((Settings.ButtonStyleEnum)OldIndex)              {                  case Settings.ButtonStyleEnum.Toolbar:                      mbTWP.DestroyToolbarButton(mbTWP.btnToolbar);                      break;                  case Settings.ButtonStyleEnum.Launcher:                      mbTWP.DestroyAppLauncherButton();                      break;              }
Missing Default,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,ddlSettingsButtonStyle_OnSelectionChanged,The following switch statement is missing a default case: switch ((Settings.ButtonStyleEnum)NewIndex)              {                  case Settings.ButtonStyleEnum.Toolbar:                      mbTWP.btnToolbar = mbTWP.InitToolbarButton();                      break;                  case Settings.ButtonStyleEnum.Launcher:                      mbTWP.btnAppLauncher = mbTWP.InitAppLauncherButton();                      break;              }
Missing Default,TransferWindowPlanner,TWPWindowSettings,C:\repos\TriggerAu_TransferWindowPlanner\TransferWindowPlanner\TWPWindowSettings.cs,DrawWindow,The following switch statement is missing a default case: switch ((SettingsTabs)ddlSettingsTab.SelectedIndex)              {                  case SettingsTabs.General:                      DrawWindow_General();                      WindowHeight = 206;                      break;                  case SettingsTabs.AlarmIntegration:                      DrawWindow_Alarm();                      WindowHeight = 206;                      break;                  case SettingsTabs.Calendar:                      DrawWindow_Calendar();                      WindowHeight = 206;                      break;                  case SettingsTabs.About:                      DrawWindow_About();                      WindowHeight = 285;                      break;              }
